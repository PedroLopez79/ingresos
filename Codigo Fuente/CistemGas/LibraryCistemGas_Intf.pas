unit LibraryCistemGas_Intf;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I Remobjects.inc}

interface

uses
  {vcl:} Classes, TypInfo,
  {RemObjects:} uROXMLIntf, uROClasses, uROClient, uROTypes, uROClientIntf,
  {Used RODLs:} DataAbstract4_Intf;

const
  { Library ID }
  LibraryUID = '{37D581C7-0483-4062-B775-B3C5483B891E}';
  TargetNamespace = '';

  { Service Interface ID's }
  IServiceCistemGas_IID : TGUID = '{B5FF3F7A-B952-40B9-9AD5-B57BF17A99C2}';
  IServiceProxy_IID : TGUID = '{3371DBB8-4B7A-49FF-AC01-667CB34C3383}';

  { Event ID's }

type
  { Forward declarations }
  IServiceCistemGas = interface;
  IServiceProxy = interface;

  aBoolean = class;
  aMangueras = class;
  aContador = class;
  aLecturas = class;
  aGas = class;
  aBombas = class;
  aDispositivos = class;
  aTicket = class;
  aDatosCorte = class;
  aTanques = class;
  aRecepciones = class;
  aTurnoBomba = class;
  aComandos = class;
  ArrayOpcion = class;
  aLineaTicket = class;
  aNodos = class;
  aCorte = class;
  aConsumoGas = class;
  aAsignaTarjetaCupon = class;
  aRegistroVenta = class;
  aCambioPrecios = class;
  AOtros = class;
  AAutorizaPendiente = class;
  aCorteOtros = class;
  ADatosBomba = class;
  aArray = class;

  TGas = class;
  TFlujos = class;
  TTicket = class;
  TProducto = class;
  TCanal = class;
  TCambioPrecios = class;
  TContador = class;
  TLecturas = class;
  TMaguera = class;
  TRegistroVenta = class;
  TRegistroPuntoVenta = class;
  TFactorDecimal = class;
  TBomba = class;
  TDispositivos = class;
  TGlobal = class;
  TDatosCorte = class;
  TDatosTicket = class;
  TTanque = class;
  TRecepcion = class;
  TProtecciones = class;
  TParametros = class;
  TComando = class;
  TOpcion = class;
  TLoginInfo = class;
  TLineaTicket = class;
  TReporte = class;
  TLicencia = class;
  TNodo = class;
  TCorte = class;
  TConsumoGas = class;
  TValoresCorte = class;
  TAsignaTarjetaCupon = class;
  TTarjetaManual = class;
  TCambio = class;
  TCupon = class;
  TDatosExpress = class;
  TOtros = class;
  TDatosVentaOtros = class;
  TAutorizaPendiente = class;
  TAutorizaLLave = class;
  TAutorizaBancaria = class;
  TCorteOtros = class;
  TDatosVerifone = class;
  TDatosSagarpa = class;
  TFechas = class;
  TInsertaOtros = class;
  TDatosEntregaPremio = class;
  TPremio = class;
  TPremioEntregado = class;
  TDatosBomba = class;
  TTurnoFecha = class;
  TCG_TipoCambio = class;
  TCG_Respuesta = class;



  { Enumerateds }
  eCodeTrama = (ctContinue,ctOut,ctOK,ctAkc,ctNak,ctFrame,ctOverRun);
  eEstadoVenta = (evSinAutorizadoConsola,evCambio,evCobro,evFullServer,evAutorizadoConsolaVolumen,
      evAutorizadoConsolaEfectivo,evAutorizadoConsolaLibre,evAutorizacionCistemFlotillas,
      evAutorizacionCistemProtocol,evAutorizacionTPV,evAutorizacionLDC,evAutorizacionPendiente);
  eProceso = (pSinProceso,pPrecio,pMaximo,pMinimo,pCorte,pCambioPrecio);
  eEstadoBomba = (ebOffLine,ebIdle,ebBusy,ebPago,ebUnknown,ebCall,ebClose,ebError,ebStop,
      ebAuto);
  eFabricante = (fTokheim,fWayne,fGilbarco,fBennett,fSchlumberger,fCistemGas,fCistemGasRed,
      fIGM,fTransactor,fSupramax);
  eMonitoreo = (mVeederRoot,mVeederRoot2,mAutoStikJR,mAutoStickII,mIncon,mPetrovend,
      mEeco);
  eImpresionTicket = (itNoImprime,itCorteTurno,itParcial);
  eTipoAutorizacion = (taSinAutorizacion,taAutorizacionPreset,taTarjetaClub,taCupon,
      taFacturacionExpress,taTarjetaBancaria);
  eTipoPreset = (tpSinPreset,tpImporteSinProducto,tpLitrosSinProducto,tpLibreSinProducto,
      tpImporteConProducto,tpLitrosConProducto,tpLibreConProducto);
  eModoOperacion = (moFullService,moConsola,moDeshabilitada);
  eTipoPago = (tpgoEfectivo,tpgoCheque,tpgoTarjeta);
  eCodigoProducto = (cpPorProduto,cpPorPosicion);
  eResult = (eOK,eFail);
  eTipoBitacora = (tbUnknown,tbBitacora,tbAlertas,tbDispensarios,tbTanques,tbAccesos,
      tbJarreos,tbCapturas,tbConexiones);

  { TGas }
  TGas = class(TROComplexType)
  private
    fAplica: Boolean;
    fClavePemex: AnsiString;
    fFactorDecimalPrecios: Integer;
    fIEPS: Double;
    fIEPSProgramado: Double;
    fImpuesto: Double;
    fNombre: AnsiString;
    fOperacion: AnsiString;
    fPrecio: Double;
    fPrecioProgramado: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Aplica:Boolean read fAplica write fAplica;
    property ClavePemex:AnsiString read fClavePemex write fClavePemex;
    property FactorDecimalPrecios:Integer read fFactorDecimalPrecios write fFactorDecimalPrecios;
    property IEPS:Double read fIEPS write fIEPS;
    property IEPSProgramado:Double read fIEPSProgramado write fIEPSProgramado;
    property Impuesto:Double read fImpuesto write fImpuesto;
    property Nombre:AnsiString read fNombre write fNombre;
    property Operacion:AnsiString read fOperacion write fOperacion;
    property Precio:Double read fPrecio write fPrecio;
    property PrecioProgramado:Double read fPrecioProgramado write fPrecioProgramado;
  end;

  { TGasCollection }
  TGasCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TGas;
    procedure SetItems(aIndex: integer; const Value: TGas);
  public
    constructor Create; overload;
    function Add: TGas; reintroduce;
    procedure SaveToArray(anArray: aGas);
    procedure LoadFromArray(anArray: aGas);
    property Items[Index: integer]:TGas read GetItems write SetItems; default;
  end;

  { TFlujos }
  TFlujos = class(TROComplexType)
  private
    fMinimo: Double;
    fMaximo: Double;
    fExterno: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Minimo:Double read fMinimo write fMinimo;
    property Maximo:Double read fMaximo write fMaximo;
    property Externo:Double read fExterno write fExterno;
  end;

  { TFlujosCollection }
  TFlujosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFlujos;
    procedure SetItems(aIndex: integer; const Value: TFlujos);
  public
    constructor Create; overload;
    function Add: TFlujos; reintroduce;
    property Items[Index: integer]:TFlujos read GetItems write SetItems; default;
  end;

  { TTicket }
  TTicket = class(TROComplexType)
  private
    fTicketID: Integer;
    fVolumen: Double;
    fPrecio: Double;
    fImporte: Double;
    fTipo: Integer;
    fTurnoID: Integer;
    fBombaID: Integer;
    fProductoID: Integer;
    fEstacionID: Integer;
    fFecha: DateTime;
    fFechaContable: DateTime;
    fProducto: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property TicketID:Integer read fTicketID write fTicketID;
    property Volumen:Double read fVolumen write fVolumen;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
    property Tipo:Integer read fTipo write fTipo;
    property TurnoID:Integer read fTurnoID write fTurnoID;
    property BombaID:Integer read fBombaID write fBombaID;
    property ProductoID:Integer read fProductoID write fProductoID;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property Fecha:DateTime read fFecha write fFecha;
    property FechaContable:DateTime read fFechaContable write fFechaContable;
    property Producto:AnsiString read fProducto write fProducto;
  end;

  { TTicketCollection }
  TTicketCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TTicket;
    procedure SetItems(aIndex: integer; const Value: TTicket);
  public
    constructor Create; overload;
    function Add: TTicket; reintroduce;
    property Items[Index: integer]:TTicket read GetItems write SetItems; default;
  end;

  { TProducto }
  TProducto = class(TROComplexType)
  private
    fNumero: Integer;
    fDescripcion: AnsiString;
    fCantidad: Double;
    fPrecio: Double;
    fTotal: Double;
    fTotalTickets: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Numero:Integer read fNumero write fNumero;
    property Descripcion:AnsiString read fDescripcion write fDescripcion;
    property Cantidad:Double read fCantidad write fCantidad;
    property Precio:Double read fPrecio write fPrecio;
    property Total:Double read fTotal write fTotal;
    property TotalTickets:Integer read fTotalTickets write fTotalTickets;
  end;

  { TProductoCollection }
  TProductoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TProducto;
    procedure SetItems(aIndex: integer; const Value: TProducto);
  public
    constructor Create; overload;
    function Add: TProducto; reintroduce;
    property Items[Index: integer]:TProducto read GetItems write SetItems; default;
  end;

  { TCanal }
  TCanal = class(TROComplexType)
  private
    fCanal: Integer;
    fCanalAnterior: Integer;
    fDireccion: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Canal:Integer read fCanal write fCanal;
    property CanalAnterior:Integer read fCanalAnterior write fCanalAnterior;
    property Direccion:Integer read fDireccion write fDireccion;
  end;

  { TCanalCollection }
  TCanalCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TCanal;
    procedure SetItems(aIndex: integer; const Value: TCanal);
  public
    constructor Create; overload;
    function Add: TCanal; reintroduce;
    property Items[Index: integer]:TCanal read GetItems write SetItems; default;
  end;

  { TCambioPrecios }
  TCambioPrecios = class(TROComplexType)
  private
    fProductoID: Integer;
    fPrecio: Double;
    fIEPS: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ProductoID:Integer read fProductoID write fProductoID;
    property Precio:Double read fPrecio write fPrecio;
    property IEPS:Double read fIEPS write fIEPS;
  end;

  { TCambioPreciosCollection }
  TCambioPreciosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TCambioPrecios;
    procedure SetItems(aIndex: integer; const Value: TCambioPrecios);
  public
    constructor Create; overload;
    function Add: TCambioPrecios; reintroduce;
    procedure SaveToArray(anArray: aCambioPrecios);
    procedure LoadFromArray(anArray: aCambioPrecios);
    property Items[Index: integer]:TCambioPrecios read GetItems write SetItems; default;
  end;

  { TContador }
  TContador = class(TROComplexType)
  private
    fPendiente: eEstadoVenta;
    fLitros: Double;
    fImporte: Double;
    fPrecio: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Pendiente:eEstadoVenta read fPendiente write fPendiente;
    property Litros:Double read fLitros write fLitros;
    property Importe:Double read fImporte write fImporte;
    property Precio:Double read fPrecio write fPrecio;
  end;

  { TContadorCollection }
  TContadorCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TContador;
    procedure SetItems(aIndex: integer; const Value: TContador);
  public
    constructor Create; overload;
    function Add: TContador; reintroduce;
    procedure SaveToArray(anArray: aContador);
    procedure LoadFromArray(anArray: aContador);
    property Items[Index: integer]:TContador read GetItems write SetItems; default;
  end;

  { TLecturas }
  TLecturas = class(TROComplexType)
  private
    fLecturaCorrecta: Boolean;
    fPrecio: Double;
    fCashMoney: Double;
    fCashVolume: Double;
    fCreditMoney: Double;
    fCreditVolume: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property LecturaCorrecta:Boolean read fLecturaCorrecta write fLecturaCorrecta;
    property Precio:Double read fPrecio write fPrecio;
    property CashMoney:Double read fCashMoney write fCashMoney;
    property CashVolume:Double read fCashVolume write fCashVolume;
    property CreditMoney:Double read fCreditMoney write fCreditMoney;
    property CreditVolume:Double read fCreditVolume write fCreditVolume;
  end;

  { TLecturasCollection }
  TLecturasCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TLecturas;
    procedure SetItems(aIndex: integer; const Value: TLecturas);
  public
    constructor Create; overload;
    function Add: TLecturas; reintroduce;
    procedure SaveToArray(anArray: aLecturas);
    procedure LoadFromArray(anArray: aLecturas);
    property Items[Index: integer]:TLecturas read GetItems write SetItems; default;
  end;

  { TMaguera }
  TMaguera = class(TROComplexType)
  private
    fNoGasolina: Integer;
    fMangueraInternaID: Integer;
    fProductoID: Integer;
    fFlujo: TFlujos;
    function GetFlujo: TFlujos;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property NoGasolina:Integer read fNoGasolina write fNoGasolina;
    property MangueraInternaID:Integer read fMangueraInternaID write fMangueraInternaID;
    property ProductoID:Integer read fProductoID write fProductoID;
    property Flujo:TFlujos read GetFlujo write fFlujo;
  end;

  { TMagueraCollection }
  TMagueraCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TMaguera;
    procedure SetItems(aIndex: integer; const Value: TMaguera);
  public
    constructor Create; overload;
    function Add: TMaguera; reintroduce;
    procedure SaveToArray(anArray: aMangueras);
    procedure LoadFromArray(anArray: aMangueras);
    property Items[Index: integer]:TMaguera read GetItems write SetItems; default;
  end;

  { TRegistroVenta }
  TRegistroVenta = class(TROComplexType)
  private
    fAvituallamiento: Double;
    fBomba: Integer;
    fCentroCostos: AnsiString;
    fClavePemex: AnsiString;
    fCodigo: AnsiString;
    fComision: Double;
    fCuentaContable: AnsiString;
    fDescripcion: AnsiString;
    fEmpresa: AnsiString;
    fEstacion: Integer;
    fFechaCarga: DateTime;
    fFechaContable: DateTime;
    fFormaCompra: Integer;
    fHora: AnsiString;
    fIdentificador: AnsiString;
    fIdentificacion: AnsiString;
    fImporteServido: Double;
    fImpreso: Integer;
    fImpuesto: Double;
    fManguera: Integer;
    fMensaje: AnsiString;
    fMovimiento: AnsiString;
    fNip: AnsiString;
    fNoEconomico: AnsiString;
    fNombre: AnsiString;
    fNoTerminal: AnsiString;
    fOdometro: Integer;
    fPrecioServido: Double;
    fPreset: eTipoPreset;
    fRegistro: AnsiString;
    fSaldo: Double;
    fSaldoTarjeta: Double;
    fSecuencia: Integer;
    fSite: AnsiString;
    fTarjeta: AnsiString;
    fTipo: Integer;
    fTipoTarjeta: AnsiString;
    fTipoTrama: AnsiString;
    fTurno: Integer;
    fUnidad: AnsiString;
    fVentaAutorizada: Double;
    fVentaVolumenImporte: AnsiString;
    fVentaExhibida: Double;
    fVolumenServido: Double;
    fGasolineroID: Integer;
    fClienteID: Integer;
    fVehiculoID: Integer;
    fIEPS: Double;
    fAutorizacionID: Integer;
    fTicketInternoID: Integer;
    fLectura: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Avituallamiento:Double read fAvituallamiento write fAvituallamiento;
    property Bomba:Integer read fBomba write fBomba;
    property CentroCostos:AnsiString read fCentroCostos write fCentroCostos;
    property ClavePemex:AnsiString read fClavePemex write fClavePemex;
    property Codigo:AnsiString read fCodigo write fCodigo;
    property Comision:Double read fComision write fComision;
    property CuentaContable:AnsiString read fCuentaContable write fCuentaContable;
    property Descripcion:AnsiString read fDescripcion write fDescripcion;
    property Empresa:AnsiString read fEmpresa write fEmpresa;
    property Estacion:Integer read fEstacion write fEstacion;
    property FechaCarga:DateTime read fFechaCarga write fFechaCarga;
    property FechaContable:DateTime read fFechaContable write fFechaContable;
    property FormaCompra:Integer read fFormaCompra write fFormaCompra;
    property Hora:AnsiString read fHora write fHora;
    property Identificador:AnsiString read fIdentificador write fIdentificador;
    property Identificacion:AnsiString read fIdentificacion write fIdentificacion;
    property ImporteServido:Double read fImporteServido write fImporteServido;
    property Impreso:Integer read fImpreso write fImpreso;
    property Impuesto:Double read fImpuesto write fImpuesto;
    property Manguera:Integer read fManguera write fManguera;
    property Mensaje:AnsiString read fMensaje write fMensaje;
    property Movimiento:AnsiString read fMovimiento write fMovimiento;
    property Nip:AnsiString read fNip write fNip;
    property NoEconomico:AnsiString read fNoEconomico write fNoEconomico;
    property Nombre:AnsiString read fNombre write fNombre;
    property NoTerminal:AnsiString read fNoTerminal write fNoTerminal;
    property Odometro:Integer read fOdometro write fOdometro;
    property PrecioServido:Double read fPrecioServido write fPrecioServido;
    property Preset:eTipoPreset read fPreset write fPreset;
    property Registro:AnsiString read fRegistro write fRegistro;
    property Saldo:Double read fSaldo write fSaldo;
    property SaldoTarjeta:Double read fSaldoTarjeta write fSaldoTarjeta;
    property Secuencia:Integer read fSecuencia write fSecuencia;
    property Site:AnsiString read fSite write fSite;
    property Tarjeta:AnsiString read fTarjeta write fTarjeta;
    property Tipo:Integer read fTipo write fTipo;
    property TipoTarjeta:AnsiString read fTipoTarjeta write fTipoTarjeta;
    property TipoTrama:AnsiString read fTipoTrama write fTipoTrama;
    property Turno:Integer read fTurno write fTurno;
    property Unidad:AnsiString read fUnidad write fUnidad;
    property VentaAutorizada:Double read fVentaAutorizada write fVentaAutorizada;
    property VentaVolumenImporte:AnsiString read fVentaVolumenImporte write fVentaVolumenImporte;
    property VentaExhibida:Double read fVentaExhibida write fVentaExhibida;
    property VolumenServido:Double read fVolumenServido write fVolumenServido;
    property GasolineroID:Integer read fGasolineroID write fGasolineroID;
    property ClienteID:Integer read fClienteID write fClienteID;
    property VehiculoID:Integer read fVehiculoID write fVehiculoID;
    property IEPS:Double read fIEPS write fIEPS;
    property AutorizacionID:Integer read fAutorizacionID write fAutorizacionID;
    property TicketInternoID:Integer read fTicketInternoID write fTicketInternoID;
    property Lectura:Double read fLectura write fLectura;
  end;

  { TRegistroVentaCollection }
  TRegistroVentaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TRegistroVenta;
    procedure SetItems(aIndex: integer; const Value: TRegistroVenta);
  public
    constructor Create; overload;
    function Add: TRegistroVenta; reintroduce;
    procedure SaveToArray(anArray: aRegistroVenta);
    procedure LoadFromArray(anArray: aRegistroVenta);
    property Items[Index: integer]:TRegistroVenta read GetItems write SetItems; default;
  end;

  { TRegistroPuntoVenta }
  TRegistroPuntoVenta = class(TROComplexType)
  private
    fNoTerminal: AnsiString;
    fTipoTrama: AnsiString;
    fTipoTarjeta: AnsiString;
    fTarjeta: AnsiString;
    fUnidad: AnsiString;
    fNip: AnsiString;
    fKms: Integer;
    fComision: AnsiString;
    fVentaAutorizada: Double;
    fSaldo: Double;
    fMensaje: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property NoTerminal:AnsiString read fNoTerminal write fNoTerminal;
    property TipoTrama:AnsiString read fTipoTrama write fTipoTrama;
    property TipoTarjeta:AnsiString read fTipoTarjeta write fTipoTarjeta;
    property Tarjeta:AnsiString read fTarjeta write fTarjeta;
    property Unidad:AnsiString read fUnidad write fUnidad;
    property Nip:AnsiString read fNip write fNip;
    property Kms:Integer read fKms write fKms;
    property Comision:AnsiString read fComision write fComision;
    property VentaAutorizada:Double read fVentaAutorizada write fVentaAutorizada;
    property Saldo:Double read fSaldo write fSaldo;
    property Mensaje:AnsiString read fMensaje write fMensaje;
  end;

  { TRegistroPuntoVentaCollection }
  TRegistroPuntoVentaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TRegistroPuntoVenta;
    procedure SetItems(aIndex: integer; const Value: TRegistroPuntoVenta);
  public
    constructor Create; overload;
    function Add: TRegistroPuntoVenta; reintroduce;
    property Items[Index: integer]:TRegistroPuntoVenta read GetItems write SetItems; default;
  end;

  { TFactorDecimal }
  TFactorDecimal = class(TROComplexType)
  private
    fCambioPrecios: Double;
    fVentaPrecio: Double;
    fVentaVolumen: Double;
    fVentaImporte: Double;
    fLecturasVolumen: Double;
    fLecturasImporte: Double;
    fPrefijarVolumen: Double;
    fPrefijarImporte: Double;
    fDespliegaVolumen: Double;
    fDespliegaImporte: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property CambioPrecios:Double read fCambioPrecios write fCambioPrecios;
    property VentaPrecio:Double read fVentaPrecio write fVentaPrecio;
    property VentaVolumen:Double read fVentaVolumen write fVentaVolumen;
    property VentaImporte:Double read fVentaImporte write fVentaImporte;
    property LecturasVolumen:Double read fLecturasVolumen write fLecturasVolumen;
    property LecturasImporte:Double read fLecturasImporte write fLecturasImporte;
    property PrefijarVolumen:Double read fPrefijarVolumen write fPrefijarVolumen;
    property PrefijarImporte:Double read fPrefijarImporte write fPrefijarImporte;
    property DespliegaVolumen:Double read fDespliegaVolumen write fDespliegaVolumen;
    property DespliegaImporte:Double read fDespliegaImporte write fDespliegaImporte;
  end;

  { TFactorDecimalCollection }
  TFactorDecimalCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFactorDecimal;
    procedure SetItems(aIndex: integer; const Value: TFactorDecimal);
  public
    constructor Create; overload;
    function Add: TFactorDecimal; reintroduce;
    property Items[Index: integer]:TFactorDecimal read GetItems write SetItems; default;
  end;

  { TBomba }
  TBomba = class(TROComplexType)
  private
    fAutoImprimir: Boolean;
    fAutorizacion: eTipoAutorizacion;
    fAutorizacionAutomatica: Integer;
    fClasificacion: AnsiString;
    fCodigoProducto: eCodigoProducto;
    fConectLCD: Integer;
    fDespachador: Integer;
    fDobleTarjeta: Boolean;
    fEstado: eEstadoBomba;
    fPendienteRegistrar: Boolean;
    fEstadoNuevo: eEstadoBomba;
    fEstadoVenta: eEstadoVenta;
    fFactorDecimal: TFactorDecimal;
    fFaltaPago: aBoolean;
    fFlujo: TFlujos;
    fGasolina: Integer;
    fGuardando: Boolean;
    fHost: AnsiString;
    fIDInterno: Integer;
    fImporteMinimo: Double;
    fIntentoPrepago: Boolean;
    fLecturasFinales: aLecturas;
    fLecturasIniciales: aLecturas;
    fLecturasTurno: aLecturas;
    fMangueras: aMangueras;
    fMaximoLecturasImporte: Double;
    fMaximoLecturasVolumen: Double;
    fModo: eModoOperacion;
    fNoMangueras: Integer;
    fNombreImpresora: AnsiString;
    fNuevoFlujo: AnsiString;
    fPendiente: Boolean;
    fPendienteGrabar: Boolean;
    fPendientesAplicar: aContador;
    fPosicionamiento: TCanal;
    fPreset: eTipoPreset;
    fProceso: eProceso;
    fPuntosRegistrados: Boolean;
    fPuntoVenta: TRegistroPuntoVenta;
    fRegresaModo: Boolean;
    fServicio: Double;
    fTicket: eImpresionTicket;
    fTiempoAutorizado: Integer;
    fTipoDispensario: Integer;
    fTipoTarjeta: Integer;
    fTotalizacionAutomatica: Integer;
    fTurnoID: Integer;
    fUltimoFlujo: AnsiString;
    fUltimoLimiteImporte: Double;
    fUltimoLimiteVolumen: Double;
    fVentaAntePenultima: TRegistroVenta;
    fVentaPenultima: TRegistroVenta;
    fVentaProceso: TRegistroVenta;
    fVentasTurno: aContador;
    fVentaUltima: TRegistroVenta;
    fExterno: Integer;
    fAgrupacionID: Integer;
    fNodo: TNodo;
    function GetFactorDecimal: TFactorDecimal;
    function GetFaltaPago: aBoolean;
    function GetFlujo: TFlujos;
    function GetLecturasFinales: aLecturas;
    function GetLecturasIniciales: aLecturas;
    function GetLecturasTurno: aLecturas;
    function GetMangueras: aMangueras;
    function GetPendientesAplicar: aContador;
    function GetPosicionamiento: TCanal;
    function GetPuntoVenta: TRegistroPuntoVenta;
    function GetVentaAntePenultima: TRegistroVenta;
    function GetVentaPenultima: TRegistroVenta;
    function GetVentaProceso: TRegistroVenta;
    function GetVentasTurno: aContador;
    function GetVentaUltima: TRegistroVenta;
    function GetNodo: TNodo;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property AutoImprimir:Boolean read fAutoImprimir write fAutoImprimir;
    property Autorizacion:eTipoAutorizacion read fAutorizacion write fAutorizacion;
    property AutorizacionAutomatica:Integer read fAutorizacionAutomatica write fAutorizacionAutomatica;
    property Clasificacion:AnsiString read fClasificacion write fClasificacion;
    property CodigoProducto:eCodigoProducto read fCodigoProducto write fCodigoProducto;
    property ConectLCD:Integer read fConectLCD write fConectLCD;
    property Despachador:Integer read fDespachador write fDespachador;
    property DobleTarjeta:Boolean read fDobleTarjeta write fDobleTarjeta;
    property Estado:eEstadoBomba read fEstado write fEstado;
    property PendienteRegistrar:Boolean read fPendienteRegistrar write fPendienteRegistrar;
    property EstadoNuevo:eEstadoBomba read fEstadoNuevo write fEstadoNuevo;
    property EstadoVenta:eEstadoVenta read fEstadoVenta write fEstadoVenta;
    property FactorDecimal:TFactorDecimal read GetFactorDecimal write fFactorDecimal;
    property FaltaPago:aBoolean read GetFaltaPago write fFaltaPago;
    property Flujo:TFlujos read GetFlujo write fFlujo;
    property Gasolina:Integer read fGasolina write fGasolina;
    property Guardando:Boolean read fGuardando write fGuardando;
    property Host:AnsiString read fHost write fHost;
    property IDInterno:Integer read fIDInterno write fIDInterno;
    property ImporteMinimo:Double read fImporteMinimo write fImporteMinimo;
    property IntentoPrepago:Boolean read fIntentoPrepago write fIntentoPrepago;
    property LecturasFinales:aLecturas read GetLecturasFinales write fLecturasFinales;
    property LecturasIniciales:aLecturas read GetLecturasIniciales write fLecturasIniciales;
    property LecturasTurno:aLecturas read GetLecturasTurno write fLecturasTurno;
    property Mangueras:aMangueras read GetMangueras write fMangueras;
    property MaximoLecturasImporte:Double read fMaximoLecturasImporte write fMaximoLecturasImporte;
    property MaximoLecturasVolumen:Double read fMaximoLecturasVolumen write fMaximoLecturasVolumen;
    property Modo:eModoOperacion read fModo write fModo;
    property NoMangueras:Integer read fNoMangueras write fNoMangueras;
    property NombreImpresora:AnsiString read fNombreImpresora write fNombreImpresora;
    property NuevoFlujo:AnsiString read fNuevoFlujo write fNuevoFlujo;
    property Pendiente:Boolean read fPendiente write fPendiente;
    property PendienteGrabar:Boolean read fPendienteGrabar write fPendienteGrabar;
    property PendientesAplicar:aContador read GetPendientesAplicar write fPendientesAplicar;
    property Posicionamiento:TCanal read GetPosicionamiento write fPosicionamiento;
    property Preset:eTipoPreset read fPreset write fPreset;
    property Proceso:eProceso read fProceso write fProceso;
    property PuntosRegistrados:Boolean read fPuntosRegistrados write fPuntosRegistrados;
    property PuntoVenta:TRegistroPuntoVenta read GetPuntoVenta write fPuntoVenta;
    property RegresaModo:Boolean read fRegresaModo write fRegresaModo;
    property Servicio:Double read fServicio write fServicio;
    property Ticket:eImpresionTicket read fTicket write fTicket;
    property TiempoAutorizado:Integer read fTiempoAutorizado write fTiempoAutorizado;
    property TipoDispensario:Integer read fTipoDispensario write fTipoDispensario;
    property TipoTarjeta:Integer read fTipoTarjeta write fTipoTarjeta;
    property TotalizacionAutomatica:Integer read fTotalizacionAutomatica write fTotalizacionAutomatica;
    property TurnoID:Integer read fTurnoID write fTurnoID;
    property UltimoFlujo:AnsiString read fUltimoFlujo write fUltimoFlujo;
    property UltimoLimiteImporte:Double read fUltimoLimiteImporte write fUltimoLimiteImporte;
    property UltimoLimiteVolumen:Double read fUltimoLimiteVolumen write fUltimoLimiteVolumen;
    property VentaAntePenultima:TRegistroVenta read GetVentaAntePenultima write fVentaAntePenultima;
    property VentaPenultima:TRegistroVenta read GetVentaPenultima write fVentaPenultima;
    property VentaProceso:TRegistroVenta read GetVentaProceso write fVentaProceso;
    property VentasTurno:aContador read GetVentasTurno write fVentasTurno;
    property VentaUltima:TRegistroVenta read GetVentaUltima write fVentaUltima;
    property Externo:Integer read fExterno write fExterno;
    property AgrupacionID:Integer read fAgrupacionID write fAgrupacionID;
    property Nodo:TNodo read GetNodo write fNodo;
  end;

  { TBombaCollection }
  TBombaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TBomba;
    procedure SetItems(aIndex: integer; const Value: TBomba);
  public
    constructor Create; overload;
    function Add: TBomba; reintroduce;
    procedure SaveToArray(anArray: aBombas);
    procedure LoadFromArray(anArray: aBombas);
    property Items[Index: integer]:TBomba read GetItems write SetItems; default;
  end;

  { TDispositivos }
  TDispositivos = class(TROComplexType)
  private
    fActivo: Boolean;
    fNombre: AnsiString;
    fPuerto: Integer;
    fSpeed: Integer;
    fDataBits: Integer;
    fParity: Integer;
    fStopBits: Integer;
    fEcho: Integer;
    fFlow: AnsiString;
    fHandShake: Integer;
    fDispLector: Integer;
    fDispComunicaciones: Integer;
    fRetardoLectura: Integer;
    fRetardoCiclo: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Activo:Boolean read fActivo write fActivo;
    property Nombre:AnsiString read fNombre write fNombre;
    property Puerto:Integer read fPuerto write fPuerto;
    property Speed:Integer read fSpeed write fSpeed;
    property DataBits:Integer read fDataBits write fDataBits;
    property Parity:Integer read fParity write fParity;
    property StopBits:Integer read fStopBits write fStopBits;
    property Echo:Integer read fEcho write fEcho;
    property Flow:AnsiString read fFlow write fFlow;
    property HandShake:Integer read fHandShake write fHandShake;
    property DispLector:Integer read fDispLector write fDispLector;
    property DispComunicaciones:Integer read fDispComunicaciones write fDispComunicaciones;
    property RetardoLectura:Integer read fRetardoLectura write fRetardoLectura;
    property RetardoCiclo:Integer read fRetardoCiclo write fRetardoCiclo;
  end;

  { TDispositivosCollection }
  TDispositivosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDispositivos;
    procedure SetItems(aIndex: integer; const Value: TDispositivos);
  public
    constructor Create; overload;
    function Add: TDispositivos; reintroduce;
    procedure SaveToArray(anArray: aDispositivos);
    procedure LoadFromArray(anArray: aDispositivos);
    property Items[Index: integer]:TDispositivos read GetItems write SetItems; default;
  end;

  { TGlobal }
  TGlobal = class(TROComplexType)
  private
    fAfectarDecimales: Boolean;
    fAfectarLitros: Boolean;
    fAutorizacionPorManguera: Boolean;
    fblnProdArriba: Boolean;
    fbolStop: Boolean;
    fBombas: aBombas;
    fcAck: AnsiString;
    fCambioPrecio: TCambio;
    fcCR: AnsiString;
    fcESC: AnsiString;
    fcEtx: AnsiString;
    fcLF: AnsiString;
    fcNak: AnsiString;
    fConexiones: aDispositivos;
    fCortarSuministroSinAut: Boolean;
    fcStx: AnsiString;
    fcUsuario: AnsiString;
    fDispositivos: aDispositivos;
    fImpuestoPorcentaje: Double;
    fEstacion: Integer;
    fFabricante: eFabricante;
    fFlujoActual: Integer;
    fGasolinas: aGas;
    fidNivelUsuario: Integer;
    fidUsuario: Integer;
    flPoleoHora: Boolean;
    fMaquina: AnsiString;
    fMetodoOperacion: Integer;
    fMetodoTurno: Integer;
    fMonitoreo: eMonitoreo;
    fMSG_CISTEMGAS: Integer;
    fNombreEstacion: AnsiString;
    fNumPuerto: Integer;
    fNumSite: AnsiString;
    fnVueltasGenerales: Integer;
    fPermitirCorteSinVenta: Boolean;
    fPrecioInferior: Double;
    fPrecioSuperior: Double;
    fProtecciones: TProtecciones;
    fRegistroVenta: Integer;
    fRespuesta: AnsiString;
    fRFC: AnsiString;
    fSIIC: AnsiString;
    fSinAfectar: Boolean;
    fStatusCtrolVol: Integer;
    fstrCmdPendiente: AnsiString;
    fTanques: aTanques;
    fTelemedicion: Integer;
    fTipoEstacion: Integer;
    fTotalBombas: Integer;
    fTotalCiclos: Integer;
    fTurnoActual: Integer;
    fTurnosActuales: Integer;
    fVentaSeleccionada: Integer;
    fLicencia: TLicencia;
    function GetBombas: aBombas;
    function GetCambioPrecio: TCambio;
    function GetConexiones: aDispositivos;
    function GetDispositivos: aDispositivos;
    function GetGasolinas: aGas;
    function GetProtecciones: TProtecciones;
    function GetTanques: aTanques;
    function GetLicencia: TLicencia;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property AfectarDecimales:Boolean read fAfectarDecimales write fAfectarDecimales;
    property AfectarLitros:Boolean read fAfectarLitros write fAfectarLitros;
    property AutorizacionPorManguera:Boolean read fAutorizacionPorManguera write fAutorizacionPorManguera;
    property blnProdArriba:Boolean read fblnProdArriba write fblnProdArriba;
    property bolStop:Boolean read fbolStop write fbolStop;
    property Bombas:aBombas read GetBombas write fBombas;
    property cAck:AnsiString read fcAck write fcAck;
    property CambioPrecio:TCambio read GetCambioPrecio write fCambioPrecio;
    property cCR:AnsiString read fcCR write fcCR;
    property cESC:AnsiString read fcESC write fcESC;
    property cEtx:AnsiString read fcEtx write fcEtx;
    property cLF:AnsiString read fcLF write fcLF;
    property cNak:AnsiString read fcNak write fcNak;
    property Conexiones:aDispositivos read GetConexiones write fConexiones;
    property CortarSuministroSinAut:Boolean read fCortarSuministroSinAut write fCortarSuministroSinAut;
    property cStx:AnsiString read fcStx write fcStx;
    property cUsuario:AnsiString read fcUsuario write fcUsuario;
    property Dispositivos:aDispositivos read GetDispositivos write fDispositivos;
    property ImpuestoPorcentaje:Double read fImpuestoPorcentaje write fImpuestoPorcentaje;
    property Estacion:Integer read fEstacion write fEstacion;
    property Fabricante:eFabricante read fFabricante write fFabricante;
    property FlujoActual:Integer read fFlujoActual write fFlujoActual;
    property Gasolinas:aGas read GetGasolinas write fGasolinas;
    property idNivelUsuario:Integer read fidNivelUsuario write fidNivelUsuario;
    property idUsuario:Integer read fidUsuario write fidUsuario;
    property lPoleoHora:Boolean read flPoleoHora write flPoleoHora;
    property Maquina:AnsiString read fMaquina write fMaquina;
    property MetodoOperacion:Integer read fMetodoOperacion write fMetodoOperacion;
    property MetodoTurno:Integer read fMetodoTurno write fMetodoTurno;
    property Monitoreo:eMonitoreo read fMonitoreo write fMonitoreo;
    property MSG_CISTEMGAS:Integer read fMSG_CISTEMGAS write fMSG_CISTEMGAS;
    property NombreEstacion:AnsiString read fNombreEstacion write fNombreEstacion;
    property NumPuerto:Integer read fNumPuerto write fNumPuerto;
    property NumSite:AnsiString read fNumSite write fNumSite;
    property nVueltasGenerales:Integer read fnVueltasGenerales write fnVueltasGenerales;
    property PermitirCorteSinVenta:Boolean read fPermitirCorteSinVenta write fPermitirCorteSinVenta;
    property PrecioInferior:Double read fPrecioInferior write fPrecioInferior;
    property PrecioSuperior:Double read fPrecioSuperior write fPrecioSuperior;
    property Protecciones:TProtecciones read GetProtecciones write fProtecciones;
    property RegistroVenta:Integer read fRegistroVenta write fRegistroVenta;
    property Respuesta:AnsiString read fRespuesta write fRespuesta;
    property RFC:AnsiString read fRFC write fRFC;
    property SIIC:AnsiString read fSIIC write fSIIC;
    property SinAfectar:Boolean read fSinAfectar write fSinAfectar;
    property StatusCtrolVol:Integer read fStatusCtrolVol write fStatusCtrolVol;
    property strCmdPendiente:AnsiString read fstrCmdPendiente write fstrCmdPendiente;
    property Tanques:aTanques read GetTanques write fTanques;
    property Telemedicion:Integer read fTelemedicion write fTelemedicion;
    property TipoEstacion:Integer read fTipoEstacion write fTipoEstacion;
    property TotalBombas:Integer read fTotalBombas write fTotalBombas;
    property TotalCiclos:Integer read fTotalCiclos write fTotalCiclos;
    property TurnoActual:Integer read fTurnoActual write fTurnoActual;
    property TurnosActuales:Integer read fTurnosActuales write fTurnosActuales;
    property VentaSeleccionada:Integer read fVentaSeleccionada write fVentaSeleccionada;
    property Licencia:TLicencia read GetLicencia write fLicencia;
  end;

  { TGlobalCollection }
  TGlobalCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TGlobal;
    procedure SetItems(aIndex: integer; const Value: TGlobal);
  public
    constructor Create; overload;
    function Add: TGlobal; reintroduce;
    property Items[Index: integer]:TGlobal read GetItems write SetItems; default;
  end;

  { TDatosCorte }
  TDatosCorte = class(TROComplexType)
  private
    fFechaInicio: DateTime;
    fFechaFinal: DateTime;
    fLecturaInicial: Double;
    fLecturaFinal: Double;
    fPrecio: Double;
    fBombaID: Integer;
    fMangueraID: Integer;
    fTurnoID: Integer;
    fImporteCupones: Double;
    fNumeroCupones: Double;
    fImporteTarjetas: Double;
    fNumeroTarjetas: Double;
    fImporteNotas: Double;
    fNumeroNotas: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FechaInicio:DateTime read fFechaInicio write fFechaInicio;
    property FechaFinal:DateTime read fFechaFinal write fFechaFinal;
    property LecturaInicial:Double read fLecturaInicial write fLecturaInicial;
    property LecturaFinal:Double read fLecturaFinal write fLecturaFinal;
    property Precio:Double read fPrecio write fPrecio;
    property BombaID:Integer read fBombaID write fBombaID;
    property MangueraID:Integer read fMangueraID write fMangueraID;
    property TurnoID:Integer read fTurnoID write fTurnoID;
    property ImporteCupones:Double read fImporteCupones write fImporteCupones;
    property NumeroCupones:Double read fNumeroCupones write fNumeroCupones;
    property ImporteTarjetas:Double read fImporteTarjetas write fImporteTarjetas;
    property NumeroTarjetas:Double read fNumeroTarjetas write fNumeroTarjetas;
    property ImporteNotas:Double read fImporteNotas write fImporteNotas;
    property NumeroNotas:Double read fNumeroNotas write fNumeroNotas;
  end;

  { TDatosCorteCollection }
  TDatosCorteCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosCorte;
    procedure SetItems(aIndex: integer; const Value: TDatosCorte);
  public
    constructor Create; overload;
    function Add: TDatosCorte; reintroduce;
    procedure SaveToArray(anArray: aDatosCorte);
    procedure LoadFromArray(anArray: aDatosCorte);
    property Items[Index: integer]:TDatosCorte read GetItems write SetItems; default;
  end;

  { TDatosTicket }
  TDatosTicket = class(TROComplexType)
  private
    fSecuenciaID: Integer;
    fFecha: DateTime;
    fVolumen: Double;
    fPrecio: Double;
    fImporte: Double;
    fProductoID: Integer;
    fTurnoID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property SecuenciaID:Integer read fSecuenciaID write fSecuenciaID;
    property Fecha:DateTime read fFecha write fFecha;
    property Volumen:Double read fVolumen write fVolumen;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
    property ProductoID:Integer read fProductoID write fProductoID;
    property TurnoID:Integer read fTurnoID write fTurnoID;
  end;

  { TDatosTicketCollection }
  TDatosTicketCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosTicket;
    procedure SetItems(aIndex: integer; const Value: TDatosTicket);
  public
    constructor Create; overload;
    function Add: TDatosTicket; reintroduce;
    property Items[Index: integer]:TDatosTicket read GetItems write SetItems; default;
  end;

  { TTanque }
  TTanque = class(TROComplexType)
  private
    fTanqueID: Integer;
    fTanque: Integer;
    fCapacidad: Double;
    fFondaje: Double;
    fProductoID: Integer;
    fInicial: Double;
    fTemperatura: Double;
    fVolumenAgua: Double;
    fVolumenInicial: Double;
    fVolumenDisponible: Double;
    fConexion: Boolean;
    fStringTanques: AnsiString;
    fStringRecepciones: AnsiString;
    fRecepciones: aRecepciones;
    fNombre: AnsiString;
    function GetRecepciones: aRecepciones;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property TanqueID:Integer read fTanqueID write fTanqueID;
    property Tanque:Integer read fTanque write fTanque;
    property Capacidad:Double read fCapacidad write fCapacidad;
    property Fondaje:Double read fFondaje write fFondaje;
    property ProductoID:Integer read fProductoID write fProductoID;
    property Inicial:Double read fInicial write fInicial;
    property Temperatura:Double read fTemperatura write fTemperatura;
    property VolumenAgua:Double read fVolumenAgua write fVolumenAgua;
    property VolumenInicial:Double read fVolumenInicial write fVolumenInicial;
    property VolumenDisponible:Double read fVolumenDisponible write fVolumenDisponible;
    property Conexion:Boolean read fConexion write fConexion;
    property StringTanques:AnsiString read fStringTanques write fStringTanques;
    property StringRecepciones:AnsiString read fStringRecepciones write fStringRecepciones;
    property Recepciones:aRecepciones read GetRecepciones write fRecepciones;
    property Nombre:AnsiString read fNombre write fNombre;
  end;

  { TTanqueCollection }
  TTanqueCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TTanque;
    procedure SetItems(aIndex: integer; const Value: TTanque);
  public
    constructor Create; overload;
    function Add: TTanque; reintroduce;
    procedure SaveToArray(anArray: aTanques);
    procedure LoadFromArray(anArray: aTanques);
    property Items[Index: integer]:TTanque read GetItems write SetItems; default;
  end;

  { TRecepcion }
  TRecepcion = class(TROComplexType)
  private
    fFechaRecepcion: DateTime;
    fFechaInicial: DateTime;
    fFechaFinal: DateTime;
    fVolumenInicial: Double;
    fVolumenFinal: Double;
    fTemperaturaIncial: Double;
    fTemperaturaFinal: Double;
    fVolumenRecibido: Double;
    fStringRecepocion: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FechaRecepcion:DateTime read fFechaRecepcion write fFechaRecepcion;
    property FechaInicial:DateTime read fFechaInicial write fFechaInicial;
    property FechaFinal:DateTime read fFechaFinal write fFechaFinal;
    property VolumenInicial:Double read fVolumenInicial write fVolumenInicial;
    property VolumenFinal:Double read fVolumenFinal write fVolumenFinal;
    property TemperaturaIncial:Double read fTemperaturaIncial write fTemperaturaIncial;
    property TemperaturaFinal:Double read fTemperaturaFinal write fTemperaturaFinal;
    property VolumenRecibido:Double read fVolumenRecibido write fVolumenRecibido;
    property StringRecepocion:AnsiString read fStringRecepocion write fStringRecepocion;
  end;

  { TRecepcionCollection }
  TRecepcionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TRecepcion;
    procedure SetItems(aIndex: integer; const Value: TRecepcion);
  public
    constructor Create; overload;
    function Add: TRecepcion; reintroduce;
    procedure SaveToArray(anArray: aRecepciones);
    procedure LoadFromArray(anArray: aRecepciones);
    property Items[Index: integer]:TRecepcion read GetItems write SetItems; default;
  end;

  { TProtecciones }
  TProtecciones = class(TROComplexType)
  private
    fConPreset: Boolean;
    fConLitros: Boolean;
    fConMultiplos: Boolean;
    fConDecimales: Boolean;
    fConLLeno: Boolean;
    fObligarPreset: Boolean;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ConPreset:Boolean read fConPreset write fConPreset;
    property ConLitros:Boolean read fConLitros write fConLitros;
    property ConMultiplos:Boolean read fConMultiplos write fConMultiplos;
    property ConDecimales:Boolean read fConDecimales write fConDecimales;
    property ConLLeno:Boolean read fConLLeno write fConLLeno;
    property ObligarPreset:Boolean read fObligarPreset write fObligarPreset;
  end;

  { TProteccionesCollection }
  TProteccionesCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TProtecciones;
    procedure SetItems(aIndex: integer; const Value: TProtecciones);
  public
    constructor Create; overload;
    function Add: TProtecciones; reintroduce;
    property Items[Index: integer]:TProtecciones read GetItems write SetItems; default;
  end;

  { TParametros }
  TParametros = class(TROComplexType)
  private
    fArchivoID: Integer;
    fBombaFin: Integer;
    fBombaID: Integer;
    fBombaIni: Integer;
    fEstacion: Integer;
    fFechaFin: DateTime;
    fFechaIni: DateTime;
    fProductoID: Integer;
    fTipoCorte: Integer;
    fTurnoFin: Integer;
    fTurnoID: Integer;
    fTurnoIni: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ArchivoID:Integer read fArchivoID write fArchivoID;
    property BombaFin:Integer read fBombaFin write fBombaFin;
    property BombaID:Integer read fBombaID write fBombaID;
    property BombaIni:Integer read fBombaIni write fBombaIni;
    property Estacion:Integer read fEstacion write fEstacion;
    property FechaFin:DateTime read fFechaFin write fFechaFin;
    property FechaIni:DateTime read fFechaIni write fFechaIni;
    property ProductoID:Integer read fProductoID write fProductoID;
    property TipoCorte:Integer read fTipoCorte write fTipoCorte;
    property TurnoFin:Integer read fTurnoFin write fTurnoFin;
    property TurnoID:Integer read fTurnoID write fTurnoID;
    property TurnoIni:Integer read fTurnoIni write fTurnoIni;
  end;

  { TParametrosCollection }
  TParametrosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TParametros;
    procedure SetItems(aIndex: integer; const Value: TParametros);
  public
    constructor Create; overload;
    function Add: TParametros; reintroduce;
    property Items[Index: integer]:TParametros read GetItems write SetItems; default;
  end;

  { TComando }
  TComando = class(TROComplexType)
  private
    fSecuencia: Integer;
    fImporte: Double;
    fVolumen: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Secuencia:Integer read fSecuencia write fSecuencia;
    property Importe:Double read fImporte write fImporte;
    property Volumen:Double read fVolumen write fVolumen;
  end;

  { TComandoCollection }
  TComandoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TComando;
    procedure SetItems(aIndex: integer; const Value: TComando);
  public
    constructor Create; overload;
    function Add: TComando; reintroduce;
    procedure SaveToArray(anArray: aComandos);
    procedure LoadFromArray(anArray: aComandos);
    property Items[Index: integer]:TComando read GetItems write SetItems; default;
  end;

  { TOpcion }
  TOpcion = class(TROComplexType)
  private
    fOpcionID: Integer;
    fNombre: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property OpcionID:Integer read fOpcionID write fOpcionID;
    property Nombre:AnsiString read fNombre write fNombre;
  end;

  { TOpcionCollection }
  TOpcionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TOpcion;
    procedure SetItems(aIndex: integer; const Value: TOpcion);
  public
    constructor Create; overload;
    function Add: TOpcion; reintroduce;
    procedure SaveToArray(anArray: ArrayOpcion);
    procedure LoadFromArray(anArray: ArrayOpcion);
    property Items[Index: integer]:TOpcion read GetItems write SetItems; default;
  end;

  { TLoginInfo }
  TLoginInfo = class(TROComplexType)
  private
    fValida: Boolean;
    fEmpleadoID: Integer;
    fNombreEmpleado: AnsiString;
    fAccesos: ArrayOpcion;
    function GetAccesos: ArrayOpcion;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Valida:Boolean read fValida write fValida;
    property EmpleadoID:Integer read fEmpleadoID write fEmpleadoID;
    property NombreEmpleado:AnsiString read fNombreEmpleado write fNombreEmpleado;
    property Accesos:ArrayOpcion read GetAccesos write fAccesos;
  end;

  { TLoginInfoCollection }
  TLoginInfoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TLoginInfo;
    procedure SetItems(aIndex: integer; const Value: TLoginInfo);
  public
    constructor Create; overload;
    function Add: TLoginInfo; reintroduce;
    property Items[Index: integer]:TLoginInfo read GetItems write SetItems; default;
  end;

  { TLineaTicket }
  TLineaTicket = class(TROComplexType)
  private
    fTicketID: Integer;
    fLinea: AnsiString;
    fAlineacion: Integer;
    fTipoLetra: Integer;
    fFormatoLetra: Integer;
    fLLenado: Boolean;
    fLugar: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property TicketID:Integer read fTicketID write fTicketID;
    property Linea:AnsiString read fLinea write fLinea;
    property Alineacion:Integer read fAlineacion write fAlineacion;
    property TipoLetra:Integer read fTipoLetra write fTipoLetra;
    property FormatoLetra:Integer read fFormatoLetra write fFormatoLetra;
    property LLenado:Boolean read fLLenado write fLLenado;
    property Lugar:Integer read fLugar write fLugar;
  end;

  { TLineaTicketCollection }
  TLineaTicketCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TLineaTicket;
    procedure SetItems(aIndex: integer; const Value: TLineaTicket);
  public
    constructor Create; overload;
    function Add: TLineaTicket; reintroduce;
    procedure SaveToArray(anArray: aLineaTicket);
    procedure LoadFromArray(anArray: aLineaTicket);
    property Items[Index: integer]:TLineaTicket read GetItems write SetItems; default;
  end;

  { TReporte }
  TReporte = class(TROComplexType)
  private
    fSQL1: AnsiString;
    fSQL2: AnsiString;
    fTemplate: AnsiString;
    fCampoJoin: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property SQL1:AnsiString read fSQL1 write fSQL1;
    property SQL2:AnsiString read fSQL2 write fSQL2;
    property Template:AnsiString read fTemplate write fTemplate;
    property CampoJoin:AnsiString read fCampoJoin write fCampoJoin;
  end;

  { TReporteCollection }
  TReporteCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TReporte;
    procedure SetItems(aIndex: integer; const Value: TReporte);
  public
    constructor Create; overload;
    function Add: TReporte; reintroduce;
    property Items[Index: integer]:TReporte read GetItems write SetItems; default;
  end;

  { TLicencia }
  TLicencia = class(TROComplexType)
  private
    fVolumetrico: Boolean;
    fTanques: Boolean;
    fCualli: Boolean;
    fProduccion: Boolean;
    fAdministracion: Boolean;
    fFlotillas: Boolean;
    fNA: Boolean;
    fDefinitiva: Boolean;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Volumetrico:Boolean read fVolumetrico write fVolumetrico;
    property Tanques:Boolean read fTanques write fTanques;
    property Cualli:Boolean read fCualli write fCualli;
    property Produccion:Boolean read fProduccion write fProduccion;
    property Administracion:Boolean read fAdministracion write fAdministracion;
    property Flotillas:Boolean read fFlotillas write fFlotillas;
    property NA:Boolean read fNA write fNA;
    property Definitiva:Boolean read fDefinitiva write fDefinitiva;
  end;

  { TLicenciaCollection }
  TLicenciaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TLicencia;
    procedure SetItems(aIndex: integer; const Value: TLicencia);
  public
    constructor Create; overload;
    function Add: TLicencia; reintroduce;
    property Items[Index: integer]:TLicencia read GetItems write SetItems; default;
  end;

  { TNodo }
  TNodo = class(TROComplexType)
  private
    fNombre: AnsiString;
    fTipo: Integer;
    fGasolinero: Integer;
    fHost: AnsiString;
    fPuerto: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Nombre:AnsiString read fNombre write fNombre;
    property Tipo:Integer read fTipo write fTipo;
    property Gasolinero:Integer read fGasolinero write fGasolinero;
    property Host:AnsiString read fHost write fHost;
    property Puerto:Integer read fPuerto write fPuerto;
  end;

  { TNodoCollection }
  TNodoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TNodo;
    procedure SetItems(aIndex: integer; const Value: TNodo);
  public
    constructor Create; overload;
    function Add: TNodo; reintroduce;
    procedure SaveToArray(anArray: aNodos);
    procedure LoadFromArray(anArray: aNodos);
    property Items[Index: integer]:TNodo read GetItems write SetItems; default;
  end;

  { TCorte }
  TCorte = class(TROComplexType)
  private
    fBombaID: Integer;
    fMagna: Double;
    fPremium: Double;
    fDiesel: Double;
    fVolumenMagna: Double;
    fVolumenPremium: Double;
    fVolumenDiesel: Double;
    fTarjetas: Double;
    fBancaria: Double;
    fCupones: Double;
    fNotas: Double;
    fFecha: DateTime;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property BombaID:Integer read fBombaID write fBombaID;
    property Magna:Double read fMagna write fMagna;
    property Premium:Double read fPremium write fPremium;
    property Diesel:Double read fDiesel write fDiesel;
    property VolumenMagna:Double read fVolumenMagna write fVolumenMagna;
    property VolumenPremium:Double read fVolumenPremium write fVolumenPremium;
    property VolumenDiesel:Double read fVolumenDiesel write fVolumenDiesel;
    property Tarjetas:Double read fTarjetas write fTarjetas;
    property Bancaria:Double read fBancaria write fBancaria;
    property Cupones:Double read fCupones write fCupones;
    property Notas:Double read fNotas write fNotas;
    property Fecha:DateTime read fFecha write fFecha;
  end;

  { TCorteCollection }
  TCorteCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TCorte;
    procedure SetItems(aIndex: integer; const Value: TCorte);
  public
    constructor Create; overload;
    function Add: TCorte; reintroduce;
    procedure SaveToArray(anArray: aCorte);
    procedure LoadFromArray(anArray: aCorte);
    property Items[Index: integer]:TCorte read GetItems write SetItems; default;
  end;

  { TConsumoGas }
  TConsumoGas = class(TROComplexType)
  private
    fTicket: Integer;
    fSerie: AnsiString;
    fBombaID: Integer;
    fVolumen: Double;
    fImporte: Double;
    fPrecio: Double;
    fProductoID: Integer;
    fReferencia: AnsiString;
    fTipo: Integer;
    fClienteID: Integer;
    fTarjetaYCupon: Boolean;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Ticket:Integer read fTicket write fTicket;
    property Serie:AnsiString read fSerie write fSerie;
    property BombaID:Integer read fBombaID write fBombaID;
    property Volumen:Double read fVolumen write fVolumen;
    property Importe:Double read fImporte write fImporte;
    property Precio:Double read fPrecio write fPrecio;
    property ProductoID:Integer read fProductoID write fProductoID;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Tipo:Integer read fTipo write fTipo;
    property ClienteID:Integer read fClienteID write fClienteID;
    property TarjetaYCupon:Boolean read fTarjetaYCupon write fTarjetaYCupon;
  end;

  { TConsumoGasCollection }
  TConsumoGasCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TConsumoGas;
    procedure SetItems(aIndex: integer; const Value: TConsumoGas);
  public
    constructor Create; overload;
    function Add: TConsumoGas; reintroduce;
    procedure SaveToArray(anArray: aConsumoGas);
    procedure LoadFromArray(anArray: aConsumoGas);
    property Items[Index: integer]:TConsumoGas read GetItems write SetItems; default;
  end;

  { TValoresCorte }
  TValoresCorte = class(TROComplexType)
  private
    fCorte: aCorte;
    fConsumos: aConsumoGas;
    fOtros: aCorteOtros;
    function GetCorte: aCorte;
    function GetConsumos: aConsumoGas;
    function GetOtros: aCorteOtros;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Corte:aCorte read GetCorte write fCorte;
    property Consumos:aConsumoGas read GetConsumos write fConsumos;
    property Otros:aCorteOtros read GetOtros write fOtros;
  end;

  { TValoresCorteCollection }
  TValoresCorteCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TValoresCorte;
    procedure SetItems(aIndex: integer; const Value: TValoresCorte);
  public
    constructor Create; overload;
    function Add: TValoresCorte; reintroduce;
    property Items[Index: integer]:TValoresCorte read GetItems write SetItems; default;
  end;

  { TAsignaTarjetaCupon }
  TAsignaTarjetaCupon = class(TROComplexType)
  private
    fTramaID: Integer;
    fTipo: Integer;
    fReferencia: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property TramaID:Integer read fTramaID write fTramaID;
    property Tipo:Integer read fTipo write fTipo;
    property Referencia:AnsiString read fReferencia write fReferencia;
  end;

  { TAsignaTarjetaCuponCollection }
  TAsignaTarjetaCuponCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TAsignaTarjetaCupon;
    procedure SetItems(aIndex: integer; const Value: TAsignaTarjetaCupon);
  public
    constructor Create; overload;
    function Add: TAsignaTarjetaCupon; reintroduce;
    procedure SaveToArray(anArray: aAsignaTarjetaCupon);
    procedure LoadFromArray(anArray: aAsignaTarjetaCupon);
    property Items[Index: integer]:TAsignaTarjetaCupon read GetItems write SetItems; default;
  end;

  { TTarjetaManual }
  TTarjetaManual = class(TROComplexType)
  private
    fClienteID: Integer;
    fVehiculoID: Integer;
    fClienteNombre: AnsiString;
    fReferencia: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property VehiculoID:Integer read fVehiculoID write fVehiculoID;
    property ClienteNombre:AnsiString read fClienteNombre write fClienteNombre;
    property Referencia:AnsiString read fReferencia write fReferencia;
  end;

  { TTarjetaManualCollection }
  TTarjetaManualCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TTarjetaManual;
    procedure SetItems(aIndex: integer; const Value: TTarjetaManual);
  public
    constructor Create; overload;
    function Add: TTarjetaManual; reintroduce;
    property Items[Index: integer]:TTarjetaManual read GetItems write SetItems; default;
  end;

  { TCambio }
  TCambio = class(TROComplexType)
  private
    fFecha: DateTime;
    fActivo: Boolean;
    fPrecios: aCambioPrecios;
    function GetPrecios: aCambioPrecios;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Fecha:DateTime read fFecha write fFecha;
    property Activo:Boolean read fActivo write fActivo;
    property Precios:aCambioPrecios read GetPrecios write fPrecios;
  end;

  { TCambioCollection }
  TCambioCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TCambio;
    procedure SetItems(aIndex: integer; const Value: TCambio);
  public
    constructor Create; overload;
    function Add: TCambio; reintroduce;
    property Items[Index: integer]:TCambio read GetItems write SetItems; default;
  end;

  { TCupon }
  TCupon = class(TROComplexType)
  private
    fValido: Boolean;
    fMensaje: AnsiString;
    fNombre: AnsiString;
    fRazonSocial: AnsiString;
    fRFC: AnsiString;
    fReferencia: AnsiString;
    fClienteID: Integer;
    fVehiculoID: Integer;
    fGasolineroID: Integer;
    fGrupo: Integer;
    fImporte: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Valido:Boolean read fValido write fValido;
    property Mensaje:AnsiString read fMensaje write fMensaje;
    property Nombre:AnsiString read fNombre write fNombre;
    property RazonSocial:AnsiString read fRazonSocial write fRazonSocial;
    property RFC:AnsiString read fRFC write fRFC;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property ClienteID:Integer read fClienteID write fClienteID;
    property VehiculoID:Integer read fVehiculoID write fVehiculoID;
    property GasolineroID:Integer read fGasolineroID write fGasolineroID;
    property Grupo:Integer read fGrupo write fGrupo;
    property Importe:Double read fImporte write fImporte;
  end;

  { TCuponCollection }
  TCuponCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TCupon;
    procedure SetItems(aIndex: integer; const Value: TCupon);
  public
    constructor Create; overload;
    function Add: TCupon; reintroduce;
    property Items[Index: integer]:TCupon read GetItems write SetItems; default;
  end;

  { TDatosExpress }
  TDatosExpress = class(TROComplexType)
  private
    fClienteID: Integer;
    fNombre: AnsiString;
    fRFC: AnsiString;
    fTarjeta: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property Nombre:AnsiString read fNombre write fNombre;
    property RFC:AnsiString read fRFC write fRFC;
    property Tarjeta:AnsiString read fTarjeta write fTarjeta;
  end;

  { TDatosExpressCollection }
  TDatosExpressCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosExpress;
    procedure SetItems(aIndex: integer; const Value: TDatosExpress);
  public
    constructor Create; overload;
    function Add: TDatosExpress; reintroduce;
    property Items[Index: integer]:TDatosExpress read GetItems write SetItems; default;
  end;

  { TOtros }
  TOtros = class(TROComplexType)
  private
    fID: Integer;
    fNombre: AnsiString;
    fCodigo: AnsiString;
    fBarras: AnsiString;
    fPrecio: Double;
    fCantidad: Double;
    fTicketID: Integer;
    fVentaID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ID:Integer read fID write fID;
    property Nombre:AnsiString read fNombre write fNombre;
    property Codigo:AnsiString read fCodigo write fCodigo;
    property Barras:AnsiString read fBarras write fBarras;
    property Precio:Double read fPrecio write fPrecio;
    property Cantidad:Double read fCantidad write fCantidad;
    property TicketID:Integer read fTicketID write fTicketID;
    property VentaID:Integer read fVentaID write fVentaID;
  end;

  { TOtrosCollection }
  TOtrosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TOtros;
    procedure SetItems(aIndex: integer; const Value: TOtros);
  public
    constructor Create; overload;
    function Add: TOtros; reintroduce;
    procedure SaveToArray(anArray: AOtros);
    procedure LoadFromArray(anArray: AOtros);
    property Items[Index: integer]:TOtros read GetItems write SetItems; default;
  end;

  { TDatosVentaOtros }
  TDatosVentaOtros = class(TROComplexType)
  private
    fClienteID: Integer;
    fNombre: AnsiString;
    fRazonSocial: AnsiString;
    fRFC: AnsiString;
    fIdentificacion: AnsiString;
    fValido: Boolean;
    fMensaje: AnsiString;
    fVentaID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property Nombre:AnsiString read fNombre write fNombre;
    property RazonSocial:AnsiString read fRazonSocial write fRazonSocial;
    property RFC:AnsiString read fRFC write fRFC;
    property Identificacion:AnsiString read fIdentificacion write fIdentificacion;
    property Valido:Boolean read fValido write fValido;
    property Mensaje:AnsiString read fMensaje write fMensaje;
    property VentaID:Integer read fVentaID write fVentaID;
  end;

  { TDatosVentaOtrosCollection }
  TDatosVentaOtrosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosVentaOtros;
    procedure SetItems(aIndex: integer; const Value: TDatosVentaOtros);
  public
    constructor Create; overload;
    function Add: TDatosVentaOtros; reintroduce;
    property Items[Index: integer]:TDatosVentaOtros read GetItems write SetItems; default;
  end;

  { TAutorizaPendiente }
  TAutorizaPendiente = class(TROComplexType)
  private
    fEstacionID: Integer;
    fSecuenciaVenta: Integer;
    fFecha: DateTime;
    fProductoID: Integer;
    fPrecio: Double;
    fVolumen: Double;
    fImporte: Double;
    fTurno: Integer;
    fBombaID: Integer;
    fOdometro: AnsiString;
    fTarjeta: AnsiString;
    fImpuesto: Double;
    fIEPS: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property SecuenciaVenta:Integer read fSecuenciaVenta write fSecuenciaVenta;
    property Fecha:DateTime read fFecha write fFecha;
    property ProductoID:Integer read fProductoID write fProductoID;
    property Precio:Double read fPrecio write fPrecio;
    property Volumen:Double read fVolumen write fVolumen;
    property Importe:Double read fImporte write fImporte;
    property Turno:Integer read fTurno write fTurno;
    property BombaID:Integer read fBombaID write fBombaID;
    property Odometro:AnsiString read fOdometro write fOdometro;
    property Tarjeta:AnsiString read fTarjeta write fTarjeta;
    property Impuesto:Double read fImpuesto write fImpuesto;
    property IEPS:Double read fIEPS write fIEPS;
  end;

  { TAutorizaPendienteCollection }
  TAutorizaPendienteCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TAutorizaPendiente;
    procedure SetItems(aIndex: integer; const Value: TAutorizaPendiente);
  public
    constructor Create; overload;
    function Add: TAutorizaPendiente; reintroduce;
    procedure SaveToArray(anArray: AAutorizaPendiente);
    procedure LoadFromArray(anArray: AAutorizaPendiente);
    property Items[Index: integer]:TAutorizaPendiente read GetItems write SetItems; default;
  end;

  { TAutorizaLLave }
  TAutorizaLLave = class(TROComplexType)
  private
    fUsuarioTarjetaID: Integer;
    fNombre: AnsiString;
    fTarjeta: AnsiString;
    fValida: Boolean;
    fFecha: DateTime;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property UsuarioTarjetaID:Integer read fUsuarioTarjetaID write fUsuarioTarjetaID;
    property Nombre:AnsiString read fNombre write fNombre;
    property Tarjeta:AnsiString read fTarjeta write fTarjeta;
    property Valida:Boolean read fValida write fValida;
    property Fecha:DateTime read fFecha write fFecha;
  end;

  { TAutorizaLLaveCollection }
  TAutorizaLLaveCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TAutorizaLLave;
    procedure SetItems(aIndex: integer; const Value: TAutorizaLLave);
  public
    constructor Create; overload;
    function Add: TAutorizaLLave; reintroduce;
    property Items[Index: integer]:TAutorizaLLave read GetItems write SetItems; default;
  end;

  { TAutorizaBancaria }
  TAutorizaBancaria = class(TROComplexType)
  private
    fMensaje: AnsiString;
    fTarjeta: AnsiString;
    fNombreCliente: AnsiString;
    fAprobada: Boolean;
    fID: Integer;
    fAutorizacion: AnsiString;
    fTransID: AnsiString;
    fIDTrans: AnsiString;
    fNotes: AnsiString;
    fAccepted: Boolean;
    fInstructions: AnsiString;
    fComision: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Mensaje:AnsiString read fMensaje write fMensaje;
    property Tarjeta:AnsiString read fTarjeta write fTarjeta;
    property NombreCliente:AnsiString read fNombreCliente write fNombreCliente;
    property Aprobada:Boolean read fAprobada write fAprobada;
    property ID:Integer read fID write fID;
    property Autorizacion:AnsiString read fAutorizacion write fAutorizacion;
    property TransID:AnsiString read fTransID write fTransID;
    property IDTrans:AnsiString read fIDTrans write fIDTrans;
    property Notes:AnsiString read fNotes write fNotes;
    property Accepted:Boolean read fAccepted write fAccepted;
    property Instructions:AnsiString read fInstructions write fInstructions;
    property Comision:Double read fComision write fComision;
  end;

  { TAutorizaBancariaCollection }
  TAutorizaBancariaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TAutorizaBancaria;
    procedure SetItems(aIndex: integer; const Value: TAutorizaBancaria);
  public
    constructor Create; overload;
    function Add: TAutorizaBancaria; reintroduce;
    property Items[Index: integer]:TAutorizaBancaria read GetItems write SetItems; default;
  end;

  { TCorteOtros }
  TCorteOtros = class(TROComplexType)
  private
    fProductoID: Integer;
    fCantidad: Double;
    fPrecio: Double;
    fImporte: Double;
    fBombaID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ProductoID:Integer read fProductoID write fProductoID;
    property Cantidad:Double read fCantidad write fCantidad;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
    property BombaID:Integer read fBombaID write fBombaID;
  end;

  { TCorteOtrosCollection }
  TCorteOtrosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TCorteOtros;
    procedure SetItems(aIndex: integer; const Value: TCorteOtros);
  public
    constructor Create; overload;
    function Add: TCorteOtros; reintroduce;
    procedure SaveToArray(anArray: aCorteOtros);
    procedure LoadFromArray(anArray: aCorteOtros);
    property Items[Index: integer]:TCorteOtros read GetItems write SetItems; default;
  end;

  { TDatosVerifone }
  TDatosVerifone = class(TROComplexType)
  private
    fClienteID: Integer;
    fVehiculoID: Integer;
    fNombre: AnsiString;
    fRazonSocial: AnsiString;
    fDomicilio: AnsiString;
    fColonia: AnsiString;
    fCiudad: AnsiString;
    fRFC: AnsiString;
    fNIP: Integer;
    fIdentificacion: AnsiString;
    fUsuario: AnsiString;
    fAcumuladoMNMes: Double;
    fKMS: Integer;
    fReferencia: AnsiString;
    fAutorizada: Boolean;
    fVolumenImporte: AnsiString;
    fAutorizacionMN: Double;
    fAutorizacionLT: Double;
    fStatusID: Integer;
    fMensaje: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property VehiculoID:Integer read fVehiculoID write fVehiculoID;
    property Nombre:AnsiString read fNombre write fNombre;
    property RazonSocial:AnsiString read fRazonSocial write fRazonSocial;
    property Domicilio:AnsiString read fDomicilio write fDomicilio;
    property Colonia:AnsiString read fColonia write fColonia;
    property Ciudad:AnsiString read fCiudad write fCiudad;
    property RFC:AnsiString read fRFC write fRFC;
    property NIP:Integer read fNIP write fNIP;
    property Identificacion:AnsiString read fIdentificacion write fIdentificacion;
    property Usuario:AnsiString read fUsuario write fUsuario;
    property AcumuladoMNMes:Double read fAcumuladoMNMes write fAcumuladoMNMes;
    property KMS:Integer read fKMS write fKMS;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Autorizada:Boolean read fAutorizada write fAutorizada;
    property VolumenImporte:AnsiString read fVolumenImporte write fVolumenImporte;
    property AutorizacionMN:Double read fAutorizacionMN write fAutorizacionMN;
    property AutorizacionLT:Double read fAutorizacionLT write fAutorizacionLT;
    property StatusID:Integer read fStatusID write fStatusID;
    property Mensaje:AnsiString read fMensaje write fMensaje;
  end;

  { TDatosVerifoneCollection }
  TDatosVerifoneCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosVerifone;
    procedure SetItems(aIndex: integer; const Value: TDatosVerifone);
  public
    constructor Create; overload;
    function Add: TDatosVerifone; reintroduce;
    property Items[Index: integer]:TDatosVerifone read GetItems write SetItems; default;
  end;

  { TDatosSagarpa }
  TDatosSagarpa = class(TROComplexType)
  private
    fTicket: Integer;
    fBombaID: Integer;
    fSagarpaCliente: Integer;
    fSagarpaImporte: Double;
    fSagarpaReferencia: AnsiString;
    fPemexCliente: Integer;
    fPemexImporte: Double;
    fPemexReferencia: AnsiString;
    fCreditoCliente: Integer;
    fCreditoImporte: Double;
    fCreditoReferencia: AnsiString;
    fVoucherCliente: Integer;
    fVoucherImporte: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Ticket:Integer read fTicket write fTicket;
    property BombaID:Integer read fBombaID write fBombaID;
    property SagarpaCliente:Integer read fSagarpaCliente write fSagarpaCliente;
    property SagarpaImporte:Double read fSagarpaImporte write fSagarpaImporte;
    property SagarpaReferencia:AnsiString read fSagarpaReferencia write fSagarpaReferencia;
    property PemexCliente:Integer read fPemexCliente write fPemexCliente;
    property PemexImporte:Double read fPemexImporte write fPemexImporte;
    property PemexReferencia:AnsiString read fPemexReferencia write fPemexReferencia;
    property CreditoCliente:Integer read fCreditoCliente write fCreditoCliente;
    property CreditoImporte:Double read fCreditoImporte write fCreditoImporte;
    property CreditoReferencia:AnsiString read fCreditoReferencia write fCreditoReferencia;
    property VoucherCliente:Integer read fVoucherCliente write fVoucherCliente;
    property VoucherImporte:Double read fVoucherImporte write fVoucherImporte;
  end;

  { TDatosSagarpaCollection }
  TDatosSagarpaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosSagarpa;
    procedure SetItems(aIndex: integer; const Value: TDatosSagarpa);
  public
    constructor Create; overload;
    function Add: TDatosSagarpa; reintroduce;
    property Items[Index: integer]:TDatosSagarpa read GetItems write SetItems; default;
  end;

  { TFechas }
  TFechas = class(TROComplexType)
  private
    fFechaINI: DateTime;
    fFechaFIN: DateTime;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FechaINI:DateTime read fFechaINI write fFechaINI;
    property FechaFIN:DateTime read fFechaFIN write fFechaFIN;
  end;

  { TFechasCollection }
  TFechasCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFechas;
    procedure SetItems(aIndex: integer; const Value: TFechas);
  public
    constructor Create; overload;
    function Add: TFechas; reintroduce;
    property Items[Index: integer]:TFechas read GetItems write SetItems; default;
  end;

  { TInsertaOtros }
  TInsertaOtros = class(TROComplexType)
  private
    fID: Integer;
    fSerie: AnsiString;
    fFecha: DateTime;
    fReferencia: AnsiString;
    fVolumen: Double;
    fPrecio: Double;
    fImporte: Double;
    fBombaID: Integer;
    fProductoID: Integer;
    fTipoID: Integer;
    fClienteID: Integer;
    fVehiculoID: Integer;
    fTurnoID: Integer;
    fTarjetaYCupon: Boolean;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ID:Integer read fID write fID;
    property Serie:AnsiString read fSerie write fSerie;
    property Fecha:DateTime read fFecha write fFecha;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Volumen:Double read fVolumen write fVolumen;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
    property BombaID:Integer read fBombaID write fBombaID;
    property ProductoID:Integer read fProductoID write fProductoID;
    property TipoID:Integer read fTipoID write fTipoID;
    property ClienteID:Integer read fClienteID write fClienteID;
    property VehiculoID:Integer read fVehiculoID write fVehiculoID;
    property TurnoID:Integer read fTurnoID write fTurnoID;
    property TarjetaYCupon:Boolean read fTarjetaYCupon write fTarjetaYCupon;
  end;

  { TInsertaOtrosCollection }
  TInsertaOtrosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TInsertaOtros;
    procedure SetItems(aIndex: integer; const Value: TInsertaOtros);
  public
    constructor Create; overload;
    function Add: TInsertaOtros; reintroduce;
    property Items[Index: integer]:TInsertaOtros read GetItems write SetItems; default;
  end;

  { TDatosEntregaPremio }
  TDatosEntregaPremio = class(TROComplexType)
  private
    fClienteID: Integer;
    fNombre: AnsiString;
    fReferencia: AnsiString;
    fSaldo: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property Nombre:AnsiString read fNombre write fNombre;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Saldo:Double read fSaldo write fSaldo;
  end;

  { TDatosEntregaPremioCollection }
  TDatosEntregaPremioCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosEntregaPremio;
    procedure SetItems(aIndex: integer; const Value: TDatosEntregaPremio);
  public
    constructor Create; overload;
    function Add: TDatosEntregaPremio; reintroduce;
    property Items[Index: integer]:TDatosEntregaPremio read GetItems write SetItems; default;
  end;

  { TPremio }
  TPremio = class(TROComplexType)
  private
    fPremioID: Integer;
    fNombre: AnsiString;
    fPuntos: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property PremioID:Integer read fPremioID write fPremioID;
    property Nombre:AnsiString read fNombre write fNombre;
    property Puntos:Double read fPuntos write fPuntos;
  end;

  { TPremioCollection }
  TPremioCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TPremio;
    procedure SetItems(aIndex: integer; const Value: TPremio);
  public
    constructor Create; overload;
    function Add: TPremio; reintroduce;
    property Items[Index: integer]:TPremio read GetItems write SetItems; default;
  end;

  { TPremioEntregado }
  TPremioEntregado = class(TROComplexType)
  private
    fClienteID: Integer;
    fCliente: AnsiString;
    fPremio: AnsiString;
    fCantidad: Integer;
    fPuntos: Double;
    fSaldo: Double;
    fMensaje: AnsiString;
    fValido: Boolean;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property Cliente:AnsiString read fCliente write fCliente;
    property Premio:AnsiString read fPremio write fPremio;
    property Cantidad:Integer read fCantidad write fCantidad;
    property Puntos:Double read fPuntos write fPuntos;
    property Saldo:Double read fSaldo write fSaldo;
    property Mensaje:AnsiString read fMensaje write fMensaje;
    property Valido:Boolean read fValido write fValido;
  end;

  { TPremioEntregadoCollection }
  TPremioEntregadoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TPremioEntregado;
    procedure SetItems(aIndex: integer; const Value: TPremioEntregado);
  public
    constructor Create; overload;
    function Add: TPremioEntregado; reintroduce;
    property Items[Index: integer]:TPremioEntregado read GetItems write SetItems; default;
  end;

  { TDatosBomba }
  TDatosBomba = class(TROComplexType)
  private
    fBombaID: Integer;
    fMinimo: Integer;
    fMaximo: Integer;
    fExterno: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property BombaID:Integer read fBombaID write fBombaID;
    property Minimo:Integer read fMinimo write fMinimo;
    property Maximo:Integer read fMaximo write fMaximo;
    property Externo:Integer read fExterno write fExterno;
  end;

  { TDatosBombaCollection }
  TDatosBombaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosBomba;
    procedure SetItems(aIndex: integer; const Value: TDatosBomba);
  public
    constructor Create; overload;
    function Add: TDatosBomba; reintroduce;
    procedure SaveToArray(anArray: ADatosBomba);
    procedure LoadFromArray(anArray: ADatosBomba);
    property Items[Index: integer]:TDatosBomba read GetItems write SetItems; default;
  end;

  { TTurnoFecha }
  TTurnoFecha = class(TROComplexType)
  private
    fTurnoID: Integer;
    fFechaInicio: DateTime;
    fFechaFinal: DateTime;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property TurnoID:Integer read fTurnoID write fTurnoID;
    property FechaInicio:DateTime read fFechaInicio write fFechaInicio;
    property FechaFinal:DateTime read fFechaFinal write fFechaFinal;
  end;

  { TTurnoFechaCollection }
  TTurnoFechaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TTurnoFecha;
    procedure SetItems(aIndex: integer; const Value: TTurnoFecha);
  public
    constructor Create; overload;
    function Add: TTurnoFecha; reintroduce;
    property Items[Index: integer]:TTurnoFecha read GetItems write SetItems; default;
  end;

  { TCG_TipoCambio }
  TCG_TipoCambio = class(TROComplexType)
  private
    fTipoCambioID: Integer;
    fTipoCambio: Double;
    fTramaID: Integer;
    fImporteMX: Double;
    fImporteUSD: Double;
    fEfectivoUSD: Double;
    fCualVenta: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property TipoCambioID:Integer read fTipoCambioID write fTipoCambioID;
    property TipoCambio:Double read fTipoCambio write fTipoCambio;
    property TramaID:Integer read fTramaID write fTramaID;
    property ImporteMX:Double read fImporteMX write fImporteMX;
    property ImporteUSD:Double read fImporteUSD write fImporteUSD;
    property EfectivoUSD:Double read fEfectivoUSD write fEfectivoUSD;
    property CualVenta:Integer read fCualVenta write fCualVenta;
  end;

  { TCG_TipoCambioCollection }
  TCG_TipoCambioCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TCG_TipoCambio;
    procedure SetItems(aIndex: integer; const Value: TCG_TipoCambio);
  public
    constructor Create; overload;
    function Add: TCG_TipoCambio; reintroduce;
    property Items[Index: integer]:TCG_TipoCambio read GetItems write SetItems; default;
  end;

  { TCG_Respuesta }
  TCG_Respuesta = class(TROComplexType)
  private
    fAccepted: Boolean;
    fFolio: Integer;
    fMensaje: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Accepted:Boolean read fAccepted write fAccepted;
    property Folio:Integer read fFolio write fFolio;
    property Mensaje:AnsiString read fMensaje write fMensaje;
  end;

  { TCG_RespuestaCollection }
  TCG_RespuestaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TCG_Respuesta;
    procedure SetItems(aIndex: integer; const Value: TCG_Respuesta);
  public
    constructor Create; overload;
    function Add: TCG_Respuesta; reintroduce;
    property Items[Index: integer]:TCG_Respuesta read GetItems write SetItems; default;
  end;

  { aBoolean }
  aBoolean_Boolean = array of Boolean;
  aBoolean = class(TROArray)
  private
    fCount: Integer;
    fItems : aBoolean_Boolean;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): Boolean;
    procedure SetItems(aIndex: integer; const Value: Boolean);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add(const Value:Boolean): integer;
    function GetIndex(const aPropertyName : string;
                      const aPropertyValue : Variant;
                      StartFrom : integer = 0;
                      Options : TROSearchOptions = [soIgnoreCase]) : integer; override;

    property Count : integer read GetCount;
    property Items[Index: integer]:Boolean read GetItems write SetItems; default;
    property InnerArray: aBoolean_Boolean read fItems;
  end;

  { aMangueras }
  aMangueras_TMaguera = array of TMaguera;
  aMangueras = class(TROArray)
  private
    fCount: Integer;
    fItems : aMangueras_TMaguera;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TMaguera;
    procedure SetItems(aIndex: integer; const Value: TMaguera);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TMaguera; overload;
    function Add(const Value: TMaguera):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TMaguera read GetItems write SetItems; default;
    property InnerArray: aMangueras_TMaguera read fItems;
  end;

  { aContador }
  aContador_TContador = array of TContador;
  aContador = class(TROArray)
  private
    fCount: Integer;
    fItems : aContador_TContador;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TContador;
    procedure SetItems(aIndex: integer; const Value: TContador);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TContador; overload;
    function Add(const Value: TContador):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TContador read GetItems write SetItems; default;
    property InnerArray: aContador_TContador read fItems;
  end;

  { aLecturas }
  aLecturas_TLecturas = array of TLecturas;
  aLecturas = class(TROArray)
  private
    fCount: Integer;
    fItems : aLecturas_TLecturas;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TLecturas;
    procedure SetItems(aIndex: integer; const Value: TLecturas);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TLecturas; overload;
    function Add(const Value: TLecturas):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TLecturas read GetItems write SetItems; default;
    property InnerArray: aLecturas_TLecturas read fItems;
  end;

  { aGas }
  aGas_TGas = array of TGas;
  aGas = class(TROArray)
  private
    fCount: Integer;
    fItems : aGas_TGas;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TGas;
    procedure SetItems(aIndex: integer; const Value: TGas);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TGas; overload;
    function Add(const Value: TGas):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TGas read GetItems write SetItems; default;
    property InnerArray: aGas_TGas read fItems;
  end;

  { aBombas }
  aBombas_TBomba = array of TBomba;
  aBombas = class(TROArray)
  private
    fCount: Integer;
    fItems : aBombas_TBomba;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TBomba;
    procedure SetItems(aIndex: integer; const Value: TBomba);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TBomba; overload;
    function Add(const Value: TBomba):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TBomba read GetItems write SetItems; default;
    property InnerArray: aBombas_TBomba read fItems;
  end;

  { aDispositivos }
  aDispositivos_TDispositivos = array of TDispositivos;
  aDispositivos = class(TROArray)
  private
    fCount: Integer;
    fItems : aDispositivos_TDispositivos;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDispositivos;
    procedure SetItems(aIndex: integer; const Value: TDispositivos);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDispositivos; overload;
    function Add(const Value: TDispositivos):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDispositivos read GetItems write SetItems; default;
    property InnerArray: aDispositivos_TDispositivos read fItems;
  end;

  { aTicket }
  aTicket_AnsiString = array of AnsiString;
  aTicket = class(TROArray)
  private
    fCount: Integer;
    fItems : aTicket_AnsiString;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): AnsiString;
    procedure SetItems(aIndex: integer; const Value: AnsiString);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add(const Value:AnsiString): integer;
    function GetIndex(const aPropertyName : string;
                      const aPropertyValue : Variant;
                      StartFrom : integer = 0;
                      Options : TROSearchOptions = [soIgnoreCase]) : integer; override;

    property Count : integer read GetCount;
    property Items[Index: integer]:AnsiString read GetItems write SetItems; default;
    property InnerArray: aTicket_AnsiString read fItems;
  end;

  { aDatosCorte }
  aDatosCorte_TDatosCorte = array of TDatosCorte;
  aDatosCorte = class(TROArray)
  private
    fCount: Integer;
    fItems : aDatosCorte_TDatosCorte;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDatosCorte;
    procedure SetItems(aIndex: integer; const Value: TDatosCorte);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDatosCorte; overload;
    function Add(const Value: TDatosCorte):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDatosCorte read GetItems write SetItems; default;
    property InnerArray: aDatosCorte_TDatosCorte read fItems;
  end;

  { aTanques }
  aTanques_TTanque = array of TTanque;
  aTanques = class(TROArray)
  private
    fCount: Integer;
    fItems : aTanques_TTanque;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TTanque;
    procedure SetItems(aIndex: integer; const Value: TTanque);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TTanque; overload;
    function Add(const Value: TTanque):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TTanque read GetItems write SetItems; default;
    property InnerArray: aTanques_TTanque read fItems;
  end;

  { aRecepciones }
  aRecepciones_TRecepcion = array of TRecepcion;
  aRecepciones = class(TROArray)
  private
    fCount: Integer;
    fItems : aRecepciones_TRecepcion;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TRecepcion;
    procedure SetItems(aIndex: integer; const Value: TRecepcion);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TRecepcion; overload;
    function Add(const Value: TRecepcion):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TRecepcion read GetItems write SetItems; default;
    property InnerArray: aRecepciones_TRecepcion read fItems;
  end;

  { aTurnoBomba }
  aTurnoBomba_Integer = array of Integer;
  aTurnoBomba = class(TROArray)
  private
    fCount: Integer;
    fItems : aTurnoBomba_Integer;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): Integer;
    procedure SetItems(aIndex: integer; const Value: Integer);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add(const Value:Integer): integer;
    function GetIndex(const aPropertyName : string;
                      const aPropertyValue : Variant;
                      StartFrom : integer = 0;
                      Options : TROSearchOptions = [soIgnoreCase]) : integer; override;

    property Count : integer read GetCount;
    property Items[Index: integer]:Integer read GetItems write SetItems; default;
    property InnerArray: aTurnoBomba_Integer read fItems;
  end;

  { aComandos }
  aComandos_TComando = array of TComando;
  aComandos = class(TROArray)
  private
    fCount: Integer;
    fItems : aComandos_TComando;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TComando;
    procedure SetItems(aIndex: integer; const Value: TComando);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TComando; overload;
    function Add(const Value: TComando):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TComando read GetItems write SetItems; default;
    property InnerArray: aComandos_TComando read fItems;
  end;

  { ArrayOpcion }
  ArrayOpcion_TOpcion = array of TOpcion;
  ArrayOpcion = class(TROArray)
  private
    fCount: Integer;
    fItems : ArrayOpcion_TOpcion;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TOpcion;
    procedure SetItems(aIndex: integer; const Value: TOpcion);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TOpcion; overload;
    function Add(const Value: TOpcion):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TOpcion read GetItems write SetItems; default;
    property InnerArray: ArrayOpcion_TOpcion read fItems;
  end;

  { aLineaTicket }
  aLineaTicket_TLineaTicket = array of TLineaTicket;
  aLineaTicket = class(TROArray)
  private
    fCount: Integer;
    fItems : aLineaTicket_TLineaTicket;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TLineaTicket;
    procedure SetItems(aIndex: integer; const Value: TLineaTicket);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TLineaTicket; overload;
    function Add(const Value: TLineaTicket):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TLineaTicket read GetItems write SetItems; default;
    property InnerArray: aLineaTicket_TLineaTicket read fItems;
  end;

  { aNodos }
  aNodos_TNodo = array of TNodo;
  aNodos = class(TROArray)
  private
    fCount: Integer;
    fItems : aNodos_TNodo;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TNodo;
    procedure SetItems(aIndex: integer; const Value: TNodo);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TNodo; overload;
    function Add(const Value: TNodo):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TNodo read GetItems write SetItems; default;
    property InnerArray: aNodos_TNodo read fItems;
  end;

  { aCorte }
  aCorte_TCorte = array of TCorte;
  aCorte = class(TROArray)
  private
    fCount: Integer;
    fItems : aCorte_TCorte;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TCorte;
    procedure SetItems(aIndex: integer; const Value: TCorte);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TCorte; overload;
    function Add(const Value: TCorte):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TCorte read GetItems write SetItems; default;
    property InnerArray: aCorte_TCorte read fItems;
  end;

  { aConsumoGas }
  aConsumoGas_TConsumoGas = array of TConsumoGas;
  aConsumoGas = class(TROArray)
  private
    fCount: Integer;
    fItems : aConsumoGas_TConsumoGas;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TConsumoGas;
    procedure SetItems(aIndex: integer; const Value: TConsumoGas);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TConsumoGas; overload;
    function Add(const Value: TConsumoGas):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TConsumoGas read GetItems write SetItems; default;
    property InnerArray: aConsumoGas_TConsumoGas read fItems;
  end;

  { aAsignaTarjetaCupon }
  aAsignaTarjetaCupon_TAsignaTarjetaCupon = array of TAsignaTarjetaCupon;
  aAsignaTarjetaCupon = class(TROArray)
  private
    fCount: Integer;
    fItems : aAsignaTarjetaCupon_TAsignaTarjetaCupon;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TAsignaTarjetaCupon;
    procedure SetItems(aIndex: integer; const Value: TAsignaTarjetaCupon);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TAsignaTarjetaCupon; overload;
    function Add(const Value: TAsignaTarjetaCupon):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TAsignaTarjetaCupon read GetItems write SetItems; default;
    property InnerArray: aAsignaTarjetaCupon_TAsignaTarjetaCupon read fItems;
  end;

  { aRegistroVenta }
  aRegistroVenta_TRegistroVenta = array of TRegistroVenta;
  aRegistroVenta = class(TROArray)
  private
    fCount: Integer;
    fItems : aRegistroVenta_TRegistroVenta;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TRegistroVenta;
    procedure SetItems(aIndex: integer; const Value: TRegistroVenta);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TRegistroVenta; overload;
    function Add(const Value: TRegistroVenta):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TRegistroVenta read GetItems write SetItems; default;
    property InnerArray: aRegistroVenta_TRegistroVenta read fItems;
  end;

  { aCambioPrecios }
  aCambioPrecios_TCambioPrecios = array of TCambioPrecios;
  aCambioPrecios = class(TROArray)
  private
    fCount: Integer;
    fItems : aCambioPrecios_TCambioPrecios;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TCambioPrecios;
    procedure SetItems(aIndex: integer; const Value: TCambioPrecios);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TCambioPrecios; overload;
    function Add(const Value: TCambioPrecios):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TCambioPrecios read GetItems write SetItems; default;
    property InnerArray: aCambioPrecios_TCambioPrecios read fItems;
  end;

  { AOtros }
  AOtros_TOtros = array of TOtros;
  AOtros = class(TROArray)
  private
    fCount: Integer;
    fItems : AOtros_TOtros;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TOtros;
    procedure SetItems(aIndex: integer; const Value: TOtros);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TOtros; overload;
    function Add(const Value: TOtros):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TOtros read GetItems write SetItems; default;
    property InnerArray: AOtros_TOtros read fItems;
  end;

  { AAutorizaPendiente }
  AAutorizaPendiente_TAutorizaPendiente = array of TAutorizaPendiente;
  AAutorizaPendiente = class(TROArray)
  private
    fCount: Integer;
    fItems : AAutorizaPendiente_TAutorizaPendiente;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TAutorizaPendiente;
    procedure SetItems(aIndex: integer; const Value: TAutorizaPendiente);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TAutorizaPendiente; overload;
    function Add(const Value: TAutorizaPendiente):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TAutorizaPendiente read GetItems write SetItems; default;
    property InnerArray: AAutorizaPendiente_TAutorizaPendiente read fItems;
  end;

  { aCorteOtros }
  aCorteOtros_TCorteOtros = array of TCorteOtros;
  aCorteOtros = class(TROArray)
  private
    fCount: Integer;
    fItems : aCorteOtros_TCorteOtros;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TCorteOtros;
    procedure SetItems(aIndex: integer; const Value: TCorteOtros);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TCorteOtros; overload;
    function Add(const Value: TCorteOtros):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TCorteOtros read GetItems write SetItems; default;
    property InnerArray: aCorteOtros_TCorteOtros read fItems;
  end;

  { ADatosBomba }
  ADatosBomba_TDatosBomba = array of TDatosBomba;
  ADatosBomba = class(TROArray)
  private
    fCount: Integer;
    fItems : ADatosBomba_TDatosBomba;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDatosBomba;
    procedure SetItems(aIndex: integer; const Value: TDatosBomba);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDatosBomba; overload;
    function Add(const Value: TDatosBomba):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDatosBomba read GetItems write SetItems; default;
    property InnerArray: ADatosBomba_TDatosBomba read fItems;
  end;

  { aArray }
  aArray_AnsiString = array of AnsiString;
  aArray = class(TROArray)
  private
    fCount: Integer;
    fItems : aArray_AnsiString;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): AnsiString;
    procedure SetItems(aIndex: integer; const Value: AnsiString);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add(const Value:AnsiString): integer;
    function GetIndex(const aPropertyName : string;
                      const aPropertyValue : Variant;
                      StartFrom : integer = 0;
                      Options : TROSearchOptions = [soIgnoreCase]) : integer; override;

    property Count : integer read GetCount;
    property Items[Index: integer]:AnsiString read GetItems write SetItems; default;
    property InnerArray: aArray_AnsiString read fItems;
  end;

  { IServiceCistemGas }
  IServiceCistemGas = interface(IDataAbstractService)
    ['{B5FF3F7A-B952-40B9-9AD5-B57BF17A99C2}']
    function AbreDataSetReportes(const SQL: AnsiString; const Parametros: TParametros): Binary;
    procedure AsignaBombas;
    procedure AsignaDispositivo;
    function AsignaFlujo(const Bombas: aBombas): Boolean;
    procedure AsignaProductos;
    procedure AsignaTanques;
    procedure AutoCambioPrecio;
    function Bancaria(const SecuenciaVenta: Integer; const Supervisor: AnsiString; const Track1: AnsiString; const Track2: AnsiString; 
                      const Terminal: AnsiString): TAutorizaBancaria;
    function BuscaOtrosProductos(const Codigo: AnsiString): TOtros;
    function BuscaReporte(const Nombre: AnsiString; const TipoTemplate: Integer): TReporte;
    procedure CalculaMermas(const Ini: DateTime; const Fin: DateTime);
    procedure CambiaEstadoLote(const ArchivoLoteID: Integer; const Status: Integer; const Resultado: AnsiString);
    procedure CambiaNIP(const Referencia: AnsiString; const NIP: Integer);
    procedure CambiaPrecios;
    procedure CambiaTipoVenta(const Secuencia: Integer; const Tipo: AnsiString);
    function CambiaVentaConsumoManual(const Secuencia: Integer; const Odometro: Integer; const Referencia: AnsiString): AnsiString;
    procedure CancelaGrupo(const BombaID: Integer; const Grupo: Integer);
    function CashBack(const BombaID: Integer; const Terminal: AnsiString; const Track1: AnsiString; const Track2: AnsiString; 
                      const LLave: AnsiString; const Importe: Double): TAutorizaBancaria;
    procedure CierraTurno(const BombaID: Integer; const TurnoID: Integer; const FinLecturas: aLecturas);
    procedure ContinuarDispensario(const Bomba: Integer);
    procedure CortaBomba(const BombaID: Integer);
    procedure CrearLotesArchivos;
    procedure CreaTurno(const BombaID: Integer; const TurnoID: Integer; const InicioLecturas: aLecturas);
    function Datos: TGlobal;
    function DatosBomba(const BombaID: Integer): TBomba;
    function DatosVerifone(const AVehiculoID: Integer; const AReferencia: AnsiString): TDatosVerifone;
    procedure DetenerDispensario(const Bomba: Integer);
    procedure EntradaBitacora(const Descripcion: AnsiString; const Tipo: eTipoBitacora; const Alerta: Boolean);
    procedure EnviaDatosTanques(const AIndex: Integer; const ATanque: TTanque);
    procedure EstadoDispensario(const Dispensario: Integer; const Estado: AnsiString);
    procedure EstadoTanque(const Tanque: Integer; const Estado: AnsiString; const AIndex: Integer);
    function ExpressManual(const ClienteID: Integer; const GasolineroID: Integer): TDatosExpress;
    function FacturaExpress(const Gasolinero: Integer; const Cliente: Integer; const Serie: AnsiString; const MiTicket: Integer; 
                            const Host: AnsiString): AnsiString;
    function Fecha: DateTime;
    function FechasTurno(const FechaIni: DateTime; const FechaFin: DateTime): TFechas;
    function FechaUltimoCorte: DateTime;
    procedure FijarProtecciones(const Protecciones: TProtecciones);
    procedure Flujo(const Tipo: Integer);
    function Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function FormatoTicket: aTicket;
    procedure GeneraTurnoTanque(const TurnoID: Integer);
    function GeneraVolumetrico: Integer;
    procedure GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
    function GuardaCreditoOtros(const BombaID: Integer; const Tarjeta: AnsiString; const LLave: AnsiString; const Productos: AOtros; 
                                const NIP: AnsiString; const Odometro: Integer): TDatosVentaOtros;
    function GuardaOtros(const BombaID: Integer; const FormaPagoID: Integer; const Tarjeta: AnsiString; const LLave: AnsiString; 
                         const Productos: AOtros): AOtros;
    function GuardaOtros2(const BombaID: Integer; const Tarjeta: AnsiString; const LLave: AnsiString; const FormaPagoID: Integer; 
                          const NIP: AnsiString; const Odometro: AnsiString; const Productos: AOtros; const Track1: AnsiString; 
                          const Track2: AnsiString; const Terminal: AnsiString): TAutorizaBancaria;
    procedure GuardarLineasTicket(const Lineas: aLineaTicket);
    function GuardaVenta(const nBomba: Integer): Integer;
    procedure IncrementarImpreso(const Secuencia: Integer);
    procedure IncrementarImpresoOtros(const Secuencia: Integer);
    function LecturasBomba(const BombaID: Integer): aLecturas;
    function LeerLineasTicket: aLineaTicket;
    function Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfo;
    procedure NuevosPreciosProgramados(const Fecha: DateTime; const Activo: Boolean; const Cambios: aCambioPrecios);
    function NumeroCopia(const TramaID: Integer): Integer;
    function PrefijaConsumoExpress(const ClienteID: Integer; const BombaID: Integer; const Referencia: AnsiString; const Terminal: AnsiString; 
                                   const Comando: AnsiString): AnsiString;
    function PrefijaCupon(const nBomba: Integer; const Barras: AnsiString; const Terminal: AnsiString; const Grupo: Integer; const ClienteID: Integer): TCupon;
    function PrefijaGrupo(const Bomba: Integer; const Grupo: Integer; const Terminal: AnsiString; const Cupon: TCupon): AnsiString;
    function PrefijaTarjeta(const nBomba: Integer; const Tarjeta: AnsiString; const NIP: AnsiString; const Odometro: AnsiString; 
                            const Terminal: AnsiString; const PresetMN: Double; const PresetLT: Double): AnsiString;
    procedure PresetImporte(const Bomba: Integer; const Importe: Double; const Producto: Integer);
    procedure PresetTanqueLLeno(const Bomba: Integer);
    procedure PresetVolumen(const Bomba: Integer; const Volumen: Double; const Producto: Integer);
    function ProcesaDia(const Fecha: DateTime; const Magna: Double; const Premium: Double; const Diesel: Double; const Directo: Boolean): Boolean;
    procedure Procesar(const ArchivoID: Integer; const LoteID: Integer);
    procedure PropiedadesBombas(const nBomba: Integer; const Modo: eModoOperacion; const Autoimprimir: Boolean; const Todas: Boolean);
    function Script(const ScriptID: Integer): AnsiString;
    function TarjetaManual(const VehiculoID: Integer): TTarjetaManual;
    function Ticket(const Secuencia: Integer; const CopiaMaxima: Integer): aTicket;
    function TicketError(const Mensaje: AnsiString; const Ref1: AnsiString; const Ref2: AnsiString; const Terminal: AnsiString): aTicket;
    function TicketOtros(const Secuencia: Integer; const Productos: AOtros; const DatosVenta: TDatosVentaOtros; const CopiaMaxima: Integer): aTicket;
    function TicketTanques: aTicket;
    function TiempoAire(const BombaID: Integer; const Telefono: AnsiString; const Llave: AnsiString; const ProveedorID: Integer; 
                        const Importe: Double; const Track1: AnsiString; const Track2: AnsiString; const FormaPagoID: Integer; 
                        const Terminal: AnsiString): TAutorizaBancaria;
    function TotalBombas: Integer;
    function UltimaExistencia(const ArchivoID: Integer; const Tanque: Integer): Double;
    function UltimoTurnoBomba: aTurnoBomba;
    procedure V2AgregaREC(const StringRecepcion: AnsiString);
    procedure ValidaSecuencias(const TurnoID: Integer);
    function ValidaTarjetaLLave(const Tarjeta: AnsiString; const Sistema: AnsiString; const Referencia: AnsiString; const Mensaje: AnsiString): TAutorizaLLave;
    function DatosEntregaPremio(const Referencia: AnsiString): TDatosEntregaPremio;
    function Premio(const PremioID: Integer): TPremio;
    function EntregaPremio(const ClienteID: Integer; const PremioID: Integer; const Cantidad: Integer): TPremioEntregado;
    function ObtenDatosBomba: ADatosBomba;
    function GuardaDatosBomba(const Datos: ADatosBomba): Boolean;
    function NuevosPreciosProgramados2(const Fecha: DateTime; const Activo: Boolean; const Cambios: aCambioPrecios; const Sistema: Integer; 
                                       const UsuarioID: Integer): Boolean;
    function CorresponsalCambiario(const UsuarioID: Integer; const TipoCambio: TCG_TipoCambio): TCG_Respuesta;
  end;

  { CoServiceCistemGas }
  CoServiceCistemGas = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceCistemGas;
  end;

  { TServiceCistemGas_Proxy }
  TServiceCistemGas_Proxy = class(TDataAbstractService_Proxy, IServiceCistemGas)
  protected
    function __GetInterfaceName:string; override;

    function AbreDataSetReportes(const SQL: AnsiString; const Parametros: TParametros): Binary;
    procedure AsignaBombas;
    procedure AsignaDispositivo;
    function AsignaFlujo(const Bombas: aBombas): Boolean;
    procedure AsignaProductos;
    procedure AsignaTanques;
    procedure AutoCambioPrecio;
    function Bancaria(const SecuenciaVenta: Integer; const Supervisor: AnsiString; const Track1: AnsiString; const Track2: AnsiString; 
                      const Terminal: AnsiString): TAutorizaBancaria;
    function BuscaOtrosProductos(const Codigo: AnsiString): TOtros;
    function BuscaReporte(const Nombre: AnsiString; const TipoTemplate: Integer): TReporte;
    procedure CalculaMermas(const Ini: DateTime; const Fin: DateTime);
    procedure CambiaEstadoLote(const ArchivoLoteID: Integer; const Status: Integer; const Resultado: AnsiString);
    procedure CambiaNIP(const Referencia: AnsiString; const NIP: Integer);
    procedure CambiaPrecios;
    procedure CambiaTipoVenta(const Secuencia: Integer; const Tipo: AnsiString);
    function CambiaVentaConsumoManual(const Secuencia: Integer; const Odometro: Integer; const Referencia: AnsiString): AnsiString;
    procedure CancelaGrupo(const BombaID: Integer; const Grupo: Integer);
    function CashBack(const BombaID: Integer; const Terminal: AnsiString; const Track1: AnsiString; const Track2: AnsiString; 
                      const LLave: AnsiString; const Importe: Double): TAutorizaBancaria;
    procedure CierraTurno(const BombaID: Integer; const TurnoID: Integer; const FinLecturas: aLecturas);
    procedure ContinuarDispensario(const Bomba: Integer);
    procedure CortaBomba(const BombaID: Integer);
    procedure CrearLotesArchivos;
    procedure CreaTurno(const BombaID: Integer; const TurnoID: Integer; const InicioLecturas: aLecturas);
    function Datos: TGlobal;
    function DatosBomba(const BombaID: Integer): TBomba;
    function DatosVerifone(const AVehiculoID: Integer; const AReferencia: AnsiString): TDatosVerifone;
    procedure DetenerDispensario(const Bomba: Integer);
    procedure EntradaBitacora(const Descripcion: AnsiString; const Tipo: eTipoBitacora; const Alerta: Boolean);
    procedure EnviaDatosTanques(const AIndex: Integer; const ATanque: TTanque);
    procedure EstadoDispensario(const Dispensario: Integer; const Estado: AnsiString);
    procedure EstadoTanque(const Tanque: Integer; const Estado: AnsiString; const AIndex: Integer);
    function ExpressManual(const ClienteID: Integer; const GasolineroID: Integer): TDatosExpress;
    function FacturaExpress(const Gasolinero: Integer; const Cliente: Integer; const Serie: AnsiString; const MiTicket: Integer; 
                            const Host: AnsiString): AnsiString;
    function Fecha: DateTime;
    function FechasTurno(const FechaIni: DateTime; const FechaFin: DateTime): TFechas;
    function FechaUltimoCorte: DateTime;
    procedure FijarProtecciones(const Protecciones: TProtecciones);
    procedure Flujo(const Tipo: Integer);
    function Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function FormatoTicket: aTicket;
    procedure GeneraTurnoTanque(const TurnoID: Integer);
    function GeneraVolumetrico: Integer;
    procedure GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
    function GuardaCreditoOtros(const BombaID: Integer; const Tarjeta: AnsiString; const LLave: AnsiString; const Productos: AOtros; 
                                const NIP: AnsiString; const Odometro: Integer): TDatosVentaOtros;
    function GuardaOtros(const BombaID: Integer; const FormaPagoID: Integer; const Tarjeta: AnsiString; const LLave: AnsiString; 
                         const Productos: AOtros): AOtros;
    function GuardaOtros2(const BombaID: Integer; const Tarjeta: AnsiString; const LLave: AnsiString; const FormaPagoID: Integer; 
                          const NIP: AnsiString; const Odometro: AnsiString; const Productos: AOtros; const Track1: AnsiString; 
                          const Track2: AnsiString; const Terminal: AnsiString): TAutorizaBancaria;
    procedure GuardarLineasTicket(const Lineas: aLineaTicket);
    function GuardaVenta(const nBomba: Integer): Integer;
    procedure IncrementarImpreso(const Secuencia: Integer);
    procedure IncrementarImpresoOtros(const Secuencia: Integer);
    function LecturasBomba(const BombaID: Integer): aLecturas;
    function LeerLineasTicket: aLineaTicket;
    function Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfo;
    procedure NuevosPreciosProgramados(const Fecha: DateTime; const Activo: Boolean; const Cambios: aCambioPrecios);
    function NumeroCopia(const TramaID: Integer): Integer;
    function PrefijaConsumoExpress(const ClienteID: Integer; const BombaID: Integer; const Referencia: AnsiString; const Terminal: AnsiString; 
                                   const Comando: AnsiString): AnsiString;
    function PrefijaCupon(const nBomba: Integer; const Barras: AnsiString; const Terminal: AnsiString; const Grupo: Integer; const ClienteID: Integer): TCupon;
    function PrefijaGrupo(const Bomba: Integer; const Grupo: Integer; const Terminal: AnsiString; const Cupon: TCupon): AnsiString;
    function PrefijaTarjeta(const nBomba: Integer; const Tarjeta: AnsiString; const NIP: AnsiString; const Odometro: AnsiString; 
                            const Terminal: AnsiString; const PresetMN: Double; const PresetLT: Double): AnsiString;
    procedure PresetImporte(const Bomba: Integer; const Importe: Double; const Producto: Integer);
    procedure PresetTanqueLLeno(const Bomba: Integer);
    procedure PresetVolumen(const Bomba: Integer; const Volumen: Double; const Producto: Integer);
    function ProcesaDia(const Fecha: DateTime; const Magna: Double; const Premium: Double; const Diesel: Double; const Directo: Boolean): Boolean;
    procedure Procesar(const ArchivoID: Integer; const LoteID: Integer);
    procedure PropiedadesBombas(const nBomba: Integer; const Modo: eModoOperacion; const Autoimprimir: Boolean; const Todas: Boolean);
    function Script(const ScriptID: Integer): AnsiString;
    function TarjetaManual(const VehiculoID: Integer): TTarjetaManual;
    function Ticket(const Secuencia: Integer; const CopiaMaxima: Integer): aTicket;
    function TicketError(const Mensaje: AnsiString; const Ref1: AnsiString; const Ref2: AnsiString; const Terminal: AnsiString): aTicket;
    function TicketOtros(const Secuencia: Integer; const Productos: AOtros; const DatosVenta: TDatosVentaOtros; const CopiaMaxima: Integer): aTicket;
    function TicketTanques: aTicket;
    function TiempoAire(const BombaID: Integer; const Telefono: AnsiString; const Llave: AnsiString; const ProveedorID: Integer; 
                        const Importe: Double; const Track1: AnsiString; const Track2: AnsiString; const FormaPagoID: Integer; 
                        const Terminal: AnsiString): TAutorizaBancaria;
    function TotalBombas: Integer;
    function UltimaExistencia(const ArchivoID: Integer; const Tanque: Integer): Double;
    function UltimoTurnoBomba: aTurnoBomba;
    procedure V2AgregaREC(const StringRecepcion: AnsiString);
    procedure ValidaSecuencias(const TurnoID: Integer);
    function ValidaTarjetaLLave(const Tarjeta: AnsiString; const Sistema: AnsiString; const Referencia: AnsiString; const Mensaje: AnsiString): TAutorizaLLave;
    function DatosEntregaPremio(const Referencia: AnsiString): TDatosEntregaPremio;
    function Premio(const PremioID: Integer): TPremio;
    function EntregaPremio(const ClienteID: Integer; const PremioID: Integer; const Cantidad: Integer): TPremioEntregado;
    function ObtenDatosBomba: ADatosBomba;
    function GuardaDatosBomba(const Datos: ADatosBomba): Boolean;
    function NuevosPreciosProgramados2(const Fecha: DateTime; const Activo: Boolean; const Cambios: aCambioPrecios; const Sistema: Integer; 
                                       const UsuarioID: Integer): Boolean;
    function CorresponsalCambiario(const UsuarioID: Integer; const TipoCambio: TCG_TipoCambio): TCG_Respuesta;
  end;

  { IServiceProxy }
  IServiceProxy = interface(IDataAbstractService)
    ['{3371DBB8-4B7A-49FF-AC01-667CB34C3383}']
    function Ticket(const SecuenciaID: Integer): TDatosTicket;
    function BuscaTicket(const TicketID: Integer): TTicket;
    function CorteBomba(const BombaID: Integer): Integer;
    function DatosCorteBomba(const BombaID: Integer; const TurnoID: Integer): aDatosCorte;
    function SecuenciaBomba(const BombaID: Integer): Integer;
    function TotalesBomba(const TurnoID: Integer): TValoresCorte;
    function DatosTanque: aTanques;
    procedure ValidaSecuencias(const TurnoID: Integer);
    procedure AsignaTarjetaCupon(const Tramas: AAsignaTarjetaCupon);
    function MermaTurno(const TurnoID: Integer): Double;
    function MermaRango(const TurnoINI: Integer; const TurnoFIN: Integer): Binary;
    procedure LeerTarjetasLLave;
    function ConsumosPendientesAutorizar: AAutorizaPendiente;
    procedure AutorizaConsumo(const SecuenciaVenta: Integer; const Autoriza: Boolean; const Tarjeta: AnsiString);
    function ConvierteACredito(const TicketID: Integer; const VehiculoID: Integer): AnsiString;
    procedure ConvierteACreditoSagarpa(const Datos: TDatosSagarpa);
    function InsertaOtros(const Datos: TInsertaOtros): AnsiString;
    function QuemarCupon(const Datos: TInsertaOtros): AnsiString;
    function CuponesExternos(const Datos: TInsertaOtros): AnsiString;
    function VoucherOtrosProductos(const Datos: TInsertaOtros): AnsiString;
    function TurnoActual: Integer;
    function MermaCalculada(const TurnoID: Integer): Double;
    function TurnoFecha(const TurnoID: Integer): TTurnoFecha;
    function EliminaMermaTurno(const TurnoID: Integer): Boolean;
  end;

  { CoServiceProxy }
  CoServiceProxy = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceProxy;
  end;

  { TServiceProxy_Proxy }
  TServiceProxy_Proxy = class(TDataAbstractService_Proxy, IServiceProxy)
  protected
    function __GetInterfaceName:string; override;

    function Ticket(const SecuenciaID: Integer): TDatosTicket;
    function BuscaTicket(const TicketID: Integer): TTicket;
    function CorteBomba(const BombaID: Integer): Integer;
    function DatosCorteBomba(const BombaID: Integer; const TurnoID: Integer): aDatosCorte;
    function SecuenciaBomba(const BombaID: Integer): Integer;
    function TotalesBomba(const TurnoID: Integer): TValoresCorte;
    function DatosTanque: aTanques;
    procedure ValidaSecuencias(const TurnoID: Integer);
    procedure AsignaTarjetaCupon(const Tramas: AAsignaTarjetaCupon);
    function MermaTurno(const TurnoID: Integer): Double;
    function MermaRango(const TurnoINI: Integer; const TurnoFIN: Integer): Binary;
    procedure LeerTarjetasLLave;
    function ConsumosPendientesAutorizar: AAutorizaPendiente;
    procedure AutorizaConsumo(const SecuenciaVenta: Integer; const Autoriza: Boolean; const Tarjeta: AnsiString);
    function ConvierteACredito(const TicketID: Integer; const VehiculoID: Integer): AnsiString;
    procedure ConvierteACreditoSagarpa(const Datos: TDatosSagarpa);
    function InsertaOtros(const Datos: TInsertaOtros): AnsiString;
    function QuemarCupon(const Datos: TInsertaOtros): AnsiString;
    function CuponesExternos(const Datos: TInsertaOtros): AnsiString;
    function VoucherOtrosProductos(const Datos: TInsertaOtros): AnsiString;
    function TurnoActual: Integer;
    function MermaCalculada(const TurnoID: Integer): Double;
    function TurnoFecha(const TurnoID: Integer): TTurnoFecha;
    function EliminaMermaTurno(const TurnoID: Integer): Boolean;
  end;

implementation

uses
  {vcl:} SysUtils,
  {RemObjects:} uROEventRepository, uROSerializer, uRORes;

{ aBoolean }

procedure aBoolean.Assign(iSource: TPersistent);
var lSource:aBoolean;
    i:integer;
begin
  if (iSource is aBoolean) then begin
    lSource := aBoolean(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      Items[i] := lSource.Items[i];
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aBoolean.GetItemType: PTypeInfo;
begin
  result := TypeInfo(Boolean);
end;

class function aBoolean.GetItemSize: integer;
begin
  result := SizeOf(Boolean);
end;

function aBoolean.GetItems(aIndex: integer): Boolean;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aBoolean.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := @fItems[aIndex];
end;

procedure aBoolean.Clear;
begin
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aBoolean.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aBoolean.SetItems(aIndex: integer; const Value: Boolean);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  fItems[aIndex] := Value;
end;

procedure aBoolean.Resize(ElementCount: integer);
begin
  if fCount = ElementCount then Exit;
  SetLength(fItems, ElementCount);
  FCount := ElementCount;
end;

function aBoolean.GetCount: integer;
begin
  result := FCount;
end;

procedure aBoolean.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aBoolean.Add(const Value: Boolean): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

function aBoolean.GetIndex(const aPropertyName: string;
  const aPropertyValue: Variant; StartFrom: integer;
  Options: TROSearchOptions): integer;
begin
  result := -1;
end;

procedure aBoolean.ReadComplex(ASerializer: TObject);
var
  lval: Boolean;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadEnumerated(GetArrayElementName(GetItemType, GetItemRef(i)),TypeInfo(boolean), lval, i);
    Items[i] := lval;
  end;
end;

procedure aBoolean.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteEnumerated(GetArrayElementName(GetItemType, GetItemRef(i)),TypeInfo(boolean), fItems[i], i);
end;

{ aMangueras }

procedure aMangueras.Assign(iSource: TPersistent);
var lSource:aMangueras;
    i:integer;
begin
  if (iSource is aMangueras) then begin
    lSource := aMangueras(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aMangueras.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TMaguera);
end;

class function aMangueras.GetItemClass: TClass;
begin
  result := TMaguera;
end;

class function aMangueras.GetItemSize: integer;
begin
  result := SizeOf(TMaguera);
end;

function aMangueras.GetItems(aIndex: integer): TMaguera;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aMangueras.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aMangueras.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aMangueras.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aMangueras.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aMangueras.SetItems(aIndex: integer; const Value: TMaguera);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aMangueras.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TMaguera.Create;
  FCount := ElementCount;
end;

function aMangueras.GetCount: integer;
begin
  result := FCount;
end;

procedure aMangueras.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aMangueras.Add: TMaguera;
begin
  result := TMaguera.Create;
  Add(Result);
end;

function aMangueras.Add(const Value:TMaguera): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aMangueras.ReadComplex(ASerializer: TObject);
var
  lval: TMaguera;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TMaguera, lval, i);
    Items[i] := lval;
  end;
end;

procedure aMangueras.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TMaguera, i);
end;

{ aContador }

procedure aContador.Assign(iSource: TPersistent);
var lSource:aContador;
    i:integer;
begin
  if (iSource is aContador) then begin
    lSource := aContador(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aContador.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TContador);
end;

class function aContador.GetItemClass: TClass;
begin
  result := TContador;
end;

class function aContador.GetItemSize: integer;
begin
  result := SizeOf(TContador);
end;

function aContador.GetItems(aIndex: integer): TContador;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aContador.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aContador.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aContador.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aContador.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aContador.SetItems(aIndex: integer; const Value: TContador);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aContador.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TContador.Create;
  FCount := ElementCount;
end;

function aContador.GetCount: integer;
begin
  result := FCount;
end;

procedure aContador.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aContador.Add: TContador;
begin
  result := TContador.Create;
  Add(Result);
end;

function aContador.Add(const Value:TContador): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aContador.ReadComplex(ASerializer: TObject);
var
  lval: TContador;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TContador, lval, i);
    Items[i] := lval;
  end;
end;

procedure aContador.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TContador, i);
end;

{ aLecturas }

procedure aLecturas.Assign(iSource: TPersistent);
var lSource:aLecturas;
    i:integer;
begin
  if (iSource is aLecturas) then begin
    lSource := aLecturas(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aLecturas.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TLecturas);
end;

class function aLecturas.GetItemClass: TClass;
begin
  result := TLecturas;
end;

class function aLecturas.GetItemSize: integer;
begin
  result := SizeOf(TLecturas);
end;

function aLecturas.GetItems(aIndex: integer): TLecturas;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aLecturas.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aLecturas.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aLecturas.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aLecturas.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aLecturas.SetItems(aIndex: integer; const Value: TLecturas);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aLecturas.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TLecturas.Create;
  FCount := ElementCount;
end;

function aLecturas.GetCount: integer;
begin
  result := FCount;
end;

procedure aLecturas.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aLecturas.Add: TLecturas;
begin
  result := TLecturas.Create;
  Add(Result);
end;

function aLecturas.Add(const Value:TLecturas): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aLecturas.ReadComplex(ASerializer: TObject);
var
  lval: TLecturas;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TLecturas, lval, i);
    Items[i] := lval;
  end;
end;

procedure aLecturas.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TLecturas, i);
end;

{ aGas }

procedure aGas.Assign(iSource: TPersistent);
var lSource:aGas;
    i:integer;
begin
  if (iSource is aGas) then begin
    lSource := aGas(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aGas.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TGas);
end;

class function aGas.GetItemClass: TClass;
begin
  result := TGas;
end;

class function aGas.GetItemSize: integer;
begin
  result := SizeOf(TGas);
end;

function aGas.GetItems(aIndex: integer): TGas;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aGas.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aGas.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aGas.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aGas.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aGas.SetItems(aIndex: integer; const Value: TGas);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aGas.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TGas.Create;
  FCount := ElementCount;
end;

function aGas.GetCount: integer;
begin
  result := FCount;
end;

procedure aGas.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aGas.Add: TGas;
begin
  result := TGas.Create;
  Add(Result);
end;

function aGas.Add(const Value:TGas): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aGas.ReadComplex(ASerializer: TObject);
var
  lval: TGas;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TGas, lval, i);
    Items[i] := lval;
  end;
end;

procedure aGas.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TGas, i);
end;

{ aBombas }

procedure aBombas.Assign(iSource: TPersistent);
var lSource:aBombas;
    i:integer;
begin
  if (iSource is aBombas) then begin
    lSource := aBombas(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aBombas.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TBomba);
end;

class function aBombas.GetItemClass: TClass;
begin
  result := TBomba;
end;

class function aBombas.GetItemSize: integer;
begin
  result := SizeOf(TBomba);
end;

function aBombas.GetItems(aIndex: integer): TBomba;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aBombas.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aBombas.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aBombas.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aBombas.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aBombas.SetItems(aIndex: integer; const Value: TBomba);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aBombas.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TBomba.Create;
  FCount := ElementCount;
end;

function aBombas.GetCount: integer;
begin
  result := FCount;
end;

procedure aBombas.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aBombas.Add: TBomba;
begin
  result := TBomba.Create;
  Add(Result);
end;

function aBombas.Add(const Value:TBomba): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aBombas.ReadComplex(ASerializer: TObject);
var
  lval: TBomba;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TBomba, lval, i);
    Items[i] := lval;
  end;
end;

procedure aBombas.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TBomba, i);
end;

{ aDispositivos }

procedure aDispositivos.Assign(iSource: TPersistent);
var lSource:aDispositivos;
    i:integer;
begin
  if (iSource is aDispositivos) then begin
    lSource := aDispositivos(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aDispositivos.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDispositivos);
end;

class function aDispositivos.GetItemClass: TClass;
begin
  result := TDispositivos;
end;

class function aDispositivos.GetItemSize: integer;
begin
  result := SizeOf(TDispositivos);
end;

function aDispositivos.GetItems(aIndex: integer): TDispositivos;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aDispositivos.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aDispositivos.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aDispositivos.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aDispositivos.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aDispositivos.SetItems(aIndex: integer; const Value: TDispositivos);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aDispositivos.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDispositivos.Create;
  FCount := ElementCount;
end;

function aDispositivos.GetCount: integer;
begin
  result := FCount;
end;

procedure aDispositivos.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aDispositivos.Add: TDispositivos;
begin
  result := TDispositivos.Create;
  Add(Result);
end;

function aDispositivos.Add(const Value:TDispositivos): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aDispositivos.ReadComplex(ASerializer: TObject);
var
  lval: TDispositivos;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDispositivos, lval, i);
    Items[i] := lval;
  end;
end;

procedure aDispositivos.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDispositivos, i);
end;

{ aTicket }

procedure aTicket.Assign(iSource: TPersistent);
var lSource:aTicket;
    i:integer;
begin
  if (iSource is aTicket) then begin
    lSource := aTicket(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      Items[i] := lSource.Items[i];
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aTicket.GetItemType: PTypeInfo;
begin
  result := TypeInfo(AnsiString);
end;

class function aTicket.GetItemSize: integer;
begin
  result := SizeOf(AnsiString);
end;

function aTicket.GetItems(aIndex: integer): AnsiString;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aTicket.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := @fItems[aIndex];
end;

procedure aTicket.Clear;
begin
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aTicket.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aTicket.SetItems(aIndex: integer; const Value: AnsiString);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  fItems[aIndex] := Value;
end;

procedure aTicket.Resize(ElementCount: integer);
begin
  if fCount = ElementCount then Exit;
  SetLength(fItems, ElementCount);
  FCount := ElementCount;
end;

function aTicket.GetCount: integer;
begin
  result := FCount;
end;

procedure aTicket.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aTicket.Add(const Value: AnsiString): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

function aTicket.GetIndex(const aPropertyName: string;
  const aPropertyValue: Variant; StartFrom: integer;
  Options: TROSearchOptions): integer;
begin
  result := -1;
end;

procedure aTicket.ReadComplex(ASerializer: TObject);
var
  lval: AnsiString;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadAnsiString(GetArrayElementName(GetItemType, GetItemRef(i)), lval, i);
    Items[i] := lval;
  end;
end;

procedure aTicket.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteAnsiString(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], i);
end;

{ aDatosCorte }

procedure aDatosCorte.Assign(iSource: TPersistent);
var lSource:aDatosCorte;
    i:integer;
begin
  if (iSource is aDatosCorte) then begin
    lSource := aDatosCorte(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aDatosCorte.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDatosCorte);
end;

class function aDatosCorte.GetItemClass: TClass;
begin
  result := TDatosCorte;
end;

class function aDatosCorte.GetItemSize: integer;
begin
  result := SizeOf(TDatosCorte);
end;

function aDatosCorte.GetItems(aIndex: integer): TDatosCorte;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aDatosCorte.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aDatosCorte.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aDatosCorte.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aDatosCorte.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aDatosCorte.SetItems(aIndex: integer; const Value: TDatosCorte);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aDatosCorte.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDatosCorte.Create;
  FCount := ElementCount;
end;

function aDatosCorte.GetCount: integer;
begin
  result := FCount;
end;

procedure aDatosCorte.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aDatosCorte.Add: TDatosCorte;
begin
  result := TDatosCorte.Create;
  Add(Result);
end;

function aDatosCorte.Add(const Value:TDatosCorte): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aDatosCorte.ReadComplex(ASerializer: TObject);
var
  lval: TDatosCorte;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDatosCorte, lval, i);
    Items[i] := lval;
  end;
end;

procedure aDatosCorte.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDatosCorte, i);
end;

{ aTanques }

procedure aTanques.Assign(iSource: TPersistent);
var lSource:aTanques;
    i:integer;
begin
  if (iSource is aTanques) then begin
    lSource := aTanques(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aTanques.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TTanque);
end;

class function aTanques.GetItemClass: TClass;
begin
  result := TTanque;
end;

class function aTanques.GetItemSize: integer;
begin
  result := SizeOf(TTanque);
end;

function aTanques.GetItems(aIndex: integer): TTanque;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aTanques.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aTanques.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aTanques.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aTanques.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aTanques.SetItems(aIndex: integer; const Value: TTanque);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aTanques.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TTanque.Create;
  FCount := ElementCount;
end;

function aTanques.GetCount: integer;
begin
  result := FCount;
end;

procedure aTanques.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aTanques.Add: TTanque;
begin
  result := TTanque.Create;
  Add(Result);
end;

function aTanques.Add(const Value:TTanque): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aTanques.ReadComplex(ASerializer: TObject);
var
  lval: TTanque;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TTanque, lval, i);
    Items[i] := lval;
  end;
end;

procedure aTanques.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TTanque, i);
end;

{ aRecepciones }

procedure aRecepciones.Assign(iSource: TPersistent);
var lSource:aRecepciones;
    i:integer;
begin
  if (iSource is aRecepciones) then begin
    lSource := aRecepciones(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aRecepciones.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TRecepcion);
end;

class function aRecepciones.GetItemClass: TClass;
begin
  result := TRecepcion;
end;

class function aRecepciones.GetItemSize: integer;
begin
  result := SizeOf(TRecepcion);
end;

function aRecepciones.GetItems(aIndex: integer): TRecepcion;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aRecepciones.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aRecepciones.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aRecepciones.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aRecepciones.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aRecepciones.SetItems(aIndex: integer; const Value: TRecepcion);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aRecepciones.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TRecepcion.Create;
  FCount := ElementCount;
end;

function aRecepciones.GetCount: integer;
begin
  result := FCount;
end;

procedure aRecepciones.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aRecepciones.Add: TRecepcion;
begin
  result := TRecepcion.Create;
  Add(Result);
end;

function aRecepciones.Add(const Value:TRecepcion): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aRecepciones.ReadComplex(ASerializer: TObject);
var
  lval: TRecepcion;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TRecepcion, lval, i);
    Items[i] := lval;
  end;
end;

procedure aRecepciones.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TRecepcion, i);
end;

{ aTurnoBomba }

procedure aTurnoBomba.Assign(iSource: TPersistent);
var lSource:aTurnoBomba;
    i:integer;
begin
  if (iSource is aTurnoBomba) then begin
    lSource := aTurnoBomba(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      Items[i] := lSource.Items[i];
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aTurnoBomba.GetItemType: PTypeInfo;
begin
  result := TypeInfo(Integer);
end;

class function aTurnoBomba.GetItemSize: integer;
begin
  result := SizeOf(Integer);
end;

function aTurnoBomba.GetItems(aIndex: integer): Integer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aTurnoBomba.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := @fItems[aIndex];
end;

procedure aTurnoBomba.Clear;
begin
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aTurnoBomba.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aTurnoBomba.SetItems(aIndex: integer; const Value: Integer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  fItems[aIndex] := Value;
end;

procedure aTurnoBomba.Resize(ElementCount: integer);
begin
  if fCount = ElementCount then Exit;
  SetLength(fItems, ElementCount);
  FCount := ElementCount;
end;

function aTurnoBomba.GetCount: integer;
begin
  result := FCount;
end;

procedure aTurnoBomba.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aTurnoBomba.Add(const Value: Integer): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

function aTurnoBomba.GetIndex(const aPropertyName: string;
  const aPropertyValue: Variant; StartFrom: integer;
  Options: TROSearchOptions): integer;
begin
  result := -1;
end;

procedure aTurnoBomba.ReadComplex(ASerializer: TObject);
var
  lval: Integer;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadInteger(GetArrayElementName(GetItemType, GetItemRef(i)), otSLong, lval, i);
    Items[i] := lval;
  end;
end;

procedure aTurnoBomba.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteInteger(GetArrayElementName(GetItemType, GetItemRef(i)), otSLong, fItems[i], i);
end;

{ aComandos }

procedure aComandos.Assign(iSource: TPersistent);
var lSource:aComandos;
    i:integer;
begin
  if (iSource is aComandos) then begin
    lSource := aComandos(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aComandos.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TComando);
end;

class function aComandos.GetItemClass: TClass;
begin
  result := TComando;
end;

class function aComandos.GetItemSize: integer;
begin
  result := SizeOf(TComando);
end;

function aComandos.GetItems(aIndex: integer): TComando;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aComandos.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aComandos.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aComandos.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aComandos.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aComandos.SetItems(aIndex: integer; const Value: TComando);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aComandos.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TComando.Create;
  FCount := ElementCount;
end;

function aComandos.GetCount: integer;
begin
  result := FCount;
end;

procedure aComandos.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aComandos.Add: TComando;
begin
  result := TComando.Create;
  Add(Result);
end;

function aComandos.Add(const Value:TComando): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aComandos.ReadComplex(ASerializer: TObject);
var
  lval: TComando;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TComando, lval, i);
    Items[i] := lval;
  end;
end;

procedure aComandos.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TComando, i);
end;

{ ArrayOpcion }

procedure ArrayOpcion.Assign(iSource: TPersistent);
var lSource:ArrayOpcion;
    i:integer;
begin
  if (iSource is ArrayOpcion) then begin
    lSource := ArrayOpcion(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ArrayOpcion.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TOpcion);
end;

class function ArrayOpcion.GetItemClass: TClass;
begin
  result := TOpcion;
end;

class function ArrayOpcion.GetItemSize: integer;
begin
  result := SizeOf(TOpcion);
end;

function ArrayOpcion.GetItems(aIndex: integer): TOpcion;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ArrayOpcion.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ArrayOpcion.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ArrayOpcion.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ArrayOpcion.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ArrayOpcion.SetItems(aIndex: integer; const Value: TOpcion);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ArrayOpcion.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TOpcion.Create;
  FCount := ElementCount;
end;

function ArrayOpcion.GetCount: integer;
begin
  result := FCount;
end;

procedure ArrayOpcion.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ArrayOpcion.Add: TOpcion;
begin
  result := TOpcion.Create;
  Add(Result);
end;

function ArrayOpcion.Add(const Value:TOpcion): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ArrayOpcion.ReadComplex(ASerializer: TObject);
var
  lval: TOpcion;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TOpcion, lval, i);
    Items[i] := lval;
  end;
end;

procedure ArrayOpcion.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TOpcion, i);
end;

{ aLineaTicket }

procedure aLineaTicket.Assign(iSource: TPersistent);
var lSource:aLineaTicket;
    i:integer;
begin
  if (iSource is aLineaTicket) then begin
    lSource := aLineaTicket(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aLineaTicket.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TLineaTicket);
end;

class function aLineaTicket.GetItemClass: TClass;
begin
  result := TLineaTicket;
end;

class function aLineaTicket.GetItemSize: integer;
begin
  result := SizeOf(TLineaTicket);
end;

function aLineaTicket.GetItems(aIndex: integer): TLineaTicket;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aLineaTicket.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aLineaTicket.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aLineaTicket.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aLineaTicket.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aLineaTicket.SetItems(aIndex: integer; const Value: TLineaTicket);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aLineaTicket.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TLineaTicket.Create;
  FCount := ElementCount;
end;

function aLineaTicket.GetCount: integer;
begin
  result := FCount;
end;

procedure aLineaTicket.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aLineaTicket.Add: TLineaTicket;
begin
  result := TLineaTicket.Create;
  Add(Result);
end;

function aLineaTicket.Add(const Value:TLineaTicket): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aLineaTicket.ReadComplex(ASerializer: TObject);
var
  lval: TLineaTicket;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TLineaTicket, lval, i);
    Items[i] := lval;
  end;
end;

procedure aLineaTicket.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TLineaTicket, i);
end;

{ aNodos }

procedure aNodos.Assign(iSource: TPersistent);
var lSource:aNodos;
    i:integer;
begin
  if (iSource is aNodos) then begin
    lSource := aNodos(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aNodos.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TNodo);
end;

class function aNodos.GetItemClass: TClass;
begin
  result := TNodo;
end;

class function aNodos.GetItemSize: integer;
begin
  result := SizeOf(TNodo);
end;

function aNodos.GetItems(aIndex: integer): TNodo;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aNodos.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aNodos.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aNodos.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aNodos.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aNodos.SetItems(aIndex: integer; const Value: TNodo);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aNodos.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TNodo.Create;
  FCount := ElementCount;
end;

function aNodos.GetCount: integer;
begin
  result := FCount;
end;

procedure aNodos.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aNodos.Add: TNodo;
begin
  result := TNodo.Create;
  Add(Result);
end;

function aNodos.Add(const Value:TNodo): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aNodos.ReadComplex(ASerializer: TObject);
var
  lval: TNodo;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TNodo, lval, i);
    Items[i] := lval;
  end;
end;

procedure aNodos.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TNodo, i);
end;

{ aCorte }

procedure aCorte.Assign(iSource: TPersistent);
var lSource:aCorte;
    i:integer;
begin
  if (iSource is aCorte) then begin
    lSource := aCorte(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aCorte.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TCorte);
end;

class function aCorte.GetItemClass: TClass;
begin
  result := TCorte;
end;

class function aCorte.GetItemSize: integer;
begin
  result := SizeOf(TCorte);
end;

function aCorte.GetItems(aIndex: integer): TCorte;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aCorte.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aCorte.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aCorte.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aCorte.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aCorte.SetItems(aIndex: integer; const Value: TCorte);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aCorte.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TCorte.Create;
  FCount := ElementCount;
end;

function aCorte.GetCount: integer;
begin
  result := FCount;
end;

procedure aCorte.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aCorte.Add: TCorte;
begin
  result := TCorte.Create;
  Add(Result);
end;

function aCorte.Add(const Value:TCorte): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aCorte.ReadComplex(ASerializer: TObject);
var
  lval: TCorte;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TCorte, lval, i);
    Items[i] := lval;
  end;
end;

procedure aCorte.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TCorte, i);
end;

{ aConsumoGas }

procedure aConsumoGas.Assign(iSource: TPersistent);
var lSource:aConsumoGas;
    i:integer;
begin
  if (iSource is aConsumoGas) then begin
    lSource := aConsumoGas(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aConsumoGas.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TConsumoGas);
end;

class function aConsumoGas.GetItemClass: TClass;
begin
  result := TConsumoGas;
end;

class function aConsumoGas.GetItemSize: integer;
begin
  result := SizeOf(TConsumoGas);
end;

function aConsumoGas.GetItems(aIndex: integer): TConsumoGas;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aConsumoGas.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aConsumoGas.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aConsumoGas.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aConsumoGas.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aConsumoGas.SetItems(aIndex: integer; const Value: TConsumoGas);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aConsumoGas.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TConsumoGas.Create;
  FCount := ElementCount;
end;

function aConsumoGas.GetCount: integer;
begin
  result := FCount;
end;

procedure aConsumoGas.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aConsumoGas.Add: TConsumoGas;
begin
  result := TConsumoGas.Create;
  Add(Result);
end;

function aConsumoGas.Add(const Value:TConsumoGas): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aConsumoGas.ReadComplex(ASerializer: TObject);
var
  lval: TConsumoGas;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TConsumoGas, lval, i);
    Items[i] := lval;
  end;
end;

procedure aConsumoGas.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TConsumoGas, i);
end;

{ aAsignaTarjetaCupon }

procedure aAsignaTarjetaCupon.Assign(iSource: TPersistent);
var lSource:aAsignaTarjetaCupon;
    i:integer;
begin
  if (iSource is aAsignaTarjetaCupon) then begin
    lSource := aAsignaTarjetaCupon(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aAsignaTarjetaCupon.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TAsignaTarjetaCupon);
end;

class function aAsignaTarjetaCupon.GetItemClass: TClass;
begin
  result := TAsignaTarjetaCupon;
end;

class function aAsignaTarjetaCupon.GetItemSize: integer;
begin
  result := SizeOf(TAsignaTarjetaCupon);
end;

function aAsignaTarjetaCupon.GetItems(aIndex: integer): TAsignaTarjetaCupon;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aAsignaTarjetaCupon.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aAsignaTarjetaCupon.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aAsignaTarjetaCupon.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aAsignaTarjetaCupon.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aAsignaTarjetaCupon.SetItems(aIndex: integer; const Value: TAsignaTarjetaCupon);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aAsignaTarjetaCupon.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TAsignaTarjetaCupon.Create;
  FCount := ElementCount;
end;

function aAsignaTarjetaCupon.GetCount: integer;
begin
  result := FCount;
end;

procedure aAsignaTarjetaCupon.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aAsignaTarjetaCupon.Add: TAsignaTarjetaCupon;
begin
  result := TAsignaTarjetaCupon.Create;
  Add(Result);
end;

function aAsignaTarjetaCupon.Add(const Value:TAsignaTarjetaCupon): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aAsignaTarjetaCupon.ReadComplex(ASerializer: TObject);
var
  lval: TAsignaTarjetaCupon;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TAsignaTarjetaCupon, lval, i);
    Items[i] := lval;
  end;
end;

procedure aAsignaTarjetaCupon.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TAsignaTarjetaCupon, i);
end;

{ aRegistroVenta }

procedure aRegistroVenta.Assign(iSource: TPersistent);
var lSource:aRegistroVenta;
    i:integer;
begin
  if (iSource is aRegistroVenta) then begin
    lSource := aRegistroVenta(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aRegistroVenta.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TRegistroVenta);
end;

class function aRegistroVenta.GetItemClass: TClass;
begin
  result := TRegistroVenta;
end;

class function aRegistroVenta.GetItemSize: integer;
begin
  result := SizeOf(TRegistroVenta);
end;

function aRegistroVenta.GetItems(aIndex: integer): TRegistroVenta;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aRegistroVenta.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aRegistroVenta.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aRegistroVenta.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aRegistroVenta.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aRegistroVenta.SetItems(aIndex: integer; const Value: TRegistroVenta);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aRegistroVenta.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TRegistroVenta.Create;
  FCount := ElementCount;
end;

function aRegistroVenta.GetCount: integer;
begin
  result := FCount;
end;

procedure aRegistroVenta.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aRegistroVenta.Add: TRegistroVenta;
begin
  result := TRegistroVenta.Create;
  Add(Result);
end;

function aRegistroVenta.Add(const Value:TRegistroVenta): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aRegistroVenta.ReadComplex(ASerializer: TObject);
var
  lval: TRegistroVenta;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TRegistroVenta, lval, i);
    Items[i] := lval;
  end;
end;

procedure aRegistroVenta.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TRegistroVenta, i);
end;

{ aCambioPrecios }

procedure aCambioPrecios.Assign(iSource: TPersistent);
var lSource:aCambioPrecios;
    i:integer;
begin
  if (iSource is aCambioPrecios) then begin
    lSource := aCambioPrecios(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aCambioPrecios.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TCambioPrecios);
end;

class function aCambioPrecios.GetItemClass: TClass;
begin
  result := TCambioPrecios;
end;

class function aCambioPrecios.GetItemSize: integer;
begin
  result := SizeOf(TCambioPrecios);
end;

function aCambioPrecios.GetItems(aIndex: integer): TCambioPrecios;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aCambioPrecios.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aCambioPrecios.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aCambioPrecios.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aCambioPrecios.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aCambioPrecios.SetItems(aIndex: integer; const Value: TCambioPrecios);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aCambioPrecios.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TCambioPrecios.Create;
  FCount := ElementCount;
end;

function aCambioPrecios.GetCount: integer;
begin
  result := FCount;
end;

procedure aCambioPrecios.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aCambioPrecios.Add: TCambioPrecios;
begin
  result := TCambioPrecios.Create;
  Add(Result);
end;

function aCambioPrecios.Add(const Value:TCambioPrecios): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aCambioPrecios.ReadComplex(ASerializer: TObject);
var
  lval: TCambioPrecios;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TCambioPrecios, lval, i);
    Items[i] := lval;
  end;
end;

procedure aCambioPrecios.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TCambioPrecios, i);
end;

{ AOtros }

procedure AOtros.Assign(iSource: TPersistent);
var lSource:AOtros;
    i:integer;
begin
  if (iSource is AOtros) then begin
    lSource := AOtros(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function AOtros.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TOtros);
end;

class function AOtros.GetItemClass: TClass;
begin
  result := TOtros;
end;

class function AOtros.GetItemSize: integer;
begin
  result := SizeOf(TOtros);
end;

function AOtros.GetItems(aIndex: integer): TOtros;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function AOtros.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure AOtros.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure AOtros.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure AOtros.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure AOtros.SetItems(aIndex: integer; const Value: TOtros);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure AOtros.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TOtros.Create;
  FCount := ElementCount;
end;

function AOtros.GetCount: integer;
begin
  result := FCount;
end;

procedure AOtros.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function AOtros.Add: TOtros;
begin
  result := TOtros.Create;
  Add(Result);
end;

function AOtros.Add(const Value:TOtros): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure AOtros.ReadComplex(ASerializer: TObject);
var
  lval: TOtros;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TOtros, lval, i);
    Items[i] := lval;
  end;
end;

procedure AOtros.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TOtros, i);
end;

{ AAutorizaPendiente }

procedure AAutorizaPendiente.Assign(iSource: TPersistent);
var lSource:AAutorizaPendiente;
    i:integer;
begin
  if (iSource is AAutorizaPendiente) then begin
    lSource := AAutorizaPendiente(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function AAutorizaPendiente.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TAutorizaPendiente);
end;

class function AAutorizaPendiente.GetItemClass: TClass;
begin
  result := TAutorizaPendiente;
end;

class function AAutorizaPendiente.GetItemSize: integer;
begin
  result := SizeOf(TAutorizaPendiente);
end;

function AAutorizaPendiente.GetItems(aIndex: integer): TAutorizaPendiente;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function AAutorizaPendiente.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure AAutorizaPendiente.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure AAutorizaPendiente.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure AAutorizaPendiente.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure AAutorizaPendiente.SetItems(aIndex: integer; const Value: TAutorizaPendiente);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure AAutorizaPendiente.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TAutorizaPendiente.Create;
  FCount := ElementCount;
end;

function AAutorizaPendiente.GetCount: integer;
begin
  result := FCount;
end;

procedure AAutorizaPendiente.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function AAutorizaPendiente.Add: TAutorizaPendiente;
begin
  result := TAutorizaPendiente.Create;
  Add(Result);
end;

function AAutorizaPendiente.Add(const Value:TAutorizaPendiente): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure AAutorizaPendiente.ReadComplex(ASerializer: TObject);
var
  lval: TAutorizaPendiente;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TAutorizaPendiente, lval, i);
    Items[i] := lval;
  end;
end;

procedure AAutorizaPendiente.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TAutorizaPendiente, i);
end;

{ aCorteOtros }

procedure aCorteOtros.Assign(iSource: TPersistent);
var lSource:aCorteOtros;
    i:integer;
begin
  if (iSource is aCorteOtros) then begin
    lSource := aCorteOtros(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aCorteOtros.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TCorteOtros);
end;

class function aCorteOtros.GetItemClass: TClass;
begin
  result := TCorteOtros;
end;

class function aCorteOtros.GetItemSize: integer;
begin
  result := SizeOf(TCorteOtros);
end;

function aCorteOtros.GetItems(aIndex: integer): TCorteOtros;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aCorteOtros.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aCorteOtros.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aCorteOtros.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aCorteOtros.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aCorteOtros.SetItems(aIndex: integer; const Value: TCorteOtros);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aCorteOtros.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TCorteOtros.Create;
  FCount := ElementCount;
end;

function aCorteOtros.GetCount: integer;
begin
  result := FCount;
end;

procedure aCorteOtros.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aCorteOtros.Add: TCorteOtros;
begin
  result := TCorteOtros.Create;
  Add(Result);
end;

function aCorteOtros.Add(const Value:TCorteOtros): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aCorteOtros.ReadComplex(ASerializer: TObject);
var
  lval: TCorteOtros;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TCorteOtros, lval, i);
    Items[i] := lval;
  end;
end;

procedure aCorteOtros.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TCorteOtros, i);
end;

{ ADatosBomba }

procedure ADatosBomba.Assign(iSource: TPersistent);
var lSource:ADatosBomba;
    i:integer;
begin
  if (iSource is ADatosBomba) then begin
    lSource := ADatosBomba(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ADatosBomba.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDatosBomba);
end;

class function ADatosBomba.GetItemClass: TClass;
begin
  result := TDatosBomba;
end;

class function ADatosBomba.GetItemSize: integer;
begin
  result := SizeOf(TDatosBomba);
end;

function ADatosBomba.GetItems(aIndex: integer): TDatosBomba;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ADatosBomba.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ADatosBomba.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ADatosBomba.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ADatosBomba.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ADatosBomba.SetItems(aIndex: integer; const Value: TDatosBomba);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ADatosBomba.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDatosBomba.Create;
  FCount := ElementCount;
end;

function ADatosBomba.GetCount: integer;
begin
  result := FCount;
end;

procedure ADatosBomba.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ADatosBomba.Add: TDatosBomba;
begin
  result := TDatosBomba.Create;
  Add(Result);
end;

function ADatosBomba.Add(const Value:TDatosBomba): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ADatosBomba.ReadComplex(ASerializer: TObject);
var
  lval: TDatosBomba;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDatosBomba, lval, i);
    Items[i] := lval;
  end;
end;

procedure ADatosBomba.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDatosBomba, i);
end;

{ aArray }

procedure aArray.Assign(iSource: TPersistent);
var lSource:aArray;
    i:integer;
begin
  if (iSource is aArray) then begin
    lSource := aArray(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      Items[i] := lSource.Items[i];
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aArray.GetItemType: PTypeInfo;
begin
  result := TypeInfo(AnsiString);
end;

class function aArray.GetItemSize: integer;
begin
  result := SizeOf(AnsiString);
end;

function aArray.GetItems(aIndex: integer): AnsiString;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aArray.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := @fItems[aIndex];
end;

procedure aArray.Clear;
begin
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aArray.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aArray.SetItems(aIndex: integer; const Value: AnsiString);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  fItems[aIndex] := Value;
end;

procedure aArray.Resize(ElementCount: integer);
begin
  if fCount = ElementCount then Exit;
  SetLength(fItems, ElementCount);
  FCount := ElementCount;
end;

function aArray.GetCount: integer;
begin
  result := FCount;
end;

procedure aArray.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aArray.Add(const Value: AnsiString): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

function aArray.GetIndex(const aPropertyName: string;
  const aPropertyValue: Variant; StartFrom: integer;
  Options: TROSearchOptions): integer;
begin
  result := -1;
end;

procedure aArray.ReadComplex(ASerializer: TObject);
var
  lval: AnsiString;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadAnsiString(GetArrayElementName(GetItemType, GetItemRef(i)), lval, i);
    Items[i] := lval;
  end;
end;

procedure aArray.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteAnsiString(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], i);
end;

{ TGas }

procedure TGas.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TGas;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TGas) then begin
    lSource := LibraryCistemGas_Intf.TGas(iSource);
    Aplica := lSource.Aplica;
    ClavePemex := lSource.ClavePemex;
    FactorDecimalPrecios := lSource.FactorDecimalPrecios;
    IEPS := lSource.IEPS;
    IEPSProgramado := lSource.IEPSProgramado;
    Impuesto := lSource.Impuesto;
    Nombre := lSource.Nombre;
    Operacion := lSource.Operacion;
    Precio := lSource.Precio;
    PrecioProgramado := lSource.PrecioProgramado;
  end;
end;

procedure TGas.ReadComplex(ASerializer: TObject);
var
  l_Aplica: Boolean;
  l_ClavePemex: AnsiString;
  l_FactorDecimalPrecios: Integer;
  l_IEPS: Double;
  l_IEPSProgramado: Double;
  l_Impuesto: Double;
  l_Nombre: AnsiString;
  l_Operacion: AnsiString;
  l_Precio: Double;
  l_PrecioProgramado: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Aplica := Aplica;
    TROSerializer(ASerializer).ReadEnumerated('Aplica',TypeInfo(boolean), l_Aplica);
    Aplica := l_Aplica;
    l_ClavePemex := ClavePemex;
    TROSerializer(ASerializer).ReadAnsiString('ClavePemex', l_ClavePemex);
    ClavePemex := l_ClavePemex;
    l_FactorDecimalPrecios := FactorDecimalPrecios;
    TROSerializer(ASerializer).ReadInteger('FactorDecimalPrecios', otSLong, l_FactorDecimalPrecios);
    FactorDecimalPrecios := l_FactorDecimalPrecios;
    l_IEPS := IEPS;
    TROSerializer(ASerializer).ReadDouble('IEPS', ftDouble, l_IEPS);
    IEPS := l_IEPS;
    l_IEPSProgramado := IEPSProgramado;
    TROSerializer(ASerializer).ReadDouble('IEPSProgramado', ftDouble, l_IEPSProgramado);
    IEPSProgramado := l_IEPSProgramado;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Operacion := Operacion;
    TROSerializer(ASerializer).ReadAnsiString('Operacion', l_Operacion);
    Operacion := l_Operacion;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_PrecioProgramado := PrecioProgramado;
    TROSerializer(ASerializer).ReadDouble('PrecioProgramado', ftDouble, l_PrecioProgramado);
    PrecioProgramado := l_PrecioProgramado;
  end
  else begin
    l_Aplica := Aplica;
    TROSerializer(ASerializer).ReadEnumerated('Aplica',TypeInfo(boolean), l_Aplica);
    Aplica := l_Aplica;
    l_ClavePemex := ClavePemex;
    TROSerializer(ASerializer).ReadAnsiString('ClavePemex', l_ClavePemex);
    ClavePemex := l_ClavePemex;
    l_FactorDecimalPrecios := FactorDecimalPrecios;
    TROSerializer(ASerializer).ReadInteger('FactorDecimalPrecios', otSLong, l_FactorDecimalPrecios);
    FactorDecimalPrecios := l_FactorDecimalPrecios;
    l_IEPS := IEPS;
    TROSerializer(ASerializer).ReadDouble('IEPS', ftDouble, l_IEPS);
    IEPS := l_IEPS;
    l_IEPSProgramado := IEPSProgramado;
    TROSerializer(ASerializer).ReadDouble('IEPSProgramado', ftDouble, l_IEPSProgramado);
    IEPSProgramado := l_IEPSProgramado;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Operacion := Operacion;
    TROSerializer(ASerializer).ReadAnsiString('Operacion', l_Operacion);
    Operacion := l_Operacion;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_PrecioProgramado := PrecioProgramado;
    TROSerializer(ASerializer).ReadDouble('PrecioProgramado', ftDouble, l_PrecioProgramado);
    PrecioProgramado := l_PrecioProgramado;
  end;
end;

procedure TGas.WriteComplex(ASerializer: TObject);
var
  l_Aplica: Boolean;
  l_ClavePemex: AnsiString;
  l_FactorDecimalPrecios: Integer;
  l_IEPS: Double;
  l_IEPSProgramado: Double;
  l_Impuesto: Double;
  l_Nombre: AnsiString;
  l_Operacion: AnsiString;
  l_Precio: Double;
  l_PrecioProgramado: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TGas);
    l_Aplica := Aplica;
    TROSerializer(ASerializer).WriteEnumerated('Aplica',TypeInfo(boolean), l_Aplica);
    l_ClavePemex := ClavePemex;
    TROSerializer(ASerializer).WriteAnsiString('ClavePemex', l_ClavePemex);
    l_FactorDecimalPrecios := FactorDecimalPrecios;
    TROSerializer(ASerializer).WriteInteger('FactorDecimalPrecios', otSLong, l_FactorDecimalPrecios);
    l_IEPS := IEPS;
    TROSerializer(ASerializer).WriteDouble('IEPS', ftDouble, l_IEPS);
    l_IEPSProgramado := IEPSProgramado;
    TROSerializer(ASerializer).WriteDouble('IEPSProgramado', ftDouble, l_IEPSProgramado);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Operacion := Operacion;
    TROSerializer(ASerializer).WriteAnsiString('Operacion', l_Operacion);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_PrecioProgramado := PrecioProgramado;
    TROSerializer(ASerializer).WriteDouble('PrecioProgramado', ftDouble, l_PrecioProgramado);
  end
  else begin
    l_Aplica := Aplica;
    TROSerializer(ASerializer).WriteEnumerated('Aplica',TypeInfo(boolean), l_Aplica);
    l_ClavePemex := ClavePemex;
    TROSerializer(ASerializer).WriteAnsiString('ClavePemex', l_ClavePemex);
    l_FactorDecimalPrecios := FactorDecimalPrecios;
    TROSerializer(ASerializer).WriteInteger('FactorDecimalPrecios', otSLong, l_FactorDecimalPrecios);
    l_IEPS := IEPS;
    TROSerializer(ASerializer).WriteDouble('IEPS', ftDouble, l_IEPS);
    l_IEPSProgramado := IEPSProgramado;
    TROSerializer(ASerializer).WriteDouble('IEPSProgramado', ftDouble, l_IEPSProgramado);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Operacion := Operacion;
    TROSerializer(ASerializer).WriteAnsiString('Operacion', l_Operacion);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_PrecioProgramado := PrecioProgramado;
    TROSerializer(ASerializer).WriteDouble('PrecioProgramado', ftDouble, l_PrecioProgramado);
  end;
end;

{ TGasCollection }
constructor TGasCollection.Create;
begin
  inherited Create(TGas);
end;

constructor TGasCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TGasCollection.Add: TGas;
begin
  result := TGas(inherited Add);
end;

function TGasCollection.GetItems(aIndex: integer): TGas;
begin
  result := TGas(inherited Items[aIndex]);
end;

procedure TGasCollection.LoadFromArray(anArray: aGas);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TGasCollection.SaveToArray(anArray: aGas);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TGas.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TGasCollection.SetItems(aIndex: integer; const Value: TGas);
begin
  TGas(inherited Items[aIndex]).Assign(Value);
end;

{ TFlujos }

procedure TFlujos.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TFlujos;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TFlujos) then begin
    lSource := LibraryCistemGas_Intf.TFlujos(iSource);
    Minimo := lSource.Minimo;
    Maximo := lSource.Maximo;
    Externo := lSource.Externo;
  end;
end;

procedure TFlujos.ReadComplex(ASerializer: TObject);
var
  l_Externo: Double;
  l_Maximo: Double;
  l_Minimo: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Minimo := Minimo;
    TROSerializer(ASerializer).ReadDouble('Minimo', ftDouble, l_Minimo);
    Minimo := l_Minimo;
    l_Maximo := Maximo;
    TROSerializer(ASerializer).ReadDouble('Maximo', ftDouble, l_Maximo);
    Maximo := l_Maximo;
    l_Externo := Externo;
    TROSerializer(ASerializer).ReadDouble('Externo', ftDouble, l_Externo);
    Externo := l_Externo;
  end
  else begin
    l_Externo := Externo;
    TROSerializer(ASerializer).ReadDouble('Externo', ftDouble, l_Externo);
    Externo := l_Externo;
    l_Maximo := Maximo;
    TROSerializer(ASerializer).ReadDouble('Maximo', ftDouble, l_Maximo);
    Maximo := l_Maximo;
    l_Minimo := Minimo;
    TROSerializer(ASerializer).ReadDouble('Minimo', ftDouble, l_Minimo);
    Minimo := l_Minimo;
  end;
end;

procedure TFlujos.WriteComplex(ASerializer: TObject);
var
  l_Externo: Double;
  l_Maximo: Double;
  l_Minimo: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFlujos);
    l_Minimo := Minimo;
    TROSerializer(ASerializer).WriteDouble('Minimo', ftDouble, l_Minimo);
    l_Maximo := Maximo;
    TROSerializer(ASerializer).WriteDouble('Maximo', ftDouble, l_Maximo);
    l_Externo := Externo;
    TROSerializer(ASerializer).WriteDouble('Externo', ftDouble, l_Externo);
  end
  else begin
    l_Externo := Externo;
    TROSerializer(ASerializer).WriteDouble('Externo', ftDouble, l_Externo);
    l_Maximo := Maximo;
    TROSerializer(ASerializer).WriteDouble('Maximo', ftDouble, l_Maximo);
    l_Minimo := Minimo;
    TROSerializer(ASerializer).WriteDouble('Minimo', ftDouble, l_Minimo);
  end;
end;

{ TFlujosCollection }
constructor TFlujosCollection.Create;
begin
  inherited Create(TFlujos);
end;

constructor TFlujosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFlujosCollection.Add: TFlujos;
begin
  result := TFlujos(inherited Add);
end;

function TFlujosCollection.GetItems(aIndex: integer): TFlujos;
begin
  result := TFlujos(inherited Items[aIndex]);
end;

procedure TFlujosCollection.SetItems(aIndex: integer; const Value: TFlujos);
begin
  TFlujos(inherited Items[aIndex]).Assign(Value);
end;

{ TTicket }

procedure TTicket.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TTicket;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TTicket) then begin
    lSource := LibraryCistemGas_Intf.TTicket(iSource);
    TicketID := lSource.TicketID;
    Volumen := lSource.Volumen;
    Precio := lSource.Precio;
    Importe := lSource.Importe;
    Tipo := lSource.Tipo;
    TurnoID := lSource.TurnoID;
    BombaID := lSource.BombaID;
    ProductoID := lSource.ProductoID;
    EstacionID := lSource.EstacionID;
    Fecha := lSource.Fecha;
    FechaContable := lSource.FechaContable;
    Producto := lSource.Producto;
  end;
end;

procedure TTicket.ReadComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_FechaContable: DateTime;
  l_Importe: Double;
  l_Precio: Double;
  l_Producto: AnsiString;
  l_ProductoID: Integer;
  l_TicketID: Integer;
  l_Tipo: Integer;
  l_TurnoID: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_TicketID := TicketID;
    TROSerializer(ASerializer).ReadInteger('TicketID', otSLong, l_TicketID);
    TicketID := l_TicketID;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadInteger('Tipo', otSLong, l_Tipo);
    Tipo := l_Tipo;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_FechaContable := FechaContable;
    TROSerializer(ASerializer).ReadDateTime('FechaContable', l_FechaContable);
    FechaContable := l_FechaContable;
    l_Producto := Producto;
    TROSerializer(ASerializer).ReadAnsiString('Producto', l_Producto);
    Producto := l_Producto;
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_FechaContable := FechaContable;
    TROSerializer(ASerializer).ReadDateTime('FechaContable', l_FechaContable);
    FechaContable := l_FechaContable;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Producto := Producto;
    TROSerializer(ASerializer).ReadAnsiString('Producto', l_Producto);
    Producto := l_Producto;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_TicketID := TicketID;
    TROSerializer(ASerializer).ReadInteger('TicketID', otSLong, l_TicketID);
    TicketID := l_TicketID;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadInteger('Tipo', otSLong, l_Tipo);
    Tipo := l_Tipo;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
  end;
end;

procedure TTicket.WriteComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_FechaContable: DateTime;
  l_Importe: Double;
  l_Precio: Double;
  l_Producto: AnsiString;
  l_ProductoID: Integer;
  l_TicketID: Integer;
  l_Tipo: Integer;
  l_TurnoID: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TTicket);
    l_TicketID := TicketID;
    TROSerializer(ASerializer).WriteInteger('TicketID', otSLong, l_TicketID);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', otSLong, l_Tipo);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_FechaContable := FechaContable;
    TROSerializer(ASerializer).WriteDateTime('FechaContable', l_FechaContable);
    l_Producto := Producto;
    TROSerializer(ASerializer).WriteAnsiString('Producto', l_Producto);
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_FechaContable := FechaContable;
    TROSerializer(ASerializer).WriteDateTime('FechaContable', l_FechaContable);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Producto := Producto;
    TROSerializer(ASerializer).WriteAnsiString('Producto', l_Producto);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_TicketID := TicketID;
    TROSerializer(ASerializer).WriteInteger('TicketID', otSLong, l_TicketID);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', otSLong, l_Tipo);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
  end;
end;

{ TTicketCollection }
constructor TTicketCollection.Create;
begin
  inherited Create(TTicket);
end;

constructor TTicketCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TTicketCollection.Add: TTicket;
begin
  result := TTicket(inherited Add);
end;

function TTicketCollection.GetItems(aIndex: integer): TTicket;
begin
  result := TTicket(inherited Items[aIndex]);
end;

procedure TTicketCollection.SetItems(aIndex: integer; const Value: TTicket);
begin
  TTicket(inherited Items[aIndex]).Assign(Value);
end;

{ TProducto }

procedure TProducto.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TProducto;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TProducto) then begin
    lSource := LibraryCistemGas_Intf.TProducto(iSource);
    Numero := lSource.Numero;
    Descripcion := lSource.Descripcion;
    Cantidad := lSource.Cantidad;
    Precio := lSource.Precio;
    Total := lSource.Total;
    TotalTickets := lSource.TotalTickets;
  end;
end;

procedure TProducto.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Descripcion: AnsiString;
  l_Numero: Integer;
  l_Precio: Double;
  l_Total: Double;
  l_TotalTickets: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Numero := Numero;
    TROSerializer(ASerializer).ReadInteger('Numero', otSLong, l_Numero);
    Numero := l_Numero;
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    Descripcion := l_Descripcion;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
    l_TotalTickets := TotalTickets;
    TROSerializer(ASerializer).ReadInteger('TotalTickets', otSLong, l_TotalTickets);
    TotalTickets := l_TotalTickets;
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    Descripcion := l_Descripcion;
    l_Numero := Numero;
    TROSerializer(ASerializer).ReadInteger('Numero', otSLong, l_Numero);
    Numero := l_Numero;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
    l_TotalTickets := TotalTickets;
    TROSerializer(ASerializer).ReadInteger('TotalTickets', otSLong, l_TotalTickets);
    TotalTickets := l_TotalTickets;
  end;
end;

procedure TProducto.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Descripcion: AnsiString;
  l_Numero: Integer;
  l_Precio: Double;
  l_Total: Double;
  l_TotalTickets: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TProducto);
    l_Numero := Numero;
    TROSerializer(ASerializer).WriteInteger('Numero', otSLong, l_Numero);
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
    l_TotalTickets := TotalTickets;
    TROSerializer(ASerializer).WriteInteger('TotalTickets', otSLong, l_TotalTickets);
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
    l_Numero := Numero;
    TROSerializer(ASerializer).WriteInteger('Numero', otSLong, l_Numero);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
    l_TotalTickets := TotalTickets;
    TROSerializer(ASerializer).WriteInteger('TotalTickets', otSLong, l_TotalTickets);
  end;
end;

{ TProductoCollection }
constructor TProductoCollection.Create;
begin
  inherited Create(TProducto);
end;

constructor TProductoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TProductoCollection.Add: TProducto;
begin
  result := TProducto(inherited Add);
end;

function TProductoCollection.GetItems(aIndex: integer): TProducto;
begin
  result := TProducto(inherited Items[aIndex]);
end;

procedure TProductoCollection.SetItems(aIndex: integer; const Value: TProducto);
begin
  TProducto(inherited Items[aIndex]).Assign(Value);
end;

{ TCanal }

procedure TCanal.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TCanal;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TCanal) then begin
    lSource := LibraryCistemGas_Intf.TCanal(iSource);
    Canal := lSource.Canal;
    CanalAnterior := lSource.CanalAnterior;
    Direccion := lSource.Direccion;
  end;
end;

procedure TCanal.ReadComplex(ASerializer: TObject);
var
  l_Canal: Integer;
  l_CanalAnterior: Integer;
  l_Direccion: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Canal := Canal;
    TROSerializer(ASerializer).ReadInteger('Canal', otSLong, l_Canal);
    Canal := l_Canal;
    l_CanalAnterior := CanalAnterior;
    TROSerializer(ASerializer).ReadInteger('CanalAnterior', otSLong, l_CanalAnterior);
    CanalAnterior := l_CanalAnterior;
    l_Direccion := Direccion;
    TROSerializer(ASerializer).ReadInteger('Direccion', otSLong, l_Direccion);
    Direccion := l_Direccion;
  end
  else begin
    l_Canal := Canal;
    TROSerializer(ASerializer).ReadInteger('Canal', otSLong, l_Canal);
    Canal := l_Canal;
    l_CanalAnterior := CanalAnterior;
    TROSerializer(ASerializer).ReadInteger('CanalAnterior', otSLong, l_CanalAnterior);
    CanalAnterior := l_CanalAnterior;
    l_Direccion := Direccion;
    TROSerializer(ASerializer).ReadInteger('Direccion', otSLong, l_Direccion);
    Direccion := l_Direccion;
  end;
end;

procedure TCanal.WriteComplex(ASerializer: TObject);
var
  l_Canal: Integer;
  l_CanalAnterior: Integer;
  l_Direccion: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TCanal);
    l_Canal := Canal;
    TROSerializer(ASerializer).WriteInteger('Canal', otSLong, l_Canal);
    l_CanalAnterior := CanalAnterior;
    TROSerializer(ASerializer).WriteInteger('CanalAnterior', otSLong, l_CanalAnterior);
    l_Direccion := Direccion;
    TROSerializer(ASerializer).WriteInteger('Direccion', otSLong, l_Direccion);
  end
  else begin
    l_Canal := Canal;
    TROSerializer(ASerializer).WriteInteger('Canal', otSLong, l_Canal);
    l_CanalAnterior := CanalAnterior;
    TROSerializer(ASerializer).WriteInteger('CanalAnterior', otSLong, l_CanalAnterior);
    l_Direccion := Direccion;
    TROSerializer(ASerializer).WriteInteger('Direccion', otSLong, l_Direccion);
  end;
end;

{ TCanalCollection }
constructor TCanalCollection.Create;
begin
  inherited Create(TCanal);
end;

constructor TCanalCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TCanalCollection.Add: TCanal;
begin
  result := TCanal(inherited Add);
end;

function TCanalCollection.GetItems(aIndex: integer): TCanal;
begin
  result := TCanal(inherited Items[aIndex]);
end;

procedure TCanalCollection.SetItems(aIndex: integer; const Value: TCanal);
begin
  TCanal(inherited Items[aIndex]).Assign(Value);
end;

{ TCambioPrecios }

procedure TCambioPrecios.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TCambioPrecios;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TCambioPrecios) then begin
    lSource := LibraryCistemGas_Intf.TCambioPrecios(iSource);
    ProductoID := lSource.ProductoID;
    Precio := lSource.Precio;
    IEPS := lSource.IEPS;
  end;
end;

procedure TCambioPrecios.ReadComplex(ASerializer: TObject);
var
  l_IEPS: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_IEPS := IEPS;
    TROSerializer(ASerializer).ReadDouble('IEPS', ftDouble, l_IEPS);
    IEPS := l_IEPS;
  end
  else begin
    l_IEPS := IEPS;
    TROSerializer(ASerializer).ReadDouble('IEPS', ftDouble, l_IEPS);
    IEPS := l_IEPS;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
  end;
end;

procedure TCambioPrecios.WriteComplex(ASerializer: TObject);
var
  l_IEPS: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TCambioPrecios);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_IEPS := IEPS;
    TROSerializer(ASerializer).WriteDouble('IEPS', ftDouble, l_IEPS);
  end
  else begin
    l_IEPS := IEPS;
    TROSerializer(ASerializer).WriteDouble('IEPS', ftDouble, l_IEPS);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
  end;
end;

{ TCambioPreciosCollection }
constructor TCambioPreciosCollection.Create;
begin
  inherited Create(TCambioPrecios);
end;

constructor TCambioPreciosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TCambioPreciosCollection.Add: TCambioPrecios;
begin
  result := TCambioPrecios(inherited Add);
end;

function TCambioPreciosCollection.GetItems(aIndex: integer): TCambioPrecios;
begin
  result := TCambioPrecios(inherited Items[aIndex]);
end;

procedure TCambioPreciosCollection.LoadFromArray(anArray: aCambioPrecios);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TCambioPreciosCollection.SaveToArray(anArray: aCambioPrecios);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TCambioPrecios.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TCambioPreciosCollection.SetItems(aIndex: integer; const Value: TCambioPrecios);
begin
  TCambioPrecios(inherited Items[aIndex]).Assign(Value);
end;

{ TContador }

procedure TContador.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TContador;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TContador) then begin
    lSource := LibraryCistemGas_Intf.TContador(iSource);
    Pendiente := lSource.Pendiente;
    Litros := lSource.Litros;
    Importe := lSource.Importe;
    Precio := lSource.Precio;
  end;
end;

procedure TContador.ReadComplex(ASerializer: TObject);
var
  l_Importe: Double;
  l_Litros: Double;
  l_Pendiente: eEstadoVenta;
  l_Precio: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Pendiente := Pendiente;
    TROSerializer(ASerializer).ReadEnumerated('Pendiente',TypeInfo(eEstadoVenta), l_Pendiente);
    Pendiente := l_Pendiente;
    l_Litros := Litros;
    TROSerializer(ASerializer).ReadDouble('Litros', ftDouble, l_Litros);
    Litros := l_Litros;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
  end
  else begin
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Litros := Litros;
    TROSerializer(ASerializer).ReadDouble('Litros', ftDouble, l_Litros);
    Litros := l_Litros;
    l_Pendiente := Pendiente;
    TROSerializer(ASerializer).ReadEnumerated('Pendiente',TypeInfo(eEstadoVenta), l_Pendiente);
    Pendiente := l_Pendiente;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
  end;
end;

procedure TContador.WriteComplex(ASerializer: TObject);
var
  l_Importe: Double;
  l_Litros: Double;
  l_Pendiente: eEstadoVenta;
  l_Precio: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TContador);
    l_Pendiente := Pendiente;
    TROSerializer(ASerializer).WriteEnumerated('Pendiente',TypeInfo(eEstadoVenta), l_Pendiente);
    l_Litros := Litros;
    TROSerializer(ASerializer).WriteDouble('Litros', ftDouble, l_Litros);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
  end
  else begin
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Litros := Litros;
    TROSerializer(ASerializer).WriteDouble('Litros', ftDouble, l_Litros);
    l_Pendiente := Pendiente;
    TROSerializer(ASerializer).WriteEnumerated('Pendiente',TypeInfo(eEstadoVenta), l_Pendiente);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
  end;
end;

{ TContadorCollection }
constructor TContadorCollection.Create;
begin
  inherited Create(TContador);
end;

constructor TContadorCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TContadorCollection.Add: TContador;
begin
  result := TContador(inherited Add);
end;

function TContadorCollection.GetItems(aIndex: integer): TContador;
begin
  result := TContador(inherited Items[aIndex]);
end;

procedure TContadorCollection.LoadFromArray(anArray: aContador);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TContadorCollection.SaveToArray(anArray: aContador);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TContador.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TContadorCollection.SetItems(aIndex: integer; const Value: TContador);
begin
  TContador(inherited Items[aIndex]).Assign(Value);
end;

{ TLecturas }

procedure TLecturas.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TLecturas;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TLecturas) then begin
    lSource := LibraryCistemGas_Intf.TLecturas(iSource);
    LecturaCorrecta := lSource.LecturaCorrecta;
    Precio := lSource.Precio;
    CashMoney := lSource.CashMoney;
    CashVolume := lSource.CashVolume;
    CreditMoney := lSource.CreditMoney;
    CreditVolume := lSource.CreditVolume;
  end;
end;

procedure TLecturas.ReadComplex(ASerializer: TObject);
var
  l_CashMoney: Double;
  l_CashVolume: Double;
  l_CreditMoney: Double;
  l_CreditVolume: Double;
  l_LecturaCorrecta: Boolean;
  l_Precio: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_LecturaCorrecta := LecturaCorrecta;
    TROSerializer(ASerializer).ReadEnumerated('LecturaCorrecta',TypeInfo(boolean), l_LecturaCorrecta);
    LecturaCorrecta := l_LecturaCorrecta;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_CashMoney := CashMoney;
    TROSerializer(ASerializer).ReadDouble('CashMoney', ftDouble, l_CashMoney);
    CashMoney := l_CashMoney;
    l_CashVolume := CashVolume;
    TROSerializer(ASerializer).ReadDouble('CashVolume', ftDouble, l_CashVolume);
    CashVolume := l_CashVolume;
    l_CreditMoney := CreditMoney;
    TROSerializer(ASerializer).ReadDouble('CreditMoney', ftDouble, l_CreditMoney);
    CreditMoney := l_CreditMoney;
    l_CreditVolume := CreditVolume;
    TROSerializer(ASerializer).ReadDouble('CreditVolume', ftDouble, l_CreditVolume);
    CreditVolume := l_CreditVolume;
  end
  else begin
    l_CashMoney := CashMoney;
    TROSerializer(ASerializer).ReadDouble('CashMoney', ftDouble, l_CashMoney);
    CashMoney := l_CashMoney;
    l_CashVolume := CashVolume;
    TROSerializer(ASerializer).ReadDouble('CashVolume', ftDouble, l_CashVolume);
    CashVolume := l_CashVolume;
    l_CreditMoney := CreditMoney;
    TROSerializer(ASerializer).ReadDouble('CreditMoney', ftDouble, l_CreditMoney);
    CreditMoney := l_CreditMoney;
    l_CreditVolume := CreditVolume;
    TROSerializer(ASerializer).ReadDouble('CreditVolume', ftDouble, l_CreditVolume);
    CreditVolume := l_CreditVolume;
    l_LecturaCorrecta := LecturaCorrecta;
    TROSerializer(ASerializer).ReadEnumerated('LecturaCorrecta',TypeInfo(boolean), l_LecturaCorrecta);
    LecturaCorrecta := l_LecturaCorrecta;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
  end;
end;

procedure TLecturas.WriteComplex(ASerializer: TObject);
var
  l_CashMoney: Double;
  l_CashVolume: Double;
  l_CreditMoney: Double;
  l_CreditVolume: Double;
  l_LecturaCorrecta: Boolean;
  l_Precio: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLecturas);
    l_LecturaCorrecta := LecturaCorrecta;
    TROSerializer(ASerializer).WriteEnumerated('LecturaCorrecta',TypeInfo(boolean), l_LecturaCorrecta);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_CashMoney := CashMoney;
    TROSerializer(ASerializer).WriteDouble('CashMoney', ftDouble, l_CashMoney);
    l_CashVolume := CashVolume;
    TROSerializer(ASerializer).WriteDouble('CashVolume', ftDouble, l_CashVolume);
    l_CreditMoney := CreditMoney;
    TROSerializer(ASerializer).WriteDouble('CreditMoney', ftDouble, l_CreditMoney);
    l_CreditVolume := CreditVolume;
    TROSerializer(ASerializer).WriteDouble('CreditVolume', ftDouble, l_CreditVolume);
  end
  else begin
    l_CashMoney := CashMoney;
    TROSerializer(ASerializer).WriteDouble('CashMoney', ftDouble, l_CashMoney);
    l_CashVolume := CashVolume;
    TROSerializer(ASerializer).WriteDouble('CashVolume', ftDouble, l_CashVolume);
    l_CreditMoney := CreditMoney;
    TROSerializer(ASerializer).WriteDouble('CreditMoney', ftDouble, l_CreditMoney);
    l_CreditVolume := CreditVolume;
    TROSerializer(ASerializer).WriteDouble('CreditVolume', ftDouble, l_CreditVolume);
    l_LecturaCorrecta := LecturaCorrecta;
    TROSerializer(ASerializer).WriteEnumerated('LecturaCorrecta',TypeInfo(boolean), l_LecturaCorrecta);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
  end;
end;

{ TLecturasCollection }
constructor TLecturasCollection.Create;
begin
  inherited Create(TLecturas);
end;

constructor TLecturasCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLecturasCollection.Add: TLecturas;
begin
  result := TLecturas(inherited Add);
end;

function TLecturasCollection.GetItems(aIndex: integer): TLecturas;
begin
  result := TLecturas(inherited Items[aIndex]);
end;

procedure TLecturasCollection.LoadFromArray(anArray: aLecturas);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TLecturasCollection.SaveToArray(anArray: aLecturas);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TLecturas.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TLecturasCollection.SetItems(aIndex: integer; const Value: TLecturas);
begin
  TLecturas(inherited Items[aIndex]).Assign(Value);
end;

{ TMaguera }

procedure TMaguera.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TMaguera;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TMaguera) then begin
    lSource := LibraryCistemGas_Intf.TMaguera(iSource);
    NoGasolina := lSource.NoGasolina;
    MangueraInternaID := lSource.MangueraInternaID;
    ProductoID := lSource.ProductoID;
    Flujo.Assign(lSource.Flujo);
  end;
end;

function TMaguera.GetFlujo: TFlujos;
begin
  if (fFlujo = nil) then fFlujo := TFlujos.Create();
  result := fFlujo;
end;

procedure TMaguera.ReadComplex(ASerializer: TObject);
var
  l_Flujo: TFlujos;
  l_MangueraInternaID: Integer;
  l_NoGasolina: Integer;
  l_ProductoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_NoGasolina := NoGasolina;
    TROSerializer(ASerializer).ReadInteger('NoGasolina', otSLong, l_NoGasolina);
    NoGasolina := l_NoGasolina;
    l_MangueraInternaID := MangueraInternaID;
    TROSerializer(ASerializer).ReadInteger('MangueraInternaID', otSLong, l_MangueraInternaID);
    MangueraInternaID := l_MangueraInternaID;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Flujo := Flujo;
    TROSerializer(ASerializer).ReadStruct('Flujo', TFlujos, l_Flujo);
    if Flujo <> l_Flujo then Flujo.Free;
    Flujo := l_Flujo;
  end
  else begin
    l_Flujo := Flujo;
    TROSerializer(ASerializer).ReadStruct('Flujo', TFlujos, l_Flujo);
    if Flujo <> l_Flujo then Flujo.Free;
    Flujo := l_Flujo;
    l_MangueraInternaID := MangueraInternaID;
    TROSerializer(ASerializer).ReadInteger('MangueraInternaID', otSLong, l_MangueraInternaID);
    MangueraInternaID := l_MangueraInternaID;
    l_NoGasolina := NoGasolina;
    TROSerializer(ASerializer).ReadInteger('NoGasolina', otSLong, l_NoGasolina);
    NoGasolina := l_NoGasolina;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
  end;
end;

procedure TMaguera.WriteComplex(ASerializer: TObject);
var
  l_Flujo: TFlujos;
  l_MangueraInternaID: Integer;
  l_NoGasolina: Integer;
  l_ProductoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TMaguera);
    l_NoGasolina := NoGasolina;
    TROSerializer(ASerializer).WriteInteger('NoGasolina', otSLong, l_NoGasolina);
    l_MangueraInternaID := MangueraInternaID;
    TROSerializer(ASerializer).WriteInteger('MangueraInternaID', otSLong, l_MangueraInternaID);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Flujo := Flujo;
    TROSerializer(ASerializer).WriteStruct('Flujo', l_Flujo, TFlujos);
  end
  else begin
    l_Flujo := Flujo;
    TROSerializer(ASerializer).WriteStruct('Flujo', l_Flujo, TFlujos);
    l_MangueraInternaID := MangueraInternaID;
    TROSerializer(ASerializer).WriteInteger('MangueraInternaID', otSLong, l_MangueraInternaID);
    l_NoGasolina := NoGasolina;
    TROSerializer(ASerializer).WriteInteger('NoGasolina', otSLong, l_NoGasolina);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
  end;
end;

{ TMagueraCollection }
constructor TMagueraCollection.Create;
begin
  inherited Create(TMaguera);
end;

constructor TMagueraCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TMagueraCollection.Add: TMaguera;
begin
  result := TMaguera(inherited Add);
end;

function TMagueraCollection.GetItems(aIndex: integer): TMaguera;
begin
  result := TMaguera(inherited Items[aIndex]);
end;

procedure TMagueraCollection.LoadFromArray(anArray: aMangueras);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TMagueraCollection.SaveToArray(anArray: aMangueras);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TMaguera.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TMagueraCollection.SetItems(aIndex: integer; const Value: TMaguera);
begin
  TMaguera(inherited Items[aIndex]).Assign(Value);
end;

{ TRegistroVenta }

procedure TRegistroVenta.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TRegistroVenta;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TRegistroVenta) then begin
    lSource := LibraryCistemGas_Intf.TRegistroVenta(iSource);
    Avituallamiento := lSource.Avituallamiento;
    Bomba := lSource.Bomba;
    CentroCostos := lSource.CentroCostos;
    ClavePemex := lSource.ClavePemex;
    Codigo := lSource.Codigo;
    Comision := lSource.Comision;
    CuentaContable := lSource.CuentaContable;
    Descripcion := lSource.Descripcion;
    Empresa := lSource.Empresa;
    Estacion := lSource.Estacion;
    FechaCarga := lSource.FechaCarga;
    FechaContable := lSource.FechaContable;
    FormaCompra := lSource.FormaCompra;
    Hora := lSource.Hora;
    Identificador := lSource.Identificador;
    Identificacion := lSource.Identificacion;
    ImporteServido := lSource.ImporteServido;
    Impreso := lSource.Impreso;
    Impuesto := lSource.Impuesto;
    Manguera := lSource.Manguera;
    Mensaje := lSource.Mensaje;
    Movimiento := lSource.Movimiento;
    Nip := lSource.Nip;
    NoEconomico := lSource.NoEconomico;
    Nombre := lSource.Nombre;
    NoTerminal := lSource.NoTerminal;
    Odometro := lSource.Odometro;
    PrecioServido := lSource.PrecioServido;
    Preset := lSource.Preset;
    Registro := lSource.Registro;
    Saldo := lSource.Saldo;
    SaldoTarjeta := lSource.SaldoTarjeta;
    Secuencia := lSource.Secuencia;
    Site := lSource.Site;
    Tarjeta := lSource.Tarjeta;
    Tipo := lSource.Tipo;
    TipoTarjeta := lSource.TipoTarjeta;
    TipoTrama := lSource.TipoTrama;
    Turno := lSource.Turno;
    Unidad := lSource.Unidad;
    VentaAutorizada := lSource.VentaAutorizada;
    VentaVolumenImporte := lSource.VentaVolumenImporte;
    VentaExhibida := lSource.VentaExhibida;
    VolumenServido := lSource.VolumenServido;
    GasolineroID := lSource.GasolineroID;
    ClienteID := lSource.ClienteID;
    VehiculoID := lSource.VehiculoID;
    IEPS := lSource.IEPS;
    AutorizacionID := lSource.AutorizacionID;
    TicketInternoID := lSource.TicketInternoID;
    Lectura := lSource.Lectura;
  end;
end;

procedure TRegistroVenta.ReadComplex(ASerializer: TObject);
var
  l_AutorizacionID: Integer;
  l_Avituallamiento: Double;
  l_Bomba: Integer;
  l_CentroCostos: AnsiString;
  l_ClavePemex: AnsiString;
  l_ClienteID: Integer;
  l_Codigo: AnsiString;
  l_Comision: Double;
  l_CuentaContable: AnsiString;
  l_Descripcion: AnsiString;
  l_Empresa: AnsiString;
  l_Estacion: Integer;
  l_FechaCarga: DateTime;
  l_FechaContable: DateTime;
  l_FormaCompra: Integer;
  l_GasolineroID: Integer;
  l_Hora: AnsiString;
  l_Identificacion: AnsiString;
  l_Identificador: AnsiString;
  l_IEPS: Double;
  l_ImporteServido: Double;
  l_Impreso: Integer;
  l_Impuesto: Double;
  l_Lectura: Double;
  l_Manguera: Integer;
  l_Mensaje: AnsiString;
  l_Movimiento: AnsiString;
  l_Nip: AnsiString;
  l_NoEconomico: AnsiString;
  l_Nombre: AnsiString;
  l_NoTerminal: AnsiString;
  l_Odometro: Integer;
  l_PrecioServido: Double;
  l_Preset: eTipoPreset;
  l_Registro: AnsiString;
  l_Saldo: Double;
  l_SaldoTarjeta: Double;
  l_Secuencia: Integer;
  l_Site: AnsiString;
  l_Tarjeta: AnsiString;
  l_TicketInternoID: Integer;
  l_Tipo: Integer;
  l_TipoTarjeta: AnsiString;
  l_TipoTrama: AnsiString;
  l_Turno: Integer;
  l_Unidad: AnsiString;
  l_VehiculoID: Integer;
  l_VentaAutorizada: Double;
  l_VentaExhibida: Double;
  l_VentaVolumenImporte: AnsiString;
  l_VolumenServido: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Avituallamiento := Avituallamiento;
    TROSerializer(ASerializer).ReadDouble('Avituallamiento', ftDouble, l_Avituallamiento);
    Avituallamiento := l_Avituallamiento;
    l_Bomba := Bomba;
    TROSerializer(ASerializer).ReadInteger('Bomba', otSLong, l_Bomba);
    Bomba := l_Bomba;
    l_CentroCostos := CentroCostos;
    TROSerializer(ASerializer).ReadAnsiString('CentroCostos', l_CentroCostos);
    CentroCostos := l_CentroCostos;
    l_ClavePemex := ClavePemex;
    TROSerializer(ASerializer).ReadAnsiString('ClavePemex', l_ClavePemex);
    ClavePemex := l_ClavePemex;
    l_Codigo := Codigo;
    TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    Codigo := l_Codigo;
    l_Comision := Comision;
    TROSerializer(ASerializer).ReadDouble('Comision', ftDouble, l_Comision);
    Comision := l_Comision;
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).ReadAnsiString('CuentaContable', l_CuentaContable);
    CuentaContable := l_CuentaContable;
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    Descripcion := l_Descripcion;
    l_Empresa := Empresa;
    TROSerializer(ASerializer).ReadAnsiString('Empresa', l_Empresa);
    Empresa := l_Empresa;
    l_Estacion := Estacion;
    TROSerializer(ASerializer).ReadInteger('Estacion', otSLong, l_Estacion);
    Estacion := l_Estacion;
    l_FechaCarga := FechaCarga;
    TROSerializer(ASerializer).ReadDateTime('FechaCarga', l_FechaCarga);
    FechaCarga := l_FechaCarga;
    l_FechaContable := FechaContable;
    TROSerializer(ASerializer).ReadDateTime('FechaContable', l_FechaContable);
    FechaContable := l_FechaContable;
    l_FormaCompra := FormaCompra;
    TROSerializer(ASerializer).ReadInteger('FormaCompra', otSLong, l_FormaCompra);
    FormaCompra := l_FormaCompra;
    l_Hora := Hora;
    TROSerializer(ASerializer).ReadAnsiString('Hora', l_Hora);
    Hora := l_Hora;
    l_Identificador := Identificador;
    TROSerializer(ASerializer).ReadAnsiString('Identificador', l_Identificador);
    Identificador := l_Identificador;
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).ReadAnsiString('Identificacion', l_Identificacion);
    Identificacion := l_Identificacion;
    l_ImporteServido := ImporteServido;
    TROSerializer(ASerializer).ReadDouble('ImporteServido', ftDouble, l_ImporteServido);
    ImporteServido := l_ImporteServido;
    l_Impreso := Impreso;
    TROSerializer(ASerializer).ReadInteger('Impreso', otSLong, l_Impreso);
    Impreso := l_Impreso;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_Manguera := Manguera;
    TROSerializer(ASerializer).ReadInteger('Manguera', otSLong, l_Manguera);
    Manguera := l_Manguera;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_Movimiento := Movimiento;
    TROSerializer(ASerializer).ReadAnsiString('Movimiento', l_Movimiento);
    Movimiento := l_Movimiento;
    l_Nip := Nip;
    TROSerializer(ASerializer).ReadAnsiString('Nip', l_Nip);
    Nip := l_Nip;
    l_NoEconomico := NoEconomico;
    TROSerializer(ASerializer).ReadAnsiString('NoEconomico', l_NoEconomico);
    NoEconomico := l_NoEconomico;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_NoTerminal := NoTerminal;
    TROSerializer(ASerializer).ReadAnsiString('NoTerminal', l_NoTerminal);
    NoTerminal := l_NoTerminal;
    l_Odometro := Odometro;
    TROSerializer(ASerializer).ReadInteger('Odometro', otSLong, l_Odometro);
    Odometro := l_Odometro;
    l_PrecioServido := PrecioServido;
    TROSerializer(ASerializer).ReadDouble('PrecioServido', ftDouble, l_PrecioServido);
    PrecioServido := l_PrecioServido;
    l_Preset := Preset;
    TROSerializer(ASerializer).ReadEnumerated('Preset',TypeInfo(eTipoPreset), l_Preset);
    Preset := l_Preset;
    l_Registro := Registro;
    TROSerializer(ASerializer).ReadAnsiString('Registro', l_Registro);
    Registro := l_Registro;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_SaldoTarjeta := SaldoTarjeta;
    TROSerializer(ASerializer).ReadDouble('SaldoTarjeta', ftDouble, l_SaldoTarjeta);
    SaldoTarjeta := l_SaldoTarjeta;
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_Site := Site;
    TROSerializer(ASerializer).ReadAnsiString('Site', l_Site);
    Site := l_Site;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadInteger('Tipo', otSLong, l_Tipo);
    Tipo := l_Tipo;
    l_TipoTarjeta := TipoTarjeta;
    TROSerializer(ASerializer).ReadAnsiString('TipoTarjeta', l_TipoTarjeta);
    TipoTarjeta := l_TipoTarjeta;
    l_TipoTrama := TipoTrama;
    TROSerializer(ASerializer).ReadAnsiString('TipoTrama', l_TipoTrama);
    TipoTrama := l_TipoTrama;
    l_Turno := Turno;
    TROSerializer(ASerializer).ReadInteger('Turno', otSLong, l_Turno);
    Turno := l_Turno;
    l_Unidad := Unidad;
    TROSerializer(ASerializer).ReadAnsiString('Unidad', l_Unidad);
    Unidad := l_Unidad;
    l_VentaAutorizada := VentaAutorizada;
    TROSerializer(ASerializer).ReadDouble('VentaAutorizada', ftDouble, l_VentaAutorizada);
    VentaAutorizada := l_VentaAutorizada;
    l_VentaVolumenImporte := VentaVolumenImporte;
    TROSerializer(ASerializer).ReadAnsiString('VentaVolumenImporte', l_VentaVolumenImporte);
    VentaVolumenImporte := l_VentaVolumenImporte;
    l_VentaExhibida := VentaExhibida;
    TROSerializer(ASerializer).ReadDouble('VentaExhibida', ftDouble, l_VentaExhibida);
    VentaExhibida := l_VentaExhibida;
    l_VolumenServido := VolumenServido;
    TROSerializer(ASerializer).ReadDouble('VolumenServido', ftDouble, l_VolumenServido);
    VolumenServido := l_VolumenServido;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_IEPS := IEPS;
    TROSerializer(ASerializer).ReadDouble('IEPS', ftDouble, l_IEPS);
    IEPS := l_IEPS;
    l_AutorizacionID := AutorizacionID;
    TROSerializer(ASerializer).ReadInteger('AutorizacionID', otSLong, l_AutorizacionID);
    AutorizacionID := l_AutorizacionID;
    l_TicketInternoID := TicketInternoID;
    TROSerializer(ASerializer).ReadInteger('TicketInternoID', otSLong, l_TicketInternoID);
    TicketInternoID := l_TicketInternoID;
    l_Lectura := Lectura;
    TROSerializer(ASerializer).ReadDouble('Lectura', ftDouble, l_Lectura);
    Lectura := l_Lectura;
  end
  else begin
    l_AutorizacionID := AutorizacionID;
    TROSerializer(ASerializer).ReadInteger('AutorizacionID', otSLong, l_AutorizacionID);
    AutorizacionID := l_AutorizacionID;
    l_Avituallamiento := Avituallamiento;
    TROSerializer(ASerializer).ReadDouble('Avituallamiento', ftDouble, l_Avituallamiento);
    Avituallamiento := l_Avituallamiento;
    l_Bomba := Bomba;
    TROSerializer(ASerializer).ReadInteger('Bomba', otSLong, l_Bomba);
    Bomba := l_Bomba;
    l_CentroCostos := CentroCostos;
    TROSerializer(ASerializer).ReadAnsiString('CentroCostos', l_CentroCostos);
    CentroCostos := l_CentroCostos;
    l_ClavePemex := ClavePemex;
    TROSerializer(ASerializer).ReadAnsiString('ClavePemex', l_ClavePemex);
    ClavePemex := l_ClavePemex;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Codigo := Codigo;
    TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    Codigo := l_Codigo;
    l_Comision := Comision;
    TROSerializer(ASerializer).ReadDouble('Comision', ftDouble, l_Comision);
    Comision := l_Comision;
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).ReadAnsiString('CuentaContable', l_CuentaContable);
    CuentaContable := l_CuentaContable;
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    Descripcion := l_Descripcion;
    l_Empresa := Empresa;
    TROSerializer(ASerializer).ReadAnsiString('Empresa', l_Empresa);
    Empresa := l_Empresa;
    l_Estacion := Estacion;
    TROSerializer(ASerializer).ReadInteger('Estacion', otSLong, l_Estacion);
    Estacion := l_Estacion;
    l_FechaCarga := FechaCarga;
    TROSerializer(ASerializer).ReadDateTime('FechaCarga', l_FechaCarga);
    FechaCarga := l_FechaCarga;
    l_FechaContable := FechaContable;
    TROSerializer(ASerializer).ReadDateTime('FechaContable', l_FechaContable);
    FechaContable := l_FechaContable;
    l_FormaCompra := FormaCompra;
    TROSerializer(ASerializer).ReadInteger('FormaCompra', otSLong, l_FormaCompra);
    FormaCompra := l_FormaCompra;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_Hora := Hora;
    TROSerializer(ASerializer).ReadAnsiString('Hora', l_Hora);
    Hora := l_Hora;
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).ReadAnsiString('Identificacion', l_Identificacion);
    Identificacion := l_Identificacion;
    l_Identificador := Identificador;
    TROSerializer(ASerializer).ReadAnsiString('Identificador', l_Identificador);
    Identificador := l_Identificador;
    l_IEPS := IEPS;
    TROSerializer(ASerializer).ReadDouble('IEPS', ftDouble, l_IEPS);
    IEPS := l_IEPS;
    l_ImporteServido := ImporteServido;
    TROSerializer(ASerializer).ReadDouble('ImporteServido', ftDouble, l_ImporteServido);
    ImporteServido := l_ImporteServido;
    l_Impreso := Impreso;
    TROSerializer(ASerializer).ReadInteger('Impreso', otSLong, l_Impreso);
    Impreso := l_Impreso;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_Lectura := Lectura;
    TROSerializer(ASerializer).ReadDouble('Lectura', ftDouble, l_Lectura);
    Lectura := l_Lectura;
    l_Manguera := Manguera;
    TROSerializer(ASerializer).ReadInteger('Manguera', otSLong, l_Manguera);
    Manguera := l_Manguera;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_Movimiento := Movimiento;
    TROSerializer(ASerializer).ReadAnsiString('Movimiento', l_Movimiento);
    Movimiento := l_Movimiento;
    l_Nip := Nip;
    TROSerializer(ASerializer).ReadAnsiString('Nip', l_Nip);
    Nip := l_Nip;
    l_NoEconomico := NoEconomico;
    TROSerializer(ASerializer).ReadAnsiString('NoEconomico', l_NoEconomico);
    NoEconomico := l_NoEconomico;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_NoTerminal := NoTerminal;
    TROSerializer(ASerializer).ReadAnsiString('NoTerminal', l_NoTerminal);
    NoTerminal := l_NoTerminal;
    l_Odometro := Odometro;
    TROSerializer(ASerializer).ReadInteger('Odometro', otSLong, l_Odometro);
    Odometro := l_Odometro;
    l_PrecioServido := PrecioServido;
    TROSerializer(ASerializer).ReadDouble('PrecioServido', ftDouble, l_PrecioServido);
    PrecioServido := l_PrecioServido;
    l_Preset := Preset;
    TROSerializer(ASerializer).ReadEnumerated('Preset',TypeInfo(eTipoPreset), l_Preset);
    Preset := l_Preset;
    l_Registro := Registro;
    TROSerializer(ASerializer).ReadAnsiString('Registro', l_Registro);
    Registro := l_Registro;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_SaldoTarjeta := SaldoTarjeta;
    TROSerializer(ASerializer).ReadDouble('SaldoTarjeta', ftDouble, l_SaldoTarjeta);
    SaldoTarjeta := l_SaldoTarjeta;
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_Site := Site;
    TROSerializer(ASerializer).ReadAnsiString('Site', l_Site);
    Site := l_Site;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
    l_TicketInternoID := TicketInternoID;
    TROSerializer(ASerializer).ReadInteger('TicketInternoID', otSLong, l_TicketInternoID);
    TicketInternoID := l_TicketInternoID;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadInteger('Tipo', otSLong, l_Tipo);
    Tipo := l_Tipo;
    l_TipoTarjeta := TipoTarjeta;
    TROSerializer(ASerializer).ReadAnsiString('TipoTarjeta', l_TipoTarjeta);
    TipoTarjeta := l_TipoTarjeta;
    l_TipoTrama := TipoTrama;
    TROSerializer(ASerializer).ReadAnsiString('TipoTrama', l_TipoTrama);
    TipoTrama := l_TipoTrama;
    l_Turno := Turno;
    TROSerializer(ASerializer).ReadInteger('Turno', otSLong, l_Turno);
    Turno := l_Turno;
    l_Unidad := Unidad;
    TROSerializer(ASerializer).ReadAnsiString('Unidad', l_Unidad);
    Unidad := l_Unidad;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_VentaAutorizada := VentaAutorizada;
    TROSerializer(ASerializer).ReadDouble('VentaAutorizada', ftDouble, l_VentaAutorizada);
    VentaAutorizada := l_VentaAutorizada;
    l_VentaExhibida := VentaExhibida;
    TROSerializer(ASerializer).ReadDouble('VentaExhibida', ftDouble, l_VentaExhibida);
    VentaExhibida := l_VentaExhibida;
    l_VentaVolumenImporte := VentaVolumenImporte;
    TROSerializer(ASerializer).ReadAnsiString('VentaVolumenImporte', l_VentaVolumenImporte);
    VentaVolumenImporte := l_VentaVolumenImporte;
    l_VolumenServido := VolumenServido;
    TROSerializer(ASerializer).ReadDouble('VolumenServido', ftDouble, l_VolumenServido);
    VolumenServido := l_VolumenServido;
  end;
end;

procedure TRegistroVenta.WriteComplex(ASerializer: TObject);
var
  l_AutorizacionID: Integer;
  l_Avituallamiento: Double;
  l_Bomba: Integer;
  l_CentroCostos: AnsiString;
  l_ClavePemex: AnsiString;
  l_ClienteID: Integer;
  l_Codigo: AnsiString;
  l_Comision: Double;
  l_CuentaContable: AnsiString;
  l_Descripcion: AnsiString;
  l_Empresa: AnsiString;
  l_Estacion: Integer;
  l_FechaCarga: DateTime;
  l_FechaContable: DateTime;
  l_FormaCompra: Integer;
  l_GasolineroID: Integer;
  l_Hora: AnsiString;
  l_Identificacion: AnsiString;
  l_Identificador: AnsiString;
  l_IEPS: Double;
  l_ImporteServido: Double;
  l_Impreso: Integer;
  l_Impuesto: Double;
  l_Lectura: Double;
  l_Manguera: Integer;
  l_Mensaje: AnsiString;
  l_Movimiento: AnsiString;
  l_Nip: AnsiString;
  l_NoEconomico: AnsiString;
  l_Nombre: AnsiString;
  l_NoTerminal: AnsiString;
  l_Odometro: Integer;
  l_PrecioServido: Double;
  l_Preset: eTipoPreset;
  l_Registro: AnsiString;
  l_Saldo: Double;
  l_SaldoTarjeta: Double;
  l_Secuencia: Integer;
  l_Site: AnsiString;
  l_Tarjeta: AnsiString;
  l_TicketInternoID: Integer;
  l_Tipo: Integer;
  l_TipoTarjeta: AnsiString;
  l_TipoTrama: AnsiString;
  l_Turno: Integer;
  l_Unidad: AnsiString;
  l_VehiculoID: Integer;
  l_VentaAutorizada: Double;
  l_VentaExhibida: Double;
  l_VentaVolumenImporte: AnsiString;
  l_VolumenServido: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TRegistroVenta);
    l_Avituallamiento := Avituallamiento;
    TROSerializer(ASerializer).WriteDouble('Avituallamiento', ftDouble, l_Avituallamiento);
    l_Bomba := Bomba;
    TROSerializer(ASerializer).WriteInteger('Bomba', otSLong, l_Bomba);
    l_CentroCostos := CentroCostos;
    TROSerializer(ASerializer).WriteAnsiString('CentroCostos', l_CentroCostos);
    l_ClavePemex := ClavePemex;
    TROSerializer(ASerializer).WriteAnsiString('ClavePemex', l_ClavePemex);
    l_Codigo := Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_Comision := Comision;
    TROSerializer(ASerializer).WriteDouble('Comision', ftDouble, l_Comision);
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).WriteAnsiString('CuentaContable', l_CuentaContable);
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
    l_Empresa := Empresa;
    TROSerializer(ASerializer).WriteAnsiString('Empresa', l_Empresa);
    l_Estacion := Estacion;
    TROSerializer(ASerializer).WriteInteger('Estacion', otSLong, l_Estacion);
    l_FechaCarga := FechaCarga;
    TROSerializer(ASerializer).WriteDateTime('FechaCarga', l_FechaCarga);
    l_FechaContable := FechaContable;
    TROSerializer(ASerializer).WriteDateTime('FechaContable', l_FechaContable);
    l_FormaCompra := FormaCompra;
    TROSerializer(ASerializer).WriteInteger('FormaCompra', otSLong, l_FormaCompra);
    l_Hora := Hora;
    TROSerializer(ASerializer).WriteAnsiString('Hora', l_Hora);
    l_Identificador := Identificador;
    TROSerializer(ASerializer).WriteAnsiString('Identificador', l_Identificador);
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).WriteAnsiString('Identificacion', l_Identificacion);
    l_ImporteServido := ImporteServido;
    TROSerializer(ASerializer).WriteDouble('ImporteServido', ftDouble, l_ImporteServido);
    l_Impreso := Impreso;
    TROSerializer(ASerializer).WriteInteger('Impreso', otSLong, l_Impreso);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_Manguera := Manguera;
    TROSerializer(ASerializer).WriteInteger('Manguera', otSLong, l_Manguera);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_Movimiento := Movimiento;
    TROSerializer(ASerializer).WriteAnsiString('Movimiento', l_Movimiento);
    l_Nip := Nip;
    TROSerializer(ASerializer).WriteAnsiString('Nip', l_Nip);
    l_NoEconomico := NoEconomico;
    TROSerializer(ASerializer).WriteAnsiString('NoEconomico', l_NoEconomico);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_NoTerminal := NoTerminal;
    TROSerializer(ASerializer).WriteAnsiString('NoTerminal', l_NoTerminal);
    l_Odometro := Odometro;
    TROSerializer(ASerializer).WriteInteger('Odometro', otSLong, l_Odometro);
    l_PrecioServido := PrecioServido;
    TROSerializer(ASerializer).WriteDouble('PrecioServido', ftDouble, l_PrecioServido);
    l_Preset := Preset;
    TROSerializer(ASerializer).WriteEnumerated('Preset',TypeInfo(eTipoPreset), l_Preset);
    l_Registro := Registro;
    TROSerializer(ASerializer).WriteAnsiString('Registro', l_Registro);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_SaldoTarjeta := SaldoTarjeta;
    TROSerializer(ASerializer).WriteDouble('SaldoTarjeta', ftDouble, l_SaldoTarjeta);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_Site := Site;
    TROSerializer(ASerializer).WriteAnsiString('Site', l_Site);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', otSLong, l_Tipo);
    l_TipoTarjeta := TipoTarjeta;
    TROSerializer(ASerializer).WriteAnsiString('TipoTarjeta', l_TipoTarjeta);
    l_TipoTrama := TipoTrama;
    TROSerializer(ASerializer).WriteAnsiString('TipoTrama', l_TipoTrama);
    l_Turno := Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', otSLong, l_Turno);
    l_Unidad := Unidad;
    TROSerializer(ASerializer).WriteAnsiString('Unidad', l_Unidad);
    l_VentaAutorizada := VentaAutorizada;
    TROSerializer(ASerializer).WriteDouble('VentaAutorizada', ftDouble, l_VentaAutorizada);
    l_VentaVolumenImporte := VentaVolumenImporte;
    TROSerializer(ASerializer).WriteAnsiString('VentaVolumenImporte', l_VentaVolumenImporte);
    l_VentaExhibida := VentaExhibida;
    TROSerializer(ASerializer).WriteDouble('VentaExhibida', ftDouble, l_VentaExhibida);
    l_VolumenServido := VolumenServido;
    TROSerializer(ASerializer).WriteDouble('VolumenServido', ftDouble, l_VolumenServido);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_IEPS := IEPS;
    TROSerializer(ASerializer).WriteDouble('IEPS', ftDouble, l_IEPS);
    l_AutorizacionID := AutorizacionID;
    TROSerializer(ASerializer).WriteInteger('AutorizacionID', otSLong, l_AutorizacionID);
    l_TicketInternoID := TicketInternoID;
    TROSerializer(ASerializer).WriteInteger('TicketInternoID', otSLong, l_TicketInternoID);
    l_Lectura := Lectura;
    TROSerializer(ASerializer).WriteDouble('Lectura', ftDouble, l_Lectura);
  end
  else begin
    l_AutorizacionID := AutorizacionID;
    TROSerializer(ASerializer).WriteInteger('AutorizacionID', otSLong, l_AutorizacionID);
    l_Avituallamiento := Avituallamiento;
    TROSerializer(ASerializer).WriteDouble('Avituallamiento', ftDouble, l_Avituallamiento);
    l_Bomba := Bomba;
    TROSerializer(ASerializer).WriteInteger('Bomba', otSLong, l_Bomba);
    l_CentroCostos := CentroCostos;
    TROSerializer(ASerializer).WriteAnsiString('CentroCostos', l_CentroCostos);
    l_ClavePemex := ClavePemex;
    TROSerializer(ASerializer).WriteAnsiString('ClavePemex', l_ClavePemex);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Codigo := Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_Comision := Comision;
    TROSerializer(ASerializer).WriteDouble('Comision', ftDouble, l_Comision);
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).WriteAnsiString('CuentaContable', l_CuentaContable);
    l_Descripcion := Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
    l_Empresa := Empresa;
    TROSerializer(ASerializer).WriteAnsiString('Empresa', l_Empresa);
    l_Estacion := Estacion;
    TROSerializer(ASerializer).WriteInteger('Estacion', otSLong, l_Estacion);
    l_FechaCarga := FechaCarga;
    TROSerializer(ASerializer).WriteDateTime('FechaCarga', l_FechaCarga);
    l_FechaContable := FechaContable;
    TROSerializer(ASerializer).WriteDateTime('FechaContable', l_FechaContable);
    l_FormaCompra := FormaCompra;
    TROSerializer(ASerializer).WriteInteger('FormaCompra', otSLong, l_FormaCompra);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_Hora := Hora;
    TROSerializer(ASerializer).WriteAnsiString('Hora', l_Hora);
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).WriteAnsiString('Identificacion', l_Identificacion);
    l_Identificador := Identificador;
    TROSerializer(ASerializer).WriteAnsiString('Identificador', l_Identificador);
    l_IEPS := IEPS;
    TROSerializer(ASerializer).WriteDouble('IEPS', ftDouble, l_IEPS);
    l_ImporteServido := ImporteServido;
    TROSerializer(ASerializer).WriteDouble('ImporteServido', ftDouble, l_ImporteServido);
    l_Impreso := Impreso;
    TROSerializer(ASerializer).WriteInteger('Impreso', otSLong, l_Impreso);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_Lectura := Lectura;
    TROSerializer(ASerializer).WriteDouble('Lectura', ftDouble, l_Lectura);
    l_Manguera := Manguera;
    TROSerializer(ASerializer).WriteInteger('Manguera', otSLong, l_Manguera);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_Movimiento := Movimiento;
    TROSerializer(ASerializer).WriteAnsiString('Movimiento', l_Movimiento);
    l_Nip := Nip;
    TROSerializer(ASerializer).WriteAnsiString('Nip', l_Nip);
    l_NoEconomico := NoEconomico;
    TROSerializer(ASerializer).WriteAnsiString('NoEconomico', l_NoEconomico);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_NoTerminal := NoTerminal;
    TROSerializer(ASerializer).WriteAnsiString('NoTerminal', l_NoTerminal);
    l_Odometro := Odometro;
    TROSerializer(ASerializer).WriteInteger('Odometro', otSLong, l_Odometro);
    l_PrecioServido := PrecioServido;
    TROSerializer(ASerializer).WriteDouble('PrecioServido', ftDouble, l_PrecioServido);
    l_Preset := Preset;
    TROSerializer(ASerializer).WriteEnumerated('Preset',TypeInfo(eTipoPreset), l_Preset);
    l_Registro := Registro;
    TROSerializer(ASerializer).WriteAnsiString('Registro', l_Registro);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_SaldoTarjeta := SaldoTarjeta;
    TROSerializer(ASerializer).WriteDouble('SaldoTarjeta', ftDouble, l_SaldoTarjeta);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_Site := Site;
    TROSerializer(ASerializer).WriteAnsiString('Site', l_Site);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
    l_TicketInternoID := TicketInternoID;
    TROSerializer(ASerializer).WriteInteger('TicketInternoID', otSLong, l_TicketInternoID);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', otSLong, l_Tipo);
    l_TipoTarjeta := TipoTarjeta;
    TROSerializer(ASerializer).WriteAnsiString('TipoTarjeta', l_TipoTarjeta);
    l_TipoTrama := TipoTrama;
    TROSerializer(ASerializer).WriteAnsiString('TipoTrama', l_TipoTrama);
    l_Turno := Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', otSLong, l_Turno);
    l_Unidad := Unidad;
    TROSerializer(ASerializer).WriteAnsiString('Unidad', l_Unidad);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_VentaAutorizada := VentaAutorizada;
    TROSerializer(ASerializer).WriteDouble('VentaAutorizada', ftDouble, l_VentaAutorizada);
    l_VentaExhibida := VentaExhibida;
    TROSerializer(ASerializer).WriteDouble('VentaExhibida', ftDouble, l_VentaExhibida);
    l_VentaVolumenImporte := VentaVolumenImporte;
    TROSerializer(ASerializer).WriteAnsiString('VentaVolumenImporte', l_VentaVolumenImporte);
    l_VolumenServido := VolumenServido;
    TROSerializer(ASerializer).WriteDouble('VolumenServido', ftDouble, l_VolumenServido);
  end;
end;

{ TRegistroVentaCollection }
constructor TRegistroVentaCollection.Create;
begin
  inherited Create(TRegistroVenta);
end;

constructor TRegistroVentaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TRegistroVentaCollection.Add: TRegistroVenta;
begin
  result := TRegistroVenta(inherited Add);
end;

function TRegistroVentaCollection.GetItems(aIndex: integer): TRegistroVenta;
begin
  result := TRegistroVenta(inherited Items[aIndex]);
end;

procedure TRegistroVentaCollection.LoadFromArray(anArray: aRegistroVenta);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TRegistroVentaCollection.SaveToArray(anArray: aRegistroVenta);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TRegistroVenta.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TRegistroVentaCollection.SetItems(aIndex: integer; const Value: TRegistroVenta);
begin
  TRegistroVenta(inherited Items[aIndex]).Assign(Value);
end;

{ TRegistroPuntoVenta }

procedure TRegistroPuntoVenta.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TRegistroPuntoVenta;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TRegistroPuntoVenta) then begin
    lSource := LibraryCistemGas_Intf.TRegistroPuntoVenta(iSource);
    NoTerminal := lSource.NoTerminal;
    TipoTrama := lSource.TipoTrama;
    TipoTarjeta := lSource.TipoTarjeta;
    Tarjeta := lSource.Tarjeta;
    Unidad := lSource.Unidad;
    Nip := lSource.Nip;
    Kms := lSource.Kms;
    Comision := lSource.Comision;
    VentaAutorizada := lSource.VentaAutorizada;
    Saldo := lSource.Saldo;
    Mensaje := lSource.Mensaje;
  end;
end;

procedure TRegistroPuntoVenta.ReadComplex(ASerializer: TObject);
var
  l_Comision: AnsiString;
  l_Kms: Integer;
  l_Mensaje: AnsiString;
  l_Nip: AnsiString;
  l_NoTerminal: AnsiString;
  l_Saldo: Double;
  l_Tarjeta: AnsiString;
  l_TipoTarjeta: AnsiString;
  l_TipoTrama: AnsiString;
  l_Unidad: AnsiString;
  l_VentaAutorizada: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_NoTerminal := NoTerminal;
    TROSerializer(ASerializer).ReadAnsiString('NoTerminal', l_NoTerminal);
    NoTerminal := l_NoTerminal;
    l_TipoTrama := TipoTrama;
    TROSerializer(ASerializer).ReadAnsiString('TipoTrama', l_TipoTrama);
    TipoTrama := l_TipoTrama;
    l_TipoTarjeta := TipoTarjeta;
    TROSerializer(ASerializer).ReadAnsiString('TipoTarjeta', l_TipoTarjeta);
    TipoTarjeta := l_TipoTarjeta;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
    l_Unidad := Unidad;
    TROSerializer(ASerializer).ReadAnsiString('Unidad', l_Unidad);
    Unidad := l_Unidad;
    l_Nip := Nip;
    TROSerializer(ASerializer).ReadAnsiString('Nip', l_Nip);
    Nip := l_Nip;
    l_Kms := Kms;
    TROSerializer(ASerializer).ReadInteger('Kms', otSLong, l_Kms);
    Kms := l_Kms;
    l_Comision := Comision;
    TROSerializer(ASerializer).ReadAnsiString('Comision', l_Comision);
    Comision := l_Comision;
    l_VentaAutorizada := VentaAutorizada;
    TROSerializer(ASerializer).ReadDouble('VentaAutorizada', ftDouble, l_VentaAutorizada);
    VentaAutorizada := l_VentaAutorizada;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
  end
  else begin
    l_Comision := Comision;
    TROSerializer(ASerializer).ReadAnsiString('Comision', l_Comision);
    Comision := l_Comision;
    l_Kms := Kms;
    TROSerializer(ASerializer).ReadInteger('Kms', otSLong, l_Kms);
    Kms := l_Kms;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_Nip := Nip;
    TROSerializer(ASerializer).ReadAnsiString('Nip', l_Nip);
    Nip := l_Nip;
    l_NoTerminal := NoTerminal;
    TROSerializer(ASerializer).ReadAnsiString('NoTerminal', l_NoTerminal);
    NoTerminal := l_NoTerminal;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
    l_TipoTarjeta := TipoTarjeta;
    TROSerializer(ASerializer).ReadAnsiString('TipoTarjeta', l_TipoTarjeta);
    TipoTarjeta := l_TipoTarjeta;
    l_TipoTrama := TipoTrama;
    TROSerializer(ASerializer).ReadAnsiString('TipoTrama', l_TipoTrama);
    TipoTrama := l_TipoTrama;
    l_Unidad := Unidad;
    TROSerializer(ASerializer).ReadAnsiString('Unidad', l_Unidad);
    Unidad := l_Unidad;
    l_VentaAutorizada := VentaAutorizada;
    TROSerializer(ASerializer).ReadDouble('VentaAutorizada', ftDouble, l_VentaAutorizada);
    VentaAutorizada := l_VentaAutorizada;
  end;
end;

procedure TRegistroPuntoVenta.WriteComplex(ASerializer: TObject);
var
  l_Comision: AnsiString;
  l_Kms: Integer;
  l_Mensaje: AnsiString;
  l_Nip: AnsiString;
  l_NoTerminal: AnsiString;
  l_Saldo: Double;
  l_Tarjeta: AnsiString;
  l_TipoTarjeta: AnsiString;
  l_TipoTrama: AnsiString;
  l_Unidad: AnsiString;
  l_VentaAutorizada: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TRegistroPuntoVenta);
    l_NoTerminal := NoTerminal;
    TROSerializer(ASerializer).WriteAnsiString('NoTerminal', l_NoTerminal);
    l_TipoTrama := TipoTrama;
    TROSerializer(ASerializer).WriteAnsiString('TipoTrama', l_TipoTrama);
    l_TipoTarjeta := TipoTarjeta;
    TROSerializer(ASerializer).WriteAnsiString('TipoTarjeta', l_TipoTarjeta);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
    l_Unidad := Unidad;
    TROSerializer(ASerializer).WriteAnsiString('Unidad', l_Unidad);
    l_Nip := Nip;
    TROSerializer(ASerializer).WriteAnsiString('Nip', l_Nip);
    l_Kms := Kms;
    TROSerializer(ASerializer).WriteInteger('Kms', otSLong, l_Kms);
    l_Comision := Comision;
    TROSerializer(ASerializer).WriteAnsiString('Comision', l_Comision);
    l_VentaAutorizada := VentaAutorizada;
    TROSerializer(ASerializer).WriteDouble('VentaAutorizada', ftDouble, l_VentaAutorizada);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
  end
  else begin
    l_Comision := Comision;
    TROSerializer(ASerializer).WriteAnsiString('Comision', l_Comision);
    l_Kms := Kms;
    TROSerializer(ASerializer).WriteInteger('Kms', otSLong, l_Kms);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_Nip := Nip;
    TROSerializer(ASerializer).WriteAnsiString('Nip', l_Nip);
    l_NoTerminal := NoTerminal;
    TROSerializer(ASerializer).WriteAnsiString('NoTerminal', l_NoTerminal);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
    l_TipoTarjeta := TipoTarjeta;
    TROSerializer(ASerializer).WriteAnsiString('TipoTarjeta', l_TipoTarjeta);
    l_TipoTrama := TipoTrama;
    TROSerializer(ASerializer).WriteAnsiString('TipoTrama', l_TipoTrama);
    l_Unidad := Unidad;
    TROSerializer(ASerializer).WriteAnsiString('Unidad', l_Unidad);
    l_VentaAutorizada := VentaAutorizada;
    TROSerializer(ASerializer).WriteDouble('VentaAutorizada', ftDouble, l_VentaAutorizada);
  end;
end;

{ TRegistroPuntoVentaCollection }
constructor TRegistroPuntoVentaCollection.Create;
begin
  inherited Create(TRegistroPuntoVenta);
end;

constructor TRegistroPuntoVentaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TRegistroPuntoVentaCollection.Add: TRegistroPuntoVenta;
begin
  result := TRegistroPuntoVenta(inherited Add);
end;

function TRegistroPuntoVentaCollection.GetItems(aIndex: integer): TRegistroPuntoVenta;
begin
  result := TRegistroPuntoVenta(inherited Items[aIndex]);
end;

procedure TRegistroPuntoVentaCollection.SetItems(aIndex: integer; const Value: TRegistroPuntoVenta);
begin
  TRegistroPuntoVenta(inherited Items[aIndex]).Assign(Value);
end;

{ TFactorDecimal }

procedure TFactorDecimal.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TFactorDecimal;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TFactorDecimal) then begin
    lSource := LibraryCistemGas_Intf.TFactorDecimal(iSource);
    CambioPrecios := lSource.CambioPrecios;
    VentaPrecio := lSource.VentaPrecio;
    VentaVolumen := lSource.VentaVolumen;
    VentaImporte := lSource.VentaImporte;
    LecturasVolumen := lSource.LecturasVolumen;
    LecturasImporte := lSource.LecturasImporte;
    PrefijarVolumen := lSource.PrefijarVolumen;
    PrefijarImporte := lSource.PrefijarImporte;
    DespliegaVolumen := lSource.DespliegaVolumen;
    DespliegaImporte := lSource.DespliegaImporte;
  end;
end;

procedure TFactorDecimal.ReadComplex(ASerializer: TObject);
var
  l_CambioPrecios: Double;
  l_DespliegaImporte: Double;
  l_DespliegaVolumen: Double;
  l_LecturasImporte: Double;
  l_LecturasVolumen: Double;
  l_PrefijarImporte: Double;
  l_PrefijarVolumen: Double;
  l_VentaImporte: Double;
  l_VentaPrecio: Double;
  l_VentaVolumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_CambioPrecios := CambioPrecios;
    TROSerializer(ASerializer).ReadDouble('CambioPrecios', ftDouble, l_CambioPrecios);
    CambioPrecios := l_CambioPrecios;
    l_VentaPrecio := VentaPrecio;
    TROSerializer(ASerializer).ReadDouble('VentaPrecio', ftDouble, l_VentaPrecio);
    VentaPrecio := l_VentaPrecio;
    l_VentaVolumen := VentaVolumen;
    TROSerializer(ASerializer).ReadDouble('VentaVolumen', ftDouble, l_VentaVolumen);
    VentaVolumen := l_VentaVolumen;
    l_VentaImporte := VentaImporte;
    TROSerializer(ASerializer).ReadDouble('VentaImporte', ftDouble, l_VentaImporte);
    VentaImporte := l_VentaImporte;
    l_LecturasVolumen := LecturasVolumen;
    TROSerializer(ASerializer).ReadDouble('LecturasVolumen', ftDouble, l_LecturasVolumen);
    LecturasVolumen := l_LecturasVolumen;
    l_LecturasImporte := LecturasImporte;
    TROSerializer(ASerializer).ReadDouble('LecturasImporte', ftDouble, l_LecturasImporte);
    LecturasImporte := l_LecturasImporte;
    l_PrefijarVolumen := PrefijarVolumen;
    TROSerializer(ASerializer).ReadDouble('PrefijarVolumen', ftDouble, l_PrefijarVolumen);
    PrefijarVolumen := l_PrefijarVolumen;
    l_PrefijarImporte := PrefijarImporte;
    TROSerializer(ASerializer).ReadDouble('PrefijarImporte', ftDouble, l_PrefijarImporte);
    PrefijarImporte := l_PrefijarImporte;
    l_DespliegaVolumen := DespliegaVolumen;
    TROSerializer(ASerializer).ReadDouble('DespliegaVolumen', ftDouble, l_DespliegaVolumen);
    DespliegaVolumen := l_DespliegaVolumen;
    l_DespliegaImporte := DespliegaImporte;
    TROSerializer(ASerializer).ReadDouble('DespliegaImporte', ftDouble, l_DespliegaImporte);
    DespliegaImporte := l_DespliegaImporte;
  end
  else begin
    l_CambioPrecios := CambioPrecios;
    TROSerializer(ASerializer).ReadDouble('CambioPrecios', ftDouble, l_CambioPrecios);
    CambioPrecios := l_CambioPrecios;
    l_DespliegaImporte := DespliegaImporte;
    TROSerializer(ASerializer).ReadDouble('DespliegaImporte', ftDouble, l_DespliegaImporte);
    DespliegaImporte := l_DespliegaImporte;
    l_DespliegaVolumen := DespliegaVolumen;
    TROSerializer(ASerializer).ReadDouble('DespliegaVolumen', ftDouble, l_DespliegaVolumen);
    DespliegaVolumen := l_DespliegaVolumen;
    l_LecturasImporte := LecturasImporte;
    TROSerializer(ASerializer).ReadDouble('LecturasImporte', ftDouble, l_LecturasImporte);
    LecturasImporte := l_LecturasImporte;
    l_LecturasVolumen := LecturasVolumen;
    TROSerializer(ASerializer).ReadDouble('LecturasVolumen', ftDouble, l_LecturasVolumen);
    LecturasVolumen := l_LecturasVolumen;
    l_PrefijarImporte := PrefijarImporte;
    TROSerializer(ASerializer).ReadDouble('PrefijarImporte', ftDouble, l_PrefijarImporte);
    PrefijarImporte := l_PrefijarImporte;
    l_PrefijarVolumen := PrefijarVolumen;
    TROSerializer(ASerializer).ReadDouble('PrefijarVolumen', ftDouble, l_PrefijarVolumen);
    PrefijarVolumen := l_PrefijarVolumen;
    l_VentaImporte := VentaImporte;
    TROSerializer(ASerializer).ReadDouble('VentaImporte', ftDouble, l_VentaImporte);
    VentaImporte := l_VentaImporte;
    l_VentaPrecio := VentaPrecio;
    TROSerializer(ASerializer).ReadDouble('VentaPrecio', ftDouble, l_VentaPrecio);
    VentaPrecio := l_VentaPrecio;
    l_VentaVolumen := VentaVolumen;
    TROSerializer(ASerializer).ReadDouble('VentaVolumen', ftDouble, l_VentaVolumen);
    VentaVolumen := l_VentaVolumen;
  end;
end;

procedure TFactorDecimal.WriteComplex(ASerializer: TObject);
var
  l_CambioPrecios: Double;
  l_DespliegaImporte: Double;
  l_DespliegaVolumen: Double;
  l_LecturasImporte: Double;
  l_LecturasVolumen: Double;
  l_PrefijarImporte: Double;
  l_PrefijarVolumen: Double;
  l_VentaImporte: Double;
  l_VentaPrecio: Double;
  l_VentaVolumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFactorDecimal);
    l_CambioPrecios := CambioPrecios;
    TROSerializer(ASerializer).WriteDouble('CambioPrecios', ftDouble, l_CambioPrecios);
    l_VentaPrecio := VentaPrecio;
    TROSerializer(ASerializer).WriteDouble('VentaPrecio', ftDouble, l_VentaPrecio);
    l_VentaVolumen := VentaVolumen;
    TROSerializer(ASerializer).WriteDouble('VentaVolumen', ftDouble, l_VentaVolumen);
    l_VentaImporte := VentaImporte;
    TROSerializer(ASerializer).WriteDouble('VentaImporte', ftDouble, l_VentaImporte);
    l_LecturasVolumen := LecturasVolumen;
    TROSerializer(ASerializer).WriteDouble('LecturasVolumen', ftDouble, l_LecturasVolumen);
    l_LecturasImporte := LecturasImporte;
    TROSerializer(ASerializer).WriteDouble('LecturasImporte', ftDouble, l_LecturasImporte);
    l_PrefijarVolumen := PrefijarVolumen;
    TROSerializer(ASerializer).WriteDouble('PrefijarVolumen', ftDouble, l_PrefijarVolumen);
    l_PrefijarImporte := PrefijarImporte;
    TROSerializer(ASerializer).WriteDouble('PrefijarImporte', ftDouble, l_PrefijarImporte);
    l_DespliegaVolumen := DespliegaVolumen;
    TROSerializer(ASerializer).WriteDouble('DespliegaVolumen', ftDouble, l_DespliegaVolumen);
    l_DespliegaImporte := DespliegaImporte;
    TROSerializer(ASerializer).WriteDouble('DespliegaImporte', ftDouble, l_DespliegaImporte);
  end
  else begin
    l_CambioPrecios := CambioPrecios;
    TROSerializer(ASerializer).WriteDouble('CambioPrecios', ftDouble, l_CambioPrecios);
    l_DespliegaImporte := DespliegaImporte;
    TROSerializer(ASerializer).WriteDouble('DespliegaImporte', ftDouble, l_DespliegaImporte);
    l_DespliegaVolumen := DespliegaVolumen;
    TROSerializer(ASerializer).WriteDouble('DespliegaVolumen', ftDouble, l_DespliegaVolumen);
    l_LecturasImporte := LecturasImporte;
    TROSerializer(ASerializer).WriteDouble('LecturasImporte', ftDouble, l_LecturasImporte);
    l_LecturasVolumen := LecturasVolumen;
    TROSerializer(ASerializer).WriteDouble('LecturasVolumen', ftDouble, l_LecturasVolumen);
    l_PrefijarImporte := PrefijarImporte;
    TROSerializer(ASerializer).WriteDouble('PrefijarImporte', ftDouble, l_PrefijarImporte);
    l_PrefijarVolumen := PrefijarVolumen;
    TROSerializer(ASerializer).WriteDouble('PrefijarVolumen', ftDouble, l_PrefijarVolumen);
    l_VentaImporte := VentaImporte;
    TROSerializer(ASerializer).WriteDouble('VentaImporte', ftDouble, l_VentaImporte);
    l_VentaPrecio := VentaPrecio;
    TROSerializer(ASerializer).WriteDouble('VentaPrecio', ftDouble, l_VentaPrecio);
    l_VentaVolumen := VentaVolumen;
    TROSerializer(ASerializer).WriteDouble('VentaVolumen', ftDouble, l_VentaVolumen);
  end;
end;

{ TFactorDecimalCollection }
constructor TFactorDecimalCollection.Create;
begin
  inherited Create(TFactorDecimal);
end;

constructor TFactorDecimalCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFactorDecimalCollection.Add: TFactorDecimal;
begin
  result := TFactorDecimal(inherited Add);
end;

function TFactorDecimalCollection.GetItems(aIndex: integer): TFactorDecimal;
begin
  result := TFactorDecimal(inherited Items[aIndex]);
end;

procedure TFactorDecimalCollection.SetItems(aIndex: integer; const Value: TFactorDecimal);
begin
  TFactorDecimal(inherited Items[aIndex]).Assign(Value);
end;

{ TBomba }

procedure TBomba.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TBomba;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TBomba) then begin
    lSource := LibraryCistemGas_Intf.TBomba(iSource);
    AutoImprimir := lSource.AutoImprimir;
    Autorizacion := lSource.Autorizacion;
    AutorizacionAutomatica := lSource.AutorizacionAutomatica;
    Clasificacion := lSource.Clasificacion;
    CodigoProducto := lSource.CodigoProducto;
    ConectLCD := lSource.ConectLCD;
    Despachador := lSource.Despachador;
    DobleTarjeta := lSource.DobleTarjeta;
    Estado := lSource.Estado;
    PendienteRegistrar := lSource.PendienteRegistrar;
    EstadoNuevo := lSource.EstadoNuevo;
    EstadoVenta := lSource.EstadoVenta;
    FactorDecimal.Assign(lSource.FactorDecimal);
    FaltaPago.Assign(lSource.FaltaPago);
    Flujo.Assign(lSource.Flujo);
    Gasolina := lSource.Gasolina;
    Guardando := lSource.Guardando;
    Host := lSource.Host;
    IDInterno := lSource.IDInterno;
    ImporteMinimo := lSource.ImporteMinimo;
    IntentoPrepago := lSource.IntentoPrepago;
    LecturasFinales.Assign(lSource.LecturasFinales);
    LecturasIniciales.Assign(lSource.LecturasIniciales);
    LecturasTurno.Assign(lSource.LecturasTurno);
    Mangueras.Assign(lSource.Mangueras);
    MaximoLecturasImporte := lSource.MaximoLecturasImporte;
    MaximoLecturasVolumen := lSource.MaximoLecturasVolumen;
    Modo := lSource.Modo;
    NoMangueras := lSource.NoMangueras;
    NombreImpresora := lSource.NombreImpresora;
    NuevoFlujo := lSource.NuevoFlujo;
    Pendiente := lSource.Pendiente;
    PendienteGrabar := lSource.PendienteGrabar;
    PendientesAplicar.Assign(lSource.PendientesAplicar);
    Posicionamiento.Assign(lSource.Posicionamiento);
    Preset := lSource.Preset;
    Proceso := lSource.Proceso;
    PuntosRegistrados := lSource.PuntosRegistrados;
    PuntoVenta.Assign(lSource.PuntoVenta);
    RegresaModo := lSource.RegresaModo;
    Servicio := lSource.Servicio;
    Ticket := lSource.Ticket;
    TiempoAutorizado := lSource.TiempoAutorizado;
    TipoDispensario := lSource.TipoDispensario;
    TipoTarjeta := lSource.TipoTarjeta;
    TotalizacionAutomatica := lSource.TotalizacionAutomatica;
    TurnoID := lSource.TurnoID;
    UltimoFlujo := lSource.UltimoFlujo;
    UltimoLimiteImporte := lSource.UltimoLimiteImporte;
    UltimoLimiteVolumen := lSource.UltimoLimiteVolumen;
    VentaAntePenultima.Assign(lSource.VentaAntePenultima);
    VentaPenultima.Assign(lSource.VentaPenultima);
    VentaProceso.Assign(lSource.VentaProceso);
    VentasTurno.Assign(lSource.VentasTurno);
    VentaUltima.Assign(lSource.VentaUltima);
    Externo := lSource.Externo;
    AgrupacionID := lSource.AgrupacionID;
    Nodo.Assign(lSource.Nodo);
  end;
end;

function TBomba.GetFactorDecimal: TFactorDecimal;
begin
  if (fFactorDecimal = nil) then fFactorDecimal := TFactorDecimal.Create();
  result := fFactorDecimal;
end;

function TBomba.GetFaltaPago: aBoolean;
begin
  if (fFaltaPago = nil) then fFaltaPago := aBoolean.Create();
  result := fFaltaPago;
end;

function TBomba.GetFlujo: TFlujos;
begin
  if (fFlujo = nil) then fFlujo := TFlujos.Create();
  result := fFlujo;
end;

function TBomba.GetLecturasFinales: aLecturas;
begin
  if (fLecturasFinales = nil) then fLecturasFinales := aLecturas.Create();
  result := fLecturasFinales;
end;

function TBomba.GetLecturasIniciales: aLecturas;
begin
  if (fLecturasIniciales = nil) then fLecturasIniciales := aLecturas.Create();
  result := fLecturasIniciales;
end;

function TBomba.GetLecturasTurno: aLecturas;
begin
  if (fLecturasTurno = nil) then fLecturasTurno := aLecturas.Create();
  result := fLecturasTurno;
end;

function TBomba.GetMangueras: aMangueras;
begin
  if (fMangueras = nil) then fMangueras := aMangueras.Create();
  result := fMangueras;
end;

function TBomba.GetPendientesAplicar: aContador;
begin
  if (fPendientesAplicar = nil) then fPendientesAplicar := aContador.Create();
  result := fPendientesAplicar;
end;

function TBomba.GetPosicionamiento: TCanal;
begin
  if (fPosicionamiento = nil) then fPosicionamiento := TCanal.Create();
  result := fPosicionamiento;
end;

function TBomba.GetPuntoVenta: TRegistroPuntoVenta;
begin
  if (fPuntoVenta = nil) then fPuntoVenta := TRegistroPuntoVenta.Create();
  result := fPuntoVenta;
end;

function TBomba.GetVentaAntePenultima: TRegistroVenta;
begin
  if (fVentaAntePenultima = nil) then fVentaAntePenultima := TRegistroVenta.Create();
  result := fVentaAntePenultima;
end;

function TBomba.GetVentaPenultima: TRegistroVenta;
begin
  if (fVentaPenultima = nil) then fVentaPenultima := TRegistroVenta.Create();
  result := fVentaPenultima;
end;

function TBomba.GetVentaProceso: TRegistroVenta;
begin
  if (fVentaProceso = nil) then fVentaProceso := TRegistroVenta.Create();
  result := fVentaProceso;
end;

function TBomba.GetVentasTurno: aContador;
begin
  if (fVentasTurno = nil) then fVentasTurno := aContador.Create();
  result := fVentasTurno;
end;

function TBomba.GetVentaUltima: TRegistroVenta;
begin
  if (fVentaUltima = nil) then fVentaUltima := TRegistroVenta.Create();
  result := fVentaUltima;
end;

function TBomba.GetNodo: TNodo;
begin
  if (fNodo = nil) then fNodo := TNodo.Create();
  result := fNodo;
end;

procedure TBomba.ReadComplex(ASerializer: TObject);
var
  l_AgrupacionID: Integer;
  l_AutoImprimir: Boolean;
  l_Autorizacion: eTipoAutorizacion;
  l_AutorizacionAutomatica: Integer;
  l_Clasificacion: AnsiString;
  l_CodigoProducto: eCodigoProducto;
  l_ConectLCD: Integer;
  l_Despachador: Integer;
  l_DobleTarjeta: Boolean;
  l_Estado: eEstadoBomba;
  l_EstadoNuevo: eEstadoBomba;
  l_EstadoVenta: eEstadoVenta;
  l_Externo: Integer;
  l_FactorDecimal: TFactorDecimal;
  l_FaltaPago: aBoolean;
  l_Flujo: TFlujos;
  l_Gasolina: Integer;
  l_Guardando: Boolean;
  l_Host: AnsiString;
  l_IDInterno: Integer;
  l_ImporteMinimo: Double;
  l_IntentoPrepago: Boolean;
  l_LecturasFinales: aLecturas;
  l_LecturasIniciales: aLecturas;
  l_LecturasTurno: aLecturas;
  l_Mangueras: aMangueras;
  l_MaximoLecturasImporte: Double;
  l_MaximoLecturasVolumen: Double;
  l_Modo: eModoOperacion;
  l_Nodo: TNodo;
  l_NoMangueras: Integer;
  l_NombreImpresora: AnsiString;
  l_NuevoFlujo: AnsiString;
  l_Pendiente: Boolean;
  l_PendienteGrabar: Boolean;
  l_PendienteRegistrar: Boolean;
  l_PendientesAplicar: aContador;
  l_Posicionamiento: TCanal;
  l_Preset: eTipoPreset;
  l_Proceso: eProceso;
  l_PuntosRegistrados: Boolean;
  l_PuntoVenta: TRegistroPuntoVenta;
  l_RegresaModo: Boolean;
  l_Servicio: Double;
  l_Ticket: eImpresionTicket;
  l_TiempoAutorizado: Integer;
  l_TipoDispensario: Integer;
  l_TipoTarjeta: Integer;
  l_TotalizacionAutomatica: Integer;
  l_TurnoID: Integer;
  l_UltimoFlujo: AnsiString;
  l_UltimoLimiteImporte: Double;
  l_UltimoLimiteVolumen: Double;
  l_VentaAntePenultima: TRegistroVenta;
  l_VentaPenultima: TRegistroVenta;
  l_VentaProceso: TRegistroVenta;
  l_VentasTurno: aContador;
  l_VentaUltima: TRegistroVenta;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_AutoImprimir := AutoImprimir;
    TROSerializer(ASerializer).ReadEnumerated('AutoImprimir',TypeInfo(boolean), l_AutoImprimir);
    AutoImprimir := l_AutoImprimir;
    l_Autorizacion := Autorizacion;
    TROSerializer(ASerializer).ReadEnumerated('Autorizacion',TypeInfo(eTipoAutorizacion), l_Autorizacion);
    Autorizacion := l_Autorizacion;
    l_AutorizacionAutomatica := AutorizacionAutomatica;
    TROSerializer(ASerializer).ReadInteger('AutorizacionAutomatica', otSLong, l_AutorizacionAutomatica);
    AutorizacionAutomatica := l_AutorizacionAutomatica;
    l_Clasificacion := Clasificacion;
    TROSerializer(ASerializer).ReadAnsiString('Clasificacion', l_Clasificacion);
    Clasificacion := l_Clasificacion;
    l_CodigoProducto := CodigoProducto;
    TROSerializer(ASerializer).ReadEnumerated('CodigoProducto',TypeInfo(eCodigoProducto), l_CodigoProducto);
    CodigoProducto := l_CodigoProducto;
    l_ConectLCD := ConectLCD;
    TROSerializer(ASerializer).ReadInteger('ConectLCD', otSLong, l_ConectLCD);
    ConectLCD := l_ConectLCD;
    l_Despachador := Despachador;
    TROSerializer(ASerializer).ReadInteger('Despachador', otSLong, l_Despachador);
    Despachador := l_Despachador;
    l_DobleTarjeta := DobleTarjeta;
    TROSerializer(ASerializer).ReadEnumerated('DobleTarjeta',TypeInfo(boolean), l_DobleTarjeta);
    DobleTarjeta := l_DobleTarjeta;
    l_Estado := Estado;
    TROSerializer(ASerializer).ReadEnumerated('Estado',TypeInfo(eEstadoBomba), l_Estado);
    Estado := l_Estado;
    l_PendienteRegistrar := PendienteRegistrar;
    TROSerializer(ASerializer).ReadEnumerated('PendienteRegistrar',TypeInfo(boolean), l_PendienteRegistrar);
    PendienteRegistrar := l_PendienteRegistrar;
    l_EstadoNuevo := EstadoNuevo;
    TROSerializer(ASerializer).ReadEnumerated('EstadoNuevo',TypeInfo(eEstadoBomba), l_EstadoNuevo);
    EstadoNuevo := l_EstadoNuevo;
    l_EstadoVenta := EstadoVenta;
    TROSerializer(ASerializer).ReadEnumerated('EstadoVenta',TypeInfo(eEstadoVenta), l_EstadoVenta);
    EstadoVenta := l_EstadoVenta;
    l_FactorDecimal := FactorDecimal;
    TROSerializer(ASerializer).ReadStruct('FactorDecimal', TFactorDecimal, l_FactorDecimal);
    if FactorDecimal <> l_FactorDecimal then FactorDecimal.Free;
    FactorDecimal := l_FactorDecimal;
    l_FaltaPago := FaltaPago;
    TROSerializer(ASerializer).ReadArray('FaltaPago', aBoolean, l_FaltaPago);
    if FaltaPago <> l_FaltaPago then FaltaPago.Free;
    FaltaPago := l_FaltaPago;
    l_Flujo := Flujo;
    TROSerializer(ASerializer).ReadStruct('Flujo', TFlujos, l_Flujo);
    if Flujo <> l_Flujo then Flujo.Free;
    Flujo := l_Flujo;
    l_Gasolina := Gasolina;
    TROSerializer(ASerializer).ReadInteger('Gasolina', otSLong, l_Gasolina);
    Gasolina := l_Gasolina;
    l_Guardando := Guardando;
    TROSerializer(ASerializer).ReadEnumerated('Guardando',TypeInfo(boolean), l_Guardando);
    Guardando := l_Guardando;
    l_Host := Host;
    TROSerializer(ASerializer).ReadAnsiString('Host', l_Host);
    Host := l_Host;
    l_IDInterno := IDInterno;
    TROSerializer(ASerializer).ReadInteger('IDInterno', otSLong, l_IDInterno);
    IDInterno := l_IDInterno;
    l_ImporteMinimo := ImporteMinimo;
    TROSerializer(ASerializer).ReadDouble('ImporteMinimo', ftDouble, l_ImporteMinimo);
    ImporteMinimo := l_ImporteMinimo;
    l_IntentoPrepago := IntentoPrepago;
    TROSerializer(ASerializer).ReadEnumerated('IntentoPrepago',TypeInfo(boolean), l_IntentoPrepago);
    IntentoPrepago := l_IntentoPrepago;
    l_LecturasFinales := LecturasFinales;
    TROSerializer(ASerializer).ReadArray('LecturasFinales', aLecturas, l_LecturasFinales);
    if LecturasFinales <> l_LecturasFinales then LecturasFinales.Free;
    LecturasFinales := l_LecturasFinales;
    l_LecturasIniciales := LecturasIniciales;
    TROSerializer(ASerializer).ReadArray('LecturasIniciales', aLecturas, l_LecturasIniciales);
    if LecturasIniciales <> l_LecturasIniciales then LecturasIniciales.Free;
    LecturasIniciales := l_LecturasIniciales;
    l_LecturasTurno := LecturasTurno;
    TROSerializer(ASerializer).ReadArray('LecturasTurno', aLecturas, l_LecturasTurno);
    if LecturasTurno <> l_LecturasTurno then LecturasTurno.Free;
    LecturasTurno := l_LecturasTurno;
    l_Mangueras := Mangueras;
    TROSerializer(ASerializer).ReadArray('Mangueras', aMangueras, l_Mangueras);
    if Mangueras <> l_Mangueras then Mangueras.Free;
    Mangueras := l_Mangueras;
    l_MaximoLecturasImporte := MaximoLecturasImporte;
    TROSerializer(ASerializer).ReadDouble('MaximoLecturasImporte', ftDouble, l_MaximoLecturasImporte);
    MaximoLecturasImporte := l_MaximoLecturasImporte;
    l_MaximoLecturasVolumen := MaximoLecturasVolumen;
    TROSerializer(ASerializer).ReadDouble('MaximoLecturasVolumen', ftDouble, l_MaximoLecturasVolumen);
    MaximoLecturasVolumen := l_MaximoLecturasVolumen;
    l_Modo := Modo;
    TROSerializer(ASerializer).ReadEnumerated('Modo',TypeInfo(eModoOperacion), l_Modo);
    Modo := l_Modo;
    l_NoMangueras := NoMangueras;
    TROSerializer(ASerializer).ReadInteger('NoMangueras', otSLong, l_NoMangueras);
    NoMangueras := l_NoMangueras;
    l_NombreImpresora := NombreImpresora;
    TROSerializer(ASerializer).ReadAnsiString('NombreImpresora', l_NombreImpresora);
    NombreImpresora := l_NombreImpresora;
    l_NuevoFlujo := NuevoFlujo;
    TROSerializer(ASerializer).ReadAnsiString('NuevoFlujo', l_NuevoFlujo);
    NuevoFlujo := l_NuevoFlujo;
    l_Pendiente := Pendiente;
    TROSerializer(ASerializer).ReadEnumerated('Pendiente',TypeInfo(boolean), l_Pendiente);
    Pendiente := l_Pendiente;
    l_PendienteGrabar := PendienteGrabar;
    TROSerializer(ASerializer).ReadEnumerated('PendienteGrabar',TypeInfo(boolean), l_PendienteGrabar);
    PendienteGrabar := l_PendienteGrabar;
    l_PendientesAplicar := PendientesAplicar;
    TROSerializer(ASerializer).ReadArray('PendientesAplicar', aContador, l_PendientesAplicar);
    if PendientesAplicar <> l_PendientesAplicar then PendientesAplicar.Free;
    PendientesAplicar := l_PendientesAplicar;
    l_Posicionamiento := Posicionamiento;
    TROSerializer(ASerializer).ReadStruct('Posicionamiento', TCanal, l_Posicionamiento);
    if Posicionamiento <> l_Posicionamiento then Posicionamiento.Free;
    Posicionamiento := l_Posicionamiento;
    l_Preset := Preset;
    TROSerializer(ASerializer).ReadEnumerated('Preset',TypeInfo(eTipoPreset), l_Preset);
    Preset := l_Preset;
    l_Proceso := Proceso;
    TROSerializer(ASerializer).ReadEnumerated('Proceso',TypeInfo(eProceso), l_Proceso);
    Proceso := l_Proceso;
    l_PuntosRegistrados := PuntosRegistrados;
    TROSerializer(ASerializer).ReadEnumerated('PuntosRegistrados',TypeInfo(boolean), l_PuntosRegistrados);
    PuntosRegistrados := l_PuntosRegistrados;
    l_PuntoVenta := PuntoVenta;
    TROSerializer(ASerializer).ReadStruct('PuntoVenta', TRegistroPuntoVenta, l_PuntoVenta);
    if PuntoVenta <> l_PuntoVenta then PuntoVenta.Free;
    PuntoVenta := l_PuntoVenta;
    l_RegresaModo := RegresaModo;
    TROSerializer(ASerializer).ReadEnumerated('RegresaModo',TypeInfo(boolean), l_RegresaModo);
    RegresaModo := l_RegresaModo;
    l_Servicio := Servicio;
    TROSerializer(ASerializer).ReadDouble('Servicio', ftDouble, l_Servicio);
    Servicio := l_Servicio;
    l_Ticket := Ticket;
    TROSerializer(ASerializer).ReadEnumerated('Ticket',TypeInfo(eImpresionTicket), l_Ticket);
    Ticket := l_Ticket;
    l_TiempoAutorizado := TiempoAutorizado;
    TROSerializer(ASerializer).ReadInteger('TiempoAutorizado', otSLong, l_TiempoAutorizado);
    TiempoAutorizado := l_TiempoAutorizado;
    l_TipoDispensario := TipoDispensario;
    TROSerializer(ASerializer).ReadInteger('TipoDispensario', otSLong, l_TipoDispensario);
    TipoDispensario := l_TipoDispensario;
    l_TipoTarjeta := TipoTarjeta;
    TROSerializer(ASerializer).ReadInteger('TipoTarjeta', otSLong, l_TipoTarjeta);
    TipoTarjeta := l_TipoTarjeta;
    l_TotalizacionAutomatica := TotalizacionAutomatica;
    TROSerializer(ASerializer).ReadInteger('TotalizacionAutomatica', otSLong, l_TotalizacionAutomatica);
    TotalizacionAutomatica := l_TotalizacionAutomatica;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
    l_UltimoFlujo := UltimoFlujo;
    TROSerializer(ASerializer).ReadAnsiString('UltimoFlujo', l_UltimoFlujo);
    UltimoFlujo := l_UltimoFlujo;
    l_UltimoLimiteImporte := UltimoLimiteImporte;
    TROSerializer(ASerializer).ReadDouble('UltimoLimiteImporte', ftDouble, l_UltimoLimiteImporte);
    UltimoLimiteImporte := l_UltimoLimiteImporte;
    l_UltimoLimiteVolumen := UltimoLimiteVolumen;
    TROSerializer(ASerializer).ReadDouble('UltimoLimiteVolumen', ftDouble, l_UltimoLimiteVolumen);
    UltimoLimiteVolumen := l_UltimoLimiteVolumen;
    l_VentaAntePenultima := VentaAntePenultima;
    TROSerializer(ASerializer).ReadStruct('VentaAntePenultima', TRegistroVenta, l_VentaAntePenultima);
    if VentaAntePenultima <> l_VentaAntePenultima then VentaAntePenultima.Free;
    VentaAntePenultima := l_VentaAntePenultima;
    l_VentaPenultima := VentaPenultima;
    TROSerializer(ASerializer).ReadStruct('VentaPenultima', TRegistroVenta, l_VentaPenultima);
    if VentaPenultima <> l_VentaPenultima then VentaPenultima.Free;
    VentaPenultima := l_VentaPenultima;
    l_VentaProceso := VentaProceso;
    TROSerializer(ASerializer).ReadStruct('VentaProceso', TRegistroVenta, l_VentaProceso);
    if VentaProceso <> l_VentaProceso then VentaProceso.Free;
    VentaProceso := l_VentaProceso;
    l_VentasTurno := VentasTurno;
    TROSerializer(ASerializer).ReadArray('VentasTurno', aContador, l_VentasTurno);
    if VentasTurno <> l_VentasTurno then VentasTurno.Free;
    VentasTurno := l_VentasTurno;
    l_VentaUltima := VentaUltima;
    TROSerializer(ASerializer).ReadStruct('VentaUltima', TRegistroVenta, l_VentaUltima);
    if VentaUltima <> l_VentaUltima then VentaUltima.Free;
    VentaUltima := l_VentaUltima;
    l_Externo := Externo;
    TROSerializer(ASerializer).ReadInteger('Externo', otSLong, l_Externo);
    Externo := l_Externo;
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).ReadInteger('AgrupacionID', otSLong, l_AgrupacionID);
    AgrupacionID := l_AgrupacionID;
    l_Nodo := Nodo;
    TROSerializer(ASerializer).ReadStruct('Nodo', TNodo, l_Nodo);
    if Nodo <> l_Nodo then Nodo.Free;
    Nodo := l_Nodo;
  end
  else begin
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).ReadInteger('AgrupacionID', otSLong, l_AgrupacionID);
    AgrupacionID := l_AgrupacionID;
    l_AutoImprimir := AutoImprimir;
    TROSerializer(ASerializer).ReadEnumerated('AutoImprimir',TypeInfo(boolean), l_AutoImprimir);
    AutoImprimir := l_AutoImprimir;
    l_Autorizacion := Autorizacion;
    TROSerializer(ASerializer).ReadEnumerated('Autorizacion',TypeInfo(eTipoAutorizacion), l_Autorizacion);
    Autorizacion := l_Autorizacion;
    l_AutorizacionAutomatica := AutorizacionAutomatica;
    TROSerializer(ASerializer).ReadInteger('AutorizacionAutomatica', otSLong, l_AutorizacionAutomatica);
    AutorizacionAutomatica := l_AutorizacionAutomatica;
    l_Clasificacion := Clasificacion;
    TROSerializer(ASerializer).ReadAnsiString('Clasificacion', l_Clasificacion);
    Clasificacion := l_Clasificacion;
    l_CodigoProducto := CodigoProducto;
    TROSerializer(ASerializer).ReadEnumerated('CodigoProducto',TypeInfo(eCodigoProducto), l_CodigoProducto);
    CodigoProducto := l_CodigoProducto;
    l_ConectLCD := ConectLCD;
    TROSerializer(ASerializer).ReadInteger('ConectLCD', otSLong, l_ConectLCD);
    ConectLCD := l_ConectLCD;
    l_Despachador := Despachador;
    TROSerializer(ASerializer).ReadInteger('Despachador', otSLong, l_Despachador);
    Despachador := l_Despachador;
    l_DobleTarjeta := DobleTarjeta;
    TROSerializer(ASerializer).ReadEnumerated('DobleTarjeta',TypeInfo(boolean), l_DobleTarjeta);
    DobleTarjeta := l_DobleTarjeta;
    l_Estado := Estado;
    TROSerializer(ASerializer).ReadEnumerated('Estado',TypeInfo(eEstadoBomba), l_Estado);
    Estado := l_Estado;
    l_EstadoNuevo := EstadoNuevo;
    TROSerializer(ASerializer).ReadEnumerated('EstadoNuevo',TypeInfo(eEstadoBomba), l_EstadoNuevo);
    EstadoNuevo := l_EstadoNuevo;
    l_EstadoVenta := EstadoVenta;
    TROSerializer(ASerializer).ReadEnumerated('EstadoVenta',TypeInfo(eEstadoVenta), l_EstadoVenta);
    EstadoVenta := l_EstadoVenta;
    l_Externo := Externo;
    TROSerializer(ASerializer).ReadInteger('Externo', otSLong, l_Externo);
    Externo := l_Externo;
    l_FactorDecimal := FactorDecimal;
    TROSerializer(ASerializer).ReadStruct('FactorDecimal', TFactorDecimal, l_FactorDecimal);
    if FactorDecimal <> l_FactorDecimal then FactorDecimal.Free;
    FactorDecimal := l_FactorDecimal;
    l_FaltaPago := FaltaPago;
    TROSerializer(ASerializer).ReadArray('FaltaPago', aBoolean, l_FaltaPago);
    if FaltaPago <> l_FaltaPago then FaltaPago.Free;
    FaltaPago := l_FaltaPago;
    l_Flujo := Flujo;
    TROSerializer(ASerializer).ReadStruct('Flujo', TFlujos, l_Flujo);
    if Flujo <> l_Flujo then Flujo.Free;
    Flujo := l_Flujo;
    l_Gasolina := Gasolina;
    TROSerializer(ASerializer).ReadInteger('Gasolina', otSLong, l_Gasolina);
    Gasolina := l_Gasolina;
    l_Guardando := Guardando;
    TROSerializer(ASerializer).ReadEnumerated('Guardando',TypeInfo(boolean), l_Guardando);
    Guardando := l_Guardando;
    l_Host := Host;
    TROSerializer(ASerializer).ReadAnsiString('Host', l_Host);
    Host := l_Host;
    l_IDInterno := IDInterno;
    TROSerializer(ASerializer).ReadInteger('IDInterno', otSLong, l_IDInterno);
    IDInterno := l_IDInterno;
    l_ImporteMinimo := ImporteMinimo;
    TROSerializer(ASerializer).ReadDouble('ImporteMinimo', ftDouble, l_ImporteMinimo);
    ImporteMinimo := l_ImporteMinimo;
    l_IntentoPrepago := IntentoPrepago;
    TROSerializer(ASerializer).ReadEnumerated('IntentoPrepago',TypeInfo(boolean), l_IntentoPrepago);
    IntentoPrepago := l_IntentoPrepago;
    l_LecturasFinales := LecturasFinales;
    TROSerializer(ASerializer).ReadArray('LecturasFinales', aLecturas, l_LecturasFinales);
    if LecturasFinales <> l_LecturasFinales then LecturasFinales.Free;
    LecturasFinales := l_LecturasFinales;
    l_LecturasIniciales := LecturasIniciales;
    TROSerializer(ASerializer).ReadArray('LecturasIniciales', aLecturas, l_LecturasIniciales);
    if LecturasIniciales <> l_LecturasIniciales then LecturasIniciales.Free;
    LecturasIniciales := l_LecturasIniciales;
    l_LecturasTurno := LecturasTurno;
    TROSerializer(ASerializer).ReadArray('LecturasTurno', aLecturas, l_LecturasTurno);
    if LecturasTurno <> l_LecturasTurno then LecturasTurno.Free;
    LecturasTurno := l_LecturasTurno;
    l_Mangueras := Mangueras;
    TROSerializer(ASerializer).ReadArray('Mangueras', aMangueras, l_Mangueras);
    if Mangueras <> l_Mangueras then Mangueras.Free;
    Mangueras := l_Mangueras;
    l_MaximoLecturasImporte := MaximoLecturasImporte;
    TROSerializer(ASerializer).ReadDouble('MaximoLecturasImporte', ftDouble, l_MaximoLecturasImporte);
    MaximoLecturasImporte := l_MaximoLecturasImporte;
    l_MaximoLecturasVolumen := MaximoLecturasVolumen;
    TROSerializer(ASerializer).ReadDouble('MaximoLecturasVolumen', ftDouble, l_MaximoLecturasVolumen);
    MaximoLecturasVolumen := l_MaximoLecturasVolumen;
    l_Modo := Modo;
    TROSerializer(ASerializer).ReadEnumerated('Modo',TypeInfo(eModoOperacion), l_Modo);
    Modo := l_Modo;
    l_Nodo := Nodo;
    TROSerializer(ASerializer).ReadStruct('Nodo', TNodo, l_Nodo);
    if Nodo <> l_Nodo then Nodo.Free;
    Nodo := l_Nodo;
    l_NoMangueras := NoMangueras;
    TROSerializer(ASerializer).ReadInteger('NoMangueras', otSLong, l_NoMangueras);
    NoMangueras := l_NoMangueras;
    l_NombreImpresora := NombreImpresora;
    TROSerializer(ASerializer).ReadAnsiString('NombreImpresora', l_NombreImpresora);
    NombreImpresora := l_NombreImpresora;
    l_NuevoFlujo := NuevoFlujo;
    TROSerializer(ASerializer).ReadAnsiString('NuevoFlujo', l_NuevoFlujo);
    NuevoFlujo := l_NuevoFlujo;
    l_Pendiente := Pendiente;
    TROSerializer(ASerializer).ReadEnumerated('Pendiente',TypeInfo(boolean), l_Pendiente);
    Pendiente := l_Pendiente;
    l_PendienteGrabar := PendienteGrabar;
    TROSerializer(ASerializer).ReadEnumerated('PendienteGrabar',TypeInfo(boolean), l_PendienteGrabar);
    PendienteGrabar := l_PendienteGrabar;
    l_PendienteRegistrar := PendienteRegistrar;
    TROSerializer(ASerializer).ReadEnumerated('PendienteRegistrar',TypeInfo(boolean), l_PendienteRegistrar);
    PendienteRegistrar := l_PendienteRegistrar;
    l_PendientesAplicar := PendientesAplicar;
    TROSerializer(ASerializer).ReadArray('PendientesAplicar', aContador, l_PendientesAplicar);
    if PendientesAplicar <> l_PendientesAplicar then PendientesAplicar.Free;
    PendientesAplicar := l_PendientesAplicar;
    l_Posicionamiento := Posicionamiento;
    TROSerializer(ASerializer).ReadStruct('Posicionamiento', TCanal, l_Posicionamiento);
    if Posicionamiento <> l_Posicionamiento then Posicionamiento.Free;
    Posicionamiento := l_Posicionamiento;
    l_Preset := Preset;
    TROSerializer(ASerializer).ReadEnumerated('Preset',TypeInfo(eTipoPreset), l_Preset);
    Preset := l_Preset;
    l_Proceso := Proceso;
    TROSerializer(ASerializer).ReadEnumerated('Proceso',TypeInfo(eProceso), l_Proceso);
    Proceso := l_Proceso;
    l_PuntosRegistrados := PuntosRegistrados;
    TROSerializer(ASerializer).ReadEnumerated('PuntosRegistrados',TypeInfo(boolean), l_PuntosRegistrados);
    PuntosRegistrados := l_PuntosRegistrados;
    l_PuntoVenta := PuntoVenta;
    TROSerializer(ASerializer).ReadStruct('PuntoVenta', TRegistroPuntoVenta, l_PuntoVenta);
    if PuntoVenta <> l_PuntoVenta then PuntoVenta.Free;
    PuntoVenta := l_PuntoVenta;
    l_RegresaModo := RegresaModo;
    TROSerializer(ASerializer).ReadEnumerated('RegresaModo',TypeInfo(boolean), l_RegresaModo);
    RegresaModo := l_RegresaModo;
    l_Servicio := Servicio;
    TROSerializer(ASerializer).ReadDouble('Servicio', ftDouble, l_Servicio);
    Servicio := l_Servicio;
    l_Ticket := Ticket;
    TROSerializer(ASerializer).ReadEnumerated('Ticket',TypeInfo(eImpresionTicket), l_Ticket);
    Ticket := l_Ticket;
    l_TiempoAutorizado := TiempoAutorizado;
    TROSerializer(ASerializer).ReadInteger('TiempoAutorizado', otSLong, l_TiempoAutorizado);
    TiempoAutorizado := l_TiempoAutorizado;
    l_TipoDispensario := TipoDispensario;
    TROSerializer(ASerializer).ReadInteger('TipoDispensario', otSLong, l_TipoDispensario);
    TipoDispensario := l_TipoDispensario;
    l_TipoTarjeta := TipoTarjeta;
    TROSerializer(ASerializer).ReadInteger('TipoTarjeta', otSLong, l_TipoTarjeta);
    TipoTarjeta := l_TipoTarjeta;
    l_TotalizacionAutomatica := TotalizacionAutomatica;
    TROSerializer(ASerializer).ReadInteger('TotalizacionAutomatica', otSLong, l_TotalizacionAutomatica);
    TotalizacionAutomatica := l_TotalizacionAutomatica;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
    l_UltimoFlujo := UltimoFlujo;
    TROSerializer(ASerializer).ReadAnsiString('UltimoFlujo', l_UltimoFlujo);
    UltimoFlujo := l_UltimoFlujo;
    l_UltimoLimiteImporte := UltimoLimiteImporte;
    TROSerializer(ASerializer).ReadDouble('UltimoLimiteImporte', ftDouble, l_UltimoLimiteImporte);
    UltimoLimiteImporte := l_UltimoLimiteImporte;
    l_UltimoLimiteVolumen := UltimoLimiteVolumen;
    TROSerializer(ASerializer).ReadDouble('UltimoLimiteVolumen', ftDouble, l_UltimoLimiteVolumen);
    UltimoLimiteVolumen := l_UltimoLimiteVolumen;
    l_VentaAntePenultima := VentaAntePenultima;
    TROSerializer(ASerializer).ReadStruct('VentaAntePenultima', TRegistroVenta, l_VentaAntePenultima);
    if VentaAntePenultima <> l_VentaAntePenultima then VentaAntePenultima.Free;
    VentaAntePenultima := l_VentaAntePenultima;
    l_VentaPenultima := VentaPenultima;
    TROSerializer(ASerializer).ReadStruct('VentaPenultima', TRegistroVenta, l_VentaPenultima);
    if VentaPenultima <> l_VentaPenultima then VentaPenultima.Free;
    VentaPenultima := l_VentaPenultima;
    l_VentaProceso := VentaProceso;
    TROSerializer(ASerializer).ReadStruct('VentaProceso', TRegistroVenta, l_VentaProceso);
    if VentaProceso <> l_VentaProceso then VentaProceso.Free;
    VentaProceso := l_VentaProceso;
    l_VentasTurno := VentasTurno;
    TROSerializer(ASerializer).ReadArray('VentasTurno', aContador, l_VentasTurno);
    if VentasTurno <> l_VentasTurno then VentasTurno.Free;
    VentasTurno := l_VentasTurno;
    l_VentaUltima := VentaUltima;
    TROSerializer(ASerializer).ReadStruct('VentaUltima', TRegistroVenta, l_VentaUltima);
    if VentaUltima <> l_VentaUltima then VentaUltima.Free;
    VentaUltima := l_VentaUltima;
  end;
end;

procedure TBomba.WriteComplex(ASerializer: TObject);
var
  l_AgrupacionID: Integer;
  l_AutoImprimir: Boolean;
  l_Autorizacion: eTipoAutorizacion;
  l_AutorizacionAutomatica: Integer;
  l_Clasificacion: AnsiString;
  l_CodigoProducto: eCodigoProducto;
  l_ConectLCD: Integer;
  l_Despachador: Integer;
  l_DobleTarjeta: Boolean;
  l_Estado: eEstadoBomba;
  l_EstadoNuevo: eEstadoBomba;
  l_EstadoVenta: eEstadoVenta;
  l_Externo: Integer;
  l_FactorDecimal: TFactorDecimal;
  l_FaltaPago: aBoolean;
  l_Flujo: TFlujos;
  l_Gasolina: Integer;
  l_Guardando: Boolean;
  l_Host: AnsiString;
  l_IDInterno: Integer;
  l_ImporteMinimo: Double;
  l_IntentoPrepago: Boolean;
  l_LecturasFinales: aLecturas;
  l_LecturasIniciales: aLecturas;
  l_LecturasTurno: aLecturas;
  l_Mangueras: aMangueras;
  l_MaximoLecturasImporte: Double;
  l_MaximoLecturasVolumen: Double;
  l_Modo: eModoOperacion;
  l_Nodo: TNodo;
  l_NoMangueras: Integer;
  l_NombreImpresora: AnsiString;
  l_NuevoFlujo: AnsiString;
  l_Pendiente: Boolean;
  l_PendienteGrabar: Boolean;
  l_PendienteRegistrar: Boolean;
  l_PendientesAplicar: aContador;
  l_Posicionamiento: TCanal;
  l_Preset: eTipoPreset;
  l_Proceso: eProceso;
  l_PuntosRegistrados: Boolean;
  l_PuntoVenta: TRegistroPuntoVenta;
  l_RegresaModo: Boolean;
  l_Servicio: Double;
  l_Ticket: eImpresionTicket;
  l_TiempoAutorizado: Integer;
  l_TipoDispensario: Integer;
  l_TipoTarjeta: Integer;
  l_TotalizacionAutomatica: Integer;
  l_TurnoID: Integer;
  l_UltimoFlujo: AnsiString;
  l_UltimoLimiteImporte: Double;
  l_UltimoLimiteVolumen: Double;
  l_VentaAntePenultima: TRegistroVenta;
  l_VentaPenultima: TRegistroVenta;
  l_VentaProceso: TRegistroVenta;
  l_VentasTurno: aContador;
  l_VentaUltima: TRegistroVenta;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TBomba);
    l_AutoImprimir := AutoImprimir;
    TROSerializer(ASerializer).WriteEnumerated('AutoImprimir',TypeInfo(boolean), l_AutoImprimir);
    l_Autorizacion := Autorizacion;
    TROSerializer(ASerializer).WriteEnumerated('Autorizacion',TypeInfo(eTipoAutorizacion), l_Autorizacion);
    l_AutorizacionAutomatica := AutorizacionAutomatica;
    TROSerializer(ASerializer).WriteInteger('AutorizacionAutomatica', otSLong, l_AutorizacionAutomatica);
    l_Clasificacion := Clasificacion;
    TROSerializer(ASerializer).WriteAnsiString('Clasificacion', l_Clasificacion);
    l_CodigoProducto := CodigoProducto;
    TROSerializer(ASerializer).WriteEnumerated('CodigoProducto',TypeInfo(eCodigoProducto), l_CodigoProducto);
    l_ConectLCD := ConectLCD;
    TROSerializer(ASerializer).WriteInteger('ConectLCD', otSLong, l_ConectLCD);
    l_Despachador := Despachador;
    TROSerializer(ASerializer).WriteInteger('Despachador', otSLong, l_Despachador);
    l_DobleTarjeta := DobleTarjeta;
    TROSerializer(ASerializer).WriteEnumerated('DobleTarjeta',TypeInfo(boolean), l_DobleTarjeta);
    l_Estado := Estado;
    TROSerializer(ASerializer).WriteEnumerated('Estado',TypeInfo(eEstadoBomba), l_Estado);
    l_PendienteRegistrar := PendienteRegistrar;
    TROSerializer(ASerializer).WriteEnumerated('PendienteRegistrar',TypeInfo(boolean), l_PendienteRegistrar);
    l_EstadoNuevo := EstadoNuevo;
    TROSerializer(ASerializer).WriteEnumerated('EstadoNuevo',TypeInfo(eEstadoBomba), l_EstadoNuevo);
    l_EstadoVenta := EstadoVenta;
    TROSerializer(ASerializer).WriteEnumerated('EstadoVenta',TypeInfo(eEstadoVenta), l_EstadoVenta);
    l_FactorDecimal := FactorDecimal;
    TROSerializer(ASerializer).WriteStruct('FactorDecimal', l_FactorDecimal, TFactorDecimal);
    l_FaltaPago := FaltaPago;
    TROSerializer(ASerializer).WriteArray('FaltaPago', l_FaltaPago, aBoolean);
    l_Flujo := Flujo;
    TROSerializer(ASerializer).WriteStruct('Flujo', l_Flujo, TFlujos);
    l_Gasolina := Gasolina;
    TROSerializer(ASerializer).WriteInteger('Gasolina', otSLong, l_Gasolina);
    l_Guardando := Guardando;
    TROSerializer(ASerializer).WriteEnumerated('Guardando',TypeInfo(boolean), l_Guardando);
    l_Host := Host;
    TROSerializer(ASerializer).WriteAnsiString('Host', l_Host);
    l_IDInterno := IDInterno;
    TROSerializer(ASerializer).WriteInteger('IDInterno', otSLong, l_IDInterno);
    l_ImporteMinimo := ImporteMinimo;
    TROSerializer(ASerializer).WriteDouble('ImporteMinimo', ftDouble, l_ImporteMinimo);
    l_IntentoPrepago := IntentoPrepago;
    TROSerializer(ASerializer).WriteEnumerated('IntentoPrepago',TypeInfo(boolean), l_IntentoPrepago);
    l_LecturasFinales := LecturasFinales;
    TROSerializer(ASerializer).WriteArray('LecturasFinales', l_LecturasFinales, aLecturas);
    l_LecturasIniciales := LecturasIniciales;
    TROSerializer(ASerializer).WriteArray('LecturasIniciales', l_LecturasIniciales, aLecturas);
    l_LecturasTurno := LecturasTurno;
    TROSerializer(ASerializer).WriteArray('LecturasTurno', l_LecturasTurno, aLecturas);
    l_Mangueras := Mangueras;
    TROSerializer(ASerializer).WriteArray('Mangueras', l_Mangueras, aMangueras);
    l_MaximoLecturasImporte := MaximoLecturasImporte;
    TROSerializer(ASerializer).WriteDouble('MaximoLecturasImporte', ftDouble, l_MaximoLecturasImporte);
    l_MaximoLecturasVolumen := MaximoLecturasVolumen;
    TROSerializer(ASerializer).WriteDouble('MaximoLecturasVolumen', ftDouble, l_MaximoLecturasVolumen);
    l_Modo := Modo;
    TROSerializer(ASerializer).WriteEnumerated('Modo',TypeInfo(eModoOperacion), l_Modo);
    l_NoMangueras := NoMangueras;
    TROSerializer(ASerializer).WriteInteger('NoMangueras', otSLong, l_NoMangueras);
    l_NombreImpresora := NombreImpresora;
    TROSerializer(ASerializer).WriteAnsiString('NombreImpresora', l_NombreImpresora);
    l_NuevoFlujo := NuevoFlujo;
    TROSerializer(ASerializer).WriteAnsiString('NuevoFlujo', l_NuevoFlujo);
    l_Pendiente := Pendiente;
    TROSerializer(ASerializer).WriteEnumerated('Pendiente',TypeInfo(boolean), l_Pendiente);
    l_PendienteGrabar := PendienteGrabar;
    TROSerializer(ASerializer).WriteEnumerated('PendienteGrabar',TypeInfo(boolean), l_PendienteGrabar);
    l_PendientesAplicar := PendientesAplicar;
    TROSerializer(ASerializer).WriteArray('PendientesAplicar', l_PendientesAplicar, aContador);
    l_Posicionamiento := Posicionamiento;
    TROSerializer(ASerializer).WriteStruct('Posicionamiento', l_Posicionamiento, TCanal);
    l_Preset := Preset;
    TROSerializer(ASerializer).WriteEnumerated('Preset',TypeInfo(eTipoPreset), l_Preset);
    l_Proceso := Proceso;
    TROSerializer(ASerializer).WriteEnumerated('Proceso',TypeInfo(eProceso), l_Proceso);
    l_PuntosRegistrados := PuntosRegistrados;
    TROSerializer(ASerializer).WriteEnumerated('PuntosRegistrados',TypeInfo(boolean), l_PuntosRegistrados);
    l_PuntoVenta := PuntoVenta;
    TROSerializer(ASerializer).WriteStruct('PuntoVenta', l_PuntoVenta, TRegistroPuntoVenta);
    l_RegresaModo := RegresaModo;
    TROSerializer(ASerializer).WriteEnumerated('RegresaModo',TypeInfo(boolean), l_RegresaModo);
    l_Servicio := Servicio;
    TROSerializer(ASerializer).WriteDouble('Servicio', ftDouble, l_Servicio);
    l_Ticket := Ticket;
    TROSerializer(ASerializer).WriteEnumerated('Ticket',TypeInfo(eImpresionTicket), l_Ticket);
    l_TiempoAutorizado := TiempoAutorizado;
    TROSerializer(ASerializer).WriteInteger('TiempoAutorizado', otSLong, l_TiempoAutorizado);
    l_TipoDispensario := TipoDispensario;
    TROSerializer(ASerializer).WriteInteger('TipoDispensario', otSLong, l_TipoDispensario);
    l_TipoTarjeta := TipoTarjeta;
    TROSerializer(ASerializer).WriteInteger('TipoTarjeta', otSLong, l_TipoTarjeta);
    l_TotalizacionAutomatica := TotalizacionAutomatica;
    TROSerializer(ASerializer).WriteInteger('TotalizacionAutomatica', otSLong, l_TotalizacionAutomatica);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
    l_UltimoFlujo := UltimoFlujo;
    TROSerializer(ASerializer).WriteAnsiString('UltimoFlujo', l_UltimoFlujo);
    l_UltimoLimiteImporte := UltimoLimiteImporte;
    TROSerializer(ASerializer).WriteDouble('UltimoLimiteImporte', ftDouble, l_UltimoLimiteImporte);
    l_UltimoLimiteVolumen := UltimoLimiteVolumen;
    TROSerializer(ASerializer).WriteDouble('UltimoLimiteVolumen', ftDouble, l_UltimoLimiteVolumen);
    l_VentaAntePenultima := VentaAntePenultima;
    TROSerializer(ASerializer).WriteStruct('VentaAntePenultima', l_VentaAntePenultima, TRegistroVenta);
    l_VentaPenultima := VentaPenultima;
    TROSerializer(ASerializer).WriteStruct('VentaPenultima', l_VentaPenultima, TRegistroVenta);
    l_VentaProceso := VentaProceso;
    TROSerializer(ASerializer).WriteStruct('VentaProceso', l_VentaProceso, TRegistroVenta);
    l_VentasTurno := VentasTurno;
    TROSerializer(ASerializer).WriteArray('VentasTurno', l_VentasTurno, aContador);
    l_VentaUltima := VentaUltima;
    TROSerializer(ASerializer).WriteStruct('VentaUltima', l_VentaUltima, TRegistroVenta);
    l_Externo := Externo;
    TROSerializer(ASerializer).WriteInteger('Externo', otSLong, l_Externo);
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).WriteInteger('AgrupacionID', otSLong, l_AgrupacionID);
    l_Nodo := Nodo;
    TROSerializer(ASerializer).WriteStruct('Nodo', l_Nodo, TNodo);
  end
  else begin
    l_AgrupacionID := AgrupacionID;
    TROSerializer(ASerializer).WriteInteger('AgrupacionID', otSLong, l_AgrupacionID);
    l_AutoImprimir := AutoImprimir;
    TROSerializer(ASerializer).WriteEnumerated('AutoImprimir',TypeInfo(boolean), l_AutoImprimir);
    l_Autorizacion := Autorizacion;
    TROSerializer(ASerializer).WriteEnumerated('Autorizacion',TypeInfo(eTipoAutorizacion), l_Autorizacion);
    l_AutorizacionAutomatica := AutorizacionAutomatica;
    TROSerializer(ASerializer).WriteInteger('AutorizacionAutomatica', otSLong, l_AutorizacionAutomatica);
    l_Clasificacion := Clasificacion;
    TROSerializer(ASerializer).WriteAnsiString('Clasificacion', l_Clasificacion);
    l_CodigoProducto := CodigoProducto;
    TROSerializer(ASerializer).WriteEnumerated('CodigoProducto',TypeInfo(eCodigoProducto), l_CodigoProducto);
    l_ConectLCD := ConectLCD;
    TROSerializer(ASerializer).WriteInteger('ConectLCD', otSLong, l_ConectLCD);
    l_Despachador := Despachador;
    TROSerializer(ASerializer).WriteInteger('Despachador', otSLong, l_Despachador);
    l_DobleTarjeta := DobleTarjeta;
    TROSerializer(ASerializer).WriteEnumerated('DobleTarjeta',TypeInfo(boolean), l_DobleTarjeta);
    l_Estado := Estado;
    TROSerializer(ASerializer).WriteEnumerated('Estado',TypeInfo(eEstadoBomba), l_Estado);
    l_EstadoNuevo := EstadoNuevo;
    TROSerializer(ASerializer).WriteEnumerated('EstadoNuevo',TypeInfo(eEstadoBomba), l_EstadoNuevo);
    l_EstadoVenta := EstadoVenta;
    TROSerializer(ASerializer).WriteEnumerated('EstadoVenta',TypeInfo(eEstadoVenta), l_EstadoVenta);
    l_Externo := Externo;
    TROSerializer(ASerializer).WriteInteger('Externo', otSLong, l_Externo);
    l_FactorDecimal := FactorDecimal;
    TROSerializer(ASerializer).WriteStruct('FactorDecimal', l_FactorDecimal, TFactorDecimal);
    l_FaltaPago := FaltaPago;
    TROSerializer(ASerializer).WriteArray('FaltaPago', l_FaltaPago, aBoolean);
    l_Flujo := Flujo;
    TROSerializer(ASerializer).WriteStruct('Flujo', l_Flujo, TFlujos);
    l_Gasolina := Gasolina;
    TROSerializer(ASerializer).WriteInteger('Gasolina', otSLong, l_Gasolina);
    l_Guardando := Guardando;
    TROSerializer(ASerializer).WriteEnumerated('Guardando',TypeInfo(boolean), l_Guardando);
    l_Host := Host;
    TROSerializer(ASerializer).WriteAnsiString('Host', l_Host);
    l_IDInterno := IDInterno;
    TROSerializer(ASerializer).WriteInteger('IDInterno', otSLong, l_IDInterno);
    l_ImporteMinimo := ImporteMinimo;
    TROSerializer(ASerializer).WriteDouble('ImporteMinimo', ftDouble, l_ImporteMinimo);
    l_IntentoPrepago := IntentoPrepago;
    TROSerializer(ASerializer).WriteEnumerated('IntentoPrepago',TypeInfo(boolean), l_IntentoPrepago);
    l_LecturasFinales := LecturasFinales;
    TROSerializer(ASerializer).WriteArray('LecturasFinales', l_LecturasFinales, aLecturas);
    l_LecturasIniciales := LecturasIniciales;
    TROSerializer(ASerializer).WriteArray('LecturasIniciales', l_LecturasIniciales, aLecturas);
    l_LecturasTurno := LecturasTurno;
    TROSerializer(ASerializer).WriteArray('LecturasTurno', l_LecturasTurno, aLecturas);
    l_Mangueras := Mangueras;
    TROSerializer(ASerializer).WriteArray('Mangueras', l_Mangueras, aMangueras);
    l_MaximoLecturasImporte := MaximoLecturasImporte;
    TROSerializer(ASerializer).WriteDouble('MaximoLecturasImporte', ftDouble, l_MaximoLecturasImporte);
    l_MaximoLecturasVolumen := MaximoLecturasVolumen;
    TROSerializer(ASerializer).WriteDouble('MaximoLecturasVolumen', ftDouble, l_MaximoLecturasVolumen);
    l_Modo := Modo;
    TROSerializer(ASerializer).WriteEnumerated('Modo',TypeInfo(eModoOperacion), l_Modo);
    l_Nodo := Nodo;
    TROSerializer(ASerializer).WriteStruct('Nodo', l_Nodo, TNodo);
    l_NoMangueras := NoMangueras;
    TROSerializer(ASerializer).WriteInteger('NoMangueras', otSLong, l_NoMangueras);
    l_NombreImpresora := NombreImpresora;
    TROSerializer(ASerializer).WriteAnsiString('NombreImpresora', l_NombreImpresora);
    l_NuevoFlujo := NuevoFlujo;
    TROSerializer(ASerializer).WriteAnsiString('NuevoFlujo', l_NuevoFlujo);
    l_Pendiente := Pendiente;
    TROSerializer(ASerializer).WriteEnumerated('Pendiente',TypeInfo(boolean), l_Pendiente);
    l_PendienteGrabar := PendienteGrabar;
    TROSerializer(ASerializer).WriteEnumerated('PendienteGrabar',TypeInfo(boolean), l_PendienteGrabar);
    l_PendienteRegistrar := PendienteRegistrar;
    TROSerializer(ASerializer).WriteEnumerated('PendienteRegistrar',TypeInfo(boolean), l_PendienteRegistrar);
    l_PendientesAplicar := PendientesAplicar;
    TROSerializer(ASerializer).WriteArray('PendientesAplicar', l_PendientesAplicar, aContador);
    l_Posicionamiento := Posicionamiento;
    TROSerializer(ASerializer).WriteStruct('Posicionamiento', l_Posicionamiento, TCanal);
    l_Preset := Preset;
    TROSerializer(ASerializer).WriteEnumerated('Preset',TypeInfo(eTipoPreset), l_Preset);
    l_Proceso := Proceso;
    TROSerializer(ASerializer).WriteEnumerated('Proceso',TypeInfo(eProceso), l_Proceso);
    l_PuntosRegistrados := PuntosRegistrados;
    TROSerializer(ASerializer).WriteEnumerated('PuntosRegistrados',TypeInfo(boolean), l_PuntosRegistrados);
    l_PuntoVenta := PuntoVenta;
    TROSerializer(ASerializer).WriteStruct('PuntoVenta', l_PuntoVenta, TRegistroPuntoVenta);
    l_RegresaModo := RegresaModo;
    TROSerializer(ASerializer).WriteEnumerated('RegresaModo',TypeInfo(boolean), l_RegresaModo);
    l_Servicio := Servicio;
    TROSerializer(ASerializer).WriteDouble('Servicio', ftDouble, l_Servicio);
    l_Ticket := Ticket;
    TROSerializer(ASerializer).WriteEnumerated('Ticket',TypeInfo(eImpresionTicket), l_Ticket);
    l_TiempoAutorizado := TiempoAutorizado;
    TROSerializer(ASerializer).WriteInteger('TiempoAutorizado', otSLong, l_TiempoAutorizado);
    l_TipoDispensario := TipoDispensario;
    TROSerializer(ASerializer).WriteInteger('TipoDispensario', otSLong, l_TipoDispensario);
    l_TipoTarjeta := TipoTarjeta;
    TROSerializer(ASerializer).WriteInteger('TipoTarjeta', otSLong, l_TipoTarjeta);
    l_TotalizacionAutomatica := TotalizacionAutomatica;
    TROSerializer(ASerializer).WriteInteger('TotalizacionAutomatica', otSLong, l_TotalizacionAutomatica);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
    l_UltimoFlujo := UltimoFlujo;
    TROSerializer(ASerializer).WriteAnsiString('UltimoFlujo', l_UltimoFlujo);
    l_UltimoLimiteImporte := UltimoLimiteImporte;
    TROSerializer(ASerializer).WriteDouble('UltimoLimiteImporte', ftDouble, l_UltimoLimiteImporte);
    l_UltimoLimiteVolumen := UltimoLimiteVolumen;
    TROSerializer(ASerializer).WriteDouble('UltimoLimiteVolumen', ftDouble, l_UltimoLimiteVolumen);
    l_VentaAntePenultima := VentaAntePenultima;
    TROSerializer(ASerializer).WriteStruct('VentaAntePenultima', l_VentaAntePenultima, TRegistroVenta);
    l_VentaPenultima := VentaPenultima;
    TROSerializer(ASerializer).WriteStruct('VentaPenultima', l_VentaPenultima, TRegistroVenta);
    l_VentaProceso := VentaProceso;
    TROSerializer(ASerializer).WriteStruct('VentaProceso', l_VentaProceso, TRegistroVenta);
    l_VentasTurno := VentasTurno;
    TROSerializer(ASerializer).WriteArray('VentasTurno', l_VentasTurno, aContador);
    l_VentaUltima := VentaUltima;
    TROSerializer(ASerializer).WriteStruct('VentaUltima', l_VentaUltima, TRegistroVenta);
  end;
end;

{ TBombaCollection }
constructor TBombaCollection.Create;
begin
  inherited Create(TBomba);
end;

constructor TBombaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TBombaCollection.Add: TBomba;
begin
  result := TBomba(inherited Add);
end;

function TBombaCollection.GetItems(aIndex: integer): TBomba;
begin
  result := TBomba(inherited Items[aIndex]);
end;

procedure TBombaCollection.LoadFromArray(anArray: aBombas);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TBombaCollection.SaveToArray(anArray: aBombas);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TBomba.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TBombaCollection.SetItems(aIndex: integer; const Value: TBomba);
begin
  TBomba(inherited Items[aIndex]).Assign(Value);
end;

{ TDispositivos }

procedure TDispositivos.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TDispositivos;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TDispositivos) then begin
    lSource := LibraryCistemGas_Intf.TDispositivos(iSource);
    Activo := lSource.Activo;
    Nombre := lSource.Nombre;
    Puerto := lSource.Puerto;
    Speed := lSource.Speed;
    DataBits := lSource.DataBits;
    Parity := lSource.Parity;
    StopBits := lSource.StopBits;
    Echo := lSource.Echo;
    Flow := lSource.Flow;
    HandShake := lSource.HandShake;
    DispLector := lSource.DispLector;
    DispComunicaciones := lSource.DispComunicaciones;
    RetardoLectura := lSource.RetardoLectura;
    RetardoCiclo := lSource.RetardoCiclo;
  end;
end;

procedure TDispositivos.ReadComplex(ASerializer: TObject);
var
  l_Activo: Boolean;
  l_DataBits: Integer;
  l_DispComunicaciones: Integer;
  l_DispLector: Integer;
  l_Echo: Integer;
  l_Flow: AnsiString;
  l_HandShake: Integer;
  l_Nombre: AnsiString;
  l_Parity: Integer;
  l_Puerto: Integer;
  l_RetardoCiclo: Integer;
  l_RetardoLectura: Integer;
  l_Speed: Integer;
  l_StopBits: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Activo := Activo;
    TROSerializer(ASerializer).ReadEnumerated('Activo',TypeInfo(boolean), l_Activo);
    Activo := l_Activo;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Puerto := Puerto;
    TROSerializer(ASerializer).ReadInteger('Puerto', otSLong, l_Puerto);
    Puerto := l_Puerto;
    l_Speed := Speed;
    TROSerializer(ASerializer).ReadInteger('Speed', otSLong, l_Speed);
    Speed := l_Speed;
    l_DataBits := DataBits;
    TROSerializer(ASerializer).ReadInteger('DataBits', otSLong, l_DataBits);
    DataBits := l_DataBits;
    l_Parity := Parity;
    TROSerializer(ASerializer).ReadInteger('Parity', otSLong, l_Parity);
    Parity := l_Parity;
    l_StopBits := StopBits;
    TROSerializer(ASerializer).ReadInteger('StopBits', otSLong, l_StopBits);
    StopBits := l_StopBits;
    l_Echo := Echo;
    TROSerializer(ASerializer).ReadInteger('Echo', otSLong, l_Echo);
    Echo := l_Echo;
    l_Flow := Flow;
    TROSerializer(ASerializer).ReadAnsiString('Flow', l_Flow);
    Flow := l_Flow;
    l_HandShake := HandShake;
    TROSerializer(ASerializer).ReadInteger('HandShake', otSLong, l_HandShake);
    HandShake := l_HandShake;
    l_DispLector := DispLector;
    TROSerializer(ASerializer).ReadInteger('DispLector', otSLong, l_DispLector);
    DispLector := l_DispLector;
    l_DispComunicaciones := DispComunicaciones;
    TROSerializer(ASerializer).ReadInteger('DispComunicaciones', otSLong, l_DispComunicaciones);
    DispComunicaciones := l_DispComunicaciones;
    l_RetardoLectura := RetardoLectura;
    TROSerializer(ASerializer).ReadInteger('RetardoLectura', otSLong, l_RetardoLectura);
    RetardoLectura := l_RetardoLectura;
    l_RetardoCiclo := RetardoCiclo;
    TROSerializer(ASerializer).ReadInteger('RetardoCiclo', otSLong, l_RetardoCiclo);
    RetardoCiclo := l_RetardoCiclo;
  end
  else begin
    l_Activo := Activo;
    TROSerializer(ASerializer).ReadEnumerated('Activo',TypeInfo(boolean), l_Activo);
    Activo := l_Activo;
    l_DataBits := DataBits;
    TROSerializer(ASerializer).ReadInteger('DataBits', otSLong, l_DataBits);
    DataBits := l_DataBits;
    l_DispComunicaciones := DispComunicaciones;
    TROSerializer(ASerializer).ReadInteger('DispComunicaciones', otSLong, l_DispComunicaciones);
    DispComunicaciones := l_DispComunicaciones;
    l_DispLector := DispLector;
    TROSerializer(ASerializer).ReadInteger('DispLector', otSLong, l_DispLector);
    DispLector := l_DispLector;
    l_Echo := Echo;
    TROSerializer(ASerializer).ReadInteger('Echo', otSLong, l_Echo);
    Echo := l_Echo;
    l_Flow := Flow;
    TROSerializer(ASerializer).ReadAnsiString('Flow', l_Flow);
    Flow := l_Flow;
    l_HandShake := HandShake;
    TROSerializer(ASerializer).ReadInteger('HandShake', otSLong, l_HandShake);
    HandShake := l_HandShake;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Parity := Parity;
    TROSerializer(ASerializer).ReadInteger('Parity', otSLong, l_Parity);
    Parity := l_Parity;
    l_Puerto := Puerto;
    TROSerializer(ASerializer).ReadInteger('Puerto', otSLong, l_Puerto);
    Puerto := l_Puerto;
    l_RetardoCiclo := RetardoCiclo;
    TROSerializer(ASerializer).ReadInteger('RetardoCiclo', otSLong, l_RetardoCiclo);
    RetardoCiclo := l_RetardoCiclo;
    l_RetardoLectura := RetardoLectura;
    TROSerializer(ASerializer).ReadInteger('RetardoLectura', otSLong, l_RetardoLectura);
    RetardoLectura := l_RetardoLectura;
    l_Speed := Speed;
    TROSerializer(ASerializer).ReadInteger('Speed', otSLong, l_Speed);
    Speed := l_Speed;
    l_StopBits := StopBits;
    TROSerializer(ASerializer).ReadInteger('StopBits', otSLong, l_StopBits);
    StopBits := l_StopBits;
  end;
end;

procedure TDispositivos.WriteComplex(ASerializer: TObject);
var
  l_Activo: Boolean;
  l_DataBits: Integer;
  l_DispComunicaciones: Integer;
  l_DispLector: Integer;
  l_Echo: Integer;
  l_Flow: AnsiString;
  l_HandShake: Integer;
  l_Nombre: AnsiString;
  l_Parity: Integer;
  l_Puerto: Integer;
  l_RetardoCiclo: Integer;
  l_RetardoLectura: Integer;
  l_Speed: Integer;
  l_StopBits: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDispositivos);
    l_Activo := Activo;
    TROSerializer(ASerializer).WriteEnumerated('Activo',TypeInfo(boolean), l_Activo);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Puerto := Puerto;
    TROSerializer(ASerializer).WriteInteger('Puerto', otSLong, l_Puerto);
    l_Speed := Speed;
    TROSerializer(ASerializer).WriteInteger('Speed', otSLong, l_Speed);
    l_DataBits := DataBits;
    TROSerializer(ASerializer).WriteInteger('DataBits', otSLong, l_DataBits);
    l_Parity := Parity;
    TROSerializer(ASerializer).WriteInteger('Parity', otSLong, l_Parity);
    l_StopBits := StopBits;
    TROSerializer(ASerializer).WriteInteger('StopBits', otSLong, l_StopBits);
    l_Echo := Echo;
    TROSerializer(ASerializer).WriteInteger('Echo', otSLong, l_Echo);
    l_Flow := Flow;
    TROSerializer(ASerializer).WriteAnsiString('Flow', l_Flow);
    l_HandShake := HandShake;
    TROSerializer(ASerializer).WriteInteger('HandShake', otSLong, l_HandShake);
    l_DispLector := DispLector;
    TROSerializer(ASerializer).WriteInteger('DispLector', otSLong, l_DispLector);
    l_DispComunicaciones := DispComunicaciones;
    TROSerializer(ASerializer).WriteInteger('DispComunicaciones', otSLong, l_DispComunicaciones);
    l_RetardoLectura := RetardoLectura;
    TROSerializer(ASerializer).WriteInteger('RetardoLectura', otSLong, l_RetardoLectura);
    l_RetardoCiclo := RetardoCiclo;
    TROSerializer(ASerializer).WriteInteger('RetardoCiclo', otSLong, l_RetardoCiclo);
  end
  else begin
    l_Activo := Activo;
    TROSerializer(ASerializer).WriteEnumerated('Activo',TypeInfo(boolean), l_Activo);
    l_DataBits := DataBits;
    TROSerializer(ASerializer).WriteInteger('DataBits', otSLong, l_DataBits);
    l_DispComunicaciones := DispComunicaciones;
    TROSerializer(ASerializer).WriteInteger('DispComunicaciones', otSLong, l_DispComunicaciones);
    l_DispLector := DispLector;
    TROSerializer(ASerializer).WriteInteger('DispLector', otSLong, l_DispLector);
    l_Echo := Echo;
    TROSerializer(ASerializer).WriteInteger('Echo', otSLong, l_Echo);
    l_Flow := Flow;
    TROSerializer(ASerializer).WriteAnsiString('Flow', l_Flow);
    l_HandShake := HandShake;
    TROSerializer(ASerializer).WriteInteger('HandShake', otSLong, l_HandShake);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Parity := Parity;
    TROSerializer(ASerializer).WriteInteger('Parity', otSLong, l_Parity);
    l_Puerto := Puerto;
    TROSerializer(ASerializer).WriteInteger('Puerto', otSLong, l_Puerto);
    l_RetardoCiclo := RetardoCiclo;
    TROSerializer(ASerializer).WriteInteger('RetardoCiclo', otSLong, l_RetardoCiclo);
    l_RetardoLectura := RetardoLectura;
    TROSerializer(ASerializer).WriteInteger('RetardoLectura', otSLong, l_RetardoLectura);
    l_Speed := Speed;
    TROSerializer(ASerializer).WriteInteger('Speed', otSLong, l_Speed);
    l_StopBits := StopBits;
    TROSerializer(ASerializer).WriteInteger('StopBits', otSLong, l_StopBits);
  end;
end;

{ TDispositivosCollection }
constructor TDispositivosCollection.Create;
begin
  inherited Create(TDispositivos);
end;

constructor TDispositivosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDispositivosCollection.Add: TDispositivos;
begin
  result := TDispositivos(inherited Add);
end;

function TDispositivosCollection.GetItems(aIndex: integer): TDispositivos;
begin
  result := TDispositivos(inherited Items[aIndex]);
end;

procedure TDispositivosCollection.LoadFromArray(anArray: aDispositivos);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDispositivosCollection.SaveToArray(anArray: aDispositivos);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDispositivos.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDispositivosCollection.SetItems(aIndex: integer; const Value: TDispositivos);
begin
  TDispositivos(inherited Items[aIndex]).Assign(Value);
end;

{ TGlobal }

procedure TGlobal.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TGlobal;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TGlobal) then begin
    lSource := LibraryCistemGas_Intf.TGlobal(iSource);
    AfectarDecimales := lSource.AfectarDecimales;
    AfectarLitros := lSource.AfectarLitros;
    AutorizacionPorManguera := lSource.AutorizacionPorManguera;
    blnProdArriba := lSource.blnProdArriba;
    bolStop := lSource.bolStop;
    Bombas.Assign(lSource.Bombas);
    cAck := lSource.cAck;
    CambioPrecio.Assign(lSource.CambioPrecio);
    cCR := lSource.cCR;
    cESC := lSource.cESC;
    cEtx := lSource.cEtx;
    cLF := lSource.cLF;
    cNak := lSource.cNak;
    Conexiones.Assign(lSource.Conexiones);
    CortarSuministroSinAut := lSource.CortarSuministroSinAut;
    cStx := lSource.cStx;
    cUsuario := lSource.cUsuario;
    Dispositivos.Assign(lSource.Dispositivos);
    ImpuestoPorcentaje := lSource.ImpuestoPorcentaje;
    Estacion := lSource.Estacion;
    Fabricante := lSource.Fabricante;
    FlujoActual := lSource.FlujoActual;
    Gasolinas.Assign(lSource.Gasolinas);
    idNivelUsuario := lSource.idNivelUsuario;
    idUsuario := lSource.idUsuario;
    lPoleoHora := lSource.lPoleoHora;
    Maquina := lSource.Maquina;
    MetodoOperacion := lSource.MetodoOperacion;
    MetodoTurno := lSource.MetodoTurno;
    Monitoreo := lSource.Monitoreo;
    MSG_CISTEMGAS := lSource.MSG_CISTEMGAS;
    NombreEstacion := lSource.NombreEstacion;
    NumPuerto := lSource.NumPuerto;
    NumSite := lSource.NumSite;
    nVueltasGenerales := lSource.nVueltasGenerales;
    PermitirCorteSinVenta := lSource.PermitirCorteSinVenta;
    PrecioInferior := lSource.PrecioInferior;
    PrecioSuperior := lSource.PrecioSuperior;
    Protecciones.Assign(lSource.Protecciones);
    RegistroVenta := lSource.RegistroVenta;
    Respuesta := lSource.Respuesta;
    RFC := lSource.RFC;
    SIIC := lSource.SIIC;
    SinAfectar := lSource.SinAfectar;
    StatusCtrolVol := lSource.StatusCtrolVol;
    strCmdPendiente := lSource.strCmdPendiente;
    Tanques.Assign(lSource.Tanques);
    Telemedicion := lSource.Telemedicion;
    TipoEstacion := lSource.TipoEstacion;
    TotalBombas := lSource.TotalBombas;
    TotalCiclos := lSource.TotalCiclos;
    TurnoActual := lSource.TurnoActual;
    TurnosActuales := lSource.TurnosActuales;
    VentaSeleccionada := lSource.VentaSeleccionada;
    Licencia.Assign(lSource.Licencia);
  end;
end;

function TGlobal.GetBombas: aBombas;
begin
  if (fBombas = nil) then fBombas := aBombas.Create();
  result := fBombas;
end;

function TGlobal.GetCambioPrecio: TCambio;
begin
  if (fCambioPrecio = nil) then fCambioPrecio := TCambio.Create();
  result := fCambioPrecio;
end;

function TGlobal.GetConexiones: aDispositivos;
begin
  if (fConexiones = nil) then fConexiones := aDispositivos.Create();
  result := fConexiones;
end;

function TGlobal.GetDispositivos: aDispositivos;
begin
  if (fDispositivos = nil) then fDispositivos := aDispositivos.Create();
  result := fDispositivos;
end;

function TGlobal.GetGasolinas: aGas;
begin
  if (fGasolinas = nil) then fGasolinas := aGas.Create();
  result := fGasolinas;
end;

function TGlobal.GetProtecciones: TProtecciones;
begin
  if (fProtecciones = nil) then fProtecciones := TProtecciones.Create();
  result := fProtecciones;
end;

function TGlobal.GetTanques: aTanques;
begin
  if (fTanques = nil) then fTanques := aTanques.Create();
  result := fTanques;
end;

function TGlobal.GetLicencia: TLicencia;
begin
  if (fLicencia = nil) then fLicencia := TLicencia.Create();
  result := fLicencia;
end;

procedure TGlobal.ReadComplex(ASerializer: TObject);
var
  l_AfectarDecimales: Boolean;
  l_AfectarLitros: Boolean;
  l_AutorizacionPorManguera: Boolean;
  l_blnProdArriba: Boolean;
  l_bolStop: Boolean;
  l_Bombas: aBombas;
  l_cAck: AnsiString;
  l_CambioPrecio: TCambio;
  l_cCR: AnsiString;
  l_cESC: AnsiString;
  l_cEtx: AnsiString;
  l_cLF: AnsiString;
  l_cNak: AnsiString;
  l_Conexiones: aDispositivos;
  l_CortarSuministroSinAut: Boolean;
  l_cStx: AnsiString;
  l_cUsuario: AnsiString;
  l_Dispositivos: aDispositivos;
  l_Estacion: Integer;
  l_Fabricante: eFabricante;
  l_FlujoActual: Integer;
  l_Gasolinas: aGas;
  l_idNivelUsuario: Integer;
  l_idUsuario: Integer;
  l_ImpuestoPorcentaje: Double;
  l_Licencia: TLicencia;
  l_lPoleoHora: Boolean;
  l_Maquina: AnsiString;
  l_MetodoOperacion: Integer;
  l_MetodoTurno: Integer;
  l_Monitoreo: eMonitoreo;
  l_MSG_CISTEMGAS: Integer;
  l_NombreEstacion: AnsiString;
  l_NumPuerto: Integer;
  l_NumSite: AnsiString;
  l_nVueltasGenerales: Integer;
  l_PermitirCorteSinVenta: Boolean;
  l_PrecioInferior: Double;
  l_PrecioSuperior: Double;
  l_Protecciones: TProtecciones;
  l_RegistroVenta: Integer;
  l_Respuesta: AnsiString;
  l_RFC: AnsiString;
  l_SIIC: AnsiString;
  l_SinAfectar: Boolean;
  l_StatusCtrolVol: Integer;
  l_strCmdPendiente: AnsiString;
  l_Tanques: aTanques;
  l_Telemedicion: Integer;
  l_TipoEstacion: Integer;
  l_TotalBombas: Integer;
  l_TotalCiclos: Integer;
  l_TurnoActual: Integer;
  l_TurnosActuales: Integer;
  l_VentaSeleccionada: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_AfectarDecimales := AfectarDecimales;
    TROSerializer(ASerializer).ReadEnumerated('AfectarDecimales',TypeInfo(boolean), l_AfectarDecimales);
    AfectarDecimales := l_AfectarDecimales;
    l_AfectarLitros := AfectarLitros;
    TROSerializer(ASerializer).ReadEnumerated('AfectarLitros',TypeInfo(boolean), l_AfectarLitros);
    AfectarLitros := l_AfectarLitros;
    l_AutorizacionPorManguera := AutorizacionPorManguera;
    TROSerializer(ASerializer).ReadEnumerated('AutorizacionPorManguera',TypeInfo(boolean), l_AutorizacionPorManguera);
    AutorizacionPorManguera := l_AutorizacionPorManguera;
    l_blnProdArriba := blnProdArriba;
    TROSerializer(ASerializer).ReadEnumerated('blnProdArriba',TypeInfo(boolean), l_blnProdArriba);
    blnProdArriba := l_blnProdArriba;
    l_bolStop := bolStop;
    TROSerializer(ASerializer).ReadEnumerated('bolStop',TypeInfo(boolean), l_bolStop);
    bolStop := l_bolStop;
    l_Bombas := Bombas;
    TROSerializer(ASerializer).ReadArray('Bombas', aBombas, l_Bombas);
    if Bombas <> l_Bombas then Bombas.Free;
    Bombas := l_Bombas;
    l_cAck := cAck;
    TROSerializer(ASerializer).ReadAnsiString('cAck', l_cAck);
    cAck := l_cAck;
    l_CambioPrecio := CambioPrecio;
    TROSerializer(ASerializer).ReadStruct('CambioPrecio', TCambio, l_CambioPrecio);
    if CambioPrecio <> l_CambioPrecio then CambioPrecio.Free;
    CambioPrecio := l_CambioPrecio;
    l_cCR := cCR;
    TROSerializer(ASerializer).ReadAnsiString('cCR', l_cCR);
    cCR := l_cCR;
    l_cESC := cESC;
    TROSerializer(ASerializer).ReadAnsiString('cESC', l_cESC);
    cESC := l_cESC;
    l_cEtx := cEtx;
    TROSerializer(ASerializer).ReadAnsiString('cEtx', l_cEtx);
    cEtx := l_cEtx;
    l_cLF := cLF;
    TROSerializer(ASerializer).ReadAnsiString('cLF', l_cLF);
    cLF := l_cLF;
    l_cNak := cNak;
    TROSerializer(ASerializer).ReadAnsiString('cNak', l_cNak);
    cNak := l_cNak;
    l_Conexiones := Conexiones;
    TROSerializer(ASerializer).ReadArray('Conexiones', aDispositivos, l_Conexiones);
    if Conexiones <> l_Conexiones then Conexiones.Free;
    Conexiones := l_Conexiones;
    l_CortarSuministroSinAut := CortarSuministroSinAut;
    TROSerializer(ASerializer).ReadEnumerated('CortarSuministroSinAut',TypeInfo(boolean), l_CortarSuministroSinAut);
    CortarSuministroSinAut := l_CortarSuministroSinAut;
    l_cStx := cStx;
    TROSerializer(ASerializer).ReadAnsiString('cStx', l_cStx);
    cStx := l_cStx;
    l_cUsuario := cUsuario;
    TROSerializer(ASerializer).ReadAnsiString('cUsuario', l_cUsuario);
    cUsuario := l_cUsuario;
    l_Dispositivos := Dispositivos;
    TROSerializer(ASerializer).ReadArray('Dispositivos', aDispositivos, l_Dispositivos);
    if Dispositivos <> l_Dispositivos then Dispositivos.Free;
    Dispositivos := l_Dispositivos;
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).ReadDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    ImpuestoPorcentaje := l_ImpuestoPorcentaje;
    l_Estacion := Estacion;
    TROSerializer(ASerializer).ReadInteger('Estacion', otSLong, l_Estacion);
    Estacion := l_Estacion;
    l_Fabricante := Fabricante;
    TROSerializer(ASerializer).ReadEnumerated('Fabricante',TypeInfo(eFabricante), l_Fabricante);
    Fabricante := l_Fabricante;
    l_FlujoActual := FlujoActual;
    TROSerializer(ASerializer).ReadInteger('FlujoActual', otSLong, l_FlujoActual);
    FlujoActual := l_FlujoActual;
    l_Gasolinas := Gasolinas;
    TROSerializer(ASerializer).ReadArray('Gasolinas', aGas, l_Gasolinas);
    if Gasolinas <> l_Gasolinas then Gasolinas.Free;
    Gasolinas := l_Gasolinas;
    l_idNivelUsuario := idNivelUsuario;
    TROSerializer(ASerializer).ReadInteger('idNivelUsuario', otSLong, l_idNivelUsuario);
    idNivelUsuario := l_idNivelUsuario;
    l_idUsuario := idUsuario;
    TROSerializer(ASerializer).ReadInteger('idUsuario', otSLong, l_idUsuario);
    idUsuario := l_idUsuario;
    l_lPoleoHora := lPoleoHora;
    TROSerializer(ASerializer).ReadEnumerated('lPoleoHora',TypeInfo(boolean), l_lPoleoHora);
    lPoleoHora := l_lPoleoHora;
    l_Maquina := Maquina;
    TROSerializer(ASerializer).ReadAnsiString('Maquina', l_Maquina);
    Maquina := l_Maquina;
    l_MetodoOperacion := MetodoOperacion;
    TROSerializer(ASerializer).ReadInteger('MetodoOperacion', otSLong, l_MetodoOperacion);
    MetodoOperacion := l_MetodoOperacion;
    l_MetodoTurno := MetodoTurno;
    TROSerializer(ASerializer).ReadInteger('MetodoTurno', otSLong, l_MetodoTurno);
    MetodoTurno := l_MetodoTurno;
    l_Monitoreo := Monitoreo;
    TROSerializer(ASerializer).ReadEnumerated('Monitoreo',TypeInfo(eMonitoreo), l_Monitoreo);
    Monitoreo := l_Monitoreo;
    l_MSG_CISTEMGAS := MSG_CISTEMGAS;
    TROSerializer(ASerializer).ReadInteger('MSG_CISTEMGAS', otSLong, l_MSG_CISTEMGAS);
    MSG_CISTEMGAS := l_MSG_CISTEMGAS;
    l_NombreEstacion := NombreEstacion;
    TROSerializer(ASerializer).ReadAnsiString('NombreEstacion', l_NombreEstacion);
    NombreEstacion := l_NombreEstacion;
    l_NumPuerto := NumPuerto;
    TROSerializer(ASerializer).ReadInteger('NumPuerto', otSLong, l_NumPuerto);
    NumPuerto := l_NumPuerto;
    l_NumSite := NumSite;
    TROSerializer(ASerializer).ReadAnsiString('NumSite', l_NumSite);
    NumSite := l_NumSite;
    l_nVueltasGenerales := nVueltasGenerales;
    TROSerializer(ASerializer).ReadInteger('nVueltasGenerales', otSLong, l_nVueltasGenerales);
    nVueltasGenerales := l_nVueltasGenerales;
    l_PermitirCorteSinVenta := PermitirCorteSinVenta;
    TROSerializer(ASerializer).ReadEnumerated('PermitirCorteSinVenta',TypeInfo(boolean), l_PermitirCorteSinVenta);
    PermitirCorteSinVenta := l_PermitirCorteSinVenta;
    l_PrecioInferior := PrecioInferior;
    TROSerializer(ASerializer).ReadDouble('PrecioInferior', ftDouble, l_PrecioInferior);
    PrecioInferior := l_PrecioInferior;
    l_PrecioSuperior := PrecioSuperior;
    TROSerializer(ASerializer).ReadDouble('PrecioSuperior', ftDouble, l_PrecioSuperior);
    PrecioSuperior := l_PrecioSuperior;
    l_Protecciones := Protecciones;
    TROSerializer(ASerializer).ReadStruct('Protecciones', TProtecciones, l_Protecciones);
    if Protecciones <> l_Protecciones then Protecciones.Free;
    Protecciones := l_Protecciones;
    l_RegistroVenta := RegistroVenta;
    TROSerializer(ASerializer).ReadInteger('RegistroVenta', otSLong, l_RegistroVenta);
    RegistroVenta := l_RegistroVenta;
    l_Respuesta := Respuesta;
    TROSerializer(ASerializer).ReadAnsiString('Respuesta', l_Respuesta);
    Respuesta := l_Respuesta;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_SIIC := SIIC;
    TROSerializer(ASerializer).ReadAnsiString('SIIC', l_SIIC);
    SIIC := l_SIIC;
    l_SinAfectar := SinAfectar;
    TROSerializer(ASerializer).ReadEnumerated('SinAfectar',TypeInfo(boolean), l_SinAfectar);
    SinAfectar := l_SinAfectar;
    l_StatusCtrolVol := StatusCtrolVol;
    TROSerializer(ASerializer).ReadInteger('StatusCtrolVol', otSLong, l_StatusCtrolVol);
    StatusCtrolVol := l_StatusCtrolVol;
    l_strCmdPendiente := strCmdPendiente;
    TROSerializer(ASerializer).ReadAnsiString('strCmdPendiente', l_strCmdPendiente);
    strCmdPendiente := l_strCmdPendiente;
    l_Tanques := Tanques;
    TROSerializer(ASerializer).ReadArray('Tanques', aTanques, l_Tanques);
    if Tanques <> l_Tanques then Tanques.Free;
    Tanques := l_Tanques;
    l_Telemedicion := Telemedicion;
    TROSerializer(ASerializer).ReadInteger('Telemedicion', otSLong, l_Telemedicion);
    Telemedicion := l_Telemedicion;
    l_TipoEstacion := TipoEstacion;
    TROSerializer(ASerializer).ReadInteger('TipoEstacion', otSLong, l_TipoEstacion);
    TipoEstacion := l_TipoEstacion;
    l_TotalBombas := TotalBombas;
    TROSerializer(ASerializer).ReadInteger('TotalBombas', otSLong, l_TotalBombas);
    TotalBombas := l_TotalBombas;
    l_TotalCiclos := TotalCiclos;
    TROSerializer(ASerializer).ReadInteger('TotalCiclos', otSLong, l_TotalCiclos);
    TotalCiclos := l_TotalCiclos;
    l_TurnoActual := TurnoActual;
    TROSerializer(ASerializer).ReadInteger('TurnoActual', otSLong, l_TurnoActual);
    TurnoActual := l_TurnoActual;
    l_TurnosActuales := TurnosActuales;
    TROSerializer(ASerializer).ReadInteger('TurnosActuales', otSLong, l_TurnosActuales);
    TurnosActuales := l_TurnosActuales;
    l_VentaSeleccionada := VentaSeleccionada;
    TROSerializer(ASerializer).ReadInteger('VentaSeleccionada', otSLong, l_VentaSeleccionada);
    VentaSeleccionada := l_VentaSeleccionada;
    l_Licencia := Licencia;
    TROSerializer(ASerializer).ReadStruct('Licencia', TLicencia, l_Licencia);
    if Licencia <> l_Licencia then Licencia.Free;
    Licencia := l_Licencia;
  end
  else begin
    l_AfectarDecimales := AfectarDecimales;
    TROSerializer(ASerializer).ReadEnumerated('AfectarDecimales',TypeInfo(boolean), l_AfectarDecimales);
    AfectarDecimales := l_AfectarDecimales;
    l_AfectarLitros := AfectarLitros;
    TROSerializer(ASerializer).ReadEnumerated('AfectarLitros',TypeInfo(boolean), l_AfectarLitros);
    AfectarLitros := l_AfectarLitros;
    l_AutorizacionPorManguera := AutorizacionPorManguera;
    TROSerializer(ASerializer).ReadEnumerated('AutorizacionPorManguera',TypeInfo(boolean), l_AutorizacionPorManguera);
    AutorizacionPorManguera := l_AutorizacionPorManguera;
    l_blnProdArriba := blnProdArriba;
    TROSerializer(ASerializer).ReadEnumerated('blnProdArriba',TypeInfo(boolean), l_blnProdArriba);
    blnProdArriba := l_blnProdArriba;
    l_bolStop := bolStop;
    TROSerializer(ASerializer).ReadEnumerated('bolStop',TypeInfo(boolean), l_bolStop);
    bolStop := l_bolStop;
    l_Bombas := Bombas;
    TROSerializer(ASerializer).ReadArray('Bombas', aBombas, l_Bombas);
    if Bombas <> l_Bombas then Bombas.Free;
    Bombas := l_Bombas;
    l_cAck := cAck;
    TROSerializer(ASerializer).ReadAnsiString('cAck', l_cAck);
    cAck := l_cAck;
    l_CambioPrecio := CambioPrecio;
    TROSerializer(ASerializer).ReadStruct('CambioPrecio', TCambio, l_CambioPrecio);
    if CambioPrecio <> l_CambioPrecio then CambioPrecio.Free;
    CambioPrecio := l_CambioPrecio;
    l_cCR := cCR;
    TROSerializer(ASerializer).ReadAnsiString('cCR', l_cCR);
    cCR := l_cCR;
    l_cESC := cESC;
    TROSerializer(ASerializer).ReadAnsiString('cESC', l_cESC);
    cESC := l_cESC;
    l_cEtx := cEtx;
    TROSerializer(ASerializer).ReadAnsiString('cEtx', l_cEtx);
    cEtx := l_cEtx;
    l_cLF := cLF;
    TROSerializer(ASerializer).ReadAnsiString('cLF', l_cLF);
    cLF := l_cLF;
    l_cNak := cNak;
    TROSerializer(ASerializer).ReadAnsiString('cNak', l_cNak);
    cNak := l_cNak;
    l_Conexiones := Conexiones;
    TROSerializer(ASerializer).ReadArray('Conexiones', aDispositivos, l_Conexiones);
    if Conexiones <> l_Conexiones then Conexiones.Free;
    Conexiones := l_Conexiones;
    l_CortarSuministroSinAut := CortarSuministroSinAut;
    TROSerializer(ASerializer).ReadEnumerated('CortarSuministroSinAut',TypeInfo(boolean), l_CortarSuministroSinAut);
    CortarSuministroSinAut := l_CortarSuministroSinAut;
    l_cStx := cStx;
    TROSerializer(ASerializer).ReadAnsiString('cStx', l_cStx);
    cStx := l_cStx;
    l_cUsuario := cUsuario;
    TROSerializer(ASerializer).ReadAnsiString('cUsuario', l_cUsuario);
    cUsuario := l_cUsuario;
    l_Dispositivos := Dispositivos;
    TROSerializer(ASerializer).ReadArray('Dispositivos', aDispositivos, l_Dispositivos);
    if Dispositivos <> l_Dispositivos then Dispositivos.Free;
    Dispositivos := l_Dispositivos;
    l_Estacion := Estacion;
    TROSerializer(ASerializer).ReadInteger('Estacion', otSLong, l_Estacion);
    Estacion := l_Estacion;
    l_Fabricante := Fabricante;
    TROSerializer(ASerializer).ReadEnumerated('Fabricante',TypeInfo(eFabricante), l_Fabricante);
    Fabricante := l_Fabricante;
    l_FlujoActual := FlujoActual;
    TROSerializer(ASerializer).ReadInteger('FlujoActual', otSLong, l_FlujoActual);
    FlujoActual := l_FlujoActual;
    l_Gasolinas := Gasolinas;
    TROSerializer(ASerializer).ReadArray('Gasolinas', aGas, l_Gasolinas);
    if Gasolinas <> l_Gasolinas then Gasolinas.Free;
    Gasolinas := l_Gasolinas;
    l_idNivelUsuario := idNivelUsuario;
    TROSerializer(ASerializer).ReadInteger('idNivelUsuario', otSLong, l_idNivelUsuario);
    idNivelUsuario := l_idNivelUsuario;
    l_idUsuario := idUsuario;
    TROSerializer(ASerializer).ReadInteger('idUsuario', otSLong, l_idUsuario);
    idUsuario := l_idUsuario;
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).ReadDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    ImpuestoPorcentaje := l_ImpuestoPorcentaje;
    l_Licencia := Licencia;
    TROSerializer(ASerializer).ReadStruct('Licencia', TLicencia, l_Licencia);
    if Licencia <> l_Licencia then Licencia.Free;
    Licencia := l_Licencia;
    l_lPoleoHora := lPoleoHora;
    TROSerializer(ASerializer).ReadEnumerated('lPoleoHora',TypeInfo(boolean), l_lPoleoHora);
    lPoleoHora := l_lPoleoHora;
    l_Maquina := Maquina;
    TROSerializer(ASerializer).ReadAnsiString('Maquina', l_Maquina);
    Maquina := l_Maquina;
    l_MetodoOperacion := MetodoOperacion;
    TROSerializer(ASerializer).ReadInteger('MetodoOperacion', otSLong, l_MetodoOperacion);
    MetodoOperacion := l_MetodoOperacion;
    l_MetodoTurno := MetodoTurno;
    TROSerializer(ASerializer).ReadInteger('MetodoTurno', otSLong, l_MetodoTurno);
    MetodoTurno := l_MetodoTurno;
    l_Monitoreo := Monitoreo;
    TROSerializer(ASerializer).ReadEnumerated('Monitoreo',TypeInfo(eMonitoreo), l_Monitoreo);
    Monitoreo := l_Monitoreo;
    l_MSG_CISTEMGAS := MSG_CISTEMGAS;
    TROSerializer(ASerializer).ReadInteger('MSG_CISTEMGAS', otSLong, l_MSG_CISTEMGAS);
    MSG_CISTEMGAS := l_MSG_CISTEMGAS;
    l_NombreEstacion := NombreEstacion;
    TROSerializer(ASerializer).ReadAnsiString('NombreEstacion', l_NombreEstacion);
    NombreEstacion := l_NombreEstacion;
    l_NumPuerto := NumPuerto;
    TROSerializer(ASerializer).ReadInteger('NumPuerto', otSLong, l_NumPuerto);
    NumPuerto := l_NumPuerto;
    l_NumSite := NumSite;
    TROSerializer(ASerializer).ReadAnsiString('NumSite', l_NumSite);
    NumSite := l_NumSite;
    l_nVueltasGenerales := nVueltasGenerales;
    TROSerializer(ASerializer).ReadInteger('nVueltasGenerales', otSLong, l_nVueltasGenerales);
    nVueltasGenerales := l_nVueltasGenerales;
    l_PermitirCorteSinVenta := PermitirCorteSinVenta;
    TROSerializer(ASerializer).ReadEnumerated('PermitirCorteSinVenta',TypeInfo(boolean), l_PermitirCorteSinVenta);
    PermitirCorteSinVenta := l_PermitirCorteSinVenta;
    l_PrecioInferior := PrecioInferior;
    TROSerializer(ASerializer).ReadDouble('PrecioInferior', ftDouble, l_PrecioInferior);
    PrecioInferior := l_PrecioInferior;
    l_PrecioSuperior := PrecioSuperior;
    TROSerializer(ASerializer).ReadDouble('PrecioSuperior', ftDouble, l_PrecioSuperior);
    PrecioSuperior := l_PrecioSuperior;
    l_Protecciones := Protecciones;
    TROSerializer(ASerializer).ReadStruct('Protecciones', TProtecciones, l_Protecciones);
    if Protecciones <> l_Protecciones then Protecciones.Free;
    Protecciones := l_Protecciones;
    l_RegistroVenta := RegistroVenta;
    TROSerializer(ASerializer).ReadInteger('RegistroVenta', otSLong, l_RegistroVenta);
    RegistroVenta := l_RegistroVenta;
    l_Respuesta := Respuesta;
    TROSerializer(ASerializer).ReadAnsiString('Respuesta', l_Respuesta);
    Respuesta := l_Respuesta;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_SIIC := SIIC;
    TROSerializer(ASerializer).ReadAnsiString('SIIC', l_SIIC);
    SIIC := l_SIIC;
    l_SinAfectar := SinAfectar;
    TROSerializer(ASerializer).ReadEnumerated('SinAfectar',TypeInfo(boolean), l_SinAfectar);
    SinAfectar := l_SinAfectar;
    l_StatusCtrolVol := StatusCtrolVol;
    TROSerializer(ASerializer).ReadInteger('StatusCtrolVol', otSLong, l_StatusCtrolVol);
    StatusCtrolVol := l_StatusCtrolVol;
    l_strCmdPendiente := strCmdPendiente;
    TROSerializer(ASerializer).ReadAnsiString('strCmdPendiente', l_strCmdPendiente);
    strCmdPendiente := l_strCmdPendiente;
    l_Tanques := Tanques;
    TROSerializer(ASerializer).ReadArray('Tanques', aTanques, l_Tanques);
    if Tanques <> l_Tanques then Tanques.Free;
    Tanques := l_Tanques;
    l_Telemedicion := Telemedicion;
    TROSerializer(ASerializer).ReadInteger('Telemedicion', otSLong, l_Telemedicion);
    Telemedicion := l_Telemedicion;
    l_TipoEstacion := TipoEstacion;
    TROSerializer(ASerializer).ReadInteger('TipoEstacion', otSLong, l_TipoEstacion);
    TipoEstacion := l_TipoEstacion;
    l_TotalBombas := TotalBombas;
    TROSerializer(ASerializer).ReadInteger('TotalBombas', otSLong, l_TotalBombas);
    TotalBombas := l_TotalBombas;
    l_TotalCiclos := TotalCiclos;
    TROSerializer(ASerializer).ReadInteger('TotalCiclos', otSLong, l_TotalCiclos);
    TotalCiclos := l_TotalCiclos;
    l_TurnoActual := TurnoActual;
    TROSerializer(ASerializer).ReadInteger('TurnoActual', otSLong, l_TurnoActual);
    TurnoActual := l_TurnoActual;
    l_TurnosActuales := TurnosActuales;
    TROSerializer(ASerializer).ReadInteger('TurnosActuales', otSLong, l_TurnosActuales);
    TurnosActuales := l_TurnosActuales;
    l_VentaSeleccionada := VentaSeleccionada;
    TROSerializer(ASerializer).ReadInteger('VentaSeleccionada', otSLong, l_VentaSeleccionada);
    VentaSeleccionada := l_VentaSeleccionada;
  end;
end;

procedure TGlobal.WriteComplex(ASerializer: TObject);
var
  l_AfectarDecimales: Boolean;
  l_AfectarLitros: Boolean;
  l_AutorizacionPorManguera: Boolean;
  l_blnProdArriba: Boolean;
  l_bolStop: Boolean;
  l_Bombas: aBombas;
  l_cAck: AnsiString;
  l_CambioPrecio: TCambio;
  l_cCR: AnsiString;
  l_cESC: AnsiString;
  l_cEtx: AnsiString;
  l_cLF: AnsiString;
  l_cNak: AnsiString;
  l_Conexiones: aDispositivos;
  l_CortarSuministroSinAut: Boolean;
  l_cStx: AnsiString;
  l_cUsuario: AnsiString;
  l_Dispositivos: aDispositivos;
  l_Estacion: Integer;
  l_Fabricante: eFabricante;
  l_FlujoActual: Integer;
  l_Gasolinas: aGas;
  l_idNivelUsuario: Integer;
  l_idUsuario: Integer;
  l_ImpuestoPorcentaje: Double;
  l_Licencia: TLicencia;
  l_lPoleoHora: Boolean;
  l_Maquina: AnsiString;
  l_MetodoOperacion: Integer;
  l_MetodoTurno: Integer;
  l_Monitoreo: eMonitoreo;
  l_MSG_CISTEMGAS: Integer;
  l_NombreEstacion: AnsiString;
  l_NumPuerto: Integer;
  l_NumSite: AnsiString;
  l_nVueltasGenerales: Integer;
  l_PermitirCorteSinVenta: Boolean;
  l_PrecioInferior: Double;
  l_PrecioSuperior: Double;
  l_Protecciones: TProtecciones;
  l_RegistroVenta: Integer;
  l_Respuesta: AnsiString;
  l_RFC: AnsiString;
  l_SIIC: AnsiString;
  l_SinAfectar: Boolean;
  l_StatusCtrolVol: Integer;
  l_strCmdPendiente: AnsiString;
  l_Tanques: aTanques;
  l_Telemedicion: Integer;
  l_TipoEstacion: Integer;
  l_TotalBombas: Integer;
  l_TotalCiclos: Integer;
  l_TurnoActual: Integer;
  l_TurnosActuales: Integer;
  l_VentaSeleccionada: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TGlobal);
    l_AfectarDecimales := AfectarDecimales;
    TROSerializer(ASerializer).WriteEnumerated('AfectarDecimales',TypeInfo(boolean), l_AfectarDecimales);
    l_AfectarLitros := AfectarLitros;
    TROSerializer(ASerializer).WriteEnumerated('AfectarLitros',TypeInfo(boolean), l_AfectarLitros);
    l_AutorizacionPorManguera := AutorizacionPorManguera;
    TROSerializer(ASerializer).WriteEnumerated('AutorizacionPorManguera',TypeInfo(boolean), l_AutorizacionPorManguera);
    l_blnProdArriba := blnProdArriba;
    TROSerializer(ASerializer).WriteEnumerated('blnProdArriba',TypeInfo(boolean), l_blnProdArriba);
    l_bolStop := bolStop;
    TROSerializer(ASerializer).WriteEnumerated('bolStop',TypeInfo(boolean), l_bolStop);
    l_Bombas := Bombas;
    TROSerializer(ASerializer).WriteArray('Bombas', l_Bombas, aBombas);
    l_cAck := cAck;
    TROSerializer(ASerializer).WriteAnsiString('cAck', l_cAck);
    l_CambioPrecio := CambioPrecio;
    TROSerializer(ASerializer).WriteStruct('CambioPrecio', l_CambioPrecio, TCambio);
    l_cCR := cCR;
    TROSerializer(ASerializer).WriteAnsiString('cCR', l_cCR);
    l_cESC := cESC;
    TROSerializer(ASerializer).WriteAnsiString('cESC', l_cESC);
    l_cEtx := cEtx;
    TROSerializer(ASerializer).WriteAnsiString('cEtx', l_cEtx);
    l_cLF := cLF;
    TROSerializer(ASerializer).WriteAnsiString('cLF', l_cLF);
    l_cNak := cNak;
    TROSerializer(ASerializer).WriteAnsiString('cNak', l_cNak);
    l_Conexiones := Conexiones;
    TROSerializer(ASerializer).WriteArray('Conexiones', l_Conexiones, aDispositivos);
    l_CortarSuministroSinAut := CortarSuministroSinAut;
    TROSerializer(ASerializer).WriteEnumerated('CortarSuministroSinAut',TypeInfo(boolean), l_CortarSuministroSinAut);
    l_cStx := cStx;
    TROSerializer(ASerializer).WriteAnsiString('cStx', l_cStx);
    l_cUsuario := cUsuario;
    TROSerializer(ASerializer).WriteAnsiString('cUsuario', l_cUsuario);
    l_Dispositivos := Dispositivos;
    TROSerializer(ASerializer).WriteArray('Dispositivos', l_Dispositivos, aDispositivos);
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).WriteDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    l_Estacion := Estacion;
    TROSerializer(ASerializer).WriteInteger('Estacion', otSLong, l_Estacion);
    l_Fabricante := Fabricante;
    TROSerializer(ASerializer).WriteEnumerated('Fabricante',TypeInfo(eFabricante), l_Fabricante);
    l_FlujoActual := FlujoActual;
    TROSerializer(ASerializer).WriteInteger('FlujoActual', otSLong, l_FlujoActual);
    l_Gasolinas := Gasolinas;
    TROSerializer(ASerializer).WriteArray('Gasolinas', l_Gasolinas, aGas);
    l_idNivelUsuario := idNivelUsuario;
    TROSerializer(ASerializer).WriteInteger('idNivelUsuario', otSLong, l_idNivelUsuario);
    l_idUsuario := idUsuario;
    TROSerializer(ASerializer).WriteInteger('idUsuario', otSLong, l_idUsuario);
    l_lPoleoHora := lPoleoHora;
    TROSerializer(ASerializer).WriteEnumerated('lPoleoHora',TypeInfo(boolean), l_lPoleoHora);
    l_Maquina := Maquina;
    TROSerializer(ASerializer).WriteAnsiString('Maquina', l_Maquina);
    l_MetodoOperacion := MetodoOperacion;
    TROSerializer(ASerializer).WriteInteger('MetodoOperacion', otSLong, l_MetodoOperacion);
    l_MetodoTurno := MetodoTurno;
    TROSerializer(ASerializer).WriteInteger('MetodoTurno', otSLong, l_MetodoTurno);
    l_Monitoreo := Monitoreo;
    TROSerializer(ASerializer).WriteEnumerated('Monitoreo',TypeInfo(eMonitoreo), l_Monitoreo);
    l_MSG_CISTEMGAS := MSG_CISTEMGAS;
    TROSerializer(ASerializer).WriteInteger('MSG_CISTEMGAS', otSLong, l_MSG_CISTEMGAS);
    l_NombreEstacion := NombreEstacion;
    TROSerializer(ASerializer).WriteAnsiString('NombreEstacion', l_NombreEstacion);
    l_NumPuerto := NumPuerto;
    TROSerializer(ASerializer).WriteInteger('NumPuerto', otSLong, l_NumPuerto);
    l_NumSite := NumSite;
    TROSerializer(ASerializer).WriteAnsiString('NumSite', l_NumSite);
    l_nVueltasGenerales := nVueltasGenerales;
    TROSerializer(ASerializer).WriteInteger('nVueltasGenerales', otSLong, l_nVueltasGenerales);
    l_PermitirCorteSinVenta := PermitirCorteSinVenta;
    TROSerializer(ASerializer).WriteEnumerated('PermitirCorteSinVenta',TypeInfo(boolean), l_PermitirCorteSinVenta);
    l_PrecioInferior := PrecioInferior;
    TROSerializer(ASerializer).WriteDouble('PrecioInferior', ftDouble, l_PrecioInferior);
    l_PrecioSuperior := PrecioSuperior;
    TROSerializer(ASerializer).WriteDouble('PrecioSuperior', ftDouble, l_PrecioSuperior);
    l_Protecciones := Protecciones;
    TROSerializer(ASerializer).WriteStruct('Protecciones', l_Protecciones, TProtecciones);
    l_RegistroVenta := RegistroVenta;
    TROSerializer(ASerializer).WriteInteger('RegistroVenta', otSLong, l_RegistroVenta);
    l_Respuesta := Respuesta;
    TROSerializer(ASerializer).WriteAnsiString('Respuesta', l_Respuesta);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_SIIC := SIIC;
    TROSerializer(ASerializer).WriteAnsiString('SIIC', l_SIIC);
    l_SinAfectar := SinAfectar;
    TROSerializer(ASerializer).WriteEnumerated('SinAfectar',TypeInfo(boolean), l_SinAfectar);
    l_StatusCtrolVol := StatusCtrolVol;
    TROSerializer(ASerializer).WriteInteger('StatusCtrolVol', otSLong, l_StatusCtrolVol);
    l_strCmdPendiente := strCmdPendiente;
    TROSerializer(ASerializer).WriteAnsiString('strCmdPendiente', l_strCmdPendiente);
    l_Tanques := Tanques;
    TROSerializer(ASerializer).WriteArray('Tanques', l_Tanques, aTanques);
    l_Telemedicion := Telemedicion;
    TROSerializer(ASerializer).WriteInteger('Telemedicion', otSLong, l_Telemedicion);
    l_TipoEstacion := TipoEstacion;
    TROSerializer(ASerializer).WriteInteger('TipoEstacion', otSLong, l_TipoEstacion);
    l_TotalBombas := TotalBombas;
    TROSerializer(ASerializer).WriteInteger('TotalBombas', otSLong, l_TotalBombas);
    l_TotalCiclos := TotalCiclos;
    TROSerializer(ASerializer).WriteInteger('TotalCiclos', otSLong, l_TotalCiclos);
    l_TurnoActual := TurnoActual;
    TROSerializer(ASerializer).WriteInteger('TurnoActual', otSLong, l_TurnoActual);
    l_TurnosActuales := TurnosActuales;
    TROSerializer(ASerializer).WriteInteger('TurnosActuales', otSLong, l_TurnosActuales);
    l_VentaSeleccionada := VentaSeleccionada;
    TROSerializer(ASerializer).WriteInteger('VentaSeleccionada', otSLong, l_VentaSeleccionada);
    l_Licencia := Licencia;
    TROSerializer(ASerializer).WriteStruct('Licencia', l_Licencia, TLicencia);
  end
  else begin
    l_AfectarDecimales := AfectarDecimales;
    TROSerializer(ASerializer).WriteEnumerated('AfectarDecimales',TypeInfo(boolean), l_AfectarDecimales);
    l_AfectarLitros := AfectarLitros;
    TROSerializer(ASerializer).WriteEnumerated('AfectarLitros',TypeInfo(boolean), l_AfectarLitros);
    l_AutorizacionPorManguera := AutorizacionPorManguera;
    TROSerializer(ASerializer).WriteEnumerated('AutorizacionPorManguera',TypeInfo(boolean), l_AutorizacionPorManguera);
    l_blnProdArriba := blnProdArriba;
    TROSerializer(ASerializer).WriteEnumerated('blnProdArriba',TypeInfo(boolean), l_blnProdArriba);
    l_bolStop := bolStop;
    TROSerializer(ASerializer).WriteEnumerated('bolStop',TypeInfo(boolean), l_bolStop);
    l_Bombas := Bombas;
    TROSerializer(ASerializer).WriteArray('Bombas', l_Bombas, aBombas);
    l_cAck := cAck;
    TROSerializer(ASerializer).WriteAnsiString('cAck', l_cAck);
    l_CambioPrecio := CambioPrecio;
    TROSerializer(ASerializer).WriteStruct('CambioPrecio', l_CambioPrecio, TCambio);
    l_cCR := cCR;
    TROSerializer(ASerializer).WriteAnsiString('cCR', l_cCR);
    l_cESC := cESC;
    TROSerializer(ASerializer).WriteAnsiString('cESC', l_cESC);
    l_cEtx := cEtx;
    TROSerializer(ASerializer).WriteAnsiString('cEtx', l_cEtx);
    l_cLF := cLF;
    TROSerializer(ASerializer).WriteAnsiString('cLF', l_cLF);
    l_cNak := cNak;
    TROSerializer(ASerializer).WriteAnsiString('cNak', l_cNak);
    l_Conexiones := Conexiones;
    TROSerializer(ASerializer).WriteArray('Conexiones', l_Conexiones, aDispositivos);
    l_CortarSuministroSinAut := CortarSuministroSinAut;
    TROSerializer(ASerializer).WriteEnumerated('CortarSuministroSinAut',TypeInfo(boolean), l_CortarSuministroSinAut);
    l_cStx := cStx;
    TROSerializer(ASerializer).WriteAnsiString('cStx', l_cStx);
    l_cUsuario := cUsuario;
    TROSerializer(ASerializer).WriteAnsiString('cUsuario', l_cUsuario);
    l_Dispositivos := Dispositivos;
    TROSerializer(ASerializer).WriteArray('Dispositivos', l_Dispositivos, aDispositivos);
    l_Estacion := Estacion;
    TROSerializer(ASerializer).WriteInteger('Estacion', otSLong, l_Estacion);
    l_Fabricante := Fabricante;
    TROSerializer(ASerializer).WriteEnumerated('Fabricante',TypeInfo(eFabricante), l_Fabricante);
    l_FlujoActual := FlujoActual;
    TROSerializer(ASerializer).WriteInteger('FlujoActual', otSLong, l_FlujoActual);
    l_Gasolinas := Gasolinas;
    TROSerializer(ASerializer).WriteArray('Gasolinas', l_Gasolinas, aGas);
    l_idNivelUsuario := idNivelUsuario;
    TROSerializer(ASerializer).WriteInteger('idNivelUsuario', otSLong, l_idNivelUsuario);
    l_idUsuario := idUsuario;
    TROSerializer(ASerializer).WriteInteger('idUsuario', otSLong, l_idUsuario);
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).WriteDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    l_Licencia := Licencia;
    TROSerializer(ASerializer).WriteStruct('Licencia', l_Licencia, TLicencia);
    l_lPoleoHora := lPoleoHora;
    TROSerializer(ASerializer).WriteEnumerated('lPoleoHora',TypeInfo(boolean), l_lPoleoHora);
    l_Maquina := Maquina;
    TROSerializer(ASerializer).WriteAnsiString('Maquina', l_Maquina);
    l_MetodoOperacion := MetodoOperacion;
    TROSerializer(ASerializer).WriteInteger('MetodoOperacion', otSLong, l_MetodoOperacion);
    l_MetodoTurno := MetodoTurno;
    TROSerializer(ASerializer).WriteInteger('MetodoTurno', otSLong, l_MetodoTurno);
    l_Monitoreo := Monitoreo;
    TROSerializer(ASerializer).WriteEnumerated('Monitoreo',TypeInfo(eMonitoreo), l_Monitoreo);
    l_MSG_CISTEMGAS := MSG_CISTEMGAS;
    TROSerializer(ASerializer).WriteInteger('MSG_CISTEMGAS', otSLong, l_MSG_CISTEMGAS);
    l_NombreEstacion := NombreEstacion;
    TROSerializer(ASerializer).WriteAnsiString('NombreEstacion', l_NombreEstacion);
    l_NumPuerto := NumPuerto;
    TROSerializer(ASerializer).WriteInteger('NumPuerto', otSLong, l_NumPuerto);
    l_NumSite := NumSite;
    TROSerializer(ASerializer).WriteAnsiString('NumSite', l_NumSite);
    l_nVueltasGenerales := nVueltasGenerales;
    TROSerializer(ASerializer).WriteInteger('nVueltasGenerales', otSLong, l_nVueltasGenerales);
    l_PermitirCorteSinVenta := PermitirCorteSinVenta;
    TROSerializer(ASerializer).WriteEnumerated('PermitirCorteSinVenta',TypeInfo(boolean), l_PermitirCorteSinVenta);
    l_PrecioInferior := PrecioInferior;
    TROSerializer(ASerializer).WriteDouble('PrecioInferior', ftDouble, l_PrecioInferior);
    l_PrecioSuperior := PrecioSuperior;
    TROSerializer(ASerializer).WriteDouble('PrecioSuperior', ftDouble, l_PrecioSuperior);
    l_Protecciones := Protecciones;
    TROSerializer(ASerializer).WriteStruct('Protecciones', l_Protecciones, TProtecciones);
    l_RegistroVenta := RegistroVenta;
    TROSerializer(ASerializer).WriteInteger('RegistroVenta', otSLong, l_RegistroVenta);
    l_Respuesta := Respuesta;
    TROSerializer(ASerializer).WriteAnsiString('Respuesta', l_Respuesta);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_SIIC := SIIC;
    TROSerializer(ASerializer).WriteAnsiString('SIIC', l_SIIC);
    l_SinAfectar := SinAfectar;
    TROSerializer(ASerializer).WriteEnumerated('SinAfectar',TypeInfo(boolean), l_SinAfectar);
    l_StatusCtrolVol := StatusCtrolVol;
    TROSerializer(ASerializer).WriteInteger('StatusCtrolVol', otSLong, l_StatusCtrolVol);
    l_strCmdPendiente := strCmdPendiente;
    TROSerializer(ASerializer).WriteAnsiString('strCmdPendiente', l_strCmdPendiente);
    l_Tanques := Tanques;
    TROSerializer(ASerializer).WriteArray('Tanques', l_Tanques, aTanques);
    l_Telemedicion := Telemedicion;
    TROSerializer(ASerializer).WriteInteger('Telemedicion', otSLong, l_Telemedicion);
    l_TipoEstacion := TipoEstacion;
    TROSerializer(ASerializer).WriteInteger('TipoEstacion', otSLong, l_TipoEstacion);
    l_TotalBombas := TotalBombas;
    TROSerializer(ASerializer).WriteInteger('TotalBombas', otSLong, l_TotalBombas);
    l_TotalCiclos := TotalCiclos;
    TROSerializer(ASerializer).WriteInteger('TotalCiclos', otSLong, l_TotalCiclos);
    l_TurnoActual := TurnoActual;
    TROSerializer(ASerializer).WriteInteger('TurnoActual', otSLong, l_TurnoActual);
    l_TurnosActuales := TurnosActuales;
    TROSerializer(ASerializer).WriteInteger('TurnosActuales', otSLong, l_TurnosActuales);
    l_VentaSeleccionada := VentaSeleccionada;
    TROSerializer(ASerializer).WriteInteger('VentaSeleccionada', otSLong, l_VentaSeleccionada);
  end;
end;

{ TGlobalCollection }
constructor TGlobalCollection.Create;
begin
  inherited Create(TGlobal);
end;

constructor TGlobalCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TGlobalCollection.Add: TGlobal;
begin
  result := TGlobal(inherited Add);
end;

function TGlobalCollection.GetItems(aIndex: integer): TGlobal;
begin
  result := TGlobal(inherited Items[aIndex]);
end;

procedure TGlobalCollection.SetItems(aIndex: integer; const Value: TGlobal);
begin
  TGlobal(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosCorte }

procedure TDatosCorte.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TDatosCorte;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TDatosCorte) then begin
    lSource := LibraryCistemGas_Intf.TDatosCorte(iSource);
    FechaInicio := lSource.FechaInicio;
    FechaFinal := lSource.FechaFinal;
    LecturaInicial := lSource.LecturaInicial;
    LecturaFinal := lSource.LecturaFinal;
    Precio := lSource.Precio;
    BombaID := lSource.BombaID;
    MangueraID := lSource.MangueraID;
    TurnoID := lSource.TurnoID;
    ImporteCupones := lSource.ImporteCupones;
    NumeroCupones := lSource.NumeroCupones;
    ImporteTarjetas := lSource.ImporteTarjetas;
    NumeroTarjetas := lSource.NumeroTarjetas;
    ImporteNotas := lSource.ImporteNotas;
    NumeroNotas := lSource.NumeroNotas;
  end;
end;

procedure TDatosCorte.ReadComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_FechaFinal: DateTime;
  l_FechaInicio: DateTime;
  l_ImporteCupones: Double;
  l_ImporteNotas: Double;
  l_ImporteTarjetas: Double;
  l_LecturaFinal: Double;
  l_LecturaInicial: Double;
  l_MangueraID: Integer;
  l_NumeroCupones: Double;
  l_NumeroNotas: Double;
  l_NumeroTarjetas: Double;
  l_Precio: Double;
  l_TurnoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FechaInicio := FechaInicio;
    TROSerializer(ASerializer).ReadDateTime('FechaInicio', l_FechaInicio);
    FechaInicio := l_FechaInicio;
    l_FechaFinal := FechaFinal;
    TROSerializer(ASerializer).ReadDateTime('FechaFinal', l_FechaFinal);
    FechaFinal := l_FechaFinal;
    l_LecturaInicial := LecturaInicial;
    TROSerializer(ASerializer).ReadDouble('LecturaInicial', ftDouble, l_LecturaInicial);
    LecturaInicial := l_LecturaInicial;
    l_LecturaFinal := LecturaFinal;
    TROSerializer(ASerializer).ReadDouble('LecturaFinal', ftDouble, l_LecturaFinal);
    LecturaFinal := l_LecturaFinal;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_MangueraID := MangueraID;
    TROSerializer(ASerializer).ReadInteger('MangueraID', otSLong, l_MangueraID);
    MangueraID := l_MangueraID;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
    l_ImporteCupones := ImporteCupones;
    TROSerializer(ASerializer).ReadDouble('ImporteCupones', ftDouble, l_ImporteCupones);
    ImporteCupones := l_ImporteCupones;
    l_NumeroCupones := NumeroCupones;
    TROSerializer(ASerializer).ReadDouble('NumeroCupones', ftDouble, l_NumeroCupones);
    NumeroCupones := l_NumeroCupones;
    l_ImporteTarjetas := ImporteTarjetas;
    TROSerializer(ASerializer).ReadDouble('ImporteTarjetas', ftDouble, l_ImporteTarjetas);
    ImporteTarjetas := l_ImporteTarjetas;
    l_NumeroTarjetas := NumeroTarjetas;
    TROSerializer(ASerializer).ReadDouble('NumeroTarjetas', ftDouble, l_NumeroTarjetas);
    NumeroTarjetas := l_NumeroTarjetas;
    l_ImporteNotas := ImporteNotas;
    TROSerializer(ASerializer).ReadDouble('ImporteNotas', ftDouble, l_ImporteNotas);
    ImporteNotas := l_ImporteNotas;
    l_NumeroNotas := NumeroNotas;
    TROSerializer(ASerializer).ReadDouble('NumeroNotas', ftDouble, l_NumeroNotas);
    NumeroNotas := l_NumeroNotas;
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_FechaFinal := FechaFinal;
    TROSerializer(ASerializer).ReadDateTime('FechaFinal', l_FechaFinal);
    FechaFinal := l_FechaFinal;
    l_FechaInicio := FechaInicio;
    TROSerializer(ASerializer).ReadDateTime('FechaInicio', l_FechaInicio);
    FechaInicio := l_FechaInicio;
    l_ImporteCupones := ImporteCupones;
    TROSerializer(ASerializer).ReadDouble('ImporteCupones', ftDouble, l_ImporteCupones);
    ImporteCupones := l_ImporteCupones;
    l_ImporteNotas := ImporteNotas;
    TROSerializer(ASerializer).ReadDouble('ImporteNotas', ftDouble, l_ImporteNotas);
    ImporteNotas := l_ImporteNotas;
    l_ImporteTarjetas := ImporteTarjetas;
    TROSerializer(ASerializer).ReadDouble('ImporteTarjetas', ftDouble, l_ImporteTarjetas);
    ImporteTarjetas := l_ImporteTarjetas;
    l_LecturaFinal := LecturaFinal;
    TROSerializer(ASerializer).ReadDouble('LecturaFinal', ftDouble, l_LecturaFinal);
    LecturaFinal := l_LecturaFinal;
    l_LecturaInicial := LecturaInicial;
    TROSerializer(ASerializer).ReadDouble('LecturaInicial', ftDouble, l_LecturaInicial);
    LecturaInicial := l_LecturaInicial;
    l_MangueraID := MangueraID;
    TROSerializer(ASerializer).ReadInteger('MangueraID', otSLong, l_MangueraID);
    MangueraID := l_MangueraID;
    l_NumeroCupones := NumeroCupones;
    TROSerializer(ASerializer).ReadDouble('NumeroCupones', ftDouble, l_NumeroCupones);
    NumeroCupones := l_NumeroCupones;
    l_NumeroNotas := NumeroNotas;
    TROSerializer(ASerializer).ReadDouble('NumeroNotas', ftDouble, l_NumeroNotas);
    NumeroNotas := l_NumeroNotas;
    l_NumeroTarjetas := NumeroTarjetas;
    TROSerializer(ASerializer).ReadDouble('NumeroTarjetas', ftDouble, l_NumeroTarjetas);
    NumeroTarjetas := l_NumeroTarjetas;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
  end;
end;

procedure TDatosCorte.WriteComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_FechaFinal: DateTime;
  l_FechaInicio: DateTime;
  l_ImporteCupones: Double;
  l_ImporteNotas: Double;
  l_ImporteTarjetas: Double;
  l_LecturaFinal: Double;
  l_LecturaInicial: Double;
  l_MangueraID: Integer;
  l_NumeroCupones: Double;
  l_NumeroNotas: Double;
  l_NumeroTarjetas: Double;
  l_Precio: Double;
  l_TurnoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosCorte);
    l_FechaInicio := FechaInicio;
    TROSerializer(ASerializer).WriteDateTime('FechaInicio', l_FechaInicio);
    l_FechaFinal := FechaFinal;
    TROSerializer(ASerializer).WriteDateTime('FechaFinal', l_FechaFinal);
    l_LecturaInicial := LecturaInicial;
    TROSerializer(ASerializer).WriteDouble('LecturaInicial', ftDouble, l_LecturaInicial);
    l_LecturaFinal := LecturaFinal;
    TROSerializer(ASerializer).WriteDouble('LecturaFinal', ftDouble, l_LecturaFinal);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_MangueraID := MangueraID;
    TROSerializer(ASerializer).WriteInteger('MangueraID', otSLong, l_MangueraID);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
    l_ImporteCupones := ImporteCupones;
    TROSerializer(ASerializer).WriteDouble('ImporteCupones', ftDouble, l_ImporteCupones);
    l_NumeroCupones := NumeroCupones;
    TROSerializer(ASerializer).WriteDouble('NumeroCupones', ftDouble, l_NumeroCupones);
    l_ImporteTarjetas := ImporteTarjetas;
    TROSerializer(ASerializer).WriteDouble('ImporteTarjetas', ftDouble, l_ImporteTarjetas);
    l_NumeroTarjetas := NumeroTarjetas;
    TROSerializer(ASerializer).WriteDouble('NumeroTarjetas', ftDouble, l_NumeroTarjetas);
    l_ImporteNotas := ImporteNotas;
    TROSerializer(ASerializer).WriteDouble('ImporteNotas', ftDouble, l_ImporteNotas);
    l_NumeroNotas := NumeroNotas;
    TROSerializer(ASerializer).WriteDouble('NumeroNotas', ftDouble, l_NumeroNotas);
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_FechaFinal := FechaFinal;
    TROSerializer(ASerializer).WriteDateTime('FechaFinal', l_FechaFinal);
    l_FechaInicio := FechaInicio;
    TROSerializer(ASerializer).WriteDateTime('FechaInicio', l_FechaInicio);
    l_ImporteCupones := ImporteCupones;
    TROSerializer(ASerializer).WriteDouble('ImporteCupones', ftDouble, l_ImporteCupones);
    l_ImporteNotas := ImporteNotas;
    TROSerializer(ASerializer).WriteDouble('ImporteNotas', ftDouble, l_ImporteNotas);
    l_ImporteTarjetas := ImporteTarjetas;
    TROSerializer(ASerializer).WriteDouble('ImporteTarjetas', ftDouble, l_ImporteTarjetas);
    l_LecturaFinal := LecturaFinal;
    TROSerializer(ASerializer).WriteDouble('LecturaFinal', ftDouble, l_LecturaFinal);
    l_LecturaInicial := LecturaInicial;
    TROSerializer(ASerializer).WriteDouble('LecturaInicial', ftDouble, l_LecturaInicial);
    l_MangueraID := MangueraID;
    TROSerializer(ASerializer).WriteInteger('MangueraID', otSLong, l_MangueraID);
    l_NumeroCupones := NumeroCupones;
    TROSerializer(ASerializer).WriteDouble('NumeroCupones', ftDouble, l_NumeroCupones);
    l_NumeroNotas := NumeroNotas;
    TROSerializer(ASerializer).WriteDouble('NumeroNotas', ftDouble, l_NumeroNotas);
    l_NumeroTarjetas := NumeroTarjetas;
    TROSerializer(ASerializer).WriteDouble('NumeroTarjetas', ftDouble, l_NumeroTarjetas);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
  end;
end;

{ TDatosCorteCollection }
constructor TDatosCorteCollection.Create;
begin
  inherited Create(TDatosCorte);
end;

constructor TDatosCorteCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosCorteCollection.Add: TDatosCorte;
begin
  result := TDatosCorte(inherited Add);
end;

function TDatosCorteCollection.GetItems(aIndex: integer): TDatosCorte;
begin
  result := TDatosCorte(inherited Items[aIndex]);
end;

procedure TDatosCorteCollection.LoadFromArray(anArray: aDatosCorte);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDatosCorteCollection.SaveToArray(anArray: aDatosCorte);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDatosCorte.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDatosCorteCollection.SetItems(aIndex: integer; const Value: TDatosCorte);
begin
  TDatosCorte(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosTicket }

procedure TDatosTicket.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TDatosTicket;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TDatosTicket) then begin
    lSource := LibraryCistemGas_Intf.TDatosTicket(iSource);
    SecuenciaID := lSource.SecuenciaID;
    Fecha := lSource.Fecha;
    Volumen := lSource.Volumen;
    Precio := lSource.Precio;
    Importe := lSource.Importe;
    ProductoID := lSource.ProductoID;
    TurnoID := lSource.TurnoID;
  end;
end;

procedure TDatosTicket.ReadComplex(ASerializer: TObject);
var
  l_Fecha: DateTime;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_SecuenciaID: Integer;
  l_TurnoID: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_SecuenciaID := SecuenciaID;
    TROSerializer(ASerializer).ReadInteger('SecuenciaID', otSLong, l_SecuenciaID);
    SecuenciaID := l_SecuenciaID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
  end
  else begin
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_SecuenciaID := SecuenciaID;
    TROSerializer(ASerializer).ReadInteger('SecuenciaID', otSLong, l_SecuenciaID);
    SecuenciaID := l_SecuenciaID;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
  end;
end;

procedure TDatosTicket.WriteComplex(ASerializer: TObject);
var
  l_Fecha: DateTime;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_SecuenciaID: Integer;
  l_TurnoID: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosTicket);
    l_SecuenciaID := SecuenciaID;
    TROSerializer(ASerializer).WriteInteger('SecuenciaID', otSLong, l_SecuenciaID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
  end
  else begin
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_SecuenciaID := SecuenciaID;
    TROSerializer(ASerializer).WriteInteger('SecuenciaID', otSLong, l_SecuenciaID);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
  end;
end;

{ TDatosTicketCollection }
constructor TDatosTicketCollection.Create;
begin
  inherited Create(TDatosTicket);
end;

constructor TDatosTicketCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosTicketCollection.Add: TDatosTicket;
begin
  result := TDatosTicket(inherited Add);
end;

function TDatosTicketCollection.GetItems(aIndex: integer): TDatosTicket;
begin
  result := TDatosTicket(inherited Items[aIndex]);
end;

procedure TDatosTicketCollection.SetItems(aIndex: integer; const Value: TDatosTicket);
begin
  TDatosTicket(inherited Items[aIndex]).Assign(Value);
end;

{ TTanque }

procedure TTanque.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TTanque;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TTanque) then begin
    lSource := LibraryCistemGas_Intf.TTanque(iSource);
    TanqueID := lSource.TanqueID;
    Tanque := lSource.Tanque;
    Capacidad := lSource.Capacidad;
    Fondaje := lSource.Fondaje;
    ProductoID := lSource.ProductoID;
    Inicial := lSource.Inicial;
    Temperatura := lSource.Temperatura;
    VolumenAgua := lSource.VolumenAgua;
    VolumenInicial := lSource.VolumenInicial;
    VolumenDisponible := lSource.VolumenDisponible;
    Conexion := lSource.Conexion;
    StringTanques := lSource.StringTanques;
    StringRecepciones := lSource.StringRecepciones;
    Recepciones.Assign(lSource.Recepciones);
    Nombre := lSource.Nombre;
  end;
end;

function TTanque.GetRecepciones: aRecepciones;
begin
  if (fRecepciones = nil) then fRecepciones := aRecepciones.Create();
  result := fRecepciones;
end;

procedure TTanque.ReadComplex(ASerializer: TObject);
var
  l_Capacidad: Double;
  l_Conexion: Boolean;
  l_Fondaje: Double;
  l_Inicial: Double;
  l_Nombre: AnsiString;
  l_ProductoID: Integer;
  l_Recepciones: aRecepciones;
  l_StringRecepciones: AnsiString;
  l_StringTanques: AnsiString;
  l_Tanque: Integer;
  l_TanqueID: Integer;
  l_Temperatura: Double;
  l_VolumenAgua: Double;
  l_VolumenDisponible: Double;
  l_VolumenInicial: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_TanqueID := TanqueID;
    TROSerializer(ASerializer).ReadInteger('TanqueID', otSLong, l_TanqueID);
    TanqueID := l_TanqueID;
    l_Tanque := Tanque;
    TROSerializer(ASerializer).ReadInteger('Tanque', otSLong, l_Tanque);
    Tanque := l_Tanque;
    l_Capacidad := Capacidad;
    TROSerializer(ASerializer).ReadDouble('Capacidad', ftDouble, l_Capacidad);
    Capacidad := l_Capacidad;
    l_Fondaje := Fondaje;
    TROSerializer(ASerializer).ReadDouble('Fondaje', ftDouble, l_Fondaje);
    Fondaje := l_Fondaje;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Inicial := Inicial;
    TROSerializer(ASerializer).ReadDouble('Inicial', ftDouble, l_Inicial);
    Inicial := l_Inicial;
    l_Temperatura := Temperatura;
    TROSerializer(ASerializer).ReadDouble('Temperatura', ftDouble, l_Temperatura);
    Temperatura := l_Temperatura;
    l_VolumenAgua := VolumenAgua;
    TROSerializer(ASerializer).ReadDouble('VolumenAgua', ftDouble, l_VolumenAgua);
    VolumenAgua := l_VolumenAgua;
    l_VolumenInicial := VolumenInicial;
    TROSerializer(ASerializer).ReadDouble('VolumenInicial', ftDouble, l_VolumenInicial);
    VolumenInicial := l_VolumenInicial;
    l_VolumenDisponible := VolumenDisponible;
    TROSerializer(ASerializer).ReadDouble('VolumenDisponible', ftDouble, l_VolumenDisponible);
    VolumenDisponible := l_VolumenDisponible;
    l_Conexion := Conexion;
    TROSerializer(ASerializer).ReadEnumerated('Conexion',TypeInfo(boolean), l_Conexion);
    Conexion := l_Conexion;
    l_StringTanques := StringTanques;
    TROSerializer(ASerializer).ReadAnsiString('StringTanques', l_StringTanques);
    StringTanques := l_StringTanques;
    l_StringRecepciones := StringRecepciones;
    TROSerializer(ASerializer).ReadAnsiString('StringRecepciones', l_StringRecepciones);
    StringRecepciones := l_StringRecepciones;
    l_Recepciones := Recepciones;
    TROSerializer(ASerializer).ReadArray('Recepciones', aRecepciones, l_Recepciones);
    if Recepciones <> l_Recepciones then Recepciones.Free;
    Recepciones := l_Recepciones;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
  end
  else begin
    l_Capacidad := Capacidad;
    TROSerializer(ASerializer).ReadDouble('Capacidad', ftDouble, l_Capacidad);
    Capacidad := l_Capacidad;
    l_Conexion := Conexion;
    TROSerializer(ASerializer).ReadEnumerated('Conexion',TypeInfo(boolean), l_Conexion);
    Conexion := l_Conexion;
    l_Fondaje := Fondaje;
    TROSerializer(ASerializer).ReadDouble('Fondaje', ftDouble, l_Fondaje);
    Fondaje := l_Fondaje;
    l_Inicial := Inicial;
    TROSerializer(ASerializer).ReadDouble('Inicial', ftDouble, l_Inicial);
    Inicial := l_Inicial;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Recepciones := Recepciones;
    TROSerializer(ASerializer).ReadArray('Recepciones', aRecepciones, l_Recepciones);
    if Recepciones <> l_Recepciones then Recepciones.Free;
    Recepciones := l_Recepciones;
    l_StringRecepciones := StringRecepciones;
    TROSerializer(ASerializer).ReadAnsiString('StringRecepciones', l_StringRecepciones);
    StringRecepciones := l_StringRecepciones;
    l_StringTanques := StringTanques;
    TROSerializer(ASerializer).ReadAnsiString('StringTanques', l_StringTanques);
    StringTanques := l_StringTanques;
    l_Tanque := Tanque;
    TROSerializer(ASerializer).ReadInteger('Tanque', otSLong, l_Tanque);
    Tanque := l_Tanque;
    l_TanqueID := TanqueID;
    TROSerializer(ASerializer).ReadInteger('TanqueID', otSLong, l_TanqueID);
    TanqueID := l_TanqueID;
    l_Temperatura := Temperatura;
    TROSerializer(ASerializer).ReadDouble('Temperatura', ftDouble, l_Temperatura);
    Temperatura := l_Temperatura;
    l_VolumenAgua := VolumenAgua;
    TROSerializer(ASerializer).ReadDouble('VolumenAgua', ftDouble, l_VolumenAgua);
    VolumenAgua := l_VolumenAgua;
    l_VolumenDisponible := VolumenDisponible;
    TROSerializer(ASerializer).ReadDouble('VolumenDisponible', ftDouble, l_VolumenDisponible);
    VolumenDisponible := l_VolumenDisponible;
    l_VolumenInicial := VolumenInicial;
    TROSerializer(ASerializer).ReadDouble('VolumenInicial', ftDouble, l_VolumenInicial);
    VolumenInicial := l_VolumenInicial;
  end;
end;

procedure TTanque.WriteComplex(ASerializer: TObject);
var
  l_Capacidad: Double;
  l_Conexion: Boolean;
  l_Fondaje: Double;
  l_Inicial: Double;
  l_Nombre: AnsiString;
  l_ProductoID: Integer;
  l_Recepciones: aRecepciones;
  l_StringRecepciones: AnsiString;
  l_StringTanques: AnsiString;
  l_Tanque: Integer;
  l_TanqueID: Integer;
  l_Temperatura: Double;
  l_VolumenAgua: Double;
  l_VolumenDisponible: Double;
  l_VolumenInicial: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TTanque);
    l_TanqueID := TanqueID;
    TROSerializer(ASerializer).WriteInteger('TanqueID', otSLong, l_TanqueID);
    l_Tanque := Tanque;
    TROSerializer(ASerializer).WriteInteger('Tanque', otSLong, l_Tanque);
    l_Capacidad := Capacidad;
    TROSerializer(ASerializer).WriteDouble('Capacidad', ftDouble, l_Capacidad);
    l_Fondaje := Fondaje;
    TROSerializer(ASerializer).WriteDouble('Fondaje', ftDouble, l_Fondaje);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Inicial := Inicial;
    TROSerializer(ASerializer).WriteDouble('Inicial', ftDouble, l_Inicial);
    l_Temperatura := Temperatura;
    TROSerializer(ASerializer).WriteDouble('Temperatura', ftDouble, l_Temperatura);
    l_VolumenAgua := VolumenAgua;
    TROSerializer(ASerializer).WriteDouble('VolumenAgua', ftDouble, l_VolumenAgua);
    l_VolumenInicial := VolumenInicial;
    TROSerializer(ASerializer).WriteDouble('VolumenInicial', ftDouble, l_VolumenInicial);
    l_VolumenDisponible := VolumenDisponible;
    TROSerializer(ASerializer).WriteDouble('VolumenDisponible', ftDouble, l_VolumenDisponible);
    l_Conexion := Conexion;
    TROSerializer(ASerializer).WriteEnumerated('Conexion',TypeInfo(boolean), l_Conexion);
    l_StringTanques := StringTanques;
    TROSerializer(ASerializer).WriteAnsiString('StringTanques', l_StringTanques);
    l_StringRecepciones := StringRecepciones;
    TROSerializer(ASerializer).WriteAnsiString('StringRecepciones', l_StringRecepciones);
    l_Recepciones := Recepciones;
    TROSerializer(ASerializer).WriteArray('Recepciones', l_Recepciones, aRecepciones);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
  end
  else begin
    l_Capacidad := Capacidad;
    TROSerializer(ASerializer).WriteDouble('Capacidad', ftDouble, l_Capacidad);
    l_Conexion := Conexion;
    TROSerializer(ASerializer).WriteEnumerated('Conexion',TypeInfo(boolean), l_Conexion);
    l_Fondaje := Fondaje;
    TROSerializer(ASerializer).WriteDouble('Fondaje', ftDouble, l_Fondaje);
    l_Inicial := Inicial;
    TROSerializer(ASerializer).WriteDouble('Inicial', ftDouble, l_Inicial);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Recepciones := Recepciones;
    TROSerializer(ASerializer).WriteArray('Recepciones', l_Recepciones, aRecepciones);
    l_StringRecepciones := StringRecepciones;
    TROSerializer(ASerializer).WriteAnsiString('StringRecepciones', l_StringRecepciones);
    l_StringTanques := StringTanques;
    TROSerializer(ASerializer).WriteAnsiString('StringTanques', l_StringTanques);
    l_Tanque := Tanque;
    TROSerializer(ASerializer).WriteInteger('Tanque', otSLong, l_Tanque);
    l_TanqueID := TanqueID;
    TROSerializer(ASerializer).WriteInteger('TanqueID', otSLong, l_TanqueID);
    l_Temperatura := Temperatura;
    TROSerializer(ASerializer).WriteDouble('Temperatura', ftDouble, l_Temperatura);
    l_VolumenAgua := VolumenAgua;
    TROSerializer(ASerializer).WriteDouble('VolumenAgua', ftDouble, l_VolumenAgua);
    l_VolumenDisponible := VolumenDisponible;
    TROSerializer(ASerializer).WriteDouble('VolumenDisponible', ftDouble, l_VolumenDisponible);
    l_VolumenInicial := VolumenInicial;
    TROSerializer(ASerializer).WriteDouble('VolumenInicial', ftDouble, l_VolumenInicial);
  end;
end;

{ TTanqueCollection }
constructor TTanqueCollection.Create;
begin
  inherited Create(TTanque);
end;

constructor TTanqueCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TTanqueCollection.Add: TTanque;
begin
  result := TTanque(inherited Add);
end;

function TTanqueCollection.GetItems(aIndex: integer): TTanque;
begin
  result := TTanque(inherited Items[aIndex]);
end;

procedure TTanqueCollection.LoadFromArray(anArray: aTanques);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TTanqueCollection.SaveToArray(anArray: aTanques);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TTanque.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TTanqueCollection.SetItems(aIndex: integer; const Value: TTanque);
begin
  TTanque(inherited Items[aIndex]).Assign(Value);
end;

{ TRecepcion }

procedure TRecepcion.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TRecepcion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TRecepcion) then begin
    lSource := LibraryCistemGas_Intf.TRecepcion(iSource);
    FechaRecepcion := lSource.FechaRecepcion;
    FechaInicial := lSource.FechaInicial;
    FechaFinal := lSource.FechaFinal;
    VolumenInicial := lSource.VolumenInicial;
    VolumenFinal := lSource.VolumenFinal;
    TemperaturaIncial := lSource.TemperaturaIncial;
    TemperaturaFinal := lSource.TemperaturaFinal;
    VolumenRecibido := lSource.VolumenRecibido;
    StringRecepocion := lSource.StringRecepocion;
  end;
end;

procedure TRecepcion.ReadComplex(ASerializer: TObject);
var
  l_FechaFinal: DateTime;
  l_FechaInicial: DateTime;
  l_FechaRecepcion: DateTime;
  l_StringRecepocion: AnsiString;
  l_TemperaturaFinal: Double;
  l_TemperaturaIncial: Double;
  l_VolumenFinal: Double;
  l_VolumenInicial: Double;
  l_VolumenRecibido: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FechaRecepcion := FechaRecepcion;
    TROSerializer(ASerializer).ReadDateTime('FechaRecepcion', l_FechaRecepcion);
    FechaRecepcion := l_FechaRecepcion;
    l_FechaInicial := FechaInicial;
    TROSerializer(ASerializer).ReadDateTime('FechaInicial', l_FechaInicial);
    FechaInicial := l_FechaInicial;
    l_FechaFinal := FechaFinal;
    TROSerializer(ASerializer).ReadDateTime('FechaFinal', l_FechaFinal);
    FechaFinal := l_FechaFinal;
    l_VolumenInicial := VolumenInicial;
    TROSerializer(ASerializer).ReadDouble('VolumenInicial', ftDouble, l_VolumenInicial);
    VolumenInicial := l_VolumenInicial;
    l_VolumenFinal := VolumenFinal;
    TROSerializer(ASerializer).ReadDouble('VolumenFinal', ftDouble, l_VolumenFinal);
    VolumenFinal := l_VolumenFinal;
    l_TemperaturaIncial := TemperaturaIncial;
    TROSerializer(ASerializer).ReadDouble('TemperaturaIncial', ftDouble, l_TemperaturaIncial);
    TemperaturaIncial := l_TemperaturaIncial;
    l_TemperaturaFinal := TemperaturaFinal;
    TROSerializer(ASerializer).ReadDouble('TemperaturaFinal', ftDouble, l_TemperaturaFinal);
    TemperaturaFinal := l_TemperaturaFinal;
    l_VolumenRecibido := VolumenRecibido;
    TROSerializer(ASerializer).ReadDouble('VolumenRecibido', ftDouble, l_VolumenRecibido);
    VolumenRecibido := l_VolumenRecibido;
    l_StringRecepocion := StringRecepocion;
    TROSerializer(ASerializer).ReadAnsiString('StringRecepocion', l_StringRecepocion);
    StringRecepocion := l_StringRecepocion;
  end
  else begin
    l_FechaFinal := FechaFinal;
    TROSerializer(ASerializer).ReadDateTime('FechaFinal', l_FechaFinal);
    FechaFinal := l_FechaFinal;
    l_FechaInicial := FechaInicial;
    TROSerializer(ASerializer).ReadDateTime('FechaInicial', l_FechaInicial);
    FechaInicial := l_FechaInicial;
    l_FechaRecepcion := FechaRecepcion;
    TROSerializer(ASerializer).ReadDateTime('FechaRecepcion', l_FechaRecepcion);
    FechaRecepcion := l_FechaRecepcion;
    l_StringRecepocion := StringRecepocion;
    TROSerializer(ASerializer).ReadAnsiString('StringRecepocion', l_StringRecepocion);
    StringRecepocion := l_StringRecepocion;
    l_TemperaturaFinal := TemperaturaFinal;
    TROSerializer(ASerializer).ReadDouble('TemperaturaFinal', ftDouble, l_TemperaturaFinal);
    TemperaturaFinal := l_TemperaturaFinal;
    l_TemperaturaIncial := TemperaturaIncial;
    TROSerializer(ASerializer).ReadDouble('TemperaturaIncial', ftDouble, l_TemperaturaIncial);
    TemperaturaIncial := l_TemperaturaIncial;
    l_VolumenFinal := VolumenFinal;
    TROSerializer(ASerializer).ReadDouble('VolumenFinal', ftDouble, l_VolumenFinal);
    VolumenFinal := l_VolumenFinal;
    l_VolumenInicial := VolumenInicial;
    TROSerializer(ASerializer).ReadDouble('VolumenInicial', ftDouble, l_VolumenInicial);
    VolumenInicial := l_VolumenInicial;
    l_VolumenRecibido := VolumenRecibido;
    TROSerializer(ASerializer).ReadDouble('VolumenRecibido', ftDouble, l_VolumenRecibido);
    VolumenRecibido := l_VolumenRecibido;
  end;
end;

procedure TRecepcion.WriteComplex(ASerializer: TObject);
var
  l_FechaFinal: DateTime;
  l_FechaInicial: DateTime;
  l_FechaRecepcion: DateTime;
  l_StringRecepocion: AnsiString;
  l_TemperaturaFinal: Double;
  l_TemperaturaIncial: Double;
  l_VolumenFinal: Double;
  l_VolumenInicial: Double;
  l_VolumenRecibido: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TRecepcion);
    l_FechaRecepcion := FechaRecepcion;
    TROSerializer(ASerializer).WriteDateTime('FechaRecepcion', l_FechaRecepcion);
    l_FechaInicial := FechaInicial;
    TROSerializer(ASerializer).WriteDateTime('FechaInicial', l_FechaInicial);
    l_FechaFinal := FechaFinal;
    TROSerializer(ASerializer).WriteDateTime('FechaFinal', l_FechaFinal);
    l_VolumenInicial := VolumenInicial;
    TROSerializer(ASerializer).WriteDouble('VolumenInicial', ftDouble, l_VolumenInicial);
    l_VolumenFinal := VolumenFinal;
    TROSerializer(ASerializer).WriteDouble('VolumenFinal', ftDouble, l_VolumenFinal);
    l_TemperaturaIncial := TemperaturaIncial;
    TROSerializer(ASerializer).WriteDouble('TemperaturaIncial', ftDouble, l_TemperaturaIncial);
    l_TemperaturaFinal := TemperaturaFinal;
    TROSerializer(ASerializer).WriteDouble('TemperaturaFinal', ftDouble, l_TemperaturaFinal);
    l_VolumenRecibido := VolumenRecibido;
    TROSerializer(ASerializer).WriteDouble('VolumenRecibido', ftDouble, l_VolumenRecibido);
    l_StringRecepocion := StringRecepocion;
    TROSerializer(ASerializer).WriteAnsiString('StringRecepocion', l_StringRecepocion);
  end
  else begin
    l_FechaFinal := FechaFinal;
    TROSerializer(ASerializer).WriteDateTime('FechaFinal', l_FechaFinal);
    l_FechaInicial := FechaInicial;
    TROSerializer(ASerializer).WriteDateTime('FechaInicial', l_FechaInicial);
    l_FechaRecepcion := FechaRecepcion;
    TROSerializer(ASerializer).WriteDateTime('FechaRecepcion', l_FechaRecepcion);
    l_StringRecepocion := StringRecepocion;
    TROSerializer(ASerializer).WriteAnsiString('StringRecepocion', l_StringRecepocion);
    l_TemperaturaFinal := TemperaturaFinal;
    TROSerializer(ASerializer).WriteDouble('TemperaturaFinal', ftDouble, l_TemperaturaFinal);
    l_TemperaturaIncial := TemperaturaIncial;
    TROSerializer(ASerializer).WriteDouble('TemperaturaIncial', ftDouble, l_TemperaturaIncial);
    l_VolumenFinal := VolumenFinal;
    TROSerializer(ASerializer).WriteDouble('VolumenFinal', ftDouble, l_VolumenFinal);
    l_VolumenInicial := VolumenInicial;
    TROSerializer(ASerializer).WriteDouble('VolumenInicial', ftDouble, l_VolumenInicial);
    l_VolumenRecibido := VolumenRecibido;
    TROSerializer(ASerializer).WriteDouble('VolumenRecibido', ftDouble, l_VolumenRecibido);
  end;
end;

{ TRecepcionCollection }
constructor TRecepcionCollection.Create;
begin
  inherited Create(TRecepcion);
end;

constructor TRecepcionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TRecepcionCollection.Add: TRecepcion;
begin
  result := TRecepcion(inherited Add);
end;

function TRecepcionCollection.GetItems(aIndex: integer): TRecepcion;
begin
  result := TRecepcion(inherited Items[aIndex]);
end;

procedure TRecepcionCollection.LoadFromArray(anArray: aRecepciones);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TRecepcionCollection.SaveToArray(anArray: aRecepciones);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TRecepcion.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TRecepcionCollection.SetItems(aIndex: integer; const Value: TRecepcion);
begin
  TRecepcion(inherited Items[aIndex]).Assign(Value);
end;

{ TProtecciones }

procedure TProtecciones.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TProtecciones;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TProtecciones) then begin
    lSource := LibraryCistemGas_Intf.TProtecciones(iSource);
    ConPreset := lSource.ConPreset;
    ConLitros := lSource.ConLitros;
    ConMultiplos := lSource.ConMultiplos;
    ConDecimales := lSource.ConDecimales;
    ConLLeno := lSource.ConLLeno;
    ObligarPreset := lSource.ObligarPreset;
  end;
end;

procedure TProtecciones.ReadComplex(ASerializer: TObject);
var
  l_ConDecimales: Boolean;
  l_ConLitros: Boolean;
  l_ConLLeno: Boolean;
  l_ConMultiplos: Boolean;
  l_ConPreset: Boolean;
  l_ObligarPreset: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ConPreset := ConPreset;
    TROSerializer(ASerializer).ReadEnumerated('ConPreset',TypeInfo(boolean), l_ConPreset);
    ConPreset := l_ConPreset;
    l_ConLitros := ConLitros;
    TROSerializer(ASerializer).ReadEnumerated('ConLitros',TypeInfo(boolean), l_ConLitros);
    ConLitros := l_ConLitros;
    l_ConMultiplos := ConMultiplos;
    TROSerializer(ASerializer).ReadEnumerated('ConMultiplos',TypeInfo(boolean), l_ConMultiplos);
    ConMultiplos := l_ConMultiplos;
    l_ConDecimales := ConDecimales;
    TROSerializer(ASerializer).ReadEnumerated('ConDecimales',TypeInfo(boolean), l_ConDecimales);
    ConDecimales := l_ConDecimales;
    l_ConLLeno := ConLLeno;
    TROSerializer(ASerializer).ReadEnumerated('ConLLeno',TypeInfo(boolean), l_ConLLeno);
    ConLLeno := l_ConLLeno;
    l_ObligarPreset := ObligarPreset;
    TROSerializer(ASerializer).ReadEnumerated('ObligarPreset',TypeInfo(boolean), l_ObligarPreset);
    ObligarPreset := l_ObligarPreset;
  end
  else begin
    l_ConDecimales := ConDecimales;
    TROSerializer(ASerializer).ReadEnumerated('ConDecimales',TypeInfo(boolean), l_ConDecimales);
    ConDecimales := l_ConDecimales;
    l_ConLitros := ConLitros;
    TROSerializer(ASerializer).ReadEnumerated('ConLitros',TypeInfo(boolean), l_ConLitros);
    ConLitros := l_ConLitros;
    l_ConLLeno := ConLLeno;
    TROSerializer(ASerializer).ReadEnumerated('ConLLeno',TypeInfo(boolean), l_ConLLeno);
    ConLLeno := l_ConLLeno;
    l_ConMultiplos := ConMultiplos;
    TROSerializer(ASerializer).ReadEnumerated('ConMultiplos',TypeInfo(boolean), l_ConMultiplos);
    ConMultiplos := l_ConMultiplos;
    l_ConPreset := ConPreset;
    TROSerializer(ASerializer).ReadEnumerated('ConPreset',TypeInfo(boolean), l_ConPreset);
    ConPreset := l_ConPreset;
    l_ObligarPreset := ObligarPreset;
    TROSerializer(ASerializer).ReadEnumerated('ObligarPreset',TypeInfo(boolean), l_ObligarPreset);
    ObligarPreset := l_ObligarPreset;
  end;
end;

procedure TProtecciones.WriteComplex(ASerializer: TObject);
var
  l_ConDecimales: Boolean;
  l_ConLitros: Boolean;
  l_ConLLeno: Boolean;
  l_ConMultiplos: Boolean;
  l_ConPreset: Boolean;
  l_ObligarPreset: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TProtecciones);
    l_ConPreset := ConPreset;
    TROSerializer(ASerializer).WriteEnumerated('ConPreset',TypeInfo(boolean), l_ConPreset);
    l_ConLitros := ConLitros;
    TROSerializer(ASerializer).WriteEnumerated('ConLitros',TypeInfo(boolean), l_ConLitros);
    l_ConMultiplos := ConMultiplos;
    TROSerializer(ASerializer).WriteEnumerated('ConMultiplos',TypeInfo(boolean), l_ConMultiplos);
    l_ConDecimales := ConDecimales;
    TROSerializer(ASerializer).WriteEnumerated('ConDecimales',TypeInfo(boolean), l_ConDecimales);
    l_ConLLeno := ConLLeno;
    TROSerializer(ASerializer).WriteEnumerated('ConLLeno',TypeInfo(boolean), l_ConLLeno);
    l_ObligarPreset := ObligarPreset;
    TROSerializer(ASerializer).WriteEnumerated('ObligarPreset',TypeInfo(boolean), l_ObligarPreset);
  end
  else begin
    l_ConDecimales := ConDecimales;
    TROSerializer(ASerializer).WriteEnumerated('ConDecimales',TypeInfo(boolean), l_ConDecimales);
    l_ConLitros := ConLitros;
    TROSerializer(ASerializer).WriteEnumerated('ConLitros',TypeInfo(boolean), l_ConLitros);
    l_ConLLeno := ConLLeno;
    TROSerializer(ASerializer).WriteEnumerated('ConLLeno',TypeInfo(boolean), l_ConLLeno);
    l_ConMultiplos := ConMultiplos;
    TROSerializer(ASerializer).WriteEnumerated('ConMultiplos',TypeInfo(boolean), l_ConMultiplos);
    l_ConPreset := ConPreset;
    TROSerializer(ASerializer).WriteEnumerated('ConPreset',TypeInfo(boolean), l_ConPreset);
    l_ObligarPreset := ObligarPreset;
    TROSerializer(ASerializer).WriteEnumerated('ObligarPreset',TypeInfo(boolean), l_ObligarPreset);
  end;
end;

{ TProteccionesCollection }
constructor TProteccionesCollection.Create;
begin
  inherited Create(TProtecciones);
end;

constructor TProteccionesCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TProteccionesCollection.Add: TProtecciones;
begin
  result := TProtecciones(inherited Add);
end;

function TProteccionesCollection.GetItems(aIndex: integer): TProtecciones;
begin
  result := TProtecciones(inherited Items[aIndex]);
end;

procedure TProteccionesCollection.SetItems(aIndex: integer; const Value: TProtecciones);
begin
  TProtecciones(inherited Items[aIndex]).Assign(Value);
end;

{ TParametros }

procedure TParametros.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TParametros;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TParametros) then begin
    lSource := LibraryCistemGas_Intf.TParametros(iSource);
    ArchivoID := lSource.ArchivoID;
    BombaFin := lSource.BombaFin;
    BombaID := lSource.BombaID;
    BombaIni := lSource.BombaIni;
    Estacion := lSource.Estacion;
    FechaFin := lSource.FechaFin;
    FechaIni := lSource.FechaIni;
    ProductoID := lSource.ProductoID;
    TipoCorte := lSource.TipoCorte;
    TurnoFin := lSource.TurnoFin;
    TurnoID := lSource.TurnoID;
    TurnoIni := lSource.TurnoIni;
  end;
end;

procedure TParametros.ReadComplex(ASerializer: TObject);
var
  l_ArchivoID: Integer;
  l_BombaFin: Integer;
  l_BombaID: Integer;
  l_BombaIni: Integer;
  l_Estacion: Integer;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_ProductoID: Integer;
  l_TipoCorte: Integer;
  l_TurnoFin: Integer;
  l_TurnoID: Integer;
  l_TurnoIni: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ArchivoID := ArchivoID;
    TROSerializer(ASerializer).ReadInteger('ArchivoID', otSLong, l_ArchivoID);
    ArchivoID := l_ArchivoID;
    l_BombaFin := BombaFin;
    TROSerializer(ASerializer).ReadInteger('BombaFin', otSLong, l_BombaFin);
    BombaFin := l_BombaFin;
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_BombaIni := BombaIni;
    TROSerializer(ASerializer).ReadInteger('BombaIni', otSLong, l_BombaIni);
    BombaIni := l_BombaIni;
    l_Estacion := Estacion;
    TROSerializer(ASerializer).ReadInteger('Estacion', otSLong, l_Estacion);
    Estacion := l_Estacion;
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    FechaFin := l_FechaFin;
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    FechaIni := l_FechaIni;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_TipoCorte := TipoCorte;
    TROSerializer(ASerializer).ReadInteger('TipoCorte', otSLong, l_TipoCorte);
    TipoCorte := l_TipoCorte;
    l_TurnoFin := TurnoFin;
    TROSerializer(ASerializer).ReadInteger('TurnoFin', otSLong, l_TurnoFin);
    TurnoFin := l_TurnoFin;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
    l_TurnoIni := TurnoIni;
    TROSerializer(ASerializer).ReadInteger('TurnoIni', otSLong, l_TurnoIni);
    TurnoIni := l_TurnoIni;
  end
  else begin
    l_ArchivoID := ArchivoID;
    TROSerializer(ASerializer).ReadInteger('ArchivoID', otSLong, l_ArchivoID);
    ArchivoID := l_ArchivoID;
    l_BombaFin := BombaFin;
    TROSerializer(ASerializer).ReadInteger('BombaFin', otSLong, l_BombaFin);
    BombaFin := l_BombaFin;
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_BombaIni := BombaIni;
    TROSerializer(ASerializer).ReadInteger('BombaIni', otSLong, l_BombaIni);
    BombaIni := l_BombaIni;
    l_Estacion := Estacion;
    TROSerializer(ASerializer).ReadInteger('Estacion', otSLong, l_Estacion);
    Estacion := l_Estacion;
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    FechaFin := l_FechaFin;
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    FechaIni := l_FechaIni;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_TipoCorte := TipoCorte;
    TROSerializer(ASerializer).ReadInteger('TipoCorte', otSLong, l_TipoCorte);
    TipoCorte := l_TipoCorte;
    l_TurnoFin := TurnoFin;
    TROSerializer(ASerializer).ReadInteger('TurnoFin', otSLong, l_TurnoFin);
    TurnoFin := l_TurnoFin;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
    l_TurnoIni := TurnoIni;
    TROSerializer(ASerializer).ReadInteger('TurnoIni', otSLong, l_TurnoIni);
    TurnoIni := l_TurnoIni;
  end;
end;

procedure TParametros.WriteComplex(ASerializer: TObject);
var
  l_ArchivoID: Integer;
  l_BombaFin: Integer;
  l_BombaID: Integer;
  l_BombaIni: Integer;
  l_Estacion: Integer;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_ProductoID: Integer;
  l_TipoCorte: Integer;
  l_TurnoFin: Integer;
  l_TurnoID: Integer;
  l_TurnoIni: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TParametros);
    l_ArchivoID := ArchivoID;
    TROSerializer(ASerializer).WriteInteger('ArchivoID', otSLong, l_ArchivoID);
    l_BombaFin := BombaFin;
    TROSerializer(ASerializer).WriteInteger('BombaFin', otSLong, l_BombaFin);
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_BombaIni := BombaIni;
    TROSerializer(ASerializer).WriteInteger('BombaIni', otSLong, l_BombaIni);
    l_Estacion := Estacion;
    TROSerializer(ASerializer).WriteInteger('Estacion', otSLong, l_Estacion);
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_TipoCorte := TipoCorte;
    TROSerializer(ASerializer).WriteInteger('TipoCorte', otSLong, l_TipoCorte);
    l_TurnoFin := TurnoFin;
    TROSerializer(ASerializer).WriteInteger('TurnoFin', otSLong, l_TurnoFin);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
    l_TurnoIni := TurnoIni;
    TROSerializer(ASerializer).WriteInteger('TurnoIni', otSLong, l_TurnoIni);
  end
  else begin
    l_ArchivoID := ArchivoID;
    TROSerializer(ASerializer).WriteInteger('ArchivoID', otSLong, l_ArchivoID);
    l_BombaFin := BombaFin;
    TROSerializer(ASerializer).WriteInteger('BombaFin', otSLong, l_BombaFin);
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_BombaIni := BombaIni;
    TROSerializer(ASerializer).WriteInteger('BombaIni', otSLong, l_BombaIni);
    l_Estacion := Estacion;
    TROSerializer(ASerializer).WriteInteger('Estacion', otSLong, l_Estacion);
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_TipoCorte := TipoCorte;
    TROSerializer(ASerializer).WriteInteger('TipoCorte', otSLong, l_TipoCorte);
    l_TurnoFin := TurnoFin;
    TROSerializer(ASerializer).WriteInteger('TurnoFin', otSLong, l_TurnoFin);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
    l_TurnoIni := TurnoIni;
    TROSerializer(ASerializer).WriteInteger('TurnoIni', otSLong, l_TurnoIni);
  end;
end;

{ TParametrosCollection }
constructor TParametrosCollection.Create;
begin
  inherited Create(TParametros);
end;

constructor TParametrosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TParametrosCollection.Add: TParametros;
begin
  result := TParametros(inherited Add);
end;

function TParametrosCollection.GetItems(aIndex: integer): TParametros;
begin
  result := TParametros(inherited Items[aIndex]);
end;

procedure TParametrosCollection.SetItems(aIndex: integer; const Value: TParametros);
begin
  TParametros(inherited Items[aIndex]).Assign(Value);
end;

{ TComando }

procedure TComando.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TComando;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TComando) then begin
    lSource := LibraryCistemGas_Intf.TComando(iSource);
    Secuencia := lSource.Secuencia;
    Importe := lSource.Importe;
    Volumen := lSource.Volumen;
  end;
end;

procedure TComando.ReadComplex(ASerializer: TObject);
var
  l_Importe: Double;
  l_Secuencia: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
  end
  else begin
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
  end;
end;

procedure TComando.WriteComplex(ASerializer: TObject);
var
  l_Importe: Double;
  l_Secuencia: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TComando);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
  end
  else begin
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
  end;
end;

{ TComandoCollection }
constructor TComandoCollection.Create;
begin
  inherited Create(TComando);
end;

constructor TComandoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TComandoCollection.Add: TComando;
begin
  result := TComando(inherited Add);
end;

function TComandoCollection.GetItems(aIndex: integer): TComando;
begin
  result := TComando(inherited Items[aIndex]);
end;

procedure TComandoCollection.LoadFromArray(anArray: aComandos);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TComandoCollection.SaveToArray(anArray: aComandos);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TComando.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TComandoCollection.SetItems(aIndex: integer; const Value: TComando);
begin
  TComando(inherited Items[aIndex]).Assign(Value);
end;

{ TOpcion }

procedure TOpcion.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TOpcion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TOpcion) then begin
    lSource := LibraryCistemGas_Intf.TOpcion(iSource);
    OpcionID := lSource.OpcionID;
    Nombre := lSource.Nombre;
  end;
end;

procedure TOpcion.ReadComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_OpcionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).ReadInteger('OpcionID', otSLong, l_OpcionID);
    OpcionID := l_OpcionID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
  end
  else begin
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).ReadInteger('OpcionID', otSLong, l_OpcionID);
    OpcionID := l_OpcionID;
  end;
end;

procedure TOpcion.WriteComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_OpcionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TOpcion);
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).WriteInteger('OpcionID', otSLong, l_OpcionID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
  end
  else begin
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).WriteInteger('OpcionID', otSLong, l_OpcionID);
  end;
end;

{ TOpcionCollection }
constructor TOpcionCollection.Create;
begin
  inherited Create(TOpcion);
end;

constructor TOpcionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TOpcionCollection.Add: TOpcion;
begin
  result := TOpcion(inherited Add);
end;

function TOpcionCollection.GetItems(aIndex: integer): TOpcion;
begin
  result := TOpcion(inherited Items[aIndex]);
end;

procedure TOpcionCollection.LoadFromArray(anArray: ArrayOpcion);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TOpcionCollection.SaveToArray(anArray: ArrayOpcion);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TOpcion.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TOpcionCollection.SetItems(aIndex: integer; const Value: TOpcion);
begin
  TOpcion(inherited Items[aIndex]).Assign(Value);
end;

{ TLoginInfo }

procedure TLoginInfo.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TLoginInfo;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TLoginInfo) then begin
    lSource := LibraryCistemGas_Intf.TLoginInfo(iSource);
    Valida := lSource.Valida;
    EmpleadoID := lSource.EmpleadoID;
    NombreEmpleado := lSource.NombreEmpleado;
    Accesos.Assign(lSource.Accesos);
  end;
end;

function TLoginInfo.GetAccesos: ArrayOpcion;
begin
  if (fAccesos = nil) then fAccesos := ArrayOpcion.Create();
  result := fAccesos;
end;

procedure TLoginInfo.ReadComplex(ASerializer: TObject);
var
  l_Accesos: ArrayOpcion;
  l_EmpleadoID: Integer;
  l_NombreEmpleado: AnsiString;
  l_Valida: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Valida := Valida;
    TROSerializer(ASerializer).ReadEnumerated('Valida',TypeInfo(boolean), l_Valida);
    Valida := l_Valida;
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).ReadInteger('EmpleadoID', otSLong, l_EmpleadoID);
    EmpleadoID := l_EmpleadoID;
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).ReadAnsiString('NombreEmpleado', l_NombreEmpleado);
    NombreEmpleado := l_NombreEmpleado;
    l_Accesos := Accesos;
    TROSerializer(ASerializer).ReadArray('Accesos', ArrayOpcion, l_Accesos);
    if Accesos <> l_Accesos then Accesos.Free;
    Accesos := l_Accesos;
  end
  else begin
    l_Accesos := Accesos;
    TROSerializer(ASerializer).ReadArray('Accesos', ArrayOpcion, l_Accesos);
    if Accesos <> l_Accesos then Accesos.Free;
    Accesos := l_Accesos;
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).ReadInteger('EmpleadoID', otSLong, l_EmpleadoID);
    EmpleadoID := l_EmpleadoID;
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).ReadAnsiString('NombreEmpleado', l_NombreEmpleado);
    NombreEmpleado := l_NombreEmpleado;
    l_Valida := Valida;
    TROSerializer(ASerializer).ReadEnumerated('Valida',TypeInfo(boolean), l_Valida);
    Valida := l_Valida;
  end;
end;

procedure TLoginInfo.WriteComplex(ASerializer: TObject);
var
  l_Accesos: ArrayOpcion;
  l_EmpleadoID: Integer;
  l_NombreEmpleado: AnsiString;
  l_Valida: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLoginInfo);
    l_Valida := Valida;
    TROSerializer(ASerializer).WriteEnumerated('Valida',TypeInfo(boolean), l_Valida);
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).WriteInteger('EmpleadoID', otSLong, l_EmpleadoID);
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).WriteAnsiString('NombreEmpleado', l_NombreEmpleado);
    l_Accesos := Accesos;
    TROSerializer(ASerializer).WriteArray('Accesos', l_Accesos, ArrayOpcion);
  end
  else begin
    l_Accesos := Accesos;
    TROSerializer(ASerializer).WriteArray('Accesos', l_Accesos, ArrayOpcion);
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).WriteInteger('EmpleadoID', otSLong, l_EmpleadoID);
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).WriteAnsiString('NombreEmpleado', l_NombreEmpleado);
    l_Valida := Valida;
    TROSerializer(ASerializer).WriteEnumerated('Valida',TypeInfo(boolean), l_Valida);
  end;
end;

{ TLoginInfoCollection }
constructor TLoginInfoCollection.Create;
begin
  inherited Create(TLoginInfo);
end;

constructor TLoginInfoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLoginInfoCollection.Add: TLoginInfo;
begin
  result := TLoginInfo(inherited Add);
end;

function TLoginInfoCollection.GetItems(aIndex: integer): TLoginInfo;
begin
  result := TLoginInfo(inherited Items[aIndex]);
end;

procedure TLoginInfoCollection.SetItems(aIndex: integer; const Value: TLoginInfo);
begin
  TLoginInfo(inherited Items[aIndex]).Assign(Value);
end;

{ TLineaTicket }

procedure TLineaTicket.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TLineaTicket;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TLineaTicket) then begin
    lSource := LibraryCistemGas_Intf.TLineaTicket(iSource);
    TicketID := lSource.TicketID;
    Linea := lSource.Linea;
    Alineacion := lSource.Alineacion;
    TipoLetra := lSource.TipoLetra;
    FormatoLetra := lSource.FormatoLetra;
    LLenado := lSource.LLenado;
    Lugar := lSource.Lugar;
  end;
end;

procedure TLineaTicket.ReadComplex(ASerializer: TObject);
var
  l_Alineacion: Integer;
  l_FormatoLetra: Integer;
  l_Linea: AnsiString;
  l_LLenado: Boolean;
  l_Lugar: Integer;
  l_TicketID: Integer;
  l_TipoLetra: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_TicketID := TicketID;
    TROSerializer(ASerializer).ReadInteger('TicketID', otSLong, l_TicketID);
    TicketID := l_TicketID;
    l_Linea := Linea;
    TROSerializer(ASerializer).ReadAnsiString('Linea', l_Linea);
    Linea := l_Linea;
    l_Alineacion := Alineacion;
    TROSerializer(ASerializer).ReadInteger('Alineacion', otSLong, l_Alineacion);
    Alineacion := l_Alineacion;
    l_TipoLetra := TipoLetra;
    TROSerializer(ASerializer).ReadInteger('TipoLetra', otSLong, l_TipoLetra);
    TipoLetra := l_TipoLetra;
    l_FormatoLetra := FormatoLetra;
    TROSerializer(ASerializer).ReadInteger('FormatoLetra', otSLong, l_FormatoLetra);
    FormatoLetra := l_FormatoLetra;
    l_LLenado := LLenado;
    TROSerializer(ASerializer).ReadEnumerated('LLenado',TypeInfo(boolean), l_LLenado);
    LLenado := l_LLenado;
    l_Lugar := Lugar;
    TROSerializer(ASerializer).ReadInteger('Lugar', otSLong, l_Lugar);
    Lugar := l_Lugar;
  end
  else begin
    l_Alineacion := Alineacion;
    TROSerializer(ASerializer).ReadInteger('Alineacion', otSLong, l_Alineacion);
    Alineacion := l_Alineacion;
    l_FormatoLetra := FormatoLetra;
    TROSerializer(ASerializer).ReadInteger('FormatoLetra', otSLong, l_FormatoLetra);
    FormatoLetra := l_FormatoLetra;
    l_Linea := Linea;
    TROSerializer(ASerializer).ReadAnsiString('Linea', l_Linea);
    Linea := l_Linea;
    l_LLenado := LLenado;
    TROSerializer(ASerializer).ReadEnumerated('LLenado',TypeInfo(boolean), l_LLenado);
    LLenado := l_LLenado;
    l_Lugar := Lugar;
    TROSerializer(ASerializer).ReadInteger('Lugar', otSLong, l_Lugar);
    Lugar := l_Lugar;
    l_TicketID := TicketID;
    TROSerializer(ASerializer).ReadInteger('TicketID', otSLong, l_TicketID);
    TicketID := l_TicketID;
    l_TipoLetra := TipoLetra;
    TROSerializer(ASerializer).ReadInteger('TipoLetra', otSLong, l_TipoLetra);
    TipoLetra := l_TipoLetra;
  end;
end;

procedure TLineaTicket.WriteComplex(ASerializer: TObject);
var
  l_Alineacion: Integer;
  l_FormatoLetra: Integer;
  l_Linea: AnsiString;
  l_LLenado: Boolean;
  l_Lugar: Integer;
  l_TicketID: Integer;
  l_TipoLetra: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLineaTicket);
    l_TicketID := TicketID;
    TROSerializer(ASerializer).WriteInteger('TicketID', otSLong, l_TicketID);
    l_Linea := Linea;
    TROSerializer(ASerializer).WriteAnsiString('Linea', l_Linea);
    l_Alineacion := Alineacion;
    TROSerializer(ASerializer).WriteInteger('Alineacion', otSLong, l_Alineacion);
    l_TipoLetra := TipoLetra;
    TROSerializer(ASerializer).WriteInteger('TipoLetra', otSLong, l_TipoLetra);
    l_FormatoLetra := FormatoLetra;
    TROSerializer(ASerializer).WriteInteger('FormatoLetra', otSLong, l_FormatoLetra);
    l_LLenado := LLenado;
    TROSerializer(ASerializer).WriteEnumerated('LLenado',TypeInfo(boolean), l_LLenado);
    l_Lugar := Lugar;
    TROSerializer(ASerializer).WriteInteger('Lugar', otSLong, l_Lugar);
  end
  else begin
    l_Alineacion := Alineacion;
    TROSerializer(ASerializer).WriteInteger('Alineacion', otSLong, l_Alineacion);
    l_FormatoLetra := FormatoLetra;
    TROSerializer(ASerializer).WriteInteger('FormatoLetra', otSLong, l_FormatoLetra);
    l_Linea := Linea;
    TROSerializer(ASerializer).WriteAnsiString('Linea', l_Linea);
    l_LLenado := LLenado;
    TROSerializer(ASerializer).WriteEnumerated('LLenado',TypeInfo(boolean), l_LLenado);
    l_Lugar := Lugar;
    TROSerializer(ASerializer).WriteInteger('Lugar', otSLong, l_Lugar);
    l_TicketID := TicketID;
    TROSerializer(ASerializer).WriteInteger('TicketID', otSLong, l_TicketID);
    l_TipoLetra := TipoLetra;
    TROSerializer(ASerializer).WriteInteger('TipoLetra', otSLong, l_TipoLetra);
  end;
end;

{ TLineaTicketCollection }
constructor TLineaTicketCollection.Create;
begin
  inherited Create(TLineaTicket);
end;

constructor TLineaTicketCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLineaTicketCollection.Add: TLineaTicket;
begin
  result := TLineaTicket(inherited Add);
end;

function TLineaTicketCollection.GetItems(aIndex: integer): TLineaTicket;
begin
  result := TLineaTicket(inherited Items[aIndex]);
end;

procedure TLineaTicketCollection.LoadFromArray(anArray: aLineaTicket);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TLineaTicketCollection.SaveToArray(anArray: aLineaTicket);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TLineaTicket.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TLineaTicketCollection.SetItems(aIndex: integer; const Value: TLineaTicket);
begin
  TLineaTicket(inherited Items[aIndex]).Assign(Value);
end;

{ TReporte }

procedure TReporte.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TReporte;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TReporte) then begin
    lSource := LibraryCistemGas_Intf.TReporte(iSource);
    SQL1 := lSource.SQL1;
    SQL2 := lSource.SQL2;
    Template := lSource.Template;
    CampoJoin := lSource.CampoJoin;
  end;
end;

procedure TReporte.ReadComplex(ASerializer: TObject);
var
  l_CampoJoin: AnsiString;
  l_SQL1: AnsiString;
  l_SQL2: AnsiString;
  l_Template: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).ReadAnsiString('SQL1', l_SQL1);
    SQL1 := l_SQL1;
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).ReadAnsiString('SQL2', l_SQL2);
    SQL2 := l_SQL2;
    l_Template := Template;
    TROSerializer(ASerializer).ReadAnsiString('Template', l_Template);
    Template := l_Template;
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).ReadAnsiString('CampoJoin', l_CampoJoin);
    CampoJoin := l_CampoJoin;
  end
  else begin
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).ReadAnsiString('CampoJoin', l_CampoJoin);
    CampoJoin := l_CampoJoin;
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).ReadAnsiString('SQL1', l_SQL1);
    SQL1 := l_SQL1;
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).ReadAnsiString('SQL2', l_SQL2);
    SQL2 := l_SQL2;
    l_Template := Template;
    TROSerializer(ASerializer).ReadAnsiString('Template', l_Template);
    Template := l_Template;
  end;
end;

procedure TReporte.WriteComplex(ASerializer: TObject);
var
  l_CampoJoin: AnsiString;
  l_SQL1: AnsiString;
  l_SQL2: AnsiString;
  l_Template: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TReporte);
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).WriteAnsiString('SQL1', l_SQL1);
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).WriteAnsiString('SQL2', l_SQL2);
    l_Template := Template;
    TROSerializer(ASerializer).WriteAnsiString('Template', l_Template);
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).WriteAnsiString('CampoJoin', l_CampoJoin);
  end
  else begin
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).WriteAnsiString('CampoJoin', l_CampoJoin);
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).WriteAnsiString('SQL1', l_SQL1);
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).WriteAnsiString('SQL2', l_SQL2);
    l_Template := Template;
    TROSerializer(ASerializer).WriteAnsiString('Template', l_Template);
  end;
end;

{ TReporteCollection }
constructor TReporteCollection.Create;
begin
  inherited Create(TReporte);
end;

constructor TReporteCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TReporteCollection.Add: TReporte;
begin
  result := TReporte(inherited Add);
end;

function TReporteCollection.GetItems(aIndex: integer): TReporte;
begin
  result := TReporte(inherited Items[aIndex]);
end;

procedure TReporteCollection.SetItems(aIndex: integer; const Value: TReporte);
begin
  TReporte(inherited Items[aIndex]).Assign(Value);
end;

{ TLicencia }

procedure TLicencia.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TLicencia;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TLicencia) then begin
    lSource := LibraryCistemGas_Intf.TLicencia(iSource);
    Volumetrico := lSource.Volumetrico;
    Tanques := lSource.Tanques;
    Cualli := lSource.Cualli;
    Produccion := lSource.Produccion;
    Administracion := lSource.Administracion;
    Flotillas := lSource.Flotillas;
    NA := lSource.NA;
    Definitiva := lSource.Definitiva;
  end;
end;

procedure TLicencia.ReadComplex(ASerializer: TObject);
var
  l_Administracion: Boolean;
  l_Cualli: Boolean;
  l_Definitiva: Boolean;
  l_Flotillas: Boolean;
  l_NA: Boolean;
  l_Produccion: Boolean;
  l_Tanques: Boolean;
  l_Volumetrico: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Volumetrico := Volumetrico;
    TROSerializer(ASerializer).ReadEnumerated('Volumetrico',TypeInfo(boolean), l_Volumetrico);
    Volumetrico := l_Volumetrico;
    l_Tanques := Tanques;
    TROSerializer(ASerializer).ReadEnumerated('Tanques',TypeInfo(boolean), l_Tanques);
    Tanques := l_Tanques;
    l_Cualli := Cualli;
    TROSerializer(ASerializer).ReadEnumerated('Cualli',TypeInfo(boolean), l_Cualli);
    Cualli := l_Cualli;
    l_Produccion := Produccion;
    TROSerializer(ASerializer).ReadEnumerated('Produccion',TypeInfo(boolean), l_Produccion);
    Produccion := l_Produccion;
    l_Administracion := Administracion;
    TROSerializer(ASerializer).ReadEnumerated('Administracion',TypeInfo(boolean), l_Administracion);
    Administracion := l_Administracion;
    l_Flotillas := Flotillas;
    TROSerializer(ASerializer).ReadEnumerated('Flotillas',TypeInfo(boolean), l_Flotillas);
    Flotillas := l_Flotillas;
    l_NA := NA;
    TROSerializer(ASerializer).ReadEnumerated('NA',TypeInfo(boolean), l_NA);
    NA := l_NA;
    l_Definitiva := Definitiva;
    TROSerializer(ASerializer).ReadEnumerated('Definitiva',TypeInfo(boolean), l_Definitiva);
    Definitiva := l_Definitiva;
  end
  else begin
    l_Administracion := Administracion;
    TROSerializer(ASerializer).ReadEnumerated('Administracion',TypeInfo(boolean), l_Administracion);
    Administracion := l_Administracion;
    l_Cualli := Cualli;
    TROSerializer(ASerializer).ReadEnumerated('Cualli',TypeInfo(boolean), l_Cualli);
    Cualli := l_Cualli;
    l_Definitiva := Definitiva;
    TROSerializer(ASerializer).ReadEnumerated('Definitiva',TypeInfo(boolean), l_Definitiva);
    Definitiva := l_Definitiva;
    l_Flotillas := Flotillas;
    TROSerializer(ASerializer).ReadEnumerated('Flotillas',TypeInfo(boolean), l_Flotillas);
    Flotillas := l_Flotillas;
    l_NA := NA;
    TROSerializer(ASerializer).ReadEnumerated('NA',TypeInfo(boolean), l_NA);
    NA := l_NA;
    l_Produccion := Produccion;
    TROSerializer(ASerializer).ReadEnumerated('Produccion',TypeInfo(boolean), l_Produccion);
    Produccion := l_Produccion;
    l_Tanques := Tanques;
    TROSerializer(ASerializer).ReadEnumerated('Tanques',TypeInfo(boolean), l_Tanques);
    Tanques := l_Tanques;
    l_Volumetrico := Volumetrico;
    TROSerializer(ASerializer).ReadEnumerated('Volumetrico',TypeInfo(boolean), l_Volumetrico);
    Volumetrico := l_Volumetrico;
  end;
end;

procedure TLicencia.WriteComplex(ASerializer: TObject);
var
  l_Administracion: Boolean;
  l_Cualli: Boolean;
  l_Definitiva: Boolean;
  l_Flotillas: Boolean;
  l_NA: Boolean;
  l_Produccion: Boolean;
  l_Tanques: Boolean;
  l_Volumetrico: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLicencia);
    l_Volumetrico := Volumetrico;
    TROSerializer(ASerializer).WriteEnumerated('Volumetrico',TypeInfo(boolean), l_Volumetrico);
    l_Tanques := Tanques;
    TROSerializer(ASerializer).WriteEnumerated('Tanques',TypeInfo(boolean), l_Tanques);
    l_Cualli := Cualli;
    TROSerializer(ASerializer).WriteEnumerated('Cualli',TypeInfo(boolean), l_Cualli);
    l_Produccion := Produccion;
    TROSerializer(ASerializer).WriteEnumerated('Produccion',TypeInfo(boolean), l_Produccion);
    l_Administracion := Administracion;
    TROSerializer(ASerializer).WriteEnumerated('Administracion',TypeInfo(boolean), l_Administracion);
    l_Flotillas := Flotillas;
    TROSerializer(ASerializer).WriteEnumerated('Flotillas',TypeInfo(boolean), l_Flotillas);
    l_NA := NA;
    TROSerializer(ASerializer).WriteEnumerated('NA',TypeInfo(boolean), l_NA);
    l_Definitiva := Definitiva;
    TROSerializer(ASerializer).WriteEnumerated('Definitiva',TypeInfo(boolean), l_Definitiva);
  end
  else begin
    l_Administracion := Administracion;
    TROSerializer(ASerializer).WriteEnumerated('Administracion',TypeInfo(boolean), l_Administracion);
    l_Cualli := Cualli;
    TROSerializer(ASerializer).WriteEnumerated('Cualli',TypeInfo(boolean), l_Cualli);
    l_Definitiva := Definitiva;
    TROSerializer(ASerializer).WriteEnumerated('Definitiva',TypeInfo(boolean), l_Definitiva);
    l_Flotillas := Flotillas;
    TROSerializer(ASerializer).WriteEnumerated('Flotillas',TypeInfo(boolean), l_Flotillas);
    l_NA := NA;
    TROSerializer(ASerializer).WriteEnumerated('NA',TypeInfo(boolean), l_NA);
    l_Produccion := Produccion;
    TROSerializer(ASerializer).WriteEnumerated('Produccion',TypeInfo(boolean), l_Produccion);
    l_Tanques := Tanques;
    TROSerializer(ASerializer).WriteEnumerated('Tanques',TypeInfo(boolean), l_Tanques);
    l_Volumetrico := Volumetrico;
    TROSerializer(ASerializer).WriteEnumerated('Volumetrico',TypeInfo(boolean), l_Volumetrico);
  end;
end;

{ TLicenciaCollection }
constructor TLicenciaCollection.Create;
begin
  inherited Create(TLicencia);
end;

constructor TLicenciaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLicenciaCollection.Add: TLicencia;
begin
  result := TLicencia(inherited Add);
end;

function TLicenciaCollection.GetItems(aIndex: integer): TLicencia;
begin
  result := TLicencia(inherited Items[aIndex]);
end;

procedure TLicenciaCollection.SetItems(aIndex: integer; const Value: TLicencia);
begin
  TLicencia(inherited Items[aIndex]).Assign(Value);
end;

{ TNodo }

procedure TNodo.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TNodo;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TNodo) then begin
    lSource := LibraryCistemGas_Intf.TNodo(iSource);
    Nombre := lSource.Nombre;
    Tipo := lSource.Tipo;
    Gasolinero := lSource.Gasolinero;
    Host := lSource.Host;
    Puerto := lSource.Puerto;
  end;
end;

procedure TNodo.ReadComplex(ASerializer: TObject);
var
  l_Gasolinero: Integer;
  l_Host: AnsiString;
  l_Nombre: AnsiString;
  l_Puerto: Integer;
  l_Tipo: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadInteger('Tipo', otSLong, l_Tipo);
    Tipo := l_Tipo;
    l_Gasolinero := Gasolinero;
    TROSerializer(ASerializer).ReadInteger('Gasolinero', otSLong, l_Gasolinero);
    Gasolinero := l_Gasolinero;
    l_Host := Host;
    TROSerializer(ASerializer).ReadAnsiString('Host', l_Host);
    Host := l_Host;
    l_Puerto := Puerto;
    TROSerializer(ASerializer).ReadInteger('Puerto', otSLong, l_Puerto);
    Puerto := l_Puerto;
  end
  else begin
    l_Gasolinero := Gasolinero;
    TROSerializer(ASerializer).ReadInteger('Gasolinero', otSLong, l_Gasolinero);
    Gasolinero := l_Gasolinero;
    l_Host := Host;
    TROSerializer(ASerializer).ReadAnsiString('Host', l_Host);
    Host := l_Host;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Puerto := Puerto;
    TROSerializer(ASerializer).ReadInteger('Puerto', otSLong, l_Puerto);
    Puerto := l_Puerto;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadInteger('Tipo', otSLong, l_Tipo);
    Tipo := l_Tipo;
  end;
end;

procedure TNodo.WriteComplex(ASerializer: TObject);
var
  l_Gasolinero: Integer;
  l_Host: AnsiString;
  l_Nombre: AnsiString;
  l_Puerto: Integer;
  l_Tipo: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TNodo);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', otSLong, l_Tipo);
    l_Gasolinero := Gasolinero;
    TROSerializer(ASerializer).WriteInteger('Gasolinero', otSLong, l_Gasolinero);
    l_Host := Host;
    TROSerializer(ASerializer).WriteAnsiString('Host', l_Host);
    l_Puerto := Puerto;
    TROSerializer(ASerializer).WriteInteger('Puerto', otSLong, l_Puerto);
  end
  else begin
    l_Gasolinero := Gasolinero;
    TROSerializer(ASerializer).WriteInteger('Gasolinero', otSLong, l_Gasolinero);
    l_Host := Host;
    TROSerializer(ASerializer).WriteAnsiString('Host', l_Host);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Puerto := Puerto;
    TROSerializer(ASerializer).WriteInteger('Puerto', otSLong, l_Puerto);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', otSLong, l_Tipo);
  end;
end;

{ TNodoCollection }
constructor TNodoCollection.Create;
begin
  inherited Create(TNodo);
end;

constructor TNodoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TNodoCollection.Add: TNodo;
begin
  result := TNodo(inherited Add);
end;

function TNodoCollection.GetItems(aIndex: integer): TNodo;
begin
  result := TNodo(inherited Items[aIndex]);
end;

procedure TNodoCollection.LoadFromArray(anArray: aNodos);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TNodoCollection.SaveToArray(anArray: aNodos);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TNodo.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TNodoCollection.SetItems(aIndex: integer; const Value: TNodo);
begin
  TNodo(inherited Items[aIndex]).Assign(Value);
end;

{ TCorte }

procedure TCorte.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TCorte;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TCorte) then begin
    lSource := LibraryCistemGas_Intf.TCorte(iSource);
    BombaID := lSource.BombaID;
    Magna := lSource.Magna;
    Premium := lSource.Premium;
    Diesel := lSource.Diesel;
    VolumenMagna := lSource.VolumenMagna;
    VolumenPremium := lSource.VolumenPremium;
    VolumenDiesel := lSource.VolumenDiesel;
    Tarjetas := lSource.Tarjetas;
    Bancaria := lSource.Bancaria;
    Cupones := lSource.Cupones;
    Notas := lSource.Notas;
    Fecha := lSource.Fecha;
  end;
end;

procedure TCorte.ReadComplex(ASerializer: TObject);
var
  l_Bancaria: Double;
  l_BombaID: Integer;
  l_Cupones: Double;
  l_Diesel: Double;
  l_Fecha: DateTime;
  l_Magna: Double;
  l_Notas: Double;
  l_Premium: Double;
  l_Tarjetas: Double;
  l_VolumenDiesel: Double;
  l_VolumenMagna: Double;
  l_VolumenPremium: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_Magna := Magna;
    TROSerializer(ASerializer).ReadDouble('Magna', ftDouble, l_Magna);
    Magna := l_Magna;
    l_Premium := Premium;
    TROSerializer(ASerializer).ReadDouble('Premium', ftDouble, l_Premium);
    Premium := l_Premium;
    l_Diesel := Diesel;
    TROSerializer(ASerializer).ReadDouble('Diesel', ftDouble, l_Diesel);
    Diesel := l_Diesel;
    l_VolumenMagna := VolumenMagna;
    TROSerializer(ASerializer).ReadDouble('VolumenMagna', ftDouble, l_VolumenMagna);
    VolumenMagna := l_VolumenMagna;
    l_VolumenPremium := VolumenPremium;
    TROSerializer(ASerializer).ReadDouble('VolumenPremium', ftDouble, l_VolumenPremium);
    VolumenPremium := l_VolumenPremium;
    l_VolumenDiesel := VolumenDiesel;
    TROSerializer(ASerializer).ReadDouble('VolumenDiesel', ftDouble, l_VolumenDiesel);
    VolumenDiesel := l_VolumenDiesel;
    l_Tarjetas := Tarjetas;
    TROSerializer(ASerializer).ReadDouble('Tarjetas', ftDouble, l_Tarjetas);
    Tarjetas := l_Tarjetas;
    l_Bancaria := Bancaria;
    TROSerializer(ASerializer).ReadDouble('Bancaria', ftDouble, l_Bancaria);
    Bancaria := l_Bancaria;
    l_Cupones := Cupones;
    TROSerializer(ASerializer).ReadDouble('Cupones', ftDouble, l_Cupones);
    Cupones := l_Cupones;
    l_Notas := Notas;
    TROSerializer(ASerializer).ReadDouble('Notas', ftDouble, l_Notas);
    Notas := l_Notas;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
  end
  else begin
    l_Bancaria := Bancaria;
    TROSerializer(ASerializer).ReadDouble('Bancaria', ftDouble, l_Bancaria);
    Bancaria := l_Bancaria;
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_Cupones := Cupones;
    TROSerializer(ASerializer).ReadDouble('Cupones', ftDouble, l_Cupones);
    Cupones := l_Cupones;
    l_Diesel := Diesel;
    TROSerializer(ASerializer).ReadDouble('Diesel', ftDouble, l_Diesel);
    Diesel := l_Diesel;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Magna := Magna;
    TROSerializer(ASerializer).ReadDouble('Magna', ftDouble, l_Magna);
    Magna := l_Magna;
    l_Notas := Notas;
    TROSerializer(ASerializer).ReadDouble('Notas', ftDouble, l_Notas);
    Notas := l_Notas;
    l_Premium := Premium;
    TROSerializer(ASerializer).ReadDouble('Premium', ftDouble, l_Premium);
    Premium := l_Premium;
    l_Tarjetas := Tarjetas;
    TROSerializer(ASerializer).ReadDouble('Tarjetas', ftDouble, l_Tarjetas);
    Tarjetas := l_Tarjetas;
    l_VolumenDiesel := VolumenDiesel;
    TROSerializer(ASerializer).ReadDouble('VolumenDiesel', ftDouble, l_VolumenDiesel);
    VolumenDiesel := l_VolumenDiesel;
    l_VolumenMagna := VolumenMagna;
    TROSerializer(ASerializer).ReadDouble('VolumenMagna', ftDouble, l_VolumenMagna);
    VolumenMagna := l_VolumenMagna;
    l_VolumenPremium := VolumenPremium;
    TROSerializer(ASerializer).ReadDouble('VolumenPremium', ftDouble, l_VolumenPremium);
    VolumenPremium := l_VolumenPremium;
  end;
end;

procedure TCorte.WriteComplex(ASerializer: TObject);
var
  l_Bancaria: Double;
  l_BombaID: Integer;
  l_Cupones: Double;
  l_Diesel: Double;
  l_Fecha: DateTime;
  l_Magna: Double;
  l_Notas: Double;
  l_Premium: Double;
  l_Tarjetas: Double;
  l_VolumenDiesel: Double;
  l_VolumenMagna: Double;
  l_VolumenPremium: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TCorte);
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_Magna := Magna;
    TROSerializer(ASerializer).WriteDouble('Magna', ftDouble, l_Magna);
    l_Premium := Premium;
    TROSerializer(ASerializer).WriteDouble('Premium', ftDouble, l_Premium);
    l_Diesel := Diesel;
    TROSerializer(ASerializer).WriteDouble('Diesel', ftDouble, l_Diesel);
    l_VolumenMagna := VolumenMagna;
    TROSerializer(ASerializer).WriteDouble('VolumenMagna', ftDouble, l_VolumenMagna);
    l_VolumenPremium := VolumenPremium;
    TROSerializer(ASerializer).WriteDouble('VolumenPremium', ftDouble, l_VolumenPremium);
    l_VolumenDiesel := VolumenDiesel;
    TROSerializer(ASerializer).WriteDouble('VolumenDiesel', ftDouble, l_VolumenDiesel);
    l_Tarjetas := Tarjetas;
    TROSerializer(ASerializer).WriteDouble('Tarjetas', ftDouble, l_Tarjetas);
    l_Bancaria := Bancaria;
    TROSerializer(ASerializer).WriteDouble('Bancaria', ftDouble, l_Bancaria);
    l_Cupones := Cupones;
    TROSerializer(ASerializer).WriteDouble('Cupones', ftDouble, l_Cupones);
    l_Notas := Notas;
    TROSerializer(ASerializer).WriteDouble('Notas', ftDouble, l_Notas);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
  end
  else begin
    l_Bancaria := Bancaria;
    TROSerializer(ASerializer).WriteDouble('Bancaria', ftDouble, l_Bancaria);
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_Cupones := Cupones;
    TROSerializer(ASerializer).WriteDouble('Cupones', ftDouble, l_Cupones);
    l_Diesel := Diesel;
    TROSerializer(ASerializer).WriteDouble('Diesel', ftDouble, l_Diesel);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Magna := Magna;
    TROSerializer(ASerializer).WriteDouble('Magna', ftDouble, l_Magna);
    l_Notas := Notas;
    TROSerializer(ASerializer).WriteDouble('Notas', ftDouble, l_Notas);
    l_Premium := Premium;
    TROSerializer(ASerializer).WriteDouble('Premium', ftDouble, l_Premium);
    l_Tarjetas := Tarjetas;
    TROSerializer(ASerializer).WriteDouble('Tarjetas', ftDouble, l_Tarjetas);
    l_VolumenDiesel := VolumenDiesel;
    TROSerializer(ASerializer).WriteDouble('VolumenDiesel', ftDouble, l_VolumenDiesel);
    l_VolumenMagna := VolumenMagna;
    TROSerializer(ASerializer).WriteDouble('VolumenMagna', ftDouble, l_VolumenMagna);
    l_VolumenPremium := VolumenPremium;
    TROSerializer(ASerializer).WriteDouble('VolumenPremium', ftDouble, l_VolumenPremium);
  end;
end;

{ TCorteCollection }
constructor TCorteCollection.Create;
begin
  inherited Create(TCorte);
end;

constructor TCorteCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TCorteCollection.Add: TCorte;
begin
  result := TCorte(inherited Add);
end;

function TCorteCollection.GetItems(aIndex: integer): TCorte;
begin
  result := TCorte(inherited Items[aIndex]);
end;

procedure TCorteCollection.LoadFromArray(anArray: aCorte);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TCorteCollection.SaveToArray(anArray: aCorte);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TCorte.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TCorteCollection.SetItems(aIndex: integer; const Value: TCorte);
begin
  TCorte(inherited Items[aIndex]).Assign(Value);
end;

{ TConsumoGas }

procedure TConsumoGas.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TConsumoGas;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TConsumoGas) then begin
    lSource := LibraryCistemGas_Intf.TConsumoGas(iSource);
    Ticket := lSource.Ticket;
    Serie := lSource.Serie;
    BombaID := lSource.BombaID;
    Volumen := lSource.Volumen;
    Importe := lSource.Importe;
    Precio := lSource.Precio;
    ProductoID := lSource.ProductoID;
    Referencia := lSource.Referencia;
    Tipo := lSource.Tipo;
    ClienteID := lSource.ClienteID;
    TarjetaYCupon := lSource.TarjetaYCupon;
  end;
end;

procedure TConsumoGas.ReadComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_ClienteID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_Referencia: AnsiString;
  l_Serie: AnsiString;
  l_TarjetaYCupon: Boolean;
  l_Ticket: Integer;
  l_Tipo: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Ticket := Ticket;
    TROSerializer(ASerializer).ReadInteger('Ticket', otSLong, l_Ticket);
    Ticket := l_Ticket;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadInteger('Tipo', otSLong, l_Tipo);
    Tipo := l_Tipo;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_TarjetaYCupon := TarjetaYCupon;
    TROSerializer(ASerializer).ReadEnumerated('TarjetaYCupon',TypeInfo(boolean), l_TarjetaYCupon);
    TarjetaYCupon := l_TarjetaYCupon;
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_TarjetaYCupon := TarjetaYCupon;
    TROSerializer(ASerializer).ReadEnumerated('TarjetaYCupon',TypeInfo(boolean), l_TarjetaYCupon);
    TarjetaYCupon := l_TarjetaYCupon;
    l_Ticket := Ticket;
    TROSerializer(ASerializer).ReadInteger('Ticket', otSLong, l_Ticket);
    Ticket := l_Ticket;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadInteger('Tipo', otSLong, l_Tipo);
    Tipo := l_Tipo;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
  end;
end;

procedure TConsumoGas.WriteComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_ClienteID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_Referencia: AnsiString;
  l_Serie: AnsiString;
  l_TarjetaYCupon: Boolean;
  l_Ticket: Integer;
  l_Tipo: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TConsumoGas);
    l_Ticket := Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', otSLong, l_Ticket);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', otSLong, l_Tipo);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_TarjetaYCupon := TarjetaYCupon;
    TROSerializer(ASerializer).WriteEnumerated('TarjetaYCupon',TypeInfo(boolean), l_TarjetaYCupon);
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_TarjetaYCupon := TarjetaYCupon;
    TROSerializer(ASerializer).WriteEnumerated('TarjetaYCupon',TypeInfo(boolean), l_TarjetaYCupon);
    l_Ticket := Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', otSLong, l_Ticket);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', otSLong, l_Tipo);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
  end;
end;

{ TConsumoGasCollection }
constructor TConsumoGasCollection.Create;
begin
  inherited Create(TConsumoGas);
end;

constructor TConsumoGasCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TConsumoGasCollection.Add: TConsumoGas;
begin
  result := TConsumoGas(inherited Add);
end;

function TConsumoGasCollection.GetItems(aIndex: integer): TConsumoGas;
begin
  result := TConsumoGas(inherited Items[aIndex]);
end;

procedure TConsumoGasCollection.LoadFromArray(anArray: aConsumoGas);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TConsumoGasCollection.SaveToArray(anArray: aConsumoGas);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TConsumoGas.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TConsumoGasCollection.SetItems(aIndex: integer; const Value: TConsumoGas);
begin
  TConsumoGas(inherited Items[aIndex]).Assign(Value);
end;

{ TValoresCorte }

procedure TValoresCorte.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TValoresCorte;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TValoresCorte) then begin
    lSource := LibraryCistemGas_Intf.TValoresCorte(iSource);
    Corte.Assign(lSource.Corte);
    Consumos.Assign(lSource.Consumos);
    Otros.Assign(lSource.Otros);
  end;
end;

function TValoresCorte.GetCorte: aCorte;
begin
  if (fCorte = nil) then fCorte := aCorte.Create();
  result := fCorte;
end;

function TValoresCorte.GetConsumos: aConsumoGas;
begin
  if (fConsumos = nil) then fConsumos := aConsumoGas.Create();
  result := fConsumos;
end;

function TValoresCorte.GetOtros: aCorteOtros;
begin
  if (fOtros = nil) then fOtros := aCorteOtros.Create();
  result := fOtros;
end;

procedure TValoresCorte.ReadComplex(ASerializer: TObject);
var
  l_Consumos: aConsumoGas;
  l_Corte: aCorte;
  l_Otros: aCorteOtros;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Corte := Corte;
    TROSerializer(ASerializer).ReadArray('Corte', aCorte, l_Corte);
    if Corte <> l_Corte then Corte.Free;
    Corte := l_Corte;
    l_Consumos := Consumos;
    TROSerializer(ASerializer).ReadArray('Consumos', aConsumoGas, l_Consumos);
    if Consumos <> l_Consumos then Consumos.Free;
    Consumos := l_Consumos;
    l_Otros := Otros;
    TROSerializer(ASerializer).ReadArray('Otros', aCorteOtros, l_Otros);
    if Otros <> l_Otros then Otros.Free;
    Otros := l_Otros;
  end
  else begin
    l_Consumos := Consumos;
    TROSerializer(ASerializer).ReadArray('Consumos', aConsumoGas, l_Consumos);
    if Consumos <> l_Consumos then Consumos.Free;
    Consumos := l_Consumos;
    l_Corte := Corte;
    TROSerializer(ASerializer).ReadArray('Corte', aCorte, l_Corte);
    if Corte <> l_Corte then Corte.Free;
    Corte := l_Corte;
    l_Otros := Otros;
    TROSerializer(ASerializer).ReadArray('Otros', aCorteOtros, l_Otros);
    if Otros <> l_Otros then Otros.Free;
    Otros := l_Otros;
  end;
end;

procedure TValoresCorte.WriteComplex(ASerializer: TObject);
var
  l_Consumos: aConsumoGas;
  l_Corte: aCorte;
  l_Otros: aCorteOtros;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TValoresCorte);
    l_Corte := Corte;
    TROSerializer(ASerializer).WriteArray('Corte', l_Corte, aCorte);
    l_Consumos := Consumos;
    TROSerializer(ASerializer).WriteArray('Consumos', l_Consumos, aConsumoGas);
    l_Otros := Otros;
    TROSerializer(ASerializer).WriteArray('Otros', l_Otros, aCorteOtros);
  end
  else begin
    l_Consumos := Consumos;
    TROSerializer(ASerializer).WriteArray('Consumos', l_Consumos, aConsumoGas);
    l_Corte := Corte;
    TROSerializer(ASerializer).WriteArray('Corte', l_Corte, aCorte);
    l_Otros := Otros;
    TROSerializer(ASerializer).WriteArray('Otros', l_Otros, aCorteOtros);
  end;
end;

{ TValoresCorteCollection }
constructor TValoresCorteCollection.Create;
begin
  inherited Create(TValoresCorte);
end;

constructor TValoresCorteCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TValoresCorteCollection.Add: TValoresCorte;
begin
  result := TValoresCorte(inherited Add);
end;

function TValoresCorteCollection.GetItems(aIndex: integer): TValoresCorte;
begin
  result := TValoresCorte(inherited Items[aIndex]);
end;

procedure TValoresCorteCollection.SetItems(aIndex: integer; const Value: TValoresCorte);
begin
  TValoresCorte(inherited Items[aIndex]).Assign(Value);
end;

{ TAsignaTarjetaCupon }

procedure TAsignaTarjetaCupon.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TAsignaTarjetaCupon;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TAsignaTarjetaCupon) then begin
    lSource := LibraryCistemGas_Intf.TAsignaTarjetaCupon(iSource);
    TramaID := lSource.TramaID;
    Tipo := lSource.Tipo;
    Referencia := lSource.Referencia;
  end;
end;

procedure TAsignaTarjetaCupon.ReadComplex(ASerializer: TObject);
var
  l_Referencia: AnsiString;
  l_Tipo: Integer;
  l_TramaID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_TramaID := TramaID;
    TROSerializer(ASerializer).ReadInteger('TramaID', otSLong, l_TramaID);
    TramaID := l_TramaID;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadInteger('Tipo', otSLong, l_Tipo);
    Tipo := l_Tipo;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
  end
  else begin
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadInteger('Tipo', otSLong, l_Tipo);
    Tipo := l_Tipo;
    l_TramaID := TramaID;
    TROSerializer(ASerializer).ReadInteger('TramaID', otSLong, l_TramaID);
    TramaID := l_TramaID;
  end;
end;

procedure TAsignaTarjetaCupon.WriteComplex(ASerializer: TObject);
var
  l_Referencia: AnsiString;
  l_Tipo: Integer;
  l_TramaID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TAsignaTarjetaCupon);
    l_TramaID := TramaID;
    TROSerializer(ASerializer).WriteInteger('TramaID', otSLong, l_TramaID);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', otSLong, l_Tipo);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
  end
  else begin
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', otSLong, l_Tipo);
    l_TramaID := TramaID;
    TROSerializer(ASerializer).WriteInteger('TramaID', otSLong, l_TramaID);
  end;
end;

{ TAsignaTarjetaCuponCollection }
constructor TAsignaTarjetaCuponCollection.Create;
begin
  inherited Create(TAsignaTarjetaCupon);
end;

constructor TAsignaTarjetaCuponCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TAsignaTarjetaCuponCollection.Add: TAsignaTarjetaCupon;
begin
  result := TAsignaTarjetaCupon(inherited Add);
end;

function TAsignaTarjetaCuponCollection.GetItems(aIndex: integer): TAsignaTarjetaCupon;
begin
  result := TAsignaTarjetaCupon(inherited Items[aIndex]);
end;

procedure TAsignaTarjetaCuponCollection.LoadFromArray(anArray: aAsignaTarjetaCupon);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TAsignaTarjetaCuponCollection.SaveToArray(anArray: aAsignaTarjetaCupon);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TAsignaTarjetaCupon.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TAsignaTarjetaCuponCollection.SetItems(aIndex: integer; const Value: TAsignaTarjetaCupon);
begin
  TAsignaTarjetaCupon(inherited Items[aIndex]).Assign(Value);
end;

{ TTarjetaManual }

procedure TTarjetaManual.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TTarjetaManual;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TTarjetaManual) then begin
    lSource := LibraryCistemGas_Intf.TTarjetaManual(iSource);
    ClienteID := lSource.ClienteID;
    VehiculoID := lSource.VehiculoID;
    ClienteNombre := lSource.ClienteNombre;
    Referencia := lSource.Referencia;
  end;
end;

procedure TTarjetaManual.ReadComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_ClienteNombre: AnsiString;
  l_Referencia: AnsiString;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_ClienteNombre := ClienteNombre;
    TROSerializer(ASerializer).ReadAnsiString('ClienteNombre', l_ClienteNombre);
    ClienteNombre := l_ClienteNombre;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_ClienteNombre := ClienteNombre;
    TROSerializer(ASerializer).ReadAnsiString('ClienteNombre', l_ClienteNombre);
    ClienteNombre := l_ClienteNombre;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
  end;
end;

procedure TTarjetaManual.WriteComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_ClienteNombre: AnsiString;
  l_Referencia: AnsiString;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TTarjetaManual);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_ClienteNombre := ClienteNombre;
    TROSerializer(ASerializer).WriteAnsiString('ClienteNombre', l_ClienteNombre);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_ClienteNombre := ClienteNombre;
    TROSerializer(ASerializer).WriteAnsiString('ClienteNombre', l_ClienteNombre);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
  end;
end;

{ TTarjetaManualCollection }
constructor TTarjetaManualCollection.Create;
begin
  inherited Create(TTarjetaManual);
end;

constructor TTarjetaManualCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TTarjetaManualCollection.Add: TTarjetaManual;
begin
  result := TTarjetaManual(inherited Add);
end;

function TTarjetaManualCollection.GetItems(aIndex: integer): TTarjetaManual;
begin
  result := TTarjetaManual(inherited Items[aIndex]);
end;

procedure TTarjetaManualCollection.SetItems(aIndex: integer; const Value: TTarjetaManual);
begin
  TTarjetaManual(inherited Items[aIndex]).Assign(Value);
end;

{ TCambio }

procedure TCambio.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TCambio;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TCambio) then begin
    lSource := LibraryCistemGas_Intf.TCambio(iSource);
    Fecha := lSource.Fecha;
    Activo := lSource.Activo;
    Precios.Assign(lSource.Precios);
  end;
end;

function TCambio.GetPrecios: aCambioPrecios;
begin
  if (fPrecios = nil) then fPrecios := aCambioPrecios.Create();
  result := fPrecios;
end;

procedure TCambio.ReadComplex(ASerializer: TObject);
var
  l_Activo: Boolean;
  l_Fecha: DateTime;
  l_Precios: aCambioPrecios;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Activo := Activo;
    TROSerializer(ASerializer).ReadEnumerated('Activo',TypeInfo(boolean), l_Activo);
    Activo := l_Activo;
    l_Precios := Precios;
    TROSerializer(ASerializer).ReadArray('Precios', aCambioPrecios, l_Precios);
    if Precios <> l_Precios then Precios.Free;
    Precios := l_Precios;
  end
  else begin
    l_Activo := Activo;
    TROSerializer(ASerializer).ReadEnumerated('Activo',TypeInfo(boolean), l_Activo);
    Activo := l_Activo;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Precios := Precios;
    TROSerializer(ASerializer).ReadArray('Precios', aCambioPrecios, l_Precios);
    if Precios <> l_Precios then Precios.Free;
    Precios := l_Precios;
  end;
end;

procedure TCambio.WriteComplex(ASerializer: TObject);
var
  l_Activo: Boolean;
  l_Fecha: DateTime;
  l_Precios: aCambioPrecios;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TCambio);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Activo := Activo;
    TROSerializer(ASerializer).WriteEnumerated('Activo',TypeInfo(boolean), l_Activo);
    l_Precios := Precios;
    TROSerializer(ASerializer).WriteArray('Precios', l_Precios, aCambioPrecios);
  end
  else begin
    l_Activo := Activo;
    TROSerializer(ASerializer).WriteEnumerated('Activo',TypeInfo(boolean), l_Activo);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Precios := Precios;
    TROSerializer(ASerializer).WriteArray('Precios', l_Precios, aCambioPrecios);
  end;
end;

{ TCambioCollection }
constructor TCambioCollection.Create;
begin
  inherited Create(TCambio);
end;

constructor TCambioCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TCambioCollection.Add: TCambio;
begin
  result := TCambio(inherited Add);
end;

function TCambioCollection.GetItems(aIndex: integer): TCambio;
begin
  result := TCambio(inherited Items[aIndex]);
end;

procedure TCambioCollection.SetItems(aIndex: integer; const Value: TCambio);
begin
  TCambio(inherited Items[aIndex]).Assign(Value);
end;

{ TCupon }

procedure TCupon.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TCupon;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TCupon) then begin
    lSource := LibraryCistemGas_Intf.TCupon(iSource);
    Valido := lSource.Valido;
    Mensaje := lSource.Mensaje;
    Nombre := lSource.Nombre;
    RazonSocial := lSource.RazonSocial;
    RFC := lSource.RFC;
    Referencia := lSource.Referencia;
    ClienteID := lSource.ClienteID;
    VehiculoID := lSource.VehiculoID;
    GasolineroID := lSource.GasolineroID;
    Grupo := lSource.Grupo;
    Importe := lSource.Importe;
  end;
end;

procedure TCupon.ReadComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_GasolineroID: Integer;
  l_Grupo: Integer;
  l_Importe: Double;
  l_Mensaje: AnsiString;
  l_Nombre: AnsiString;
  l_RazonSocial: AnsiString;
  l_Referencia: AnsiString;
  l_RFC: AnsiString;
  l_Valido: Boolean;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Valido := Valido;
    TROSerializer(ASerializer).ReadEnumerated('Valido',TypeInfo(boolean), l_Valido);
    Valido := l_Valido;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).ReadAnsiString('RazonSocial', l_RazonSocial);
    RazonSocial := l_RazonSocial;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_Grupo := Grupo;
    TROSerializer(ASerializer).ReadInteger('Grupo', otSLong, l_Grupo);
    Grupo := l_Grupo;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_Grupo := Grupo;
    TROSerializer(ASerializer).ReadInteger('Grupo', otSLong, l_Grupo);
    Grupo := l_Grupo;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).ReadAnsiString('RazonSocial', l_RazonSocial);
    RazonSocial := l_RazonSocial;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_Valido := Valido;
    TROSerializer(ASerializer).ReadEnumerated('Valido',TypeInfo(boolean), l_Valido);
    Valido := l_Valido;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
  end;
end;

procedure TCupon.WriteComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_GasolineroID: Integer;
  l_Grupo: Integer;
  l_Importe: Double;
  l_Mensaje: AnsiString;
  l_Nombre: AnsiString;
  l_RazonSocial: AnsiString;
  l_Referencia: AnsiString;
  l_RFC: AnsiString;
  l_Valido: Boolean;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TCupon);
    l_Valido := Valido;
    TROSerializer(ASerializer).WriteEnumerated('Valido',TypeInfo(boolean), l_Valido);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).WriteAnsiString('RazonSocial', l_RazonSocial);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_Grupo := Grupo;
    TROSerializer(ASerializer).WriteInteger('Grupo', otSLong, l_Grupo);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_Grupo := Grupo;
    TROSerializer(ASerializer).WriteInteger('Grupo', otSLong, l_Grupo);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).WriteAnsiString('RazonSocial', l_RazonSocial);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_Valido := Valido;
    TROSerializer(ASerializer).WriteEnumerated('Valido',TypeInfo(boolean), l_Valido);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
  end;
end;

{ TCuponCollection }
constructor TCuponCollection.Create;
begin
  inherited Create(TCupon);
end;

constructor TCuponCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TCuponCollection.Add: TCupon;
begin
  result := TCupon(inherited Add);
end;

function TCuponCollection.GetItems(aIndex: integer): TCupon;
begin
  result := TCupon(inherited Items[aIndex]);
end;

procedure TCuponCollection.SetItems(aIndex: integer; const Value: TCupon);
begin
  TCupon(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosExpress }

procedure TDatosExpress.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TDatosExpress;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TDatosExpress) then begin
    lSource := LibraryCistemGas_Intf.TDatosExpress(iSource);
    ClienteID := lSource.ClienteID;
    Nombre := lSource.Nombre;
    RFC := lSource.RFC;
    Tarjeta := lSource.Tarjeta;
  end;
end;

procedure TDatosExpress.ReadComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Nombre: AnsiString;
  l_RFC: AnsiString;
  l_Tarjeta: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
  end;
end;

procedure TDatosExpress.WriteComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Nombre: AnsiString;
  l_RFC: AnsiString;
  l_Tarjeta: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosExpress);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
  end;
end;

{ TDatosExpressCollection }
constructor TDatosExpressCollection.Create;
begin
  inherited Create(TDatosExpress);
end;

constructor TDatosExpressCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosExpressCollection.Add: TDatosExpress;
begin
  result := TDatosExpress(inherited Add);
end;

function TDatosExpressCollection.GetItems(aIndex: integer): TDatosExpress;
begin
  result := TDatosExpress(inherited Items[aIndex]);
end;

procedure TDatosExpressCollection.SetItems(aIndex: integer; const Value: TDatosExpress);
begin
  TDatosExpress(inherited Items[aIndex]).Assign(Value);
end;

{ TOtros }

procedure TOtros.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TOtros;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TOtros) then begin
    lSource := LibraryCistemGas_Intf.TOtros(iSource);
    ID := lSource.ID;
    Nombre := lSource.Nombre;
    Codigo := lSource.Codigo;
    Barras := lSource.Barras;
    Precio := lSource.Precio;
    Cantidad := lSource.Cantidad;
    TicketID := lSource.TicketID;
    VentaID := lSource.VentaID;
  end;
end;

procedure TOtros.ReadComplex(ASerializer: TObject);
var
  l_Barras: AnsiString;
  l_Cantidad: Double;
  l_Codigo: AnsiString;
  l_ID: Integer;
  l_Nombre: AnsiString;
  l_Precio: Double;
  l_TicketID: Integer;
  l_VentaID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ID := ID;
    TROSerializer(ASerializer).ReadInteger('ID', otSLong, l_ID);
    ID := l_ID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Codigo := Codigo;
    TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    Codigo := l_Codigo;
    l_Barras := Barras;
    TROSerializer(ASerializer).ReadAnsiString('Barras', l_Barras);
    Barras := l_Barras;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_TicketID := TicketID;
    TROSerializer(ASerializer).ReadInteger('TicketID', otSLong, l_TicketID);
    TicketID := l_TicketID;
    l_VentaID := VentaID;
    TROSerializer(ASerializer).ReadInteger('VentaID', otSLong, l_VentaID);
    VentaID := l_VentaID;
  end
  else begin
    l_Barras := Barras;
    TROSerializer(ASerializer).ReadAnsiString('Barras', l_Barras);
    Barras := l_Barras;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Codigo := Codigo;
    TROSerializer(ASerializer).ReadAnsiString('Codigo', l_Codigo);
    Codigo := l_Codigo;
    l_ID := ID;
    TROSerializer(ASerializer).ReadInteger('ID', otSLong, l_ID);
    ID := l_ID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_TicketID := TicketID;
    TROSerializer(ASerializer).ReadInteger('TicketID', otSLong, l_TicketID);
    TicketID := l_TicketID;
    l_VentaID := VentaID;
    TROSerializer(ASerializer).ReadInteger('VentaID', otSLong, l_VentaID);
    VentaID := l_VentaID;
  end;
end;

procedure TOtros.WriteComplex(ASerializer: TObject);
var
  l_Barras: AnsiString;
  l_Cantidad: Double;
  l_Codigo: AnsiString;
  l_ID: Integer;
  l_Nombre: AnsiString;
  l_Precio: Double;
  l_TicketID: Integer;
  l_VentaID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TOtros);
    l_ID := ID;
    TROSerializer(ASerializer).WriteInteger('ID', otSLong, l_ID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Codigo := Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_Barras := Barras;
    TROSerializer(ASerializer).WriteAnsiString('Barras', l_Barras);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_TicketID := TicketID;
    TROSerializer(ASerializer).WriteInteger('TicketID', otSLong, l_TicketID);
    l_VentaID := VentaID;
    TROSerializer(ASerializer).WriteInteger('VentaID', otSLong, l_VentaID);
  end
  else begin
    l_Barras := Barras;
    TROSerializer(ASerializer).WriteAnsiString('Barras', l_Barras);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Codigo := Codigo;
    TROSerializer(ASerializer).WriteAnsiString('Codigo', l_Codigo);
    l_ID := ID;
    TROSerializer(ASerializer).WriteInteger('ID', otSLong, l_ID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_TicketID := TicketID;
    TROSerializer(ASerializer).WriteInteger('TicketID', otSLong, l_TicketID);
    l_VentaID := VentaID;
    TROSerializer(ASerializer).WriteInteger('VentaID', otSLong, l_VentaID);
  end;
end;

{ TOtrosCollection }
constructor TOtrosCollection.Create;
begin
  inherited Create(TOtros);
end;

constructor TOtrosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TOtrosCollection.Add: TOtros;
begin
  result := TOtros(inherited Add);
end;

function TOtrosCollection.GetItems(aIndex: integer): TOtros;
begin
  result := TOtros(inherited Items[aIndex]);
end;

procedure TOtrosCollection.LoadFromArray(anArray: AOtros);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TOtrosCollection.SaveToArray(anArray: AOtros);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TOtros.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TOtrosCollection.SetItems(aIndex: integer; const Value: TOtros);
begin
  TOtros(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosVentaOtros }

procedure TDatosVentaOtros.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TDatosVentaOtros;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TDatosVentaOtros) then begin
    lSource := LibraryCistemGas_Intf.TDatosVentaOtros(iSource);
    ClienteID := lSource.ClienteID;
    Nombre := lSource.Nombre;
    RazonSocial := lSource.RazonSocial;
    RFC := lSource.RFC;
    Identificacion := lSource.Identificacion;
    Valido := lSource.Valido;
    Mensaje := lSource.Mensaje;
    VentaID := lSource.VentaID;
  end;
end;

procedure TDatosVentaOtros.ReadComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Identificacion: AnsiString;
  l_Mensaje: AnsiString;
  l_Nombre: AnsiString;
  l_RazonSocial: AnsiString;
  l_RFC: AnsiString;
  l_Valido: Boolean;
  l_VentaID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).ReadAnsiString('RazonSocial', l_RazonSocial);
    RazonSocial := l_RazonSocial;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).ReadAnsiString('Identificacion', l_Identificacion);
    Identificacion := l_Identificacion;
    l_Valido := Valido;
    TROSerializer(ASerializer).ReadEnumerated('Valido',TypeInfo(boolean), l_Valido);
    Valido := l_Valido;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_VentaID := VentaID;
    TROSerializer(ASerializer).ReadInteger('VentaID', otSLong, l_VentaID);
    VentaID := l_VentaID;
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).ReadAnsiString('Identificacion', l_Identificacion);
    Identificacion := l_Identificacion;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).ReadAnsiString('RazonSocial', l_RazonSocial);
    RazonSocial := l_RazonSocial;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_Valido := Valido;
    TROSerializer(ASerializer).ReadEnumerated('Valido',TypeInfo(boolean), l_Valido);
    Valido := l_Valido;
    l_VentaID := VentaID;
    TROSerializer(ASerializer).ReadInteger('VentaID', otSLong, l_VentaID);
    VentaID := l_VentaID;
  end;
end;

procedure TDatosVentaOtros.WriteComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Identificacion: AnsiString;
  l_Mensaje: AnsiString;
  l_Nombre: AnsiString;
  l_RazonSocial: AnsiString;
  l_RFC: AnsiString;
  l_Valido: Boolean;
  l_VentaID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosVentaOtros);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).WriteAnsiString('RazonSocial', l_RazonSocial);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).WriteAnsiString('Identificacion', l_Identificacion);
    l_Valido := Valido;
    TROSerializer(ASerializer).WriteEnumerated('Valido',TypeInfo(boolean), l_Valido);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_VentaID := VentaID;
    TROSerializer(ASerializer).WriteInteger('VentaID', otSLong, l_VentaID);
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).WriteAnsiString('Identificacion', l_Identificacion);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).WriteAnsiString('RazonSocial', l_RazonSocial);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_Valido := Valido;
    TROSerializer(ASerializer).WriteEnumerated('Valido',TypeInfo(boolean), l_Valido);
    l_VentaID := VentaID;
    TROSerializer(ASerializer).WriteInteger('VentaID', otSLong, l_VentaID);
  end;
end;

{ TDatosVentaOtrosCollection }
constructor TDatosVentaOtrosCollection.Create;
begin
  inherited Create(TDatosVentaOtros);
end;

constructor TDatosVentaOtrosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosVentaOtrosCollection.Add: TDatosVentaOtros;
begin
  result := TDatosVentaOtros(inherited Add);
end;

function TDatosVentaOtrosCollection.GetItems(aIndex: integer): TDatosVentaOtros;
begin
  result := TDatosVentaOtros(inherited Items[aIndex]);
end;

procedure TDatosVentaOtrosCollection.SetItems(aIndex: integer; const Value: TDatosVentaOtros);
begin
  TDatosVentaOtros(inherited Items[aIndex]).Assign(Value);
end;

{ TAutorizaPendiente }

procedure TAutorizaPendiente.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TAutorizaPendiente;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TAutorizaPendiente) then begin
    lSource := LibraryCistemGas_Intf.TAutorizaPendiente(iSource);
    EstacionID := lSource.EstacionID;
    SecuenciaVenta := lSource.SecuenciaVenta;
    Fecha := lSource.Fecha;
    ProductoID := lSource.ProductoID;
    Precio := lSource.Precio;
    Volumen := lSource.Volumen;
    Importe := lSource.Importe;
    Turno := lSource.Turno;
    BombaID := lSource.BombaID;
    Odometro := lSource.Odometro;
    Tarjeta := lSource.Tarjeta;
    Impuesto := lSource.Impuesto;
    IEPS := lSource.IEPS;
  end;
end;

procedure TAutorizaPendiente.ReadComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_IEPS: Double;
  l_Importe: Double;
  l_Impuesto: Double;
  l_Odometro: AnsiString;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_SecuenciaVenta: Integer;
  l_Tarjeta: AnsiString;
  l_Turno: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_SecuenciaVenta := SecuenciaVenta;
    TROSerializer(ASerializer).ReadInteger('SecuenciaVenta', otSLong, l_SecuenciaVenta);
    SecuenciaVenta := l_SecuenciaVenta;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Turno := Turno;
    TROSerializer(ASerializer).ReadInteger('Turno', otSLong, l_Turno);
    Turno := l_Turno;
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_Odometro := Odometro;
    TROSerializer(ASerializer).ReadAnsiString('Odometro', l_Odometro);
    Odometro := l_Odometro;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_IEPS := IEPS;
    TROSerializer(ASerializer).ReadDouble('IEPS', ftDouble, l_IEPS);
    IEPS := l_IEPS;
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_IEPS := IEPS;
    TROSerializer(ASerializer).ReadDouble('IEPS', ftDouble, l_IEPS);
    IEPS := l_IEPS;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_Odometro := Odometro;
    TROSerializer(ASerializer).ReadAnsiString('Odometro', l_Odometro);
    Odometro := l_Odometro;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_SecuenciaVenta := SecuenciaVenta;
    TROSerializer(ASerializer).ReadInteger('SecuenciaVenta', otSLong, l_SecuenciaVenta);
    SecuenciaVenta := l_SecuenciaVenta;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
    l_Turno := Turno;
    TROSerializer(ASerializer).ReadInteger('Turno', otSLong, l_Turno);
    Turno := l_Turno;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
  end;
end;

procedure TAutorizaPendiente.WriteComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_IEPS: Double;
  l_Importe: Double;
  l_Impuesto: Double;
  l_Odometro: AnsiString;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_SecuenciaVenta: Integer;
  l_Tarjeta: AnsiString;
  l_Turno: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TAutorizaPendiente);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_SecuenciaVenta := SecuenciaVenta;
    TROSerializer(ASerializer).WriteInteger('SecuenciaVenta', otSLong, l_SecuenciaVenta);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Turno := Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', otSLong, l_Turno);
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_Odometro := Odometro;
    TROSerializer(ASerializer).WriteAnsiString('Odometro', l_Odometro);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_IEPS := IEPS;
    TROSerializer(ASerializer).WriteDouble('IEPS', ftDouble, l_IEPS);
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_IEPS := IEPS;
    TROSerializer(ASerializer).WriteDouble('IEPS', ftDouble, l_IEPS);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_Odometro := Odometro;
    TROSerializer(ASerializer).WriteAnsiString('Odometro', l_Odometro);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_SecuenciaVenta := SecuenciaVenta;
    TROSerializer(ASerializer).WriteInteger('SecuenciaVenta', otSLong, l_SecuenciaVenta);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
    l_Turno := Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', otSLong, l_Turno);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
  end;
end;

{ TAutorizaPendienteCollection }
constructor TAutorizaPendienteCollection.Create;
begin
  inherited Create(TAutorizaPendiente);
end;

constructor TAutorizaPendienteCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TAutorizaPendienteCollection.Add: TAutorizaPendiente;
begin
  result := TAutorizaPendiente(inherited Add);
end;

function TAutorizaPendienteCollection.GetItems(aIndex: integer): TAutorizaPendiente;
begin
  result := TAutorizaPendiente(inherited Items[aIndex]);
end;

procedure TAutorizaPendienteCollection.LoadFromArray(anArray: AAutorizaPendiente);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TAutorizaPendienteCollection.SaveToArray(anArray: AAutorizaPendiente);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TAutorizaPendiente.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TAutorizaPendienteCollection.SetItems(aIndex: integer; const Value: TAutorizaPendiente);
begin
  TAutorizaPendiente(inherited Items[aIndex]).Assign(Value);
end;

{ TAutorizaLLave }

procedure TAutorizaLLave.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TAutorizaLLave;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TAutorizaLLave) then begin
    lSource := LibraryCistemGas_Intf.TAutorizaLLave(iSource);
    UsuarioTarjetaID := lSource.UsuarioTarjetaID;
    Nombre := lSource.Nombre;
    Tarjeta := lSource.Tarjeta;
    Valida := lSource.Valida;
    Fecha := lSource.Fecha;
  end;
end;

procedure TAutorizaLLave.ReadComplex(ASerializer: TObject);
var
  l_Fecha: DateTime;
  l_Nombre: AnsiString;
  l_Tarjeta: AnsiString;
  l_UsuarioTarjetaID: Integer;
  l_Valida: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_UsuarioTarjetaID := UsuarioTarjetaID;
    TROSerializer(ASerializer).ReadInteger('UsuarioTarjetaID', otSLong, l_UsuarioTarjetaID);
    UsuarioTarjetaID := l_UsuarioTarjetaID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
    l_Valida := Valida;
    TROSerializer(ASerializer).ReadEnumerated('Valida',TypeInfo(boolean), l_Valida);
    Valida := l_Valida;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
  end
  else begin
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
    l_UsuarioTarjetaID := UsuarioTarjetaID;
    TROSerializer(ASerializer).ReadInteger('UsuarioTarjetaID', otSLong, l_UsuarioTarjetaID);
    UsuarioTarjetaID := l_UsuarioTarjetaID;
    l_Valida := Valida;
    TROSerializer(ASerializer).ReadEnumerated('Valida',TypeInfo(boolean), l_Valida);
    Valida := l_Valida;
  end;
end;

procedure TAutorizaLLave.WriteComplex(ASerializer: TObject);
var
  l_Fecha: DateTime;
  l_Nombre: AnsiString;
  l_Tarjeta: AnsiString;
  l_UsuarioTarjetaID: Integer;
  l_Valida: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TAutorizaLLave);
    l_UsuarioTarjetaID := UsuarioTarjetaID;
    TROSerializer(ASerializer).WriteInteger('UsuarioTarjetaID', otSLong, l_UsuarioTarjetaID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
    l_Valida := Valida;
    TROSerializer(ASerializer).WriteEnumerated('Valida',TypeInfo(boolean), l_Valida);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
  end
  else begin
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
    l_UsuarioTarjetaID := UsuarioTarjetaID;
    TROSerializer(ASerializer).WriteInteger('UsuarioTarjetaID', otSLong, l_UsuarioTarjetaID);
    l_Valida := Valida;
    TROSerializer(ASerializer).WriteEnumerated('Valida',TypeInfo(boolean), l_Valida);
  end;
end;

{ TAutorizaLLaveCollection }
constructor TAutorizaLLaveCollection.Create;
begin
  inherited Create(TAutorizaLLave);
end;

constructor TAutorizaLLaveCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TAutorizaLLaveCollection.Add: TAutorizaLLave;
begin
  result := TAutorizaLLave(inherited Add);
end;

function TAutorizaLLaveCollection.GetItems(aIndex: integer): TAutorizaLLave;
begin
  result := TAutorizaLLave(inherited Items[aIndex]);
end;

procedure TAutorizaLLaveCollection.SetItems(aIndex: integer; const Value: TAutorizaLLave);
begin
  TAutorizaLLave(inherited Items[aIndex]).Assign(Value);
end;

{ TAutorizaBancaria }

procedure TAutorizaBancaria.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TAutorizaBancaria;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TAutorizaBancaria) then begin
    lSource := LibraryCistemGas_Intf.TAutorizaBancaria(iSource);
    Mensaje := lSource.Mensaje;
    Tarjeta := lSource.Tarjeta;
    NombreCliente := lSource.NombreCliente;
    Aprobada := lSource.Aprobada;
    ID := lSource.ID;
    Autorizacion := lSource.Autorizacion;
    TransID := lSource.TransID;
    IDTrans := lSource.IDTrans;
    Notes := lSource.Notes;
    Accepted := lSource.Accepted;
    Instructions := lSource.Instructions;
    Comision := lSource.Comision;
  end;
end;

procedure TAutorizaBancaria.ReadComplex(ASerializer: TObject);
var
  l_Accepted: Boolean;
  l_Aprobada: Boolean;
  l_Autorizacion: AnsiString;
  l_Comision: Double;
  l_ID: Integer;
  l_IDTrans: AnsiString;
  l_Instructions: AnsiString;
  l_Mensaje: AnsiString;
  l_NombreCliente: AnsiString;
  l_Notes: AnsiString;
  l_Tarjeta: AnsiString;
  l_TransID: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
    l_NombreCliente := NombreCliente;
    TROSerializer(ASerializer).ReadAnsiString('NombreCliente', l_NombreCliente);
    NombreCliente := l_NombreCliente;
    l_Aprobada := Aprobada;
    TROSerializer(ASerializer).ReadEnumerated('Aprobada',TypeInfo(boolean), l_Aprobada);
    Aprobada := l_Aprobada;
    l_ID := ID;
    TROSerializer(ASerializer).ReadInteger('ID', otSLong, l_ID);
    ID := l_ID;
    l_Autorizacion := Autorizacion;
    TROSerializer(ASerializer).ReadAnsiString('Autorizacion', l_Autorizacion);
    Autorizacion := l_Autorizacion;
    l_TransID := TransID;
    TROSerializer(ASerializer).ReadAnsiString('TransID', l_TransID);
    TransID := l_TransID;
    l_IDTrans := IDTrans;
    TROSerializer(ASerializer).ReadAnsiString('IDTrans', l_IDTrans);
    IDTrans := l_IDTrans;
    l_Notes := Notes;
    TROSerializer(ASerializer).ReadAnsiString('Notes', l_Notes);
    Notes := l_Notes;
    l_Accepted := Accepted;
    TROSerializer(ASerializer).ReadEnumerated('Accepted',TypeInfo(boolean), l_Accepted);
    Accepted := l_Accepted;
    l_Instructions := Instructions;
    TROSerializer(ASerializer).ReadAnsiString('Instructions', l_Instructions);
    Instructions := l_Instructions;
    l_Comision := Comision;
    TROSerializer(ASerializer).ReadDouble('Comision', ftDouble, l_Comision);
    Comision := l_Comision;
  end
  else begin
    l_Accepted := Accepted;
    TROSerializer(ASerializer).ReadEnumerated('Accepted',TypeInfo(boolean), l_Accepted);
    Accepted := l_Accepted;
    l_Aprobada := Aprobada;
    TROSerializer(ASerializer).ReadEnumerated('Aprobada',TypeInfo(boolean), l_Aprobada);
    Aprobada := l_Aprobada;
    l_Autorizacion := Autorizacion;
    TROSerializer(ASerializer).ReadAnsiString('Autorizacion', l_Autorizacion);
    Autorizacion := l_Autorizacion;
    l_Comision := Comision;
    TROSerializer(ASerializer).ReadDouble('Comision', ftDouble, l_Comision);
    Comision := l_Comision;
    l_ID := ID;
    TROSerializer(ASerializer).ReadInteger('ID', otSLong, l_ID);
    ID := l_ID;
    l_IDTrans := IDTrans;
    TROSerializer(ASerializer).ReadAnsiString('IDTrans', l_IDTrans);
    IDTrans := l_IDTrans;
    l_Instructions := Instructions;
    TROSerializer(ASerializer).ReadAnsiString('Instructions', l_Instructions);
    Instructions := l_Instructions;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_NombreCliente := NombreCliente;
    TROSerializer(ASerializer).ReadAnsiString('NombreCliente', l_NombreCliente);
    NombreCliente := l_NombreCliente;
    l_Notes := Notes;
    TROSerializer(ASerializer).ReadAnsiString('Notes', l_Notes);
    Notes := l_Notes;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
    l_TransID := TransID;
    TROSerializer(ASerializer).ReadAnsiString('TransID', l_TransID);
    TransID := l_TransID;
  end;
end;

procedure TAutorizaBancaria.WriteComplex(ASerializer: TObject);
var
  l_Accepted: Boolean;
  l_Aprobada: Boolean;
  l_Autorizacion: AnsiString;
  l_Comision: Double;
  l_ID: Integer;
  l_IDTrans: AnsiString;
  l_Instructions: AnsiString;
  l_Mensaje: AnsiString;
  l_NombreCliente: AnsiString;
  l_Notes: AnsiString;
  l_Tarjeta: AnsiString;
  l_TransID: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TAutorizaBancaria);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
    l_NombreCliente := NombreCliente;
    TROSerializer(ASerializer).WriteAnsiString('NombreCliente', l_NombreCliente);
    l_Aprobada := Aprobada;
    TROSerializer(ASerializer).WriteEnumerated('Aprobada',TypeInfo(boolean), l_Aprobada);
    l_ID := ID;
    TROSerializer(ASerializer).WriteInteger('ID', otSLong, l_ID);
    l_Autorizacion := Autorizacion;
    TROSerializer(ASerializer).WriteAnsiString('Autorizacion', l_Autorizacion);
    l_TransID := TransID;
    TROSerializer(ASerializer).WriteAnsiString('TransID', l_TransID);
    l_IDTrans := IDTrans;
    TROSerializer(ASerializer).WriteAnsiString('IDTrans', l_IDTrans);
    l_Notes := Notes;
    TROSerializer(ASerializer).WriteAnsiString('Notes', l_Notes);
    l_Accepted := Accepted;
    TROSerializer(ASerializer).WriteEnumerated('Accepted',TypeInfo(boolean), l_Accepted);
    l_Instructions := Instructions;
    TROSerializer(ASerializer).WriteAnsiString('Instructions', l_Instructions);
    l_Comision := Comision;
    TROSerializer(ASerializer).WriteDouble('Comision', ftDouble, l_Comision);
  end
  else begin
    l_Accepted := Accepted;
    TROSerializer(ASerializer).WriteEnumerated('Accepted',TypeInfo(boolean), l_Accepted);
    l_Aprobada := Aprobada;
    TROSerializer(ASerializer).WriteEnumerated('Aprobada',TypeInfo(boolean), l_Aprobada);
    l_Autorizacion := Autorizacion;
    TROSerializer(ASerializer).WriteAnsiString('Autorizacion', l_Autorizacion);
    l_Comision := Comision;
    TROSerializer(ASerializer).WriteDouble('Comision', ftDouble, l_Comision);
    l_ID := ID;
    TROSerializer(ASerializer).WriteInteger('ID', otSLong, l_ID);
    l_IDTrans := IDTrans;
    TROSerializer(ASerializer).WriteAnsiString('IDTrans', l_IDTrans);
    l_Instructions := Instructions;
    TROSerializer(ASerializer).WriteAnsiString('Instructions', l_Instructions);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_NombreCliente := NombreCliente;
    TROSerializer(ASerializer).WriteAnsiString('NombreCliente', l_NombreCliente);
    l_Notes := Notes;
    TROSerializer(ASerializer).WriteAnsiString('Notes', l_Notes);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
    l_TransID := TransID;
    TROSerializer(ASerializer).WriteAnsiString('TransID', l_TransID);
  end;
end;

{ TAutorizaBancariaCollection }
constructor TAutorizaBancariaCollection.Create;
begin
  inherited Create(TAutorizaBancaria);
end;

constructor TAutorizaBancariaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TAutorizaBancariaCollection.Add: TAutorizaBancaria;
begin
  result := TAutorizaBancaria(inherited Add);
end;

function TAutorizaBancariaCollection.GetItems(aIndex: integer): TAutorizaBancaria;
begin
  result := TAutorizaBancaria(inherited Items[aIndex]);
end;

procedure TAutorizaBancariaCollection.SetItems(aIndex: integer; const Value: TAutorizaBancaria);
begin
  TAutorizaBancaria(inherited Items[aIndex]).Assign(Value);
end;

{ TCorteOtros }

procedure TCorteOtros.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TCorteOtros;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TCorteOtros) then begin
    lSource := LibraryCistemGas_Intf.TCorteOtros(iSource);
    ProductoID := lSource.ProductoID;
    Cantidad := lSource.Cantidad;
    Precio := lSource.Precio;
    Importe := lSource.Importe;
    BombaID := lSource.BombaID;
  end;
end;

procedure TCorteOtros.ReadComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_Cantidad: Double;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
  end;
end;

procedure TCorteOtros.WriteComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_Cantidad: Double;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TCorteOtros);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
  end;
end;

{ TCorteOtrosCollection }
constructor TCorteOtrosCollection.Create;
begin
  inherited Create(TCorteOtros);
end;

constructor TCorteOtrosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TCorteOtrosCollection.Add: TCorteOtros;
begin
  result := TCorteOtros(inherited Add);
end;

function TCorteOtrosCollection.GetItems(aIndex: integer): TCorteOtros;
begin
  result := TCorteOtros(inherited Items[aIndex]);
end;

procedure TCorteOtrosCollection.LoadFromArray(anArray: aCorteOtros);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TCorteOtrosCollection.SaveToArray(anArray: aCorteOtros);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TCorteOtros.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TCorteOtrosCollection.SetItems(aIndex: integer; const Value: TCorteOtros);
begin
  TCorteOtros(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosVerifone }

procedure TDatosVerifone.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TDatosVerifone;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TDatosVerifone) then begin
    lSource := LibraryCistemGas_Intf.TDatosVerifone(iSource);
    ClienteID := lSource.ClienteID;
    VehiculoID := lSource.VehiculoID;
    Nombre := lSource.Nombre;
    RazonSocial := lSource.RazonSocial;
    Domicilio := lSource.Domicilio;
    Colonia := lSource.Colonia;
    Ciudad := lSource.Ciudad;
    RFC := lSource.RFC;
    NIP := lSource.NIP;
    Identificacion := lSource.Identificacion;
    Usuario := lSource.Usuario;
    AcumuladoMNMes := lSource.AcumuladoMNMes;
    KMS := lSource.KMS;
    Referencia := lSource.Referencia;
    Autorizada := lSource.Autorizada;
    VolumenImporte := lSource.VolumenImporte;
    AutorizacionMN := lSource.AutorizacionMN;
    AutorizacionLT := lSource.AutorizacionLT;
    StatusID := lSource.StatusID;
    Mensaje := lSource.Mensaje;
  end;
end;

procedure TDatosVerifone.ReadComplex(ASerializer: TObject);
var
  l_AcumuladoMNMes: Double;
  l_AutorizacionLT: Double;
  l_AutorizacionMN: Double;
  l_Autorizada: Boolean;
  l_Ciudad: AnsiString;
  l_ClienteID: Integer;
  l_Colonia: AnsiString;
  l_Domicilio: AnsiString;
  l_Identificacion: AnsiString;
  l_KMS: Integer;
  l_Mensaje: AnsiString;
  l_NIP: Integer;
  l_Nombre: AnsiString;
  l_RazonSocial: AnsiString;
  l_Referencia: AnsiString;
  l_RFC: AnsiString;
  l_StatusID: Integer;
  l_Usuario: AnsiString;
  l_VehiculoID: Integer;
  l_VolumenImporte: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).ReadAnsiString('RazonSocial', l_RazonSocial);
    RazonSocial := l_RazonSocial;
    l_Domicilio := Domicilio;
    TROSerializer(ASerializer).ReadAnsiString('Domicilio', l_Domicilio);
    Domicilio := l_Domicilio;
    l_Colonia := Colonia;
    TROSerializer(ASerializer).ReadAnsiString('Colonia', l_Colonia);
    Colonia := l_Colonia;
    l_Ciudad := Ciudad;
    TROSerializer(ASerializer).ReadAnsiString('Ciudad', l_Ciudad);
    Ciudad := l_Ciudad;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_NIP := NIP;
    TROSerializer(ASerializer).ReadInteger('NIP', otSLong, l_NIP);
    NIP := l_NIP;
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).ReadAnsiString('Identificacion', l_Identificacion);
    Identificacion := l_Identificacion;
    l_Usuario := Usuario;
    TROSerializer(ASerializer).ReadAnsiString('Usuario', l_Usuario);
    Usuario := l_Usuario;
    l_AcumuladoMNMes := AcumuladoMNMes;
    TROSerializer(ASerializer).ReadDouble('AcumuladoMNMes', ftDouble, l_AcumuladoMNMes);
    AcumuladoMNMes := l_AcumuladoMNMes;
    l_KMS := KMS;
    TROSerializer(ASerializer).ReadInteger('KMS', otSLong, l_KMS);
    KMS := l_KMS;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Autorizada := Autorizada;
    TROSerializer(ASerializer).ReadEnumerated('Autorizada',TypeInfo(boolean), l_Autorizada);
    Autorizada := l_Autorizada;
    l_VolumenImporte := VolumenImporte;
    TROSerializer(ASerializer).ReadAnsiString('VolumenImporte', l_VolumenImporte);
    VolumenImporte := l_VolumenImporte;
    l_AutorizacionMN := AutorizacionMN;
    TROSerializer(ASerializer).ReadDouble('AutorizacionMN', ftDouble, l_AutorizacionMN);
    AutorizacionMN := l_AutorizacionMN;
    l_AutorizacionLT := AutorizacionLT;
    TROSerializer(ASerializer).ReadDouble('AutorizacionLT', ftDouble, l_AutorizacionLT);
    AutorizacionLT := l_AutorizacionLT;
    l_StatusID := StatusID;
    TROSerializer(ASerializer).ReadInteger('StatusID', otSLong, l_StatusID);
    StatusID := l_StatusID;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
  end
  else begin
    l_AcumuladoMNMes := AcumuladoMNMes;
    TROSerializer(ASerializer).ReadDouble('AcumuladoMNMes', ftDouble, l_AcumuladoMNMes);
    AcumuladoMNMes := l_AcumuladoMNMes;
    l_AutorizacionLT := AutorizacionLT;
    TROSerializer(ASerializer).ReadDouble('AutorizacionLT', ftDouble, l_AutorizacionLT);
    AutorizacionLT := l_AutorizacionLT;
    l_AutorizacionMN := AutorizacionMN;
    TROSerializer(ASerializer).ReadDouble('AutorizacionMN', ftDouble, l_AutorizacionMN);
    AutorizacionMN := l_AutorizacionMN;
    l_Autorizada := Autorizada;
    TROSerializer(ASerializer).ReadEnumerated('Autorizada',TypeInfo(boolean), l_Autorizada);
    Autorizada := l_Autorizada;
    l_Ciudad := Ciudad;
    TROSerializer(ASerializer).ReadAnsiString('Ciudad', l_Ciudad);
    Ciudad := l_Ciudad;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Colonia := Colonia;
    TROSerializer(ASerializer).ReadAnsiString('Colonia', l_Colonia);
    Colonia := l_Colonia;
    l_Domicilio := Domicilio;
    TROSerializer(ASerializer).ReadAnsiString('Domicilio', l_Domicilio);
    Domicilio := l_Domicilio;
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).ReadAnsiString('Identificacion', l_Identificacion);
    Identificacion := l_Identificacion;
    l_KMS := KMS;
    TROSerializer(ASerializer).ReadInteger('KMS', otSLong, l_KMS);
    KMS := l_KMS;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_NIP := NIP;
    TROSerializer(ASerializer).ReadInteger('NIP', otSLong, l_NIP);
    NIP := l_NIP;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).ReadAnsiString('RazonSocial', l_RazonSocial);
    RazonSocial := l_RazonSocial;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_StatusID := StatusID;
    TROSerializer(ASerializer).ReadInteger('StatusID', otSLong, l_StatusID);
    StatusID := l_StatusID;
    l_Usuario := Usuario;
    TROSerializer(ASerializer).ReadAnsiString('Usuario', l_Usuario);
    Usuario := l_Usuario;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_VolumenImporte := VolumenImporte;
    TROSerializer(ASerializer).ReadAnsiString('VolumenImporte', l_VolumenImporte);
    VolumenImporte := l_VolumenImporte;
  end;
end;

procedure TDatosVerifone.WriteComplex(ASerializer: TObject);
var
  l_AcumuladoMNMes: Double;
  l_AutorizacionLT: Double;
  l_AutorizacionMN: Double;
  l_Autorizada: Boolean;
  l_Ciudad: AnsiString;
  l_ClienteID: Integer;
  l_Colonia: AnsiString;
  l_Domicilio: AnsiString;
  l_Identificacion: AnsiString;
  l_KMS: Integer;
  l_Mensaje: AnsiString;
  l_NIP: Integer;
  l_Nombre: AnsiString;
  l_RazonSocial: AnsiString;
  l_Referencia: AnsiString;
  l_RFC: AnsiString;
  l_StatusID: Integer;
  l_Usuario: AnsiString;
  l_VehiculoID: Integer;
  l_VolumenImporte: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosVerifone);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).WriteAnsiString('RazonSocial', l_RazonSocial);
    l_Domicilio := Domicilio;
    TROSerializer(ASerializer).WriteAnsiString('Domicilio', l_Domicilio);
    l_Colonia := Colonia;
    TROSerializer(ASerializer).WriteAnsiString('Colonia', l_Colonia);
    l_Ciudad := Ciudad;
    TROSerializer(ASerializer).WriteAnsiString('Ciudad', l_Ciudad);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_NIP := NIP;
    TROSerializer(ASerializer).WriteInteger('NIP', otSLong, l_NIP);
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).WriteAnsiString('Identificacion', l_Identificacion);
    l_Usuario := Usuario;
    TROSerializer(ASerializer).WriteAnsiString('Usuario', l_Usuario);
    l_AcumuladoMNMes := AcumuladoMNMes;
    TROSerializer(ASerializer).WriteDouble('AcumuladoMNMes', ftDouble, l_AcumuladoMNMes);
    l_KMS := KMS;
    TROSerializer(ASerializer).WriteInteger('KMS', otSLong, l_KMS);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Autorizada := Autorizada;
    TROSerializer(ASerializer).WriteEnumerated('Autorizada',TypeInfo(boolean), l_Autorizada);
    l_VolumenImporte := VolumenImporte;
    TROSerializer(ASerializer).WriteAnsiString('VolumenImporte', l_VolumenImporte);
    l_AutorizacionMN := AutorizacionMN;
    TROSerializer(ASerializer).WriteDouble('AutorizacionMN', ftDouble, l_AutorizacionMN);
    l_AutorizacionLT := AutorizacionLT;
    TROSerializer(ASerializer).WriteDouble('AutorizacionLT', ftDouble, l_AutorizacionLT);
    l_StatusID := StatusID;
    TROSerializer(ASerializer).WriteInteger('StatusID', otSLong, l_StatusID);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
  end
  else begin
    l_AcumuladoMNMes := AcumuladoMNMes;
    TROSerializer(ASerializer).WriteDouble('AcumuladoMNMes', ftDouble, l_AcumuladoMNMes);
    l_AutorizacionLT := AutorizacionLT;
    TROSerializer(ASerializer).WriteDouble('AutorizacionLT', ftDouble, l_AutorizacionLT);
    l_AutorizacionMN := AutorizacionMN;
    TROSerializer(ASerializer).WriteDouble('AutorizacionMN', ftDouble, l_AutorizacionMN);
    l_Autorizada := Autorizada;
    TROSerializer(ASerializer).WriteEnumerated('Autorizada',TypeInfo(boolean), l_Autorizada);
    l_Ciudad := Ciudad;
    TROSerializer(ASerializer).WriteAnsiString('Ciudad', l_Ciudad);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Colonia := Colonia;
    TROSerializer(ASerializer).WriteAnsiString('Colonia', l_Colonia);
    l_Domicilio := Domicilio;
    TROSerializer(ASerializer).WriteAnsiString('Domicilio', l_Domicilio);
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).WriteAnsiString('Identificacion', l_Identificacion);
    l_KMS := KMS;
    TROSerializer(ASerializer).WriteInteger('KMS', otSLong, l_KMS);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_NIP := NIP;
    TROSerializer(ASerializer).WriteInteger('NIP', otSLong, l_NIP);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).WriteAnsiString('RazonSocial', l_RazonSocial);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_StatusID := StatusID;
    TROSerializer(ASerializer).WriteInteger('StatusID', otSLong, l_StatusID);
    l_Usuario := Usuario;
    TROSerializer(ASerializer).WriteAnsiString('Usuario', l_Usuario);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_VolumenImporte := VolumenImporte;
    TROSerializer(ASerializer).WriteAnsiString('VolumenImporte', l_VolumenImporte);
  end;
end;

{ TDatosVerifoneCollection }
constructor TDatosVerifoneCollection.Create;
begin
  inherited Create(TDatosVerifone);
end;

constructor TDatosVerifoneCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosVerifoneCollection.Add: TDatosVerifone;
begin
  result := TDatosVerifone(inherited Add);
end;

function TDatosVerifoneCollection.GetItems(aIndex: integer): TDatosVerifone;
begin
  result := TDatosVerifone(inherited Items[aIndex]);
end;

procedure TDatosVerifoneCollection.SetItems(aIndex: integer; const Value: TDatosVerifone);
begin
  TDatosVerifone(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosSagarpa }

procedure TDatosSagarpa.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TDatosSagarpa;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TDatosSagarpa) then begin
    lSource := LibraryCistemGas_Intf.TDatosSagarpa(iSource);
    Ticket := lSource.Ticket;
    BombaID := lSource.BombaID;
    SagarpaCliente := lSource.SagarpaCliente;
    SagarpaImporte := lSource.SagarpaImporte;
    SagarpaReferencia := lSource.SagarpaReferencia;
    PemexCliente := lSource.PemexCliente;
    PemexImporte := lSource.PemexImporte;
    PemexReferencia := lSource.PemexReferencia;
    CreditoCliente := lSource.CreditoCliente;
    CreditoImporte := lSource.CreditoImporte;
    CreditoReferencia := lSource.CreditoReferencia;
    VoucherCliente := lSource.VoucherCliente;
    VoucherImporte := lSource.VoucherImporte;
  end;
end;

procedure TDatosSagarpa.ReadComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_CreditoCliente: Integer;
  l_CreditoImporte: Double;
  l_CreditoReferencia: AnsiString;
  l_PemexCliente: Integer;
  l_PemexImporte: Double;
  l_PemexReferencia: AnsiString;
  l_SagarpaCliente: Integer;
  l_SagarpaImporte: Double;
  l_SagarpaReferencia: AnsiString;
  l_Ticket: Integer;
  l_VoucherCliente: Integer;
  l_VoucherImporte: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Ticket := Ticket;
    TROSerializer(ASerializer).ReadInteger('Ticket', otSLong, l_Ticket);
    Ticket := l_Ticket;
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_SagarpaCliente := SagarpaCliente;
    TROSerializer(ASerializer).ReadInteger('SagarpaCliente', otSLong, l_SagarpaCliente);
    SagarpaCliente := l_SagarpaCliente;
    l_SagarpaImporte := SagarpaImporte;
    TROSerializer(ASerializer).ReadDouble('SagarpaImporte', ftDouble, l_SagarpaImporte);
    SagarpaImporte := l_SagarpaImporte;
    l_SagarpaReferencia := SagarpaReferencia;
    TROSerializer(ASerializer).ReadAnsiString('SagarpaReferencia', l_SagarpaReferencia);
    SagarpaReferencia := l_SagarpaReferencia;
    l_PemexCliente := PemexCliente;
    TROSerializer(ASerializer).ReadInteger('PemexCliente', otSLong, l_PemexCliente);
    PemexCliente := l_PemexCliente;
    l_PemexImporte := PemexImporte;
    TROSerializer(ASerializer).ReadDouble('PemexImporte', ftDouble, l_PemexImporte);
    PemexImporte := l_PemexImporte;
    l_PemexReferencia := PemexReferencia;
    TROSerializer(ASerializer).ReadAnsiString('PemexReferencia', l_PemexReferencia);
    PemexReferencia := l_PemexReferencia;
    l_CreditoCliente := CreditoCliente;
    TROSerializer(ASerializer).ReadInteger('CreditoCliente', otSLong, l_CreditoCliente);
    CreditoCliente := l_CreditoCliente;
    l_CreditoImporte := CreditoImporte;
    TROSerializer(ASerializer).ReadDouble('CreditoImporte', ftDouble, l_CreditoImporte);
    CreditoImporte := l_CreditoImporte;
    l_CreditoReferencia := CreditoReferencia;
    TROSerializer(ASerializer).ReadAnsiString('CreditoReferencia', l_CreditoReferencia);
    CreditoReferencia := l_CreditoReferencia;
    l_VoucherCliente := VoucherCliente;
    TROSerializer(ASerializer).ReadInteger('VoucherCliente', otSLong, l_VoucherCliente);
    VoucherCliente := l_VoucherCliente;
    l_VoucherImporte := VoucherImporte;
    TROSerializer(ASerializer).ReadDouble('VoucherImporte', ftDouble, l_VoucherImporte);
    VoucherImporte := l_VoucherImporte;
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_CreditoCliente := CreditoCliente;
    TROSerializer(ASerializer).ReadInteger('CreditoCliente', otSLong, l_CreditoCliente);
    CreditoCliente := l_CreditoCliente;
    l_CreditoImporte := CreditoImporte;
    TROSerializer(ASerializer).ReadDouble('CreditoImporte', ftDouble, l_CreditoImporte);
    CreditoImporte := l_CreditoImporte;
    l_CreditoReferencia := CreditoReferencia;
    TROSerializer(ASerializer).ReadAnsiString('CreditoReferencia', l_CreditoReferencia);
    CreditoReferencia := l_CreditoReferencia;
    l_PemexCliente := PemexCliente;
    TROSerializer(ASerializer).ReadInteger('PemexCliente', otSLong, l_PemexCliente);
    PemexCliente := l_PemexCliente;
    l_PemexImporte := PemexImporte;
    TROSerializer(ASerializer).ReadDouble('PemexImporte', ftDouble, l_PemexImporte);
    PemexImporte := l_PemexImporte;
    l_PemexReferencia := PemexReferencia;
    TROSerializer(ASerializer).ReadAnsiString('PemexReferencia', l_PemexReferencia);
    PemexReferencia := l_PemexReferencia;
    l_SagarpaCliente := SagarpaCliente;
    TROSerializer(ASerializer).ReadInteger('SagarpaCliente', otSLong, l_SagarpaCliente);
    SagarpaCliente := l_SagarpaCliente;
    l_SagarpaImporte := SagarpaImporte;
    TROSerializer(ASerializer).ReadDouble('SagarpaImporte', ftDouble, l_SagarpaImporte);
    SagarpaImporte := l_SagarpaImporte;
    l_SagarpaReferencia := SagarpaReferencia;
    TROSerializer(ASerializer).ReadAnsiString('SagarpaReferencia', l_SagarpaReferencia);
    SagarpaReferencia := l_SagarpaReferencia;
    l_Ticket := Ticket;
    TROSerializer(ASerializer).ReadInteger('Ticket', otSLong, l_Ticket);
    Ticket := l_Ticket;
    l_VoucherCliente := VoucherCliente;
    TROSerializer(ASerializer).ReadInteger('VoucherCliente', otSLong, l_VoucherCliente);
    VoucherCliente := l_VoucherCliente;
    l_VoucherImporte := VoucherImporte;
    TROSerializer(ASerializer).ReadDouble('VoucherImporte', ftDouble, l_VoucherImporte);
    VoucherImporte := l_VoucherImporte;
  end;
end;

procedure TDatosSagarpa.WriteComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_CreditoCliente: Integer;
  l_CreditoImporte: Double;
  l_CreditoReferencia: AnsiString;
  l_PemexCliente: Integer;
  l_PemexImporte: Double;
  l_PemexReferencia: AnsiString;
  l_SagarpaCliente: Integer;
  l_SagarpaImporte: Double;
  l_SagarpaReferencia: AnsiString;
  l_Ticket: Integer;
  l_VoucherCliente: Integer;
  l_VoucherImporte: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosSagarpa);
    l_Ticket := Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', otSLong, l_Ticket);
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_SagarpaCliente := SagarpaCliente;
    TROSerializer(ASerializer).WriteInteger('SagarpaCliente', otSLong, l_SagarpaCliente);
    l_SagarpaImporte := SagarpaImporte;
    TROSerializer(ASerializer).WriteDouble('SagarpaImporte', ftDouble, l_SagarpaImporte);
    l_SagarpaReferencia := SagarpaReferencia;
    TROSerializer(ASerializer).WriteAnsiString('SagarpaReferencia', l_SagarpaReferencia);
    l_PemexCliente := PemexCliente;
    TROSerializer(ASerializer).WriteInteger('PemexCliente', otSLong, l_PemexCliente);
    l_PemexImporte := PemexImporte;
    TROSerializer(ASerializer).WriteDouble('PemexImporte', ftDouble, l_PemexImporte);
    l_PemexReferencia := PemexReferencia;
    TROSerializer(ASerializer).WriteAnsiString('PemexReferencia', l_PemexReferencia);
    l_CreditoCliente := CreditoCliente;
    TROSerializer(ASerializer).WriteInteger('CreditoCliente', otSLong, l_CreditoCliente);
    l_CreditoImporte := CreditoImporte;
    TROSerializer(ASerializer).WriteDouble('CreditoImporte', ftDouble, l_CreditoImporte);
    l_CreditoReferencia := CreditoReferencia;
    TROSerializer(ASerializer).WriteAnsiString('CreditoReferencia', l_CreditoReferencia);
    l_VoucherCliente := VoucherCliente;
    TROSerializer(ASerializer).WriteInteger('VoucherCliente', otSLong, l_VoucherCliente);
    l_VoucherImporte := VoucherImporte;
    TROSerializer(ASerializer).WriteDouble('VoucherImporte', ftDouble, l_VoucherImporte);
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_CreditoCliente := CreditoCliente;
    TROSerializer(ASerializer).WriteInteger('CreditoCliente', otSLong, l_CreditoCliente);
    l_CreditoImporte := CreditoImporte;
    TROSerializer(ASerializer).WriteDouble('CreditoImporte', ftDouble, l_CreditoImporte);
    l_CreditoReferencia := CreditoReferencia;
    TROSerializer(ASerializer).WriteAnsiString('CreditoReferencia', l_CreditoReferencia);
    l_PemexCliente := PemexCliente;
    TROSerializer(ASerializer).WriteInteger('PemexCliente', otSLong, l_PemexCliente);
    l_PemexImporte := PemexImporte;
    TROSerializer(ASerializer).WriteDouble('PemexImporte', ftDouble, l_PemexImporte);
    l_PemexReferencia := PemexReferencia;
    TROSerializer(ASerializer).WriteAnsiString('PemexReferencia', l_PemexReferencia);
    l_SagarpaCliente := SagarpaCliente;
    TROSerializer(ASerializer).WriteInteger('SagarpaCliente', otSLong, l_SagarpaCliente);
    l_SagarpaImporte := SagarpaImporte;
    TROSerializer(ASerializer).WriteDouble('SagarpaImporte', ftDouble, l_SagarpaImporte);
    l_SagarpaReferencia := SagarpaReferencia;
    TROSerializer(ASerializer).WriteAnsiString('SagarpaReferencia', l_SagarpaReferencia);
    l_Ticket := Ticket;
    TROSerializer(ASerializer).WriteInteger('Ticket', otSLong, l_Ticket);
    l_VoucherCliente := VoucherCliente;
    TROSerializer(ASerializer).WriteInteger('VoucherCliente', otSLong, l_VoucherCliente);
    l_VoucherImporte := VoucherImporte;
    TROSerializer(ASerializer).WriteDouble('VoucherImporte', ftDouble, l_VoucherImporte);
  end;
end;

{ TDatosSagarpaCollection }
constructor TDatosSagarpaCollection.Create;
begin
  inherited Create(TDatosSagarpa);
end;

constructor TDatosSagarpaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosSagarpaCollection.Add: TDatosSagarpa;
begin
  result := TDatosSagarpa(inherited Add);
end;

function TDatosSagarpaCollection.GetItems(aIndex: integer): TDatosSagarpa;
begin
  result := TDatosSagarpa(inherited Items[aIndex]);
end;

procedure TDatosSagarpaCollection.SetItems(aIndex: integer; const Value: TDatosSagarpa);
begin
  TDatosSagarpa(inherited Items[aIndex]).Assign(Value);
end;

{ TFechas }

procedure TFechas.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TFechas;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TFechas) then begin
    lSource := LibraryCistemGas_Intf.TFechas(iSource);
    FechaINI := lSource.FechaINI;
    FechaFIN := lSource.FechaFIN;
  end;
end;

procedure TFechas.ReadComplex(ASerializer: TObject);
var
  l_FechaFIN: DateTime;
  l_FechaINI: DateTime;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FechaINI := FechaINI;
    TROSerializer(ASerializer).ReadDateTime('FechaINI', l_FechaINI);
    FechaINI := l_FechaINI;
    l_FechaFIN := FechaFIN;
    TROSerializer(ASerializer).ReadDateTime('FechaFIN', l_FechaFIN);
    FechaFIN := l_FechaFIN;
  end
  else begin
    l_FechaFIN := FechaFIN;
    TROSerializer(ASerializer).ReadDateTime('FechaFIN', l_FechaFIN);
    FechaFIN := l_FechaFIN;
    l_FechaINI := FechaINI;
    TROSerializer(ASerializer).ReadDateTime('FechaINI', l_FechaINI);
    FechaINI := l_FechaINI;
  end;
end;

procedure TFechas.WriteComplex(ASerializer: TObject);
var
  l_FechaFIN: DateTime;
  l_FechaINI: DateTime;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFechas);
    l_FechaINI := FechaINI;
    TROSerializer(ASerializer).WriteDateTime('FechaINI', l_FechaINI);
    l_FechaFIN := FechaFIN;
    TROSerializer(ASerializer).WriteDateTime('FechaFIN', l_FechaFIN);
  end
  else begin
    l_FechaFIN := FechaFIN;
    TROSerializer(ASerializer).WriteDateTime('FechaFIN', l_FechaFIN);
    l_FechaINI := FechaINI;
    TROSerializer(ASerializer).WriteDateTime('FechaINI', l_FechaINI);
  end;
end;

{ TFechasCollection }
constructor TFechasCollection.Create;
begin
  inherited Create(TFechas);
end;

constructor TFechasCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFechasCollection.Add: TFechas;
begin
  result := TFechas(inherited Add);
end;

function TFechasCollection.GetItems(aIndex: integer): TFechas;
begin
  result := TFechas(inherited Items[aIndex]);
end;

procedure TFechasCollection.SetItems(aIndex: integer; const Value: TFechas);
begin
  TFechas(inherited Items[aIndex]).Assign(Value);
end;

{ TInsertaOtros }

procedure TInsertaOtros.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TInsertaOtros;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TInsertaOtros) then begin
    lSource := LibraryCistemGas_Intf.TInsertaOtros(iSource);
    ID := lSource.ID;
    Serie := lSource.Serie;
    Fecha := lSource.Fecha;
    Referencia := lSource.Referencia;
    Volumen := lSource.Volumen;
    Precio := lSource.Precio;
    Importe := lSource.Importe;
    BombaID := lSource.BombaID;
    ProductoID := lSource.ProductoID;
    TipoID := lSource.TipoID;
    ClienteID := lSource.ClienteID;
    VehiculoID := lSource.VehiculoID;
    TurnoID := lSource.TurnoID;
    TarjetaYCupon := lSource.TarjetaYCupon;
  end;
end;

procedure TInsertaOtros.ReadComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_ClienteID: Integer;
  l_Fecha: DateTime;
  l_ID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_Referencia: AnsiString;
  l_Serie: AnsiString;
  l_TarjetaYCupon: Boolean;
  l_TipoID: Integer;
  l_TurnoID: Integer;
  l_VehiculoID: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ID := ID;
    TROSerializer(ASerializer).ReadInteger('ID', otSLong, l_ID);
    ID := l_ID;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_TipoID := TipoID;
    TROSerializer(ASerializer).ReadInteger('TipoID', otSLong, l_TipoID);
    TipoID := l_TipoID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
    l_TarjetaYCupon := TarjetaYCupon;
    TROSerializer(ASerializer).ReadEnumerated('TarjetaYCupon',TypeInfo(boolean), l_TarjetaYCupon);
    TarjetaYCupon := l_TarjetaYCupon;
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_ID := ID;
    TROSerializer(ASerializer).ReadInteger('ID', otSLong, l_ID);
    ID := l_ID;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_TarjetaYCupon := TarjetaYCupon;
    TROSerializer(ASerializer).ReadEnumerated('TarjetaYCupon',TypeInfo(boolean), l_TarjetaYCupon);
    TarjetaYCupon := l_TarjetaYCupon;
    l_TipoID := TipoID;
    TROSerializer(ASerializer).ReadInteger('TipoID', otSLong, l_TipoID);
    TipoID := l_TipoID;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
  end;
end;

procedure TInsertaOtros.WriteComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_ClienteID: Integer;
  l_Fecha: DateTime;
  l_ID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_Referencia: AnsiString;
  l_Serie: AnsiString;
  l_TarjetaYCupon: Boolean;
  l_TipoID: Integer;
  l_TurnoID: Integer;
  l_VehiculoID: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TInsertaOtros);
    l_ID := ID;
    TROSerializer(ASerializer).WriteInteger('ID', otSLong, l_ID);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_TipoID := TipoID;
    TROSerializer(ASerializer).WriteInteger('TipoID', otSLong, l_TipoID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
    l_TarjetaYCupon := TarjetaYCupon;
    TROSerializer(ASerializer).WriteEnumerated('TarjetaYCupon',TypeInfo(boolean), l_TarjetaYCupon);
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_ID := ID;
    TROSerializer(ASerializer).WriteInteger('ID', otSLong, l_ID);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_TarjetaYCupon := TarjetaYCupon;
    TROSerializer(ASerializer).WriteEnumerated('TarjetaYCupon',TypeInfo(boolean), l_TarjetaYCupon);
    l_TipoID := TipoID;
    TROSerializer(ASerializer).WriteInteger('TipoID', otSLong, l_TipoID);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
  end;
end;

{ TInsertaOtrosCollection }
constructor TInsertaOtrosCollection.Create;
begin
  inherited Create(TInsertaOtros);
end;

constructor TInsertaOtrosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TInsertaOtrosCollection.Add: TInsertaOtros;
begin
  result := TInsertaOtros(inherited Add);
end;

function TInsertaOtrosCollection.GetItems(aIndex: integer): TInsertaOtros;
begin
  result := TInsertaOtros(inherited Items[aIndex]);
end;

procedure TInsertaOtrosCollection.SetItems(aIndex: integer; const Value: TInsertaOtros);
begin
  TInsertaOtros(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosEntregaPremio }

procedure TDatosEntregaPremio.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TDatosEntregaPremio;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TDatosEntregaPremio) then begin
    lSource := LibraryCistemGas_Intf.TDatosEntregaPremio(iSource);
    ClienteID := lSource.ClienteID;
    Nombre := lSource.Nombre;
    Referencia := lSource.Referencia;
    Saldo := lSource.Saldo;
  end;
end;

procedure TDatosEntregaPremio.ReadComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Nombre: AnsiString;
  l_Referencia: AnsiString;
  l_Saldo: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
  end;
end;

procedure TDatosEntregaPremio.WriteComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Nombre: AnsiString;
  l_Referencia: AnsiString;
  l_Saldo: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosEntregaPremio);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
  end;
end;

{ TDatosEntregaPremioCollection }
constructor TDatosEntregaPremioCollection.Create;
begin
  inherited Create(TDatosEntregaPremio);
end;

constructor TDatosEntregaPremioCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosEntregaPremioCollection.Add: TDatosEntregaPremio;
begin
  result := TDatosEntregaPremio(inherited Add);
end;

function TDatosEntregaPremioCollection.GetItems(aIndex: integer): TDatosEntregaPremio;
begin
  result := TDatosEntregaPremio(inherited Items[aIndex]);
end;

procedure TDatosEntregaPremioCollection.SetItems(aIndex: integer; const Value: TDatosEntregaPremio);
begin
  TDatosEntregaPremio(inherited Items[aIndex]).Assign(Value);
end;

{ TPremio }

procedure TPremio.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TPremio;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TPremio) then begin
    lSource := LibraryCistemGas_Intf.TPremio(iSource);
    PremioID := lSource.PremioID;
    Nombre := lSource.Nombre;
    Puntos := lSource.Puntos;
  end;
end;

procedure TPremio.ReadComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_PremioID: Integer;
  l_Puntos: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_PremioID := PremioID;
    TROSerializer(ASerializer).ReadInteger('PremioID', otSLong, l_PremioID);
    PremioID := l_PremioID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Puntos := Puntos;
    TROSerializer(ASerializer).ReadDouble('Puntos', ftDouble, l_Puntos);
    Puntos := l_Puntos;
  end
  else begin
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_PremioID := PremioID;
    TROSerializer(ASerializer).ReadInteger('PremioID', otSLong, l_PremioID);
    PremioID := l_PremioID;
    l_Puntos := Puntos;
    TROSerializer(ASerializer).ReadDouble('Puntos', ftDouble, l_Puntos);
    Puntos := l_Puntos;
  end;
end;

procedure TPremio.WriteComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_PremioID: Integer;
  l_Puntos: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TPremio);
    l_PremioID := PremioID;
    TROSerializer(ASerializer).WriteInteger('PremioID', otSLong, l_PremioID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Puntos := Puntos;
    TROSerializer(ASerializer).WriteDouble('Puntos', ftDouble, l_Puntos);
  end
  else begin
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_PremioID := PremioID;
    TROSerializer(ASerializer).WriteInteger('PremioID', otSLong, l_PremioID);
    l_Puntos := Puntos;
    TROSerializer(ASerializer).WriteDouble('Puntos', ftDouble, l_Puntos);
  end;
end;

{ TPremioCollection }
constructor TPremioCollection.Create;
begin
  inherited Create(TPremio);
end;

constructor TPremioCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TPremioCollection.Add: TPremio;
begin
  result := TPremio(inherited Add);
end;

function TPremioCollection.GetItems(aIndex: integer): TPremio;
begin
  result := TPremio(inherited Items[aIndex]);
end;

procedure TPremioCollection.SetItems(aIndex: integer; const Value: TPremio);
begin
  TPremio(inherited Items[aIndex]).Assign(Value);
end;

{ TPremioEntregado }

procedure TPremioEntregado.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TPremioEntregado;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TPremioEntregado) then begin
    lSource := LibraryCistemGas_Intf.TPremioEntregado(iSource);
    ClienteID := lSource.ClienteID;
    Cliente := lSource.Cliente;
    Premio := lSource.Premio;
    Cantidad := lSource.Cantidad;
    Puntos := lSource.Puntos;
    Saldo := lSource.Saldo;
    Mensaje := lSource.Mensaje;
    Valido := lSource.Valido;
  end;
end;

procedure TPremioEntregado.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Integer;
  l_Cliente: AnsiString;
  l_ClienteID: Integer;
  l_Mensaje: AnsiString;
  l_Premio: AnsiString;
  l_Puntos: Double;
  l_Saldo: Double;
  l_Valido: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Cliente := Cliente;
    TROSerializer(ASerializer).ReadAnsiString('Cliente', l_Cliente);
    Cliente := l_Cliente;
    l_Premio := Premio;
    TROSerializer(ASerializer).ReadAnsiString('Premio', l_Premio);
    Premio := l_Premio;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadInteger('Cantidad', otSLong, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Puntos := Puntos;
    TROSerializer(ASerializer).ReadDouble('Puntos', ftDouble, l_Puntos);
    Puntos := l_Puntos;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_Valido := Valido;
    TROSerializer(ASerializer).ReadEnumerated('Valido',TypeInfo(boolean), l_Valido);
    Valido := l_Valido;
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadInteger('Cantidad', otSLong, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Cliente := Cliente;
    TROSerializer(ASerializer).ReadAnsiString('Cliente', l_Cliente);
    Cliente := l_Cliente;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_Premio := Premio;
    TROSerializer(ASerializer).ReadAnsiString('Premio', l_Premio);
    Premio := l_Premio;
    l_Puntos := Puntos;
    TROSerializer(ASerializer).ReadDouble('Puntos', ftDouble, l_Puntos);
    Puntos := l_Puntos;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_Valido := Valido;
    TROSerializer(ASerializer).ReadEnumerated('Valido',TypeInfo(boolean), l_Valido);
    Valido := l_Valido;
  end;
end;

procedure TPremioEntregado.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Integer;
  l_Cliente: AnsiString;
  l_ClienteID: Integer;
  l_Mensaje: AnsiString;
  l_Premio: AnsiString;
  l_Puntos: Double;
  l_Saldo: Double;
  l_Valido: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TPremioEntregado);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Cliente := Cliente;
    TROSerializer(ASerializer).WriteAnsiString('Cliente', l_Cliente);
    l_Premio := Premio;
    TROSerializer(ASerializer).WriteAnsiString('Premio', l_Premio);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteInteger('Cantidad', otSLong, l_Cantidad);
    l_Puntos := Puntos;
    TROSerializer(ASerializer).WriteDouble('Puntos', ftDouble, l_Puntos);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_Valido := Valido;
    TROSerializer(ASerializer).WriteEnumerated('Valido',TypeInfo(boolean), l_Valido);
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteInteger('Cantidad', otSLong, l_Cantidad);
    l_Cliente := Cliente;
    TROSerializer(ASerializer).WriteAnsiString('Cliente', l_Cliente);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_Premio := Premio;
    TROSerializer(ASerializer).WriteAnsiString('Premio', l_Premio);
    l_Puntos := Puntos;
    TROSerializer(ASerializer).WriteDouble('Puntos', ftDouble, l_Puntos);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_Valido := Valido;
    TROSerializer(ASerializer).WriteEnumerated('Valido',TypeInfo(boolean), l_Valido);
  end;
end;

{ TPremioEntregadoCollection }
constructor TPremioEntregadoCollection.Create;
begin
  inherited Create(TPremioEntregado);
end;

constructor TPremioEntregadoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TPremioEntregadoCollection.Add: TPremioEntregado;
begin
  result := TPremioEntregado(inherited Add);
end;

function TPremioEntregadoCollection.GetItems(aIndex: integer): TPremioEntregado;
begin
  result := TPremioEntregado(inherited Items[aIndex]);
end;

procedure TPremioEntregadoCollection.SetItems(aIndex: integer; const Value: TPremioEntregado);
begin
  TPremioEntregado(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosBomba }

procedure TDatosBomba.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TDatosBomba;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TDatosBomba) then begin
    lSource := LibraryCistemGas_Intf.TDatosBomba(iSource);
    BombaID := lSource.BombaID;
    Minimo := lSource.Minimo;
    Maximo := lSource.Maximo;
    Externo := lSource.Externo;
  end;
end;

procedure TDatosBomba.ReadComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_Externo: Integer;
  l_Maximo: Integer;
  l_Minimo: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_Minimo := Minimo;
    TROSerializer(ASerializer).ReadInteger('Minimo', otSLong, l_Minimo);
    Minimo := l_Minimo;
    l_Maximo := Maximo;
    TROSerializer(ASerializer).ReadInteger('Maximo', otSLong, l_Maximo);
    Maximo := l_Maximo;
    l_Externo := Externo;
    TROSerializer(ASerializer).ReadInteger('Externo', otSLong, l_Externo);
    Externo := l_Externo;
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_Externo := Externo;
    TROSerializer(ASerializer).ReadInteger('Externo', otSLong, l_Externo);
    Externo := l_Externo;
    l_Maximo := Maximo;
    TROSerializer(ASerializer).ReadInteger('Maximo', otSLong, l_Maximo);
    Maximo := l_Maximo;
    l_Minimo := Minimo;
    TROSerializer(ASerializer).ReadInteger('Minimo', otSLong, l_Minimo);
    Minimo := l_Minimo;
  end;
end;

procedure TDatosBomba.WriteComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_Externo: Integer;
  l_Maximo: Integer;
  l_Minimo: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosBomba);
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_Minimo := Minimo;
    TROSerializer(ASerializer).WriteInteger('Minimo', otSLong, l_Minimo);
    l_Maximo := Maximo;
    TROSerializer(ASerializer).WriteInteger('Maximo', otSLong, l_Maximo);
    l_Externo := Externo;
    TROSerializer(ASerializer).WriteInteger('Externo', otSLong, l_Externo);
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_Externo := Externo;
    TROSerializer(ASerializer).WriteInteger('Externo', otSLong, l_Externo);
    l_Maximo := Maximo;
    TROSerializer(ASerializer).WriteInteger('Maximo', otSLong, l_Maximo);
    l_Minimo := Minimo;
    TROSerializer(ASerializer).WriteInteger('Minimo', otSLong, l_Minimo);
  end;
end;

{ TDatosBombaCollection }
constructor TDatosBombaCollection.Create;
begin
  inherited Create(TDatosBomba);
end;

constructor TDatosBombaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosBombaCollection.Add: TDatosBomba;
begin
  result := TDatosBomba(inherited Add);
end;

function TDatosBombaCollection.GetItems(aIndex: integer): TDatosBomba;
begin
  result := TDatosBomba(inherited Items[aIndex]);
end;

procedure TDatosBombaCollection.LoadFromArray(anArray: ADatosBomba);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDatosBombaCollection.SaveToArray(anArray: ADatosBomba);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDatosBomba.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDatosBombaCollection.SetItems(aIndex: integer; const Value: TDatosBomba);
begin
  TDatosBomba(inherited Items[aIndex]).Assign(Value);
end;

{ TTurnoFecha }

procedure TTurnoFecha.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TTurnoFecha;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TTurnoFecha) then begin
    lSource := LibraryCistemGas_Intf.TTurnoFecha(iSource);
    TurnoID := lSource.TurnoID;
    FechaInicio := lSource.FechaInicio;
    FechaFinal := lSource.FechaFinal;
  end;
end;

procedure TTurnoFecha.ReadComplex(ASerializer: TObject);
var
  l_FechaFinal: DateTime;
  l_FechaInicio: DateTime;
  l_TurnoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
    l_FechaInicio := FechaInicio;
    TROSerializer(ASerializer).ReadDateTime('FechaInicio', l_FechaInicio);
    FechaInicio := l_FechaInicio;
    l_FechaFinal := FechaFinal;
    TROSerializer(ASerializer).ReadDateTime('FechaFinal', l_FechaFinal);
    FechaFinal := l_FechaFinal;
  end
  else begin
    l_FechaFinal := FechaFinal;
    TROSerializer(ASerializer).ReadDateTime('FechaFinal', l_FechaFinal);
    FechaFinal := l_FechaFinal;
    l_FechaInicio := FechaInicio;
    TROSerializer(ASerializer).ReadDateTime('FechaInicio', l_FechaInicio);
    FechaInicio := l_FechaInicio;
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).ReadInteger('TurnoID', otSLong, l_TurnoID);
    TurnoID := l_TurnoID;
  end;
end;

procedure TTurnoFecha.WriteComplex(ASerializer: TObject);
var
  l_FechaFinal: DateTime;
  l_FechaInicio: DateTime;
  l_TurnoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TTurnoFecha);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
    l_FechaInicio := FechaInicio;
    TROSerializer(ASerializer).WriteDateTime('FechaInicio', l_FechaInicio);
    l_FechaFinal := FechaFinal;
    TROSerializer(ASerializer).WriteDateTime('FechaFinal', l_FechaFinal);
  end
  else begin
    l_FechaFinal := FechaFinal;
    TROSerializer(ASerializer).WriteDateTime('FechaFinal', l_FechaFinal);
    l_FechaInicio := FechaInicio;
    TROSerializer(ASerializer).WriteDateTime('FechaInicio', l_FechaInicio);
    l_TurnoID := TurnoID;
    TROSerializer(ASerializer).WriteInteger('TurnoID', otSLong, l_TurnoID);
  end;
end;

{ TTurnoFechaCollection }
constructor TTurnoFechaCollection.Create;
begin
  inherited Create(TTurnoFecha);
end;

constructor TTurnoFechaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TTurnoFechaCollection.Add: TTurnoFecha;
begin
  result := TTurnoFecha(inherited Add);
end;

function TTurnoFechaCollection.GetItems(aIndex: integer): TTurnoFecha;
begin
  result := TTurnoFecha(inherited Items[aIndex]);
end;

procedure TTurnoFechaCollection.SetItems(aIndex: integer; const Value: TTurnoFecha);
begin
  TTurnoFecha(inherited Items[aIndex]).Assign(Value);
end;

{ TCG_TipoCambio }

procedure TCG_TipoCambio.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TCG_TipoCambio;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TCG_TipoCambio) then begin
    lSource := LibraryCistemGas_Intf.TCG_TipoCambio(iSource);
    TipoCambioID := lSource.TipoCambioID;
    TipoCambio := lSource.TipoCambio;
    TramaID := lSource.TramaID;
    ImporteMX := lSource.ImporteMX;
    ImporteUSD := lSource.ImporteUSD;
    EfectivoUSD := lSource.EfectivoUSD;
    CualVenta := lSource.CualVenta;
  end;
end;

procedure TCG_TipoCambio.ReadComplex(ASerializer: TObject);
var
  l_CualVenta: Integer;
  l_EfectivoUSD: Double;
  l_ImporteMX: Double;
  l_ImporteUSD: Double;
  l_TipoCambio: Double;
  l_TipoCambioID: Integer;
  l_TramaID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_TipoCambioID := TipoCambioID;
    TROSerializer(ASerializer).ReadInteger('TipoCambioID', otSLong, l_TipoCambioID);
    TipoCambioID := l_TipoCambioID;
    l_TipoCambio := TipoCambio;
    TROSerializer(ASerializer).ReadDouble('TipoCambio', ftDouble, l_TipoCambio);
    TipoCambio := l_TipoCambio;
    l_TramaID := TramaID;
    TROSerializer(ASerializer).ReadInteger('TramaID', otSLong, l_TramaID);
    TramaID := l_TramaID;
    l_ImporteMX := ImporteMX;
    TROSerializer(ASerializer).ReadDouble('ImporteMX', ftDouble, l_ImporteMX);
    ImporteMX := l_ImporteMX;
    l_ImporteUSD := ImporteUSD;
    TROSerializer(ASerializer).ReadDouble('ImporteUSD', ftDouble, l_ImporteUSD);
    ImporteUSD := l_ImporteUSD;
    l_EfectivoUSD := EfectivoUSD;
    TROSerializer(ASerializer).ReadDouble('EfectivoUSD', ftDouble, l_EfectivoUSD);
    EfectivoUSD := l_EfectivoUSD;
    l_CualVenta := CualVenta;
    TROSerializer(ASerializer).ReadInteger('CualVenta', otSLong, l_CualVenta);
    CualVenta := l_CualVenta;
  end
  else begin
    l_CualVenta := CualVenta;
    TROSerializer(ASerializer).ReadInteger('CualVenta', otSLong, l_CualVenta);
    CualVenta := l_CualVenta;
    l_EfectivoUSD := EfectivoUSD;
    TROSerializer(ASerializer).ReadDouble('EfectivoUSD', ftDouble, l_EfectivoUSD);
    EfectivoUSD := l_EfectivoUSD;
    l_ImporteMX := ImporteMX;
    TROSerializer(ASerializer).ReadDouble('ImporteMX', ftDouble, l_ImporteMX);
    ImporteMX := l_ImporteMX;
    l_ImporteUSD := ImporteUSD;
    TROSerializer(ASerializer).ReadDouble('ImporteUSD', ftDouble, l_ImporteUSD);
    ImporteUSD := l_ImporteUSD;
    l_TipoCambio := TipoCambio;
    TROSerializer(ASerializer).ReadDouble('TipoCambio', ftDouble, l_TipoCambio);
    TipoCambio := l_TipoCambio;
    l_TipoCambioID := TipoCambioID;
    TROSerializer(ASerializer).ReadInteger('TipoCambioID', otSLong, l_TipoCambioID);
    TipoCambioID := l_TipoCambioID;
    l_TramaID := TramaID;
    TROSerializer(ASerializer).ReadInteger('TramaID', otSLong, l_TramaID);
    TramaID := l_TramaID;
  end;
end;

procedure TCG_TipoCambio.WriteComplex(ASerializer: TObject);
var
  l_CualVenta: Integer;
  l_EfectivoUSD: Double;
  l_ImporteMX: Double;
  l_ImporteUSD: Double;
  l_TipoCambio: Double;
  l_TipoCambioID: Integer;
  l_TramaID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TCG_TipoCambio);
    l_TipoCambioID := TipoCambioID;
    TROSerializer(ASerializer).WriteInteger('TipoCambioID', otSLong, l_TipoCambioID);
    l_TipoCambio := TipoCambio;
    TROSerializer(ASerializer).WriteDouble('TipoCambio', ftDouble, l_TipoCambio);
    l_TramaID := TramaID;
    TROSerializer(ASerializer).WriteInteger('TramaID', otSLong, l_TramaID);
    l_ImporteMX := ImporteMX;
    TROSerializer(ASerializer).WriteDouble('ImporteMX', ftDouble, l_ImporteMX);
    l_ImporteUSD := ImporteUSD;
    TROSerializer(ASerializer).WriteDouble('ImporteUSD', ftDouble, l_ImporteUSD);
    l_EfectivoUSD := EfectivoUSD;
    TROSerializer(ASerializer).WriteDouble('EfectivoUSD', ftDouble, l_EfectivoUSD);
    l_CualVenta := CualVenta;
    TROSerializer(ASerializer).WriteInteger('CualVenta', otSLong, l_CualVenta);
  end
  else begin
    l_CualVenta := CualVenta;
    TROSerializer(ASerializer).WriteInteger('CualVenta', otSLong, l_CualVenta);
    l_EfectivoUSD := EfectivoUSD;
    TROSerializer(ASerializer).WriteDouble('EfectivoUSD', ftDouble, l_EfectivoUSD);
    l_ImporteMX := ImporteMX;
    TROSerializer(ASerializer).WriteDouble('ImporteMX', ftDouble, l_ImporteMX);
    l_ImporteUSD := ImporteUSD;
    TROSerializer(ASerializer).WriteDouble('ImporteUSD', ftDouble, l_ImporteUSD);
    l_TipoCambio := TipoCambio;
    TROSerializer(ASerializer).WriteDouble('TipoCambio', ftDouble, l_TipoCambio);
    l_TipoCambioID := TipoCambioID;
    TROSerializer(ASerializer).WriteInteger('TipoCambioID', otSLong, l_TipoCambioID);
    l_TramaID := TramaID;
    TROSerializer(ASerializer).WriteInteger('TramaID', otSLong, l_TramaID);
  end;
end;

{ TCG_TipoCambioCollection }
constructor TCG_TipoCambioCollection.Create;
begin
  inherited Create(TCG_TipoCambio);
end;

constructor TCG_TipoCambioCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TCG_TipoCambioCollection.Add: TCG_TipoCambio;
begin
  result := TCG_TipoCambio(inherited Add);
end;

function TCG_TipoCambioCollection.GetItems(aIndex: integer): TCG_TipoCambio;
begin
  result := TCG_TipoCambio(inherited Items[aIndex]);
end;

procedure TCG_TipoCambioCollection.SetItems(aIndex: integer; const Value: TCG_TipoCambio);
begin
  TCG_TipoCambio(inherited Items[aIndex]).Assign(Value);
end;

{ TCG_Respuesta }

procedure TCG_Respuesta.Assign(iSource: TPersistent); 
var lSource: LibraryCistemGas_Intf.TCG_Respuesta;
begin
  inherited Assign(iSource);
  if (iSource is LibraryCistemGas_Intf.TCG_Respuesta) then begin
    lSource := LibraryCistemGas_Intf.TCG_Respuesta(iSource);
    Accepted := lSource.Accepted;
    Folio := lSource.Folio;
    Mensaje := lSource.Mensaje;
  end;
end;

procedure TCG_Respuesta.ReadComplex(ASerializer: TObject);
var
  l_Accepted: Boolean;
  l_Folio: Integer;
  l_Mensaje: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Accepted := Accepted;
    TROSerializer(ASerializer).ReadEnumerated('Accepted',TypeInfo(boolean), l_Accepted);
    Accepted := l_Accepted;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadInteger('Folio', otSLong, l_Folio);
    Folio := l_Folio;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
  end
  else begin
    l_Accepted := Accepted;
    TROSerializer(ASerializer).ReadEnumerated('Accepted',TypeInfo(boolean), l_Accepted);
    Accepted := l_Accepted;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadInteger('Folio', otSLong, l_Folio);
    Folio := l_Folio;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
  end;
end;

procedure TCG_Respuesta.WriteComplex(ASerializer: TObject);
var
  l_Accepted: Boolean;
  l_Folio: Integer;
  l_Mensaje: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TCG_Respuesta);
    l_Accepted := Accepted;
    TROSerializer(ASerializer).WriteEnumerated('Accepted',TypeInfo(boolean), l_Accepted);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', otSLong, l_Folio);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
  end
  else begin
    l_Accepted := Accepted;
    TROSerializer(ASerializer).WriteEnumerated('Accepted',TypeInfo(boolean), l_Accepted);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', otSLong, l_Folio);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
  end;
end;

{ TCG_RespuestaCollection }
constructor TCG_RespuestaCollection.Create;
begin
  inherited Create(TCG_Respuesta);
end;

constructor TCG_RespuestaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TCG_RespuestaCollection.Add: TCG_Respuesta;
begin
  result := TCG_Respuesta(inherited Add);
end;

function TCG_RespuestaCollection.GetItems(aIndex: integer): TCG_Respuesta;
begin
  result := TCG_Respuesta(inherited Items[aIndex]);
end;

procedure TCG_RespuestaCollection.SetItems(aIndex: integer; const Value: TCG_Respuesta);
begin
  TCG_Respuesta(inherited Items[aIndex]).Assign(Value);
end;

{ CoServiceCistemGas }

class function CoServiceCistemGas.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceCistemGas;
begin
  result := TServiceCistemGas_Proxy.Create(aMessage, aTransportChannel);
end;

{ TServiceCistemGas_Proxy }

function TServiceCistemGas_Proxy.__GetInterfaceName:string;
begin
  result := 'ServiceCistemGas';
end;

function TServiceCistemGas_Proxy.AbreDataSetReportes(const SQL: AnsiString; const Parametros: TParametros): Binary;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'AbreDataSetReportes');
    __Message.Write('SQL', TypeInfo(AnsiString), SQL, []);
    __Message.Write('Parametros', TypeInfo(LibraryCistemGas_Intf.TParametros), Parametros, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Binary), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.AsignaBombas;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'AsignaBombas');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.AsignaDispositivo;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'AsignaDispositivo');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.AsignaFlujo(const Bombas: aBombas): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'AsignaFlujo');
    __Message.Write('Bombas', TypeInfo(LibraryCistemGas_Intf.aBombas), Bombas, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.AsignaProductos;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'AsignaProductos');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.AsignaTanques;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'AsignaTanques');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.AutoCambioPrecio;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'AutoCambioPrecio');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.Bancaria(const SecuenciaVenta: Integer; const Supervisor: AnsiString; const Track1: AnsiString; const Track2: AnsiString; 
                                          const Terminal: AnsiString): TAutorizaBancaria;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'Bancaria');
    __Message.Write('SecuenciaVenta', TypeInfo(Integer), SecuenciaVenta, []);
    __Message.Write('Supervisor', TypeInfo(AnsiString), Supervisor, []);
    __Message.Write('Track1', TypeInfo(AnsiString), Track1, []);
    __Message.Write('Track2', TypeInfo(AnsiString), Track2, []);
    __Message.Write('Terminal', TypeInfo(AnsiString), Terminal, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TAutorizaBancaria), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.BuscaOtrosProductos(const Codigo: AnsiString): TOtros;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'BuscaOtrosProductos');
    __Message.Write('Codigo', TypeInfo(AnsiString), Codigo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TOtros), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.BuscaReporte(const Nombre: AnsiString; const TipoTemplate: Integer): TReporte;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'BuscaReporte');
    __Message.Write('Nombre', TypeInfo(AnsiString), Nombre, []);
    __Message.Write('TipoTemplate', TypeInfo(Integer), TipoTemplate, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TReporte), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.CalculaMermas(const Ini: DateTime; const Fin: DateTime);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'CalculaMermas');
    __Message.Write('Ini', TypeInfo(DateTime), Ini, [paIsDateTime]);
    __Message.Write('Fin', TypeInfo(DateTime), Fin, [paIsDateTime]);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.CambiaEstadoLote(const ArchivoLoteID: Integer; const Status: Integer; const Resultado: AnsiString);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'CambiaEstadoLote');
    __Message.Write('ArchivoLoteID', TypeInfo(Integer), ArchivoLoteID, []);
    __Message.Write('Status', TypeInfo(Integer), Status, []);
    __Message.Write('Resultado', TypeInfo(AnsiString), Resultado, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.CambiaNIP(const Referencia: AnsiString; const NIP: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'CambiaNIP');
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Write('NIP', TypeInfo(Integer), NIP, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.CambiaPrecios;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'CambiaPrecios');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.CambiaTipoVenta(const Secuencia: Integer; const Tipo: AnsiString);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'CambiaTipoVenta');
    __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
    __Message.Write('Tipo', TypeInfo(AnsiString), Tipo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.CambiaVentaConsumoManual(const Secuencia: Integer; const Odometro: Integer; const Referencia: AnsiString): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'CambiaVentaConsumoManual');
    __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
    __Message.Write('Odometro', TypeInfo(Integer), Odometro, []);
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.CancelaGrupo(const BombaID: Integer; const Grupo: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'CancelaGrupo');
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Write('Grupo', TypeInfo(Integer), Grupo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.CashBack(const BombaID: Integer; const Terminal: AnsiString; const Track1: AnsiString; const Track2: AnsiString; 
                                          const LLave: AnsiString; const Importe: Double): TAutorizaBancaria;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'CashBack');
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Write('Terminal', TypeInfo(AnsiString), Terminal, []);
    __Message.Write('Track1', TypeInfo(AnsiString), Track1, []);
    __Message.Write('Track2', TypeInfo(AnsiString), Track2, []);
    __Message.Write('LLave', TypeInfo(AnsiString), LLave, []);
    __Message.Write('Importe', TypeInfo(Double), Importe, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TAutorizaBancaria), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.CierraTurno(const BombaID: Integer; const TurnoID: Integer; const FinLecturas: aLecturas);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'CierraTurno');
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Write('FinLecturas', TypeInfo(LibraryCistemGas_Intf.aLecturas), FinLecturas, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.ContinuarDispensario(const Bomba: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'ContinuarDispensario');
    __Message.Write('Bomba', TypeInfo(Integer), Bomba, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.CortaBomba(const BombaID: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'CortaBomba');
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.CrearLotesArchivos;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'CrearLotesArchivos');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.CreaTurno(const BombaID: Integer; const TurnoID: Integer; const InicioLecturas: aLecturas);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'CreaTurno');
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Write('InicioLecturas', TypeInfo(LibraryCistemGas_Intf.aLecturas), InicioLecturas, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.Datos: TGlobal;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'Datos');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TGlobal), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.DatosBomba(const BombaID: Integer): TBomba;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'DatosBomba');
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TBomba), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.DatosVerifone(const AVehiculoID: Integer; const AReferencia: AnsiString): TDatosVerifone;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'DatosVerifone');
    __Message.Write('AVehiculoID', TypeInfo(Integer), AVehiculoID, []);
    __Message.Write('AReferencia', TypeInfo(AnsiString), AReferencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TDatosVerifone), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.DetenerDispensario(const Bomba: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'DetenerDispensario');
    __Message.Write('Bomba', TypeInfo(Integer), Bomba, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.EntradaBitacora(const Descripcion: AnsiString; const Tipo: eTipoBitacora; const Alerta: Boolean);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'EntradaBitacora');
    __Message.Write('Descripcion', TypeInfo(AnsiString), Descripcion, []);
    __Message.Write('Tipo', TypeInfo(LibraryCistemGas_Intf.eTipoBitacora), Tipo, []);
    __Message.Write('Alerta', TypeInfo(Boolean), Alerta, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.EnviaDatosTanques(const AIndex: Integer; const ATanque: TTanque);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'EnviaDatosTanques');
    __Message.Write('AIndex', TypeInfo(Integer), AIndex, []);
    __Message.Write('ATanque', TypeInfo(LibraryCistemGas_Intf.TTanque), ATanque, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.EstadoDispensario(const Dispensario: Integer; const Estado: AnsiString);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'EstadoDispensario');
    __Message.Write('Dispensario', TypeInfo(Integer), Dispensario, []);
    __Message.Write('Estado', TypeInfo(AnsiString), Estado, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.EstadoTanque(const Tanque: Integer; const Estado: AnsiString; const AIndex: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'EstadoTanque');
    __Message.Write('Tanque', TypeInfo(Integer), Tanque, []);
    __Message.Write('Estado', TypeInfo(AnsiString), Estado, []);
    __Message.Write('AIndex', TypeInfo(Integer), AIndex, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.ExpressManual(const ClienteID: Integer; const GasolineroID: Integer): TDatosExpress;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'ExpressManual');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('GasolineroID', TypeInfo(Integer), GasolineroID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TDatosExpress), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.FacturaExpress(const Gasolinero: Integer; const Cliente: Integer; const Serie: AnsiString; const MiTicket: Integer; 
                                                const Host: AnsiString): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'FacturaExpress');
    __Message.Write('Gasolinero', TypeInfo(Integer), Gasolinero, []);
    __Message.Write('Cliente', TypeInfo(Integer), Cliente, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('MiTicket', TypeInfo(Integer), MiTicket, []);
    __Message.Write('Host', TypeInfo(AnsiString), Host, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.Fecha: DateTime;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'Fecha');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(DateTime), result, [paIsDateTime]);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.FechasTurno(const FechaIni: DateTime; const FechaFin: DateTime): TFechas;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'FechasTurno');
    __Message.Write('FechaIni', TypeInfo(DateTime), FechaIni, [paIsDateTime]);
    __Message.Write('FechaFin', TypeInfo(DateTime), FechaFin, [paIsDateTime]);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TFechas), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.FechaUltimoCorte: DateTime;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'FechaUltimoCorte');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(DateTime), result, [paIsDateTime]);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.FijarProtecciones(const Protecciones: TProtecciones);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'FijarProtecciones');
    __Message.Write('Protecciones', TypeInfo(LibraryCistemGas_Intf.TProtecciones), Protecciones, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.Flujo(const Tipo: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'Flujo');
    __Message.Write('Tipo', TypeInfo(Integer), Tipo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'Folio');
    __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.FormatoTicket: aTicket;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'FormatoTicket');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.aTicket), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.GeneraTurnoTanque(const TurnoID: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'GeneraTurnoTanque');
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.GeneraVolumetrico: Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'GeneraVolumetrico');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'GuardaAccesos');
    __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
    __Message.Write('Lista', TypeInfo(AnsiString), Lista, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.GuardaCreditoOtros(const BombaID: Integer; const Tarjeta: AnsiString; const LLave: AnsiString; const Productos: AOtros; 
                                                    const NIP: AnsiString; const Odometro: Integer): TDatosVentaOtros;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'GuardaCreditoOtros');
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Write('Tarjeta', TypeInfo(AnsiString), Tarjeta, []);
    __Message.Write('LLave', TypeInfo(AnsiString), LLave, []);
    __Message.Write('Productos', TypeInfo(LibraryCistemGas_Intf.AOtros), Productos, []);
    __Message.Write('NIP', TypeInfo(AnsiString), NIP, []);
    __Message.Write('Odometro', TypeInfo(Integer), Odometro, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TDatosVentaOtros), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.GuardaOtros(const BombaID: Integer; const FormaPagoID: Integer; const Tarjeta: AnsiString; const LLave: AnsiString; 
                                             const Productos: AOtros): AOtros;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'GuardaOtros');
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Write('FormaPagoID', TypeInfo(Integer), FormaPagoID, []);
    __Message.Write('Tarjeta', TypeInfo(AnsiString), Tarjeta, []);
    __Message.Write('LLave', TypeInfo(AnsiString), LLave, []);
    __Message.Write('Productos', TypeInfo(LibraryCistemGas_Intf.AOtros), Productos, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.AOtros), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.GuardaOtros2(const BombaID: Integer; const Tarjeta: AnsiString; const LLave: AnsiString; const FormaPagoID: Integer; 
                                              const NIP: AnsiString; const Odometro: AnsiString; const Productos: AOtros; const Track1: AnsiString; 
                                              const Track2: AnsiString; const Terminal: AnsiString): TAutorizaBancaria;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'GuardaOtros2');
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Write('Tarjeta', TypeInfo(AnsiString), Tarjeta, []);
    __Message.Write('LLave', TypeInfo(AnsiString), LLave, []);
    __Message.Write('FormaPagoID', TypeInfo(Integer), FormaPagoID, []);
    __Message.Write('NIP', TypeInfo(AnsiString), NIP, []);
    __Message.Write('Odometro', TypeInfo(AnsiString), Odometro, []);
    __Message.Write('Productos', TypeInfo(LibraryCistemGas_Intf.AOtros), Productos, []);
    __Message.Write('Track1', TypeInfo(AnsiString), Track1, []);
    __Message.Write('Track2', TypeInfo(AnsiString), Track2, []);
    __Message.Write('Terminal', TypeInfo(AnsiString), Terminal, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TAutorizaBancaria), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.GuardarLineasTicket(const Lineas: aLineaTicket);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'GuardarLineasTicket');
    __Message.Write('Lineas', TypeInfo(LibraryCistemGas_Intf.aLineaTicket), Lineas, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.GuardaVenta(const nBomba: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'GuardaVenta');
    __Message.Write('nBomba', TypeInfo(Integer), nBomba, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.IncrementarImpreso(const Secuencia: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'IncrementarImpreso');
    __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.IncrementarImpresoOtros(const Secuencia: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'IncrementarImpresoOtros');
    __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.LecturasBomba(const BombaID: Integer): aLecturas;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'LecturasBomba');
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.aLecturas), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.LeerLineasTicket: aLineaTicket;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'LeerLineasTicket');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.aLineaTicket), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfo;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'Login');
    __Message.Write('Usuario', TypeInfo(AnsiString), Usuario, []);
    __Message.Write('Clave', TypeInfo(AnsiString), Clave, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TLoginInfo), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.NuevosPreciosProgramados(const Fecha: DateTime; const Activo: Boolean; const Cambios: aCambioPrecios);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'NuevosPreciosProgramados');
    __Message.Write('Fecha', TypeInfo(DateTime), Fecha, [paIsDateTime]);
    __Message.Write('Activo', TypeInfo(Boolean), Activo, []);
    __Message.Write('Cambios', TypeInfo(LibraryCistemGas_Intf.aCambioPrecios), Cambios, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.NumeroCopia(const TramaID: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'NumeroCopia');
    __Message.Write('TramaID', TypeInfo(Integer), TramaID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.PrefijaConsumoExpress(const ClienteID: Integer; const BombaID: Integer; const Referencia: AnsiString; const Terminal: AnsiString; 
                                                       const Comando: AnsiString): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'PrefijaConsumoExpress');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Write('Terminal', TypeInfo(AnsiString), Terminal, []);
    __Message.Write('Comando', TypeInfo(AnsiString), Comando, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.PrefijaCupon(const nBomba: Integer; const Barras: AnsiString; const Terminal: AnsiString; const Grupo: Integer; const ClienteID: Integer): TCupon;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'PrefijaCupon');
    __Message.Write('nBomba', TypeInfo(Integer), nBomba, []);
    __Message.Write('Barras', TypeInfo(AnsiString), Barras, []);
    __Message.Write('Terminal', TypeInfo(AnsiString), Terminal, []);
    __Message.Write('Grupo', TypeInfo(Integer), Grupo, []);
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TCupon), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.PrefijaGrupo(const Bomba: Integer; const Grupo: Integer; const Terminal: AnsiString; const Cupon: TCupon): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'PrefijaGrupo');
    __Message.Write('Bomba', TypeInfo(Integer), Bomba, []);
    __Message.Write('Grupo', TypeInfo(Integer), Grupo, []);
    __Message.Write('Terminal', TypeInfo(AnsiString), Terminal, []);
    __Message.Write('Cupon', TypeInfo(LibraryCistemGas_Intf.TCupon), Cupon, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.PrefijaTarjeta(const nBomba: Integer; const Tarjeta: AnsiString; const NIP: AnsiString; const Odometro: AnsiString; 
                                                const Terminal: AnsiString; const PresetMN: Double; const PresetLT: Double): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'PrefijaTarjeta');
    __Message.Write('nBomba', TypeInfo(Integer), nBomba, []);
    __Message.Write('Tarjeta', TypeInfo(AnsiString), Tarjeta, []);
    __Message.Write('NIP', TypeInfo(AnsiString), NIP, []);
    __Message.Write('Odometro', TypeInfo(AnsiString), Odometro, []);
    __Message.Write('Terminal', TypeInfo(AnsiString), Terminal, []);
    __Message.Write('PresetMN', TypeInfo(Double), PresetMN, []);
    __Message.Write('PresetLT', TypeInfo(Double), PresetLT, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.PresetImporte(const Bomba: Integer; const Importe: Double; const Producto: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'PresetImporte');
    __Message.Write('Bomba', TypeInfo(Integer), Bomba, []);
    __Message.Write('Importe', TypeInfo(Double), Importe, []);
    __Message.Write('Producto', TypeInfo(Integer), Producto, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.PresetTanqueLLeno(const Bomba: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'PresetTanqueLLeno');
    __Message.Write('Bomba', TypeInfo(Integer), Bomba, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.PresetVolumen(const Bomba: Integer; const Volumen: Double; const Producto: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'PresetVolumen');
    __Message.Write('Bomba', TypeInfo(Integer), Bomba, []);
    __Message.Write('Volumen', TypeInfo(Double), Volumen, []);
    __Message.Write('Producto', TypeInfo(Integer), Producto, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.ProcesaDia(const Fecha: DateTime; const Magna: Double; const Premium: Double; const Diesel: Double; const Directo: Boolean): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'ProcesaDia');
    __Message.Write('Fecha', TypeInfo(DateTime), Fecha, [paIsDateTime]);
    __Message.Write('Magna', TypeInfo(Double), Magna, []);
    __Message.Write('Premium', TypeInfo(Double), Premium, []);
    __Message.Write('Diesel', TypeInfo(Double), Diesel, []);
    __Message.Write('Directo', TypeInfo(Boolean), Directo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.Procesar(const ArchivoID: Integer; const LoteID: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'Procesar');
    __Message.Write('ArchivoID', TypeInfo(Integer), ArchivoID, []);
    __Message.Write('LoteID', TypeInfo(Integer), LoteID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.PropiedadesBombas(const nBomba: Integer; const Modo: eModoOperacion; const Autoimprimir: Boolean; const Todas: Boolean);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'PropiedadesBombas');
    __Message.Write('nBomba', TypeInfo(Integer), nBomba, []);
    __Message.Write('Modo', TypeInfo(LibraryCistemGas_Intf.eModoOperacion), Modo, []);
    __Message.Write('Autoimprimir', TypeInfo(Boolean), Autoimprimir, []);
    __Message.Write('Todas', TypeInfo(Boolean), Todas, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.Script(const ScriptID: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'Script');
    __Message.Write('ScriptID', TypeInfo(Integer), ScriptID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.TarjetaManual(const VehiculoID: Integer): TTarjetaManual;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'TarjetaManual');
    __Message.Write('VehiculoID', TypeInfo(Integer), VehiculoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TTarjetaManual), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.Ticket(const Secuencia: Integer; const CopiaMaxima: Integer): aTicket;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'Ticket');
    __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
    __Message.Write('CopiaMaxima', TypeInfo(Integer), CopiaMaxima, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.aTicket), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.TicketError(const Mensaje: AnsiString; const Ref1: AnsiString; const Ref2: AnsiString; const Terminal: AnsiString): aTicket;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'TicketError');
    __Message.Write('Mensaje', TypeInfo(AnsiString), Mensaje, []);
    __Message.Write('Ref1', TypeInfo(AnsiString), Ref1, []);
    __Message.Write('Ref2', TypeInfo(AnsiString), Ref2, []);
    __Message.Write('Terminal', TypeInfo(AnsiString), Terminal, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.aTicket), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.TicketOtros(const Secuencia: Integer; const Productos: AOtros; const DatosVenta: TDatosVentaOtros; const CopiaMaxima: Integer): aTicket;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'TicketOtros');
    __Message.Write('Secuencia', TypeInfo(Integer), Secuencia, []);
    __Message.Write('Productos', TypeInfo(LibraryCistemGas_Intf.AOtros), Productos, []);
    __Message.Write('DatosVenta', TypeInfo(LibraryCistemGas_Intf.TDatosVentaOtros), DatosVenta, []);
    __Message.Write('CopiaMaxima', TypeInfo(Integer), CopiaMaxima, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.aTicket), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.TicketTanques: aTicket;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'TicketTanques');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.aTicket), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.TiempoAire(const BombaID: Integer; const Telefono: AnsiString; const Llave: AnsiString; const ProveedorID: Integer; 
                                            const Importe: Double; const Track1: AnsiString; const Track2: AnsiString; const FormaPagoID: Integer; 
                                            const Terminal: AnsiString): TAutorizaBancaria;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'TiempoAire');
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Write('Telefono', TypeInfo(AnsiString), Telefono, []);
    __Message.Write('Llave', TypeInfo(AnsiString), Llave, []);
    __Message.Write('ProveedorID', TypeInfo(Integer), ProveedorID, []);
    __Message.Write('Importe', TypeInfo(Double), Importe, []);
    __Message.Write('Track1', TypeInfo(AnsiString), Track1, []);
    __Message.Write('Track2', TypeInfo(AnsiString), Track2, []);
    __Message.Write('FormaPagoID', TypeInfo(Integer), FormaPagoID, []);
    __Message.Write('Terminal', TypeInfo(AnsiString), Terminal, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TAutorizaBancaria), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.TotalBombas: Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'TotalBombas');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.UltimaExistencia(const ArchivoID: Integer; const Tanque: Integer): Double;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'UltimaExistencia');
    __Message.Write('ArchivoID', TypeInfo(Integer), ArchivoID, []);
    __Message.Write('Tanque', TypeInfo(Integer), Tanque, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Double), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.UltimoTurnoBomba: aTurnoBomba;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'UltimoTurnoBomba');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.aTurnoBomba), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.V2AgregaREC(const StringRecepcion: AnsiString);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'V2AgregaREC');
    __Message.Write('StringRecepcion', TypeInfo(AnsiString), StringRecepcion, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceCistemGas_Proxy.ValidaSecuencias(const TurnoID: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'ValidaSecuencias');
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.ValidaTarjetaLLave(const Tarjeta: AnsiString; const Sistema: AnsiString; const Referencia: AnsiString; const Mensaje: AnsiString): TAutorizaLLave;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'ValidaTarjetaLLave');
    __Message.Write('Tarjeta', TypeInfo(AnsiString), Tarjeta, []);
    __Message.Write('Sistema', TypeInfo(AnsiString), Sistema, []);
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Write('Mensaje', TypeInfo(AnsiString), Mensaje, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TAutorizaLLave), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.DatosEntregaPremio(const Referencia: AnsiString): TDatosEntregaPremio;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'DatosEntregaPremio');
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TDatosEntregaPremio), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.Premio(const PremioID: Integer): TPremio;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'Premio');
    __Message.Write('PremioID', TypeInfo(Integer), PremioID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TPremio), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.EntregaPremio(const ClienteID: Integer; const PremioID: Integer; const Cantidad: Integer): TPremioEntregado;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'EntregaPremio');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('PremioID', TypeInfo(Integer), PremioID, []);
    __Message.Write('Cantidad', TypeInfo(Integer), Cantidad, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TPremioEntregado), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.ObtenDatosBomba: ADatosBomba;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'ObtenDatosBomba');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.ADatosBomba), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.GuardaDatosBomba(const Datos: ADatosBomba): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'GuardaDatosBomba');
    __Message.Write('Datos', TypeInfo(LibraryCistemGas_Intf.ADatosBomba), Datos, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.NuevosPreciosProgramados2(const Fecha: DateTime; const Activo: Boolean; const Cambios: aCambioPrecios; const Sistema: Integer; 
                                                           const UsuarioID: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'NuevosPreciosProgramados2');
    __Message.Write('Fecha', TypeInfo(DateTime), Fecha, [paIsDateTime]);
    __Message.Write('Activo', TypeInfo(Boolean), Activo, []);
    __Message.Write('Cambios', TypeInfo(LibraryCistemGas_Intf.aCambioPrecios), Cambios, []);
    __Message.Write('Sistema', TypeInfo(Integer), Sistema, []);
    __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceCistemGas_Proxy.CorresponsalCambiario(const UsuarioID: Integer; const TipoCambio: TCG_TipoCambio): TCG_Respuesta;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'CorresponsalCambiario');
    __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
    __Message.Write('TipoCambio', TypeInfo(LibraryCistemGas_Intf.TCG_TipoCambio), TipoCambio, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TCG_Respuesta), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

{ CoServiceProxy }

class function CoServiceProxy.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceProxy;
begin
  result := TServiceProxy_Proxy.Create(aMessage, aTransportChannel);
end;

{ TServiceProxy_Proxy }

function TServiceProxy_Proxy.__GetInterfaceName:string;
begin
  result := 'ServiceProxy';
end;

function TServiceProxy_Proxy.Ticket(const SecuenciaID: Integer): TDatosTicket;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'Ticket');
    __Message.Write('SecuenciaID', TypeInfo(Integer), SecuenciaID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TDatosTicket), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.BuscaTicket(const TicketID: Integer): TTicket;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'BuscaTicket');
    __Message.Write('TicketID', TypeInfo(Integer), TicketID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TTicket), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.CorteBomba(const BombaID: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'CorteBomba');
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.DatosCorteBomba(const BombaID: Integer; const TurnoID: Integer): aDatosCorte;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'DatosCorteBomba');
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.aDatosCorte), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.SecuenciaBomba(const BombaID: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'SecuenciaBomba');
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.TotalesBomba(const TurnoID: Integer): TValoresCorte;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'TotalesBomba');
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TValoresCorte), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.DatosTanque: aTanques;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'DatosTanque');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.aTanques), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceProxy_Proxy.ValidaSecuencias(const TurnoID: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'ValidaSecuencias');
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceProxy_Proxy.AsignaTarjetaCupon(const Tramas: AAsignaTarjetaCupon);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'AsignaTarjetaCupon');
    __Message.Write('Tramas', TypeInfo(LibraryCistemGas_Intf.aAsignaTarjetaCupon), Tramas, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.MermaTurno(const TurnoID: Integer): Double;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'MermaTurno');
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Double), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.MermaRango(const TurnoINI: Integer; const TurnoFIN: Integer): Binary;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'MermaRango');
    __Message.Write('TurnoINI', TypeInfo(Integer), TurnoINI, []);
    __Message.Write('TurnoFIN', TypeInfo(Integer), TurnoFIN, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Binary), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceProxy_Proxy.LeerTarjetasLLave;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'LeerTarjetasLLave');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.ConsumosPendientesAutorizar: AAutorizaPendiente;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'ConsumosPendientesAutorizar');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.AAutorizaPendiente), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceProxy_Proxy.AutorizaConsumo(const SecuenciaVenta: Integer; const Autoriza: Boolean; const Tarjeta: AnsiString);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'AutorizaConsumo');
    __Message.Write('SecuenciaVenta', TypeInfo(Integer), SecuenciaVenta, []);
    __Message.Write('Autoriza', TypeInfo(Boolean), Autoriza, []);
    __Message.Write('Tarjeta', TypeInfo(AnsiString), Tarjeta, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.ConvierteACredito(const TicketID: Integer; const VehiculoID: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'ConvierteACredito');
    __Message.Write('TicketID', TypeInfo(Integer), TicketID, []);
    __Message.Write('VehiculoID', TypeInfo(Integer), VehiculoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceProxy_Proxy.ConvierteACreditoSagarpa(const Datos: TDatosSagarpa);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'ConvierteACreditoSagarpa');
    __Message.Write('Datos', TypeInfo(LibraryCistemGas_Intf.TDatosSagarpa), Datos, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.InsertaOtros(const Datos: TInsertaOtros): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'InsertaOtros');
    __Message.Write('Datos', TypeInfo(LibraryCistemGas_Intf.TInsertaOtros), Datos, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.QuemarCupon(const Datos: TInsertaOtros): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'QuemarCupon');
    __Message.Write('Datos', TypeInfo(LibraryCistemGas_Intf.TInsertaOtros), Datos, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.CuponesExternos(const Datos: TInsertaOtros): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'CuponesExternos');
    __Message.Write('Datos', TypeInfo(LibraryCistemGas_Intf.TInsertaOtros), Datos, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.VoucherOtrosProductos(const Datos: TInsertaOtros): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'VoucherOtrosProductos');
    __Message.Write('Datos', TypeInfo(LibraryCistemGas_Intf.TInsertaOtros), Datos, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.TurnoActual: Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'TurnoActual');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.MermaCalculada(const TurnoID: Integer): Double;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'MermaCalculada');
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Double), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.TurnoFecha(const TurnoID: Integer): TTurnoFecha;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'TurnoFecha');
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryCistemGas_Intf.TTurnoFecha), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceProxy_Proxy.EliminaMermaTurno(const TurnoID: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryCistemGas', __InterfaceName, 'EliminaMermaTurno');
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

initialization
  RegisterROClass(TGas);
  RegisterROClass(TFlujos);
  RegisterROClass(TTicket);
  RegisterROClass(TProducto);
  RegisterROClass(TCanal);
  RegisterROClass(TCambioPrecios);
  RegisterROClass(TContador);
  RegisterROClass(TLecturas);
  RegisterROClass(TMaguera);
  RegisterROClass(TRegistroVenta);
  RegisterROClass(TRegistroPuntoVenta);
  RegisterROClass(TFactorDecimal);
  RegisterROClass(TBomba);
  RegisterROClass(TDispositivos);
  RegisterROClass(TGlobal);
  RegisterROClass(TDatosCorte);
  RegisterROClass(TDatosTicket);
  RegisterROClass(TTanque);
  RegisterROClass(TRecepcion);
  RegisterROClass(TProtecciones);
  RegisterROClass(TParametros);
  RegisterROClass(TComando);
  RegisterROClass(TOpcion);
  RegisterROClass(TLoginInfo);
  RegisterROClass(TLineaTicket);
  RegisterROClass(TReporte);
  RegisterROClass(TLicencia);
  RegisterROClass(TNodo);
  RegisterROClass(TCorte);
  RegisterROClass(TConsumoGas);
  RegisterROClass(TValoresCorte);
  RegisterROClass(TAsignaTarjetaCupon);
  RegisterROClass(TTarjetaManual);
  RegisterROClass(TCambio);
  RegisterROClass(TCupon);
  RegisterROClass(TDatosExpress);
  RegisterROClass(TOtros);
  RegisterROClass(TDatosVentaOtros);
  RegisterROClass(TAutorizaPendiente);
  RegisterROClass(TAutorizaLLave);
  RegisterROClass(TAutorizaBancaria);
  RegisterROClass(TCorteOtros);
  RegisterROClass(TDatosVerifone);
  RegisterROClass(TDatosSagarpa);
  RegisterROClass(TFechas);
  RegisterROClass(TInsertaOtros);
  RegisterROClass(TDatosEntregaPremio);
  RegisterROClass(TPremio);
  RegisterROClass(TPremioEntregado);
  RegisterROClass(TDatosBomba);
  RegisterROClass(TTurnoFecha);
  RegisterROClass(TCG_TipoCambio);
  RegisterROClass(TCG_Respuesta);
  RegisterROClass(aBoolean);
  RegisterROClass(aMangueras);
  RegisterROClass(aContador);
  RegisterROClass(aLecturas);
  RegisterROClass(aGas);
  RegisterROClass(aBombas);
  RegisterROClass(aDispositivos);
  RegisterROClass(aTicket);
  RegisterROClass(aDatosCorte);
  RegisterROClass(aTanques);
  RegisterROClass(aRecepciones);
  RegisterROClass(aTurnoBomba);
  RegisterROClass(aComandos);
  RegisterROClass(ArrayOpcion);
  RegisterROClass(aLineaTicket);
  RegisterROClass(aNodos);
  RegisterROClass(aCorte);
  RegisterROClass(aConsumoGas);
  RegisterROClass(aAsignaTarjetaCupon);
  RegisterROClass(aRegistroVenta);
  RegisterROClass(aCambioPrecios);
  RegisterROClass(AOtros);
  RegisterROClass(AAutorizaPendiente);
  RegisterROClass(aCorteOtros);
  RegisterROClass(ADatosBomba);
  RegisterROClass(aArray);
  RegisterProxyClass(IServiceCistemGas_IID, TServiceCistemGas_Proxy);
  RegisterProxyClass(IServiceProxy_IID, TServiceProxy_Proxy);


finalization
  UnregisterROClass(TGas);
  UnregisterROClass(TFlujos);
  UnregisterROClass(TTicket);
  UnregisterROClass(TProducto);
  UnregisterROClass(TCanal);
  UnregisterROClass(TCambioPrecios);
  UnregisterROClass(TContador);
  UnregisterROClass(TLecturas);
  UnregisterROClass(TMaguera);
  UnregisterROClass(TRegistroVenta);
  UnregisterROClass(TRegistroPuntoVenta);
  UnregisterROClass(TFactorDecimal);
  UnregisterROClass(TBomba);
  UnregisterROClass(TDispositivos);
  UnregisterROClass(TGlobal);
  UnregisterROClass(TDatosCorte);
  UnregisterROClass(TDatosTicket);
  UnregisterROClass(TTanque);
  UnregisterROClass(TRecepcion);
  UnregisterROClass(TProtecciones);
  UnregisterROClass(TParametros);
  UnregisterROClass(TComando);
  UnregisterROClass(TOpcion);
  UnregisterROClass(TLoginInfo);
  UnregisterROClass(TLineaTicket);
  UnregisterROClass(TReporte);
  UnregisterROClass(TLicencia);
  UnregisterROClass(TNodo);
  UnregisterROClass(TCorte);
  UnregisterROClass(TConsumoGas);
  UnregisterROClass(TValoresCorte);
  UnregisterROClass(TAsignaTarjetaCupon);
  UnregisterROClass(TTarjetaManual);
  UnregisterROClass(TCambio);
  UnregisterROClass(TCupon);
  UnregisterROClass(TDatosExpress);
  UnregisterROClass(TOtros);
  UnregisterROClass(TDatosVentaOtros);
  UnregisterROClass(TAutorizaPendiente);
  UnregisterROClass(TAutorizaLLave);
  UnregisterROClass(TAutorizaBancaria);
  UnregisterROClass(TCorteOtros);
  UnregisterROClass(TDatosVerifone);
  UnregisterROClass(TDatosSagarpa);
  UnregisterROClass(TFechas);
  UnregisterROClass(TInsertaOtros);
  UnregisterROClass(TDatosEntregaPremio);
  UnregisterROClass(TPremio);
  UnregisterROClass(TPremioEntregado);
  UnregisterROClass(TDatosBomba);
  UnregisterROClass(TTurnoFecha);
  UnregisterROClass(TCG_TipoCambio);
  UnregisterROClass(TCG_Respuesta);
  UnregisterROClass(aBoolean);
  UnregisterROClass(aMangueras);
  UnregisterROClass(aContador);
  UnregisterROClass(aLecturas);
  UnregisterROClass(aGas);
  UnregisterROClass(aBombas);
  UnregisterROClass(aDispositivos);
  UnregisterROClass(aTicket);
  UnregisterROClass(aDatosCorte);
  UnregisterROClass(aTanques);
  UnregisterROClass(aRecepciones);
  UnregisterROClass(aTurnoBomba);
  UnregisterROClass(aComandos);
  UnregisterROClass(ArrayOpcion);
  UnregisterROClass(aLineaTicket);
  UnregisterROClass(aNodos);
  UnregisterROClass(aCorte);
  UnregisterROClass(aConsumoGas);
  UnregisterROClass(aAsignaTarjetaCupon);
  UnregisterROClass(aRegistroVenta);
  UnregisterROClass(aCambioPrecios);
  UnregisterROClass(AOtros);
  UnregisterROClass(AAutorizaPendiente);
  UnregisterROClass(aCorteOtros);
  UnregisterROClass(ADatosBomba);
  UnregisterROClass(aArray);
  UnregisterProxyClass(IServiceCistemGas_IID);
  UnregisterProxyClass(IServiceProxy_IID);

end.
