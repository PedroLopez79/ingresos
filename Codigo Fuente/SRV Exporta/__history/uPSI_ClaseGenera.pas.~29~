unit uPSI_ClaseGenera;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_ClaseGenera = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TGenera(CL: TPSPascalCompiler);
procedure SIRegister_TMisParametros(CL: TPSPascalCompiler);
procedure SIRegister_ClaseGenera(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TGenera(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMisParametros(CL: TPSRuntimeClassImporter);
procedure RIRegister_ClaseGenera(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   DB
  ,Variants
  ,ClaseGenera
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_ClaseGenera]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TGenera(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TGenera') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TGenera') do
  begin
    RegisterMethod('Constructor Create');
    RegisterProperty('NombreArchivo', 'String', iptrw);
    RegisterProperty('Parametros', 'TMisParametros', iptrw);
    RegisterMethod('Procedure Guardar');
    RegisterMethod('Procedure Next');
    RegisterMethod('Procedure First');
    RegisterMethod('Procedure Last');
    RegisterMethod('Procedure Prior');
    RegisterMethod('Function Campo( Campo : String) : Variant');
    RegisterMethod('Function EOF : Boolean');
    RegisterMethod('Function RecordCount : Integer');
    RegisterMethod('Function LinesCount : Integer');
    RegisterMethod('Function Formato( Cad : String; Valor : Variant) : String');
    RegisterMethod('Function NumTexto( Num : Real; Moneda : Integer) : String');
    RegisterMethod('Function FormatoFecha( Cad : String; Valor : Variant) : String');
    RegisterMethod('Procedure Agregar( Cad : String)');
    RegisterMethod('Procedure Reemplazar( AIndex : Integer; Cad : String)');
    RegisterMethod('Procedure Limpiar');
    RegisterMethod('Function Locate( Campo : String; Valor : Variant) : Boolean');
    RegisterMethod('Procedure AsignaValorCampo( Campo : String; Valor : Variant)');
    RegisterMethod('Procedure Deletes');
    RegisterMethod('Function Alinear( Cad : String; cpi, Direccion : Integer) : String');
    RegisterMethod('Function LLenar( Cad, Caracter : String; Cuantos : Integer; Inicio : Boolean) : String');
    RegisterMethod('Function ReemplazaStr( Cad, Busca, Nuevo : String) : String');
    RegisterMethod('Function Nivel( Cad : String) : Integer');
    RegisterMethod('Function NumTexto( Num : Real; Moneda : Integer) : String');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMisParametros(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TMisParametros') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TMisParametros') do
  begin
    RegisterProperty('SN', 'Integer', iptrw);
    RegisterProperty('NombreEstacion', 'String', iptrw);
    RegisterProperty('Fecha', 'TDateTime', iptrw);
    RegisterProperty('Poliza', 'Integer', iptrw);
    RegisterProperty('EstacionINI', 'Integer', iptrw);
    RegisterProperty('EstacionFIN', 'Integer', iptrw);
    RegisterProperty('TurnoINI', 'Integer', iptrw);
    RegisterProperty('TurnoFIN', 'Integer', iptrw);
    RegisterProperty('FechaINI', 'TDateTime', iptrw);
    RegisterProperty('FechaFIN', 'TDateTime', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ClaseGenera(CL: TPSPascalCompiler);
begin
  SIRegister_TMisParametros(CL);
  SIRegister_TGenera(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TGeneraParametros_W(Self: TGenera; const T: TMisParametros);
begin Self.Parametros := T; end;

(*----------------------------------------------------------------------------*)
procedure TGeneraParametros_R(Self: TGenera; var T: TMisParametros);
begin T := Self.Parametros; end;

(*----------------------------------------------------------------------------*)
procedure TGeneraNombreArchivo_W(Self: TGenera; const T: String);
begin Self.NombreArchivo := T; end;

(*----------------------------------------------------------------------------*)
procedure TGeneraNombreArchivo_R(Self: TGenera; var T: String);
begin T := Self.NombreArchivo; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosFechaFIN_W(Self: TMisParametros; const T: TDateTime);
Begin Self.FechaFIN := T; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosFechaFIN_R(Self: TMisParametros; var T: TDateTime);
Begin T := Self.FechaFIN; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosFechaINI_W(Self: TMisParametros; const T: TDateTime);
Begin Self.FechaINI := T; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosFechaINI_R(Self: TMisParametros; var T: TDateTime);
Begin T := Self.FechaINI; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosTurnoFIN_W(Self: TMisParametros; const T: Integer);
Begin Self.TurnoFIN := T; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosTurnoFIN_R(Self: TMisParametros; var T: Integer);
Begin T := Self.TurnoFIN; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosTurnoINI_W(Self: TMisParametros; const T: Integer);
Begin Self.TurnoINI := T; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosTurnoINI_R(Self: TMisParametros; var T: Integer);
Begin T := Self.TurnoINI; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosEstacionFIN_W(Self: TMisParametros; const T: Integer);
Begin Self.EstacionFIN := T; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosEstacionFIN_R(Self: TMisParametros; var T: Integer);
Begin T := Self.EstacionFIN; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosEstacionINI_W(Self: TMisParametros; const T: Integer);
Begin Self.EstacionINI := T; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosEstacionINI_R(Self: TMisParametros; var T: Integer);
Begin T := Self.EstacionINI; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosPoliza_W(Self: TMisParametros; const T: Integer);
Begin Self.Poliza := T; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosPoliza_R(Self: TMisParametros; var T: Integer);
Begin T := Self.Poliza; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosNombreEstacion_W(Self: TMisParametros; const T: String);
Begin Self.NombreEstacion := T; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosNombreEstacion_R(Self: TMisParametros; var T: String);
Begin T := Self.NombreEstacion; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosFecha_W(Self: TMisParametros; const T: TDateTime);
Begin Self.Fecha := T; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosFecha_R(Self: TMisParametros; var T: TDateTime);
Begin T := Self.Fecha; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosSN_W(Self: TMisParametros; const T: String);
Begin  Self.SN := T; end;

(*----------------------------------------------------------------------------*)
procedure TMisParametrosSN_R(Self: TMisParametros; var T: String);
begin T := Self.SN; end;



(*----------------------------------------------------------------------------*)
procedure RIRegister_TGenera(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TGenera) do
  begin
    RegisterConstructor(@TGenera.Create, 'Create');
    RegisterPropertyHelper(@TGeneraNombreArchivo_R,@TGeneraNombreArchivo_W,'NombreArchivo');
    RegisterPropertyHelper(@TGeneraParametros_R,@TGeneraParametros_W,'Parametros');
    RegisterMethod(@TGenera.Guardar, 'Guardar');
    RegisterMethod(@TGenera.Next, 'Next');
    RegisterMethod(@TGenera.First, 'First');
    RegisterMethod(@TGenera.Last, 'Last');
    RegisterMethod(@TGenera.Prior, 'Prior');
    RegisterMethod(@TGenera.Campo, 'Campo');
    RegisterMethod(@TGenera.EOF, 'EOF');
    RegisterMethod(@TGenera.RecordCount, 'RecordCount');
    RegisterMethod(@TGenera.LinesCount, 'LinesCount');
    RegisterMethod(@TGenera.Formato, 'Formato');
    RegisterMethod(@TGenera.FormatoFecha, 'FormatoFecha');
    RegisterMethod(@TGenera.Agregar, 'Agregar');
    RegisterMethod(@TGenera.Reemplazar, 'Reemplazar');
    RegisterMethod(@TGenera.Limpiar, 'Limpiar');
    RegisterMethod(@TGenera.Locate, 'Locate');
    RegisterMethod(@TGenera.AsignaValorCampo, 'AsignaValorCampo');
    RegisterMethod(@TGenera.Deletes, 'Deletes');
    RegisterMethod(@TGenera.Alinear, 'Alinear');
    RegisterMethod(@TGenera.LLenar, 'LLenar');
    RegisterMethod(@TGenera.ReemplazaStr, 'ReemplazaStr');
    RegisterMethod(@TGenera.Nivel, 'Nivel');
    RegisterMethod(@TGenera.NumTexto, 'NumTexto');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMisParametros(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMisParametros) do
  begin
    RegisterPropertyHelper(@TMisParametrosSN_R,@TMisParametrosSN_W,'SN');
    RegisterPropertyHelper(@TMisParametrosNombreEstacion_R,@TMisParametrosNombreEstacion_W,'NombreEstacion');
    RegisterPropertyHelper(@TMisParametrosFecha_R,@TMisParametrosFecha_W,'Fecha');
    RegisterPropertyHelper(@TMisParametrosPoliza_R,@TMisParametrosPoliza_W,'Poliza');
    RegisterPropertyHelper(@TMisParametrosEstacionINI_R,@TMisParametrosEstacionINI_W,'EstacionINI');
    RegisterPropertyHelper(@TMisParametrosEstacionFIN_R,@TMisParametrosEstacionFIN_W,'EstacionFIN');
    RegisterPropertyHelper(@TMisParametrosTurnoINI_R,@TMisParametrosTurnoINI_W,'TurnoINI');
    RegisterPropertyHelper(@TMisParametrosTurnoFIN_R,@TMisParametrosTurnoFIN_W,'TurnoFIN');
    RegisterPropertyHelper(@TMisParametrosFechaINI_R,@TMisParametrosFechaINI_W,'FechaINI');
    RegisterPropertyHelper(@TMisParametrosFechaFIN_R,@TMisParametrosFechaFIN_W,'FechaFIN');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ClaseGenera(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TMisParametros(CL);
  RIRegister_TGenera(CL);
end;

 
 
{ TPSImport_ClaseGenera }
(*----------------------------------------------------------------------------*)
procedure TPSImport_ClaseGenera.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_ClaseGenera(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_ClaseGenera.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_ClaseGenera(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
