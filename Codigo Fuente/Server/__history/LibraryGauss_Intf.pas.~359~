unit LibraryGauss_Intf;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I Remobjects.inc}

interface

uses
  {vcl:} Classes, TypInfo,
  {RemObjects:} uROXMLIntf, uROClasses, uROClient, uROTypes, uROClientIntf,
  {Used RODLs:} DataAbstract4_Intf;

const
  { Library ID }
  LibraryUID = '{7FBCA9F0-91E6-419E-B735-F9EC8846F43A}';
  TargetNamespace = '';

  { Service Interface ID's }
  IServiceGauss_IID : TGUID = '{5730396E-2B5F-44B2-93E0-E78CC6C4624D}';

  { Event ID's }

type
  { Forward declarations }
  IServiceGauss = interface;

  ArrayOpcionF = class;
  ATDetalleFactura = class;
  ATFacturaElectronicaDetalleImportes = class;
  ATFacturaElectronicaDetalleImpuestos = class;

  TLoginInfoF = class;
  TOpcionF = class;
  TDatosFactura = class;
  TFactura = class;
  TDetalleFactura = class;
  TParametrosF = class;
  TReporteF = class;
  TFacturaElectronicaF = class;
  TFacturaElectronicaDetalleImporteF = class;
  TFacturaElectronicaDetalleImpuestosF = class;
  TDataFacturaElectronicaF = class;
  TDatos = class;



  { Enumerateds }

  { TLoginInfoF }
  TLoginInfoF = class(TROComplexType)
  private
    fValida: Boolean;
    fEmpleadoID: Integer;
    fNombreEmpleado: AnsiString;
    fAccesos: ArrayOpcionF;
    function GetAccesos: ArrayOpcionF;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Valida:Boolean read fValida write fValida;
    property EmpleadoID:Integer read fEmpleadoID write fEmpleadoID;
    property NombreEmpleado:AnsiString read fNombreEmpleado write fNombreEmpleado;
    property Accesos:ArrayOpcionF read GetAccesos write fAccesos;
  end;

  { TLoginInfoFCollection }
  TLoginInfoFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TLoginInfoF;
    procedure SetItems(aIndex: integer; const Value: TLoginInfoF);
  public
    constructor Create; overload;
    function Add: TLoginInfoF; reintroduce;
    property Items[Index: integer]:TLoginInfoF read GetItems write SetItems; default;
  end;

  { TOpcionF }
  TOpcionF = class(TROComplexType)
  private
    fOpcionID: Integer;
    fNombre: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property OpcionID:Integer read fOpcionID write fOpcionID;
    property Nombre:AnsiString read fNombre write fNombre;
  end;

  { TOpcionFCollection }
  TOpcionFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TOpcionF;
    procedure SetItems(aIndex: integer; const Value: TOpcionF);
  public
    constructor Create; overload;
    function Add: TOpcionF; reintroduce;
    procedure SaveToArray(anArray: ArrayOpcionF);
    procedure LoadFromArray(anArray: ArrayOpcionF);
    property Items[Index: integer]:TOpcionF read GetItems write SetItems; default;
  end;

  { TDatosFactura }
  TDatosFactura = class(TROComplexType)
  private
    fFactura: TFactura;
    fDetalles: ATDetalleFactura;
    function GetFactura: TFactura;
    function GetDetalles: ATDetalleFactura;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Factura:TFactura read GetFactura write fFactura;
    property Detalles:ATDetalleFactura read GetDetalles write fDetalles;
  end;

  { TDatosFacturaCollection }
  TDatosFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosFactura;
    procedure SetItems(aIndex: integer; const Value: TDatosFactura);
  public
    constructor Create; overload;
    function Add: TDatosFactura; reintroduce;
    property Items[Index: integer]:TDatosFactura read GetItems write SetItems; default;
  end;

  { TFactura }
  TFactura = class(TROComplexType)
  private
    fClienteID: Integer;
    fEjercicio: Integer;
    fFacturaID: Integer;
    fFecha: DateTime;
    fFechaImpresion: DateTime;
    fFechaVencimiento: DateTime;
    fFolio: Integer;
    fImpuesto: Double;
    fMovimientoID: Integer;
    fSaldo: Double;
    fSerie: AnsiString;
    fSubtotal: Double;
    fTickets: AnsiString;
    fTotal: Double;
    fUsuarioID: Integer;
    fPeriodo: Integer;
    fImpuestoPorcentaje: Double;
    fFormaPagoID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property Ejercicio:Integer read fEjercicio write fEjercicio;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property Fecha:DateTime read fFecha write fFecha;
    property FechaImpresion:DateTime read fFechaImpresion write fFechaImpresion;
    property FechaVencimiento:DateTime read fFechaVencimiento write fFechaVencimiento;
    property Folio:Integer read fFolio write fFolio;
    property Impuesto:Double read fImpuesto write fImpuesto;
    property MovimientoID:Integer read fMovimientoID write fMovimientoID;
    property Saldo:Double read fSaldo write fSaldo;
    property Serie:AnsiString read fSerie write fSerie;
    property Subtotal:Double read fSubtotal write fSubtotal;
    property Tickets:AnsiString read fTickets write fTickets;
    property Total:Double read fTotal write fTotal;
    property UsuarioID:Integer read fUsuarioID write fUsuarioID;
    property Periodo:Integer read fPeriodo write fPeriodo;
    property ImpuestoPorcentaje:Double read fImpuestoPorcentaje write fImpuestoPorcentaje;
    property FormaPagoID:Integer read fFormaPagoID write fFormaPagoID;
  end;

  { TFacturaCollection }
  TFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFactura;
    procedure SetItems(aIndex: integer; const Value: TFactura);
  public
    constructor Create; overload;
    function Add: TFactura; reintroduce;
    property Items[Index: integer]:TFactura read GetItems write SetItems; default;
  end;

  { TDetalleFactura }
  TDetalleFactura = class(TROComplexType)
  private
    fDetalleFacturaID: Integer;
    fFacturaID: Integer;
    fCantidad: Double;
    fPrecio: Double;
    fImporte: Double;
    fProductoID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property DetalleFacturaID:Integer read fDetalleFacturaID write fDetalleFacturaID;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property Cantidad:Double read fCantidad write fCantidad;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
    property ProductoID:Integer read fProductoID write fProductoID;
  end;

  { TDetalleFacturaCollection }
  TDetalleFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDetalleFactura;
    procedure SetItems(aIndex: integer; const Value: TDetalleFactura);
  public
    constructor Create; overload;
    function Add: TDetalleFactura; reintroduce;
    procedure SaveToArray(anArray: ATDetalleFactura);
    procedure LoadFromArray(anArray: ATDetalleFactura);
    property Items[Index: integer]:TDetalleFactura read GetItems write SetItems; default;
  end;

  { TParametrosF }
  TParametrosF = class(TROComplexType)
  private
    fFechaIni: DateTime;
    fFechaFin: DateTime;
    fAlumno: Integer;
    fAlumnoIni: Integer;
    fAlumnoFin: Integer;
    fGrupo: Integer;
    fCiclo: Integer;
    fMaestro: Integer;
    fMaestroIni: Integer;
    fMaestroFin: Integer;
    fNivel: Integer;
    fTipoPago: Integer;
    fTipoCalificacion: Integer;
    fUsuario: Integer;
    fFamilia: Integer;
    fValor1: Integer;
    fStatus: Integer;
    fSerie: AnsiString;
    fFactura: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FechaIni:DateTime read fFechaIni write fFechaIni;
    property FechaFin:DateTime read fFechaFin write fFechaFin;
    property Alumno:Integer read fAlumno write fAlumno;
    property AlumnoIni:Integer read fAlumnoIni write fAlumnoIni;
    property AlumnoFin:Integer read fAlumnoFin write fAlumnoFin;
    property Grupo:Integer read fGrupo write fGrupo;
    property Ciclo:Integer read fCiclo write fCiclo;
    property Maestro:Integer read fMaestro write fMaestro;
    property MaestroIni:Integer read fMaestroIni write fMaestroIni;
    property MaestroFin:Integer read fMaestroFin write fMaestroFin;
    property Nivel:Integer read fNivel write fNivel;
    property TipoPago:Integer read fTipoPago write fTipoPago;
    property TipoCalificacion:Integer read fTipoCalificacion write fTipoCalificacion;
    property Usuario:Integer read fUsuario write fUsuario;
    property Familia:Integer read fFamilia write fFamilia;
    property Valor1:Integer read fValor1 write fValor1;
    property Status:Integer read fStatus write fStatus;
    property Serie:AnsiString read fSerie write fSerie;
    property Factura:Integer read fFactura write fFactura;
  end;

  { TParametrosFCollection }
  TParametrosFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TParametrosF;
    procedure SetItems(aIndex: integer; const Value: TParametrosF);
  public
    constructor Create; overload;
    function Add: TParametrosF; reintroduce;
    property Items[Index: integer]:TParametrosF read GetItems write SetItems; default;
  end;

  { TReporteF }
  TReporteF = class(TROComplexType)
  private
    fSQL1: AnsiString;
    fSQL2: AnsiString;
    fTemplate: AnsiString;
    fCampoJoin: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property SQL1:AnsiString read fSQL1 write fSQL1;
    property SQL2:AnsiString read fSQL2 write fSQL2;
    property Template:AnsiString read fTemplate write fTemplate;
    property CampoJoin:AnsiString read fCampoJoin write fCampoJoin;
  end;

  { TReporteFCollection }
  TReporteFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TReporteF;
    procedure SetItems(aIndex: integer; const Value: TReporteF);
  public
    constructor Create; overload;
    function Add: TReporteF; reintroduce;
    property Items[Index: integer]:TReporteF read GetItems write SetItems; default;
  end;

  { TFacturaElectronicaF }
  TFacturaElectronicaF = class(TROComplexType)
  private
    fSerie: AnsiString;
    fFolio: AnsiString;
    fFecha: AnsiString;
    fnoAprobacion: AnsiString;
    fanoAprobacion: AnsiString;
    ftipoComprobante: AnsiString;
    fformadePago: AnsiString;
    fSubTotal: AnsiString;
    fTotal: AnsiString;
    fRFCEmisor: AnsiString;
    fNomEmpEmisor: AnsiString;
    fDireccionEm: AnsiString;
    fNoExteriorEM: AnsiString;
    fColoniaEmisor: AnsiString;
    fMunicipioEmisor: AnsiString;
    fEstadoEmisor: AnsiString;
    fPaisEmisor: AnsiString;
    fCodigoPostalEmisor: AnsiString;
    fRFCReceptor: AnsiString;
    fNombreReceptor: AnsiString;
    fDomicilioReceptor: AnsiString;
    fNoExteriorReceptor: AnsiString;
    fColoniaReceptor: AnsiString;
    fLocalidadReceptor: AnsiString;
    fMunicipioReceptor: AnsiString;
    fEstadoReceptor: AnsiString;
    fPaisReceptor: AnsiString;
    fCodigoPostalReceptor: AnsiString;
    fFacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
    fFacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
    fTotalImpuesto: AnsiString;
    fCalleExpedidoEn: AnsiString;
    fNoExterioExpedidoEn: AnsiString;
    fColoniaExpedidoEn: AnsiString;
    fCodigoPostalExpedidoEn: AnsiString;
    fLocalidadExpedidoEn: AnsiString;
    fMunicipioExpedidoEn: AnsiString;
    fEstadoExpedidoEn: AnsiString;
    fPaisExpedidoEn: AnsiString;
    fSucursal: Boolean;
    femail: AnsiString;
    function GetFacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
    function GetFacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Serie:AnsiString read fSerie write fSerie;
    property Folio:AnsiString read fFolio write fFolio;
    property Fecha:AnsiString read fFecha write fFecha;
    property noAprobacion:AnsiString read fnoAprobacion write fnoAprobacion;
    property anoAprobacion:AnsiString read fanoAprobacion write fanoAprobacion;
    property tipoComprobante:AnsiString read ftipoComprobante write ftipoComprobante;
    property formadePago:AnsiString read fformadePago write fformadePago;
    property SubTotal:AnsiString read fSubTotal write fSubTotal;
    property Total:AnsiString read fTotal write fTotal;
    property RFCEmisor:AnsiString read fRFCEmisor write fRFCEmisor;
    property NomEmpEmisor:AnsiString read fNomEmpEmisor write fNomEmpEmisor;
    property DireccionEm:AnsiString read fDireccionEm write fDireccionEm;
    property NoExteriorEM:AnsiString read fNoExteriorEM write fNoExteriorEM;
    property ColoniaEmisor:AnsiString read fColoniaEmisor write fColoniaEmisor;
    property MunicipioEmisor:AnsiString read fMunicipioEmisor write fMunicipioEmisor;
    property EstadoEmisor:AnsiString read fEstadoEmisor write fEstadoEmisor;
    property PaisEmisor:AnsiString read fPaisEmisor write fPaisEmisor;
    property CodigoPostalEmisor:AnsiString read fCodigoPostalEmisor write fCodigoPostalEmisor;
    property RFCReceptor:AnsiString read fRFCReceptor write fRFCReceptor;
    property NombreReceptor:AnsiString read fNombreReceptor write fNombreReceptor;
    property DomicilioReceptor:AnsiString read fDomicilioReceptor write fDomicilioReceptor;
    property NoExteriorReceptor:AnsiString read fNoExteriorReceptor write fNoExteriorReceptor;
    property ColoniaReceptor:AnsiString read fColoniaReceptor write fColoniaReceptor;
    property LocalidadReceptor:AnsiString read fLocalidadReceptor write fLocalidadReceptor;
    property MunicipioReceptor:AnsiString read fMunicipioReceptor write fMunicipioReceptor;
    property EstadoReceptor:AnsiString read fEstadoReceptor write fEstadoReceptor;
    property PaisReceptor:AnsiString read fPaisReceptor write fPaisReceptor;
    property CodigoPostalReceptor:AnsiString read fCodigoPostalReceptor write fCodigoPostalReceptor;
    property FacturaElectronicaDetalleImportes:ATFacturaElectronicaDetalleImportes read GetFacturaElectronicaDetalleImportes write fFacturaElectronicaDetalleImportes;
    property FacturaElectronicaDetalleImpuestos:ATFacturaElectronicaDetalleImpuestos read GetFacturaElectronicaDetalleImpuestos write fFacturaElectronicaDetalleImpuestos;
    property TotalImpuesto:AnsiString read fTotalImpuesto write fTotalImpuesto;
    property CalleExpedidoEn:AnsiString read fCalleExpedidoEn write fCalleExpedidoEn;
    property NoExterioExpedidoEn:AnsiString read fNoExterioExpedidoEn write fNoExterioExpedidoEn;
    property ColoniaExpedidoEn:AnsiString read fColoniaExpedidoEn write fColoniaExpedidoEn;
    property CodigoPostalExpedidoEn:AnsiString read fCodigoPostalExpedidoEn write fCodigoPostalExpedidoEn;
    property LocalidadExpedidoEn:AnsiString read fLocalidadExpedidoEn write fLocalidadExpedidoEn;
    property MunicipioExpedidoEn:AnsiString read fMunicipioExpedidoEn write fMunicipioExpedidoEn;
    property EstadoExpedidoEn:AnsiString read fEstadoExpedidoEn write fEstadoExpedidoEn;
    property PaisExpedidoEn:AnsiString read fPaisExpedidoEn write fPaisExpedidoEn;
    property Sucursal:Boolean read fSucursal write fSucursal;
    property email:AnsiString read femail write femail;
  end;

  { TFacturaElectronicaFCollection }
  TFacturaElectronicaFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFacturaElectronicaF;
    procedure SetItems(aIndex: integer; const Value: TFacturaElectronicaF);
  public
    constructor Create; overload;
    function Add: TFacturaElectronicaF; reintroduce;
    property Items[Index: integer]:TFacturaElectronicaF read GetItems write SetItems; default;
  end;

  { TFacturaElectronicaDetalleImporteF }
  TFacturaElectronicaDetalleImporteF = class(TROComplexType)
  private
    fCantidadReceptor: AnsiString;
    fUnidadReceptor: AnsiString;
    fDescripcionReceptor: AnsiString;
    fValorUnitarioReceptor: AnsiString;
    fImporteReceptor: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property CantidadReceptor:AnsiString read fCantidadReceptor write fCantidadReceptor;
    property UnidadReceptor:AnsiString read fUnidadReceptor write fUnidadReceptor;
    property DescripcionReceptor:AnsiString read fDescripcionReceptor write fDescripcionReceptor;
    property ValorUnitarioReceptor:AnsiString read fValorUnitarioReceptor write fValorUnitarioReceptor;
    property ImporteReceptor:AnsiString read fImporteReceptor write fImporteReceptor;
  end;

  { TFacturaElectronicaDetalleImporteFCollection }
  TFacturaElectronicaDetalleImporteFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFacturaElectronicaDetalleImporteF;
    procedure SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImporteF);
  public
    constructor Create; overload;
    function Add: TFacturaElectronicaDetalleImporteF; reintroduce;
    procedure SaveToArray(anArray: ATFacturaElectronicaDetalleImportes);
    procedure LoadFromArray(anArray: ATFacturaElectronicaDetalleImportes);
    property Items[Index: integer]:TFacturaElectronicaDetalleImporteF read GetItems write SetItems; default;
  end;

  { TFacturaElectronicaDetalleImpuestosF }
  TFacturaElectronicaDetalleImpuestosF = class(TROComplexType)
  private
    fImpuestoReceptor: AnsiString;
    fTasaReceptor: AnsiString;
    fImporteImpReceptor: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ImpuestoReceptor:AnsiString read fImpuestoReceptor write fImpuestoReceptor;
    property TasaReceptor:AnsiString read fTasaReceptor write fTasaReceptor;
    property ImporteImpReceptor:AnsiString read fImporteImpReceptor write fImporteImpReceptor;
  end;

  { TFacturaElectronicaDetalleImpuestosFCollection }
  TFacturaElectronicaDetalleImpuestosFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFacturaElectronicaDetalleImpuestosF;
    procedure SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImpuestosF);
  public
    constructor Create; overload;
    function Add: TFacturaElectronicaDetalleImpuestosF; reintroduce;
    procedure SaveToArray(anArray: ATFacturaElectronicaDetalleImpuestos);
    procedure LoadFromArray(anArray: ATFacturaElectronicaDetalleImpuestos);
    property Items[Index: integer]:TFacturaElectronicaDetalleImpuestosF read GetItems write SetItems; default;
  end;

  { TDataFacturaElectronicaF }
  TDataFacturaElectronicaF = class(TROComplexType)
  private
    fFacturaElectronicaF: TFacturaElectronicaF;
    fCadenaOriginal: Widestring;
    fSelloDigital: AnsiString;
    fNumCertificado: AnsiString;
    fCertificado: Widestring;
    function GetFacturaElectronicaF: TFacturaElectronicaF;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FacturaElectronicaF:TFacturaElectronicaF read GetFacturaElectronicaF write fFacturaElectronicaF;
    property CadenaOriginal:Widestring read fCadenaOriginal write fCadenaOriginal;
    property SelloDigital:AnsiString read fSelloDigital write fSelloDigital;
    property NumCertificado:AnsiString read fNumCertificado write fNumCertificado;
    property Certificado:Widestring read fCertificado write fCertificado;
  end;

  { TDataFacturaElectronicaFCollection }
  TDataFacturaElectronicaFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDataFacturaElectronicaF;
    procedure SetItems(aIndex: integer; const Value: TDataFacturaElectronicaF);
  public
    constructor Create; overload;
    function Add: TDataFacturaElectronicaF; reintroduce;
    property Items[Index: integer]:TDataFacturaElectronicaF read GetItems write SetItems; default;
  end;

  { TDatos }
  TDatos = class(TROComplexType)
  private
    fNombre: AnsiString;
    fCODIGO: AnsiString;
    fDIRECCION: AnsiString;
    fIMSS: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Nombre:AnsiString read fNombre write fNombre;
    property CODIGO:AnsiString read fCODIGO write fCODIGO;
    property DIRECCION:AnsiString read fDIRECCION write fDIRECCION;
    property IMSS:AnsiString read fIMSS write fIMSS;
  end;

  { TDatosCollection }
  TDatosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatos;
    procedure SetItems(aIndex: integer; const Value: TDatos);
  public
    constructor Create; overload;
    function Add: TDatos; reintroduce;
    property Items[Index: integer]:TDatos read GetItems write SetItems; default;
  end;

  { ArrayOpcionF }
  ArrayOpcionF_TOpcionF = array of TOpcionF;
  ArrayOpcionF = class(TROArray)
  private
    fCount: Integer;
    fItems : ArrayOpcionF_TOpcionF;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TOpcionF;
    procedure SetItems(aIndex: integer; const Value: TOpcionF);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TOpcionF; overload;
    function Add(const Value: TOpcionF):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TOpcionF read GetItems write SetItems; default;
    property InnerArray: ArrayOpcionF_TOpcionF read fItems;
  end;

  { ATDetalleFactura }
  ATDetalleFactura_TDetalleFactura = array of TDetalleFactura;
  ATDetalleFactura = class(TROArray)
  private
    fCount: Integer;
    fItems : ATDetalleFactura_TDetalleFactura;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDetalleFactura;
    procedure SetItems(aIndex: integer; const Value: TDetalleFactura);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleFactura; overload;
    function Add(const Value: TDetalleFactura):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDetalleFactura read GetItems write SetItems; default;
    property InnerArray: ATDetalleFactura_TDetalleFactura read fItems;
  end;

  { ATFacturaElectronicaDetalleImportes }
  ATFacturaElectronicaDetalleImportes_TFacturaElectronicaDetalleImporteF = array of TFacturaElectronicaDetalleImporteF;
  ATFacturaElectronicaDetalleImportes = class(TROArray)
  private
    fCount: Integer;
    fItems : ATFacturaElectronicaDetalleImportes_TFacturaElectronicaDetalleImporteF;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TFacturaElectronicaDetalleImporteF;
    procedure SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImporteF);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TFacturaElectronicaDetalleImporteF; overload;
    function Add(const Value: TFacturaElectronicaDetalleImporteF):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TFacturaElectronicaDetalleImporteF read GetItems write SetItems; default;
    property InnerArray: ATFacturaElectronicaDetalleImportes_TFacturaElectronicaDetalleImporteF read fItems;
  end;

  { ATFacturaElectronicaDetalleImpuestos }
  ATFacturaElectronicaDetalleImpuestos_TFacturaElectronicaDetalleImpuestosF = array of TFacturaElectronicaDetalleImpuestosF;
  ATFacturaElectronicaDetalleImpuestos = class(TROArray)
  private
    fCount: Integer;
    fItems : ATFacturaElectronicaDetalleImpuestos_TFacturaElectronicaDetalleImpuestosF;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TFacturaElectronicaDetalleImpuestosF;
    procedure SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImpuestosF);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TFacturaElectronicaDetalleImpuestosF; overload;
    function Add(const Value: TFacturaElectronicaDetalleImpuestosF):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TFacturaElectronicaDetalleImpuestosF read GetItems write SetItems; default;
    property InnerArray: ATFacturaElectronicaDetalleImpuestos_TFacturaElectronicaDetalleImpuestosF read fItems;
  end;

  { IServiceGauss }
  IServiceGauss = interface(IDataAbstractService)
    ['{5730396E-2B5F-44B2-93E0-E78CC6C4624D}']
    function AbreDataSetReportes(const SQL: AnsiString; const Parametros: TParametrosF): Binary;
    function BuscarReporte(const Nombre: AnsiString): TReporteF;
    function DragPagoMateria(const PAGOMATERIA: Integer; const IDGRUPOTARGET: Integer; const IDGRUPOSOURCE: Integer): Boolean;
    function ActualizaSubTipoPago(const IDTIPOPAGO: Integer; const IDSUBTIPOPAGO: Integer): Boolean;
    function DatosFacturaElectronica(const FacturaID: Integer): TFacturaElectronicaF;
    function DatosFactura(const Folio: Integer; const Serie: AnsiString): Boolean;
    function Fecha: DateTime;
    function Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
    procedure GuardaDatosFactura(const DatosFactura: TDatosFactura);
    function Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfoF;
    function IniciaCiclo(const IDCICLO: AnsiString): Boolean;
    function ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const FolioNew: Integer): AnsiString;
    procedure InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: Widestring; const SelloDigital: Widestring; 
                                        const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString; 
                                        const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
    function FolioActual2(const Serie: AnsiString; const folio: Integer): Integer;
    procedure GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
    function EliminaMaestroDisponibilidad(const IDMAESTRODISPONIBILIDAD: Integer): Boolean;
    function EliminaMateriaMaestro(const IDMAESTRO: Integer; const IDMATERIA: Integer): Boolean;
    function EliminaPago(const idSubtipoPago: Integer; const status: AnsiString; const idCiclos: Integer; const idGrupo: Integer): Boolean;
    function EliminaPagoCaja(const idSubtipoPago: Integer; const status: AnsiString; const idCiclos: Integer; const idGrupo: Integer): Boolean;
    function InsertaCaja(const Observaciones: AnsiString; const TipoPago: AnsiString; const idEmpleado: Integer): Integer;
    function LiquidaPago(const INTERES: Double; const IDEMPLEADO: Integer; const IDPAGO: Integer): Boolean;
    function DividePago(const idPago: Integer; const idEmpleado: Integer; const Importes: Double; const Interes: Double): Integer;
    function InsertaPagoCaja(const IDPAGO: Integer; const IDCAJA: Integer): Boolean;
    function AplicaCalificacion(const Calificacion: Double; const Faltas: Integer; const idmaterias: Integer; const idhistorialalumno: Integer; 
                                const idhistorialgrupo: Integer; const fecha: DateTime; const idtipocalificacion: Integer; const califAux2: Double; 
                                const califAux1: Double): Boolean;
    function HistorialAlumnoDEL(const IDHISTORIALALUMNO: Integer): Boolean;
    function BecaDescuento(const IDHISTORIALALUMNO: Integer; const BECA: Double; const DESCUENTO: Double): Boolean;
    function InsertaHistorialAlumno(const IDHISTORIALALUMNO: Integer; const IDHISTORIALGRUPO: Integer; const IDALUMNO: Integer; const DOCUMENTOSFALTANTES: AnsiString; 
                                    const BECA: Double; const DESCUENTO: Double): Boolean;
    function CambioGrupo(const IDHISTORIALALUMNO: Integer; const IDHISTORIALGRUPO: Integer; const DOCUMENTOSFALTANTES: AnsiString; 
                         const BECA: Double; const DESCUENTO: Double): Boolean;
    function TipoCalificacion: Integer;
    function DatosAlumno(const AlumnoID: Integer): TDatos;
    function DatosMaestro(const MaestroID: Integer): TDatos;
    function PagoBanco(const FECHAPAGO: DateTime; const IDEMPLEADO: Integer; const IDPAGO: Integer; const MONTO: Double): Integer;
    function PrecioProducto(const ProductoID: Integer): Double;
    function FolioActual(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function ValidaFolioFactura(const Campo: AnsiString; const Folio: Integer): Boolean;
    procedure GuardarDatosFactura(const DatosFactura: TDatosFactura);
    function CadenaOriginal(const FacturaID: Integer): TDataFacturaElectronicaF;
  end;

  { CoServiceGauss }
  CoServiceGauss = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceGauss;
  end;

  { TServiceGauss_Proxy }
  TServiceGauss_Proxy = class(TDataAbstractService_Proxy, IServiceGauss)
  protected
    function __GetInterfaceName:string; override;

    function AbreDataSetReportes(const SQL: AnsiString; const Parametros: TParametrosF): Binary;
    function BuscarReporte(const Nombre: AnsiString): TReporteF;
    function DragPagoMateria(const PAGOMATERIA: Integer; const IDGRUPOTARGET: Integer; const IDGRUPOSOURCE: Integer): Boolean;
    function ActualizaSubTipoPago(const IDTIPOPAGO: Integer; const IDSUBTIPOPAGO: Integer): Boolean;
    function DatosFacturaElectronica(const FacturaID: Integer): TFacturaElectronicaF;
    function DatosFactura(const Folio: Integer; const Serie: AnsiString): Boolean;
    function Fecha: DateTime;
    function Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
    procedure GuardaDatosFactura(const DatosFactura: TDatosFactura);
    function Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfoF;
    function IniciaCiclo(const IDCICLO: AnsiString): Boolean;
    function ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const FolioNew: Integer): AnsiString;
    procedure InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: Widestring; const SelloDigital: Widestring; 
                                        const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString; 
                                        const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
    function FolioActual2(const Serie: AnsiString; const folio: Integer): Integer;
    procedure GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
    function EliminaMaestroDisponibilidad(const IDMAESTRODISPONIBILIDAD: Integer): Boolean;
    function EliminaMateriaMaestro(const IDMAESTRO: Integer; const IDMATERIA: Integer): Boolean;
    function EliminaPago(const idSubtipoPago: Integer; const status: AnsiString; const idCiclos: Integer; const idGrupo: Integer): Boolean;
    function EliminaPagoCaja(const idSubtipoPago: Integer; const status: AnsiString; const idCiclos: Integer; const idGrupo: Integer): Boolean;
    function InsertaCaja(const Observaciones: AnsiString; const TipoPago: AnsiString; const idEmpleado: Integer): Integer;
    function LiquidaPago(const INTERES: Double; const IDEMPLEADO: Integer; const IDPAGO: Integer): Boolean;
    function DividePago(const idPago: Integer; const idEmpleado: Integer; const Importes: Double; const Interes: Double): Integer;
    function InsertaPagoCaja(const IDPAGO: Integer; const IDCAJA: Integer): Boolean;
    function AplicaCalificacion(const Calificacion: Double; const Faltas: Integer; const idmaterias: Integer; const idhistorialalumno: Integer; 
                                const idhistorialgrupo: Integer; const fecha: DateTime; const idtipocalificacion: Integer; const califAux2: Double; 
                                const califAux1: Double): Boolean;
    function HistorialAlumnoDEL(const IDHISTORIALALUMNO: Integer): Boolean;
    function BecaDescuento(const IDHISTORIALALUMNO: Integer; const BECA: Double; const DESCUENTO: Double): Boolean;
    function InsertaHistorialAlumno(const IDHISTORIALALUMNO: Integer; const IDHISTORIALGRUPO: Integer; const IDALUMNO: Integer; const DOCUMENTOSFALTANTES: AnsiString; 
                                    const BECA: Double; const DESCUENTO: Double): Boolean;
    function CambioGrupo(const IDHISTORIALALUMNO: Integer; const IDHISTORIALGRUPO: Integer; const DOCUMENTOSFALTANTES: AnsiString; 
                         const BECA: Double; const DESCUENTO: Double): Boolean;
    function TipoCalificacion: Integer;
    function DatosAlumno(const AlumnoID: Integer): TDatos;
    function DatosMaestro(const MaestroID: Integer): TDatos;
    function PagoBanco(const FECHAPAGO: DateTime; const IDEMPLEADO: Integer; const IDPAGO: Integer; const MONTO: Double): Integer;
    function PrecioProducto(const ProductoID: Integer): Double;
    function FolioActual(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function ValidaFolioFactura(const Campo: AnsiString; const Folio: Integer): Boolean;
    procedure GuardarDatosFactura(const DatosFactura: TDatosFactura);
    function CadenaOriginal(const FacturaID: Integer): TDataFacturaElectronicaF;
  end;

implementation

uses
  {vcl:} SysUtils,
  {RemObjects:} uROEventRepository, uROSerializer, uRORes;

{ ArrayOpcionF }

procedure ArrayOpcionF.Assign(iSource: TPersistent);
var lSource:ArrayOpcionF;
    i:integer;
begin
  if (iSource is ArrayOpcionF) then begin
    lSource := ArrayOpcionF(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ArrayOpcionF.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TOpcionF);
end;

class function ArrayOpcionF.GetItemClass: TClass;
begin
  result := TOpcionF;
end;

class function ArrayOpcionF.GetItemSize: integer;
begin
  result := SizeOf(TOpcionF);
end;

function ArrayOpcionF.GetItems(aIndex: integer): TOpcionF;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ArrayOpcionF.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ArrayOpcionF.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ArrayOpcionF.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ArrayOpcionF.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ArrayOpcionF.SetItems(aIndex: integer; const Value: TOpcionF);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ArrayOpcionF.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TOpcionF.Create;
  FCount := ElementCount;
end;

function ArrayOpcionF.GetCount: integer;
begin
  result := FCount;
end;

procedure ArrayOpcionF.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ArrayOpcionF.Add: TOpcionF;
begin
  result := TOpcionF.Create;
  Add(Result);
end;

function ArrayOpcionF.Add(const Value:TOpcionF): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ArrayOpcionF.ReadComplex(ASerializer: TObject);
var
  lval: TOpcionF;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TOpcionF, lval, i);
    Items[i] := lval;
  end;
end;

procedure ArrayOpcionF.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TOpcionF, i);
end;

{ ATDetalleFactura }

procedure ATDetalleFactura.Assign(iSource: TPersistent);
var lSource:ATDetalleFactura;
    i:integer;
begin
  if (iSource is ATDetalleFactura) then begin
    lSource := ATDetalleFactura(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATDetalleFactura.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDetalleFactura);
end;

class function ATDetalleFactura.GetItemClass: TClass;
begin
  result := TDetalleFactura;
end;

class function ATDetalleFactura.GetItemSize: integer;
begin
  result := SizeOf(TDetalleFactura);
end;

function ATDetalleFactura.GetItems(aIndex: integer): TDetalleFactura;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATDetalleFactura.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATDetalleFactura.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATDetalleFactura.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATDetalleFactura.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATDetalleFactura.SetItems(aIndex: integer; const Value: TDetalleFactura);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATDetalleFactura.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleFactura.Create;
  FCount := ElementCount;
end;

function ATDetalleFactura.GetCount: integer;
begin
  result := FCount;
end;

procedure ATDetalleFactura.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATDetalleFactura.Add: TDetalleFactura;
begin
  result := TDetalleFactura.Create;
  Add(Result);
end;

function ATDetalleFactura.Add(const Value:TDetalleFactura): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATDetalleFactura.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleFactura;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleFactura, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATDetalleFactura.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleFactura, i);
end;

{ ATFacturaElectronicaDetalleImportes }

procedure ATFacturaElectronicaDetalleImportes.Assign(iSource: TPersistent);
var lSource:ATFacturaElectronicaDetalleImportes;
    i:integer;
begin
  if (iSource is ATFacturaElectronicaDetalleImportes) then begin
    lSource := ATFacturaElectronicaDetalleImportes(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATFacturaElectronicaDetalleImportes.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TFacturaElectronicaDetalleImporteF);
end;

class function ATFacturaElectronicaDetalleImportes.GetItemClass: TClass;
begin
  result := TFacturaElectronicaDetalleImporteF;
end;

class function ATFacturaElectronicaDetalleImportes.GetItemSize: integer;
begin
  result := SizeOf(TFacturaElectronicaDetalleImporteF);
end;

function ATFacturaElectronicaDetalleImportes.GetItems(aIndex: integer): TFacturaElectronicaDetalleImporteF;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATFacturaElectronicaDetalleImportes.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATFacturaElectronicaDetalleImportes.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATFacturaElectronicaDetalleImportes.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATFacturaElectronicaDetalleImportes.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATFacturaElectronicaDetalleImportes.SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImporteF);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATFacturaElectronicaDetalleImportes.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TFacturaElectronicaDetalleImporteF.Create;
  FCount := ElementCount;
end;

function ATFacturaElectronicaDetalleImportes.GetCount: integer;
begin
  result := FCount;
end;

procedure ATFacturaElectronicaDetalleImportes.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATFacturaElectronicaDetalleImportes.Add: TFacturaElectronicaDetalleImporteF;
begin
  result := TFacturaElectronicaDetalleImporteF.Create;
  Add(Result);
end;

function ATFacturaElectronicaDetalleImportes.Add(const Value:TFacturaElectronicaDetalleImporteF): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATFacturaElectronicaDetalleImportes.ReadComplex(ASerializer: TObject);
var
  lval: TFacturaElectronicaDetalleImporteF;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TFacturaElectronicaDetalleImporteF, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATFacturaElectronicaDetalleImportes.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TFacturaElectronicaDetalleImporteF, i);
end;

{ ATFacturaElectronicaDetalleImpuestos }

procedure ATFacturaElectronicaDetalleImpuestos.Assign(iSource: TPersistent);
var lSource:ATFacturaElectronicaDetalleImpuestos;
    i:integer;
begin
  if (iSource is ATFacturaElectronicaDetalleImpuestos) then begin
    lSource := ATFacturaElectronicaDetalleImpuestos(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATFacturaElectronicaDetalleImpuestos.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TFacturaElectronicaDetalleImpuestosF);
end;

class function ATFacturaElectronicaDetalleImpuestos.GetItemClass: TClass;
begin
  result := TFacturaElectronicaDetalleImpuestosF;
end;

class function ATFacturaElectronicaDetalleImpuestos.GetItemSize: integer;
begin
  result := SizeOf(TFacturaElectronicaDetalleImpuestosF);
end;

function ATFacturaElectronicaDetalleImpuestos.GetItems(aIndex: integer): TFacturaElectronicaDetalleImpuestosF;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATFacturaElectronicaDetalleImpuestos.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATFacturaElectronicaDetalleImpuestos.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATFacturaElectronicaDetalleImpuestos.SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImpuestosF);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TFacturaElectronicaDetalleImpuestosF.Create;
  FCount := ElementCount;
end;

function ATFacturaElectronicaDetalleImpuestos.GetCount: integer;
begin
  result := FCount;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATFacturaElectronicaDetalleImpuestos.Add: TFacturaElectronicaDetalleImpuestosF;
begin
  result := TFacturaElectronicaDetalleImpuestosF.Create;
  Add(Result);
end;

function ATFacturaElectronicaDetalleImpuestos.Add(const Value:TFacturaElectronicaDetalleImpuestosF): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATFacturaElectronicaDetalleImpuestos.ReadComplex(ASerializer: TObject);
var
  lval: TFacturaElectronicaDetalleImpuestosF;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TFacturaElectronicaDetalleImpuestosF, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATFacturaElectronicaDetalleImpuestos.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TFacturaElectronicaDetalleImpuestosF, i);
end;

{ TLoginInfoF }

procedure TLoginInfoF.Assign(iSource: TPersistent); 
var lSource: LibraryGauss_Intf.TLoginInfoF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryGauss_Intf.TLoginInfoF) then begin
    lSource := LibraryGauss_Intf.TLoginInfoF(iSource);
    Valida := lSource.Valida;
    EmpleadoID := lSource.EmpleadoID;
    NombreEmpleado := lSource.NombreEmpleado;
    Accesos.Assign(lSource.Accesos);
  end;
end;

function TLoginInfoF.GetAccesos: ArrayOpcionF;
begin
  if (fAccesos = nil) then fAccesos := ArrayOpcionF.Create();
  result := fAccesos;
end;

procedure TLoginInfoF.ReadComplex(ASerializer: TObject);
var
  l_Accesos: ArrayOpcionF;
  l_EmpleadoID: Integer;
  l_NombreEmpleado: AnsiString;
  l_Valida: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Valida := Valida;
    TROSerializer(ASerializer).ReadEnumerated('Valida',TypeInfo(boolean), l_Valida);
    Valida := l_Valida;
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).ReadInteger('EmpleadoID', otSLong, l_EmpleadoID);
    EmpleadoID := l_EmpleadoID;
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).ReadAnsiString('NombreEmpleado', l_NombreEmpleado);
    NombreEmpleado := l_NombreEmpleado;
    l_Accesos := Accesos;
    TROSerializer(ASerializer).ReadArray('Accesos', ArrayOpcionF, l_Accesos);
    if Accesos <> l_Accesos then Accesos.Free;
    Accesos := l_Accesos;
  end
  else begin
    l_Accesos := Accesos;
    TROSerializer(ASerializer).ReadArray('Accesos', ArrayOpcionF, l_Accesos);
    if Accesos <> l_Accesos then Accesos.Free;
    Accesos := l_Accesos;
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).ReadInteger('EmpleadoID', otSLong, l_EmpleadoID);
    EmpleadoID := l_EmpleadoID;
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).ReadAnsiString('NombreEmpleado', l_NombreEmpleado);
    NombreEmpleado := l_NombreEmpleado;
    l_Valida := Valida;
    TROSerializer(ASerializer).ReadEnumerated('Valida',TypeInfo(boolean), l_Valida);
    Valida := l_Valida;
  end;
end;

procedure TLoginInfoF.WriteComplex(ASerializer: TObject);
var
  l_Accesos: ArrayOpcionF;
  l_EmpleadoID: Integer;
  l_NombreEmpleado: AnsiString;
  l_Valida: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLoginInfoF);
    l_Valida := Valida;
    TROSerializer(ASerializer).WriteEnumerated('Valida',TypeInfo(boolean), l_Valida);
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).WriteInteger('EmpleadoID', otSLong, l_EmpleadoID);
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).WriteAnsiString('NombreEmpleado', l_NombreEmpleado);
    l_Accesos := Accesos;
    TROSerializer(ASerializer).WriteArray('Accesos', l_Accesos, ArrayOpcionF);
  end
  else begin
    l_Accesos := Accesos;
    TROSerializer(ASerializer).WriteArray('Accesos', l_Accesos, ArrayOpcionF);
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).WriteInteger('EmpleadoID', otSLong, l_EmpleadoID);
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).WriteAnsiString('NombreEmpleado', l_NombreEmpleado);
    l_Valida := Valida;
    TROSerializer(ASerializer).WriteEnumerated('Valida',TypeInfo(boolean), l_Valida);
  end;
end;

{ TLoginInfoFCollection }
constructor TLoginInfoFCollection.Create;
begin
  inherited Create(TLoginInfoF);
end;

constructor TLoginInfoFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLoginInfoFCollection.Add: TLoginInfoF;
begin
  result := TLoginInfoF(inherited Add);
end;

function TLoginInfoFCollection.GetItems(aIndex: integer): TLoginInfoF;
begin
  result := TLoginInfoF(inherited Items[aIndex]);
end;

procedure TLoginInfoFCollection.SetItems(aIndex: integer; const Value: TLoginInfoF);
begin
  TLoginInfoF(inherited Items[aIndex]).Assign(Value);
end;

{ TOpcionF }

procedure TOpcionF.Assign(iSource: TPersistent); 
var lSource: LibraryGauss_Intf.TOpcionF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryGauss_Intf.TOpcionF) then begin
    lSource := LibraryGauss_Intf.TOpcionF(iSource);
    OpcionID := lSource.OpcionID;
    Nombre := lSource.Nombre;
  end;
end;

procedure TOpcionF.ReadComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_OpcionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).ReadInteger('OpcionID', otSLong, l_OpcionID);
    OpcionID := l_OpcionID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
  end
  else begin
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).ReadInteger('OpcionID', otSLong, l_OpcionID);
    OpcionID := l_OpcionID;
  end;
end;

procedure TOpcionF.WriteComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_OpcionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TOpcionF);
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).WriteInteger('OpcionID', otSLong, l_OpcionID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
  end
  else begin
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).WriteInteger('OpcionID', otSLong, l_OpcionID);
  end;
end;

{ TOpcionFCollection }
constructor TOpcionFCollection.Create;
begin
  inherited Create(TOpcionF);
end;

constructor TOpcionFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TOpcionFCollection.Add: TOpcionF;
begin
  result := TOpcionF(inherited Add);
end;

function TOpcionFCollection.GetItems(aIndex: integer): TOpcionF;
begin
  result := TOpcionF(inherited Items[aIndex]);
end;

procedure TOpcionFCollection.LoadFromArray(anArray: ArrayOpcionF);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TOpcionFCollection.SaveToArray(anArray: ArrayOpcionF);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TOpcionF.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TOpcionFCollection.SetItems(aIndex: integer; const Value: TOpcionF);
begin
  TOpcionF(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosFactura }

procedure TDatosFactura.Assign(iSource: TPersistent); 
var lSource: LibraryGauss_Intf.TDatosFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryGauss_Intf.TDatosFactura) then begin
    lSource := LibraryGauss_Intf.TDatosFactura(iSource);
    Factura.Assign(lSource.Factura);
    Detalles.Assign(lSource.Detalles);
  end;
end;

function TDatosFactura.GetFactura: TFactura;
begin
  if (fFactura = nil) then fFactura := TFactura.Create();
  result := fFactura;
end;

function TDatosFactura.GetDetalles: ATDetalleFactura;
begin
  if (fDetalles = nil) then fDetalles := ATDetalleFactura.Create();
  result := fDetalles;
end;

procedure TDatosFactura.ReadComplex(ASerializer: TObject);
var
  l_Detalles: ATDetalleFactura;
  l_Factura: TFactura;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Factura := Factura;
    TROSerializer(ASerializer).ReadStruct('Factura', TFactura, l_Factura);
    if Factura <> l_Factura then Factura.Free;
    Factura := l_Factura;
    l_Detalles := Detalles;
    TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleFactura, l_Detalles);
    if Detalles <> l_Detalles then Detalles.Free;
    Detalles := l_Detalles;
  end
  else begin
    l_Detalles := Detalles;
    TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleFactura, l_Detalles);
    if Detalles <> l_Detalles then Detalles.Free;
    Detalles := l_Detalles;
    l_Factura := Factura;
    TROSerializer(ASerializer).ReadStruct('Factura', TFactura, l_Factura);
    if Factura <> l_Factura then Factura.Free;
    Factura := l_Factura;
  end;
end;

procedure TDatosFactura.WriteComplex(ASerializer: TObject);
var
  l_Detalles: ATDetalleFactura;
  l_Factura: TFactura;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosFactura);
    l_Factura := Factura;
    TROSerializer(ASerializer).WriteStruct('Factura', l_Factura, TFactura);
    l_Detalles := Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleFactura);
  end
  else begin
    l_Detalles := Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleFactura);
    l_Factura := Factura;
    TROSerializer(ASerializer).WriteStruct('Factura', l_Factura, TFactura);
  end;
end;

{ TDatosFacturaCollection }
constructor TDatosFacturaCollection.Create;
begin
  inherited Create(TDatosFactura);
end;

constructor TDatosFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosFacturaCollection.Add: TDatosFactura;
begin
  result := TDatosFactura(inherited Add);
end;

function TDatosFacturaCollection.GetItems(aIndex: integer): TDatosFactura;
begin
  result := TDatosFactura(inherited Items[aIndex]);
end;

procedure TDatosFacturaCollection.SetItems(aIndex: integer; const Value: TDatosFactura);
begin
  TDatosFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TFactura }

procedure TFactura.Assign(iSource: TPersistent); 
var lSource: LibraryGauss_Intf.TFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryGauss_Intf.TFactura) then begin
    lSource := LibraryGauss_Intf.TFactura(iSource);
    ClienteID := lSource.ClienteID;
    Ejercicio := lSource.Ejercicio;
    FacturaID := lSource.FacturaID;
    Fecha := lSource.Fecha;
    FechaImpresion := lSource.FechaImpresion;
    FechaVencimiento := lSource.FechaVencimiento;
    Folio := lSource.Folio;
    Impuesto := lSource.Impuesto;
    MovimientoID := lSource.MovimientoID;
    Saldo := lSource.Saldo;
    Serie := lSource.Serie;
    Subtotal := lSource.Subtotal;
    Tickets := lSource.Tickets;
    Total := lSource.Total;
    UsuarioID := lSource.UsuarioID;
    Periodo := lSource.Periodo;
    ImpuestoPorcentaje := lSource.ImpuestoPorcentaje;
    FormaPagoID := lSource.FormaPagoID;
  end;
end;

procedure TFactura.ReadComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Ejercicio: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_FechaImpresion: DateTime;
  l_FechaVencimiento: DateTime;
  l_Folio: Integer;
  l_FormaPagoID: Integer;
  l_Impuesto: Double;
  l_ImpuestoPorcentaje: Double;
  l_MovimientoID: Integer;
  l_Periodo: Integer;
  l_Saldo: Double;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Tickets: AnsiString;
  l_Total: Double;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).ReadInteger('Ejercicio', otSLong, l_Ejercicio);
    Ejercicio := l_Ejercicio;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_FechaImpresion := FechaImpresion;
    TROSerializer(ASerializer).ReadDateTime('FechaImpresion', l_FechaImpresion);
    FechaImpresion := l_FechaImpresion;
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).ReadDateTime('FechaVencimiento', l_FechaVencimiento);
    FechaVencimiento := l_FechaVencimiento;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadInteger('Folio', otSLong, l_Folio);
    Folio := l_Folio;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).ReadInteger('MovimientoID', otSLong, l_MovimientoID);
    MovimientoID := l_MovimientoID;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).ReadDouble('Subtotal', ftDouble, l_Subtotal);
    Subtotal := l_Subtotal;
    l_Tickets := Tickets;
    TROSerializer(ASerializer).ReadAnsiString('Tickets', l_Tickets);
    Tickets := l_Tickets;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).ReadInteger('UsuarioID', otSLong, l_UsuarioID);
    UsuarioID := l_UsuarioID;
    l_Periodo := Periodo;
    TROSerializer(ASerializer).ReadInteger('Periodo', otSLong, l_Periodo);
    Periodo := l_Periodo;
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).ReadDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    ImpuestoPorcentaje := l_ImpuestoPorcentaje;
    l_FormaPagoID := FormaPagoID;
    TROSerializer(ASerializer).ReadInteger('FormaPagoID', otSLong, l_FormaPagoID);
    FormaPagoID := l_FormaPagoID;
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).ReadInteger('Ejercicio', otSLong, l_Ejercicio);
    Ejercicio := l_Ejercicio;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_FechaImpresion := FechaImpresion;
    TROSerializer(ASerializer).ReadDateTime('FechaImpresion', l_FechaImpresion);
    FechaImpresion := l_FechaImpresion;
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).ReadDateTime('FechaVencimiento', l_FechaVencimiento);
    FechaVencimiento := l_FechaVencimiento;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadInteger('Folio', otSLong, l_Folio);
    Folio := l_Folio;
    l_FormaPagoID := FormaPagoID;
    TROSerializer(ASerializer).ReadInteger('FormaPagoID', otSLong, l_FormaPagoID);
    FormaPagoID := l_FormaPagoID;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).ReadDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    ImpuestoPorcentaje := l_ImpuestoPorcentaje;
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).ReadInteger('MovimientoID', otSLong, l_MovimientoID);
    MovimientoID := l_MovimientoID;
    l_Periodo := Periodo;
    TROSerializer(ASerializer).ReadInteger('Periodo', otSLong, l_Periodo);
    Periodo := l_Periodo;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).ReadDouble('Subtotal', ftDouble, l_Subtotal);
    Subtotal := l_Subtotal;
    l_Tickets := Tickets;
    TROSerializer(ASerializer).ReadAnsiString('Tickets', l_Tickets);
    Tickets := l_Tickets;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).ReadInteger('UsuarioID', otSLong, l_UsuarioID);
    UsuarioID := l_UsuarioID;
  end;
end;

procedure TFactura.WriteComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Ejercicio: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_FechaImpresion: DateTime;
  l_FechaVencimiento: DateTime;
  l_Folio: Integer;
  l_FormaPagoID: Integer;
  l_Impuesto: Double;
  l_ImpuestoPorcentaje: Double;
  l_MovimientoID: Integer;
  l_Periodo: Integer;
  l_Saldo: Double;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Tickets: AnsiString;
  l_Total: Double;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFactura);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', otSLong, l_Ejercicio);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_FechaImpresion := FechaImpresion;
    TROSerializer(ASerializer).WriteDateTime('FechaImpresion', l_FechaImpresion);
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).WriteDateTime('FechaVencimiento', l_FechaVencimiento);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', otSLong, l_Folio);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).WriteInteger('MovimientoID', otSLong, l_MovimientoID);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', ftDouble, l_Subtotal);
    l_Tickets := Tickets;
    TROSerializer(ASerializer).WriteAnsiString('Tickets', l_Tickets);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', otSLong, l_UsuarioID);
    l_Periodo := Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', otSLong, l_Periodo);
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).WriteDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    l_FormaPagoID := FormaPagoID;
    TROSerializer(ASerializer).WriteInteger('FormaPagoID', otSLong, l_FormaPagoID);
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', otSLong, l_Ejercicio);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_FechaImpresion := FechaImpresion;
    TROSerializer(ASerializer).WriteDateTime('FechaImpresion', l_FechaImpresion);
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).WriteDateTime('FechaVencimiento', l_FechaVencimiento);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', otSLong, l_Folio);
    l_FormaPagoID := FormaPagoID;
    TROSerializer(ASerializer).WriteInteger('FormaPagoID', otSLong, l_FormaPagoID);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).WriteDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).WriteInteger('MovimientoID', otSLong, l_MovimientoID);
    l_Periodo := Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', otSLong, l_Periodo);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', ftDouble, l_Subtotal);
    l_Tickets := Tickets;
    TROSerializer(ASerializer).WriteAnsiString('Tickets', l_Tickets);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', otSLong, l_UsuarioID);
  end;
end;

{ TFacturaCollection }
constructor TFacturaCollection.Create;
begin
  inherited Create(TFactura);
end;

constructor TFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaCollection.Add: TFactura;
begin
  result := TFactura(inherited Add);
end;

function TFacturaCollection.GetItems(aIndex: integer): TFactura;
begin
  result := TFactura(inherited Items[aIndex]);
end;

procedure TFacturaCollection.SetItems(aIndex: integer; const Value: TFactura);
begin
  TFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleFactura }

procedure TDetalleFactura.Assign(iSource: TPersistent); 
var lSource: LibraryGauss_Intf.TDetalleFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryGauss_Intf.TDetalleFactura) then begin
    lSource := LibraryGauss_Intf.TDetalleFactura(iSource);
    DetalleFacturaID := lSource.DetalleFacturaID;
    FacturaID := lSource.FacturaID;
    Cantidad := lSource.Cantidad;
    Precio := lSource.Precio;
    Importe := lSource.Importe;
    ProductoID := lSource.ProductoID;
  end;
end;

procedure TDetalleFactura.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_DetalleFacturaID: Integer;
  l_FacturaID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_DetalleFacturaID := DetalleFacturaID;
    TROSerializer(ASerializer).ReadInteger('DetalleFacturaID', otSLong, l_DetalleFacturaID);
    DetalleFacturaID := l_DetalleFacturaID;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_DetalleFacturaID := DetalleFacturaID;
    TROSerializer(ASerializer).ReadInteger('DetalleFacturaID', otSLong, l_DetalleFacturaID);
    DetalleFacturaID := l_DetalleFacturaID;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
  end;
end;

procedure TDetalleFactura.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_DetalleFacturaID: Integer;
  l_FacturaID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleFactura);
    l_DetalleFacturaID := DetalleFacturaID;
    TROSerializer(ASerializer).WriteInteger('DetalleFacturaID', otSLong, l_DetalleFacturaID);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_DetalleFacturaID := DetalleFacturaID;
    TROSerializer(ASerializer).WriteInteger('DetalleFacturaID', otSLong, l_DetalleFacturaID);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
  end;
end;

{ TDetalleFacturaCollection }
constructor TDetalleFacturaCollection.Create;
begin
  inherited Create(TDetalleFactura);
end;

constructor TDetalleFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleFacturaCollection.Add: TDetalleFactura;
begin
  result := TDetalleFactura(inherited Add);
end;

function TDetalleFacturaCollection.GetItems(aIndex: integer): TDetalleFactura;
begin
  result := TDetalleFactura(inherited Items[aIndex]);
end;

procedure TDetalleFacturaCollection.LoadFromArray(anArray: ATDetalleFactura);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDetalleFacturaCollection.SaveToArray(anArray: ATDetalleFactura);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDetalleFactura.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDetalleFacturaCollection.SetItems(aIndex: integer; const Value: TDetalleFactura);
begin
  TDetalleFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TParametrosF }

procedure TParametrosF.Assign(iSource: TPersistent); 
var lSource: LibraryGauss_Intf.TParametrosF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryGauss_Intf.TParametrosF) then begin
    lSource := LibraryGauss_Intf.TParametrosF(iSource);
    FechaIni := lSource.FechaIni;
    FechaFin := lSource.FechaFin;
    Alumno := lSource.Alumno;
    AlumnoIni := lSource.AlumnoIni;
    AlumnoFin := lSource.AlumnoFin;
    Grupo := lSource.Grupo;
    Ciclo := lSource.Ciclo;
    Maestro := lSource.Maestro;
    MaestroIni := lSource.MaestroIni;
    MaestroFin := lSource.MaestroFin;
    Nivel := lSource.Nivel;
    TipoPago := lSource.TipoPago;
    TipoCalificacion := lSource.TipoCalificacion;
    Usuario := lSource.Usuario;
    Familia := lSource.Familia;
    Valor1 := lSource.Valor1;
    Status := lSource.Status;
    Serie := lSource.Serie;
    Factura := lSource.Factura;
  end;
end;

procedure TParametrosF.ReadComplex(ASerializer: TObject);
var
  l_Alumno: Integer;
  l_AlumnoFin: Integer;
  l_AlumnoIni: Integer;
  l_Ciclo: Integer;
  l_Factura: Integer;
  l_Familia: Integer;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_Grupo: Integer;
  l_Maestro: Integer;
  l_MaestroFin: Integer;
  l_MaestroIni: Integer;
  l_Nivel: Integer;
  l_Serie: AnsiString;
  l_Status: Integer;
  l_TipoCalificacion: Integer;
  l_TipoPago: Integer;
  l_Usuario: Integer;
  l_Valor1: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    FechaIni := l_FechaIni;
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    FechaFin := l_FechaFin;
    l_Alumno := Alumno;
    TROSerializer(ASerializer).ReadInteger('Alumno', otSLong, l_Alumno);
    Alumno := l_Alumno;
    l_AlumnoIni := AlumnoIni;
    TROSerializer(ASerializer).ReadInteger('AlumnoIni', otSLong, l_AlumnoIni);
    AlumnoIni := l_AlumnoIni;
    l_AlumnoFin := AlumnoFin;
    TROSerializer(ASerializer).ReadInteger('AlumnoFin', otSLong, l_AlumnoFin);
    AlumnoFin := l_AlumnoFin;
    l_Grupo := Grupo;
    TROSerializer(ASerializer).ReadInteger('Grupo', otSLong, l_Grupo);
    Grupo := l_Grupo;
    l_Ciclo := Ciclo;
    TROSerializer(ASerializer).ReadInteger('Ciclo', otSLong, l_Ciclo);
    Ciclo := l_Ciclo;
    l_Maestro := Maestro;
    TROSerializer(ASerializer).ReadInteger('Maestro', otSLong, l_Maestro);
    Maestro := l_Maestro;
    l_MaestroIni := MaestroIni;
    TROSerializer(ASerializer).ReadInteger('MaestroIni', otSLong, l_MaestroIni);
    MaestroIni := l_MaestroIni;
    l_MaestroFin := MaestroFin;
    TROSerializer(ASerializer).ReadInteger('MaestroFin', otSLong, l_MaestroFin);
    MaestroFin := l_MaestroFin;
    l_Nivel := Nivel;
    TROSerializer(ASerializer).ReadInteger('Nivel', otSLong, l_Nivel);
    Nivel := l_Nivel;
    l_TipoPago := TipoPago;
    TROSerializer(ASerializer).ReadInteger('TipoPago', otSLong, l_TipoPago);
    TipoPago := l_TipoPago;
    l_TipoCalificacion := TipoCalificacion;
    TROSerializer(ASerializer).ReadInteger('TipoCalificacion', otSLong, l_TipoCalificacion);
    TipoCalificacion := l_TipoCalificacion;
    l_Usuario := Usuario;
    TROSerializer(ASerializer).ReadInteger('Usuario', otSLong, l_Usuario);
    Usuario := l_Usuario;
    l_Familia := Familia;
    TROSerializer(ASerializer).ReadInteger('Familia', otSLong, l_Familia);
    Familia := l_Familia;
    l_Valor1 := Valor1;
    TROSerializer(ASerializer).ReadInteger('Valor1', otSLong, l_Valor1);
    Valor1 := l_Valor1;
    l_Status := Status;
    TROSerializer(ASerializer).ReadInteger('Status', otSLong, l_Status);
    Status := l_Status;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Factura := Factura;
    TROSerializer(ASerializer).ReadInteger('Factura', otSLong, l_Factura);
    Factura := l_Factura;
  end
  else begin
    l_Alumno := Alumno;
    TROSerializer(ASerializer).ReadInteger('Alumno', otSLong, l_Alumno);
    Alumno := l_Alumno;
    l_AlumnoFin := AlumnoFin;
    TROSerializer(ASerializer).ReadInteger('AlumnoFin', otSLong, l_AlumnoFin);
    AlumnoFin := l_AlumnoFin;
    l_AlumnoIni := AlumnoIni;
    TROSerializer(ASerializer).ReadInteger('AlumnoIni', otSLong, l_AlumnoIni);
    AlumnoIni := l_AlumnoIni;
    l_Ciclo := Ciclo;
    TROSerializer(ASerializer).ReadInteger('Ciclo', otSLong, l_Ciclo);
    Ciclo := l_Ciclo;
    l_Factura := Factura;
    TROSerializer(ASerializer).ReadInteger('Factura', otSLong, l_Factura);
    Factura := l_Factura;
    l_Familia := Familia;
    TROSerializer(ASerializer).ReadInteger('Familia', otSLong, l_Familia);
    Familia := l_Familia;
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    FechaFin := l_FechaFin;
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    FechaIni := l_FechaIni;
    l_Grupo := Grupo;
    TROSerializer(ASerializer).ReadInteger('Grupo', otSLong, l_Grupo);
    Grupo := l_Grupo;
    l_Maestro := Maestro;
    TROSerializer(ASerializer).ReadInteger('Maestro', otSLong, l_Maestro);
    Maestro := l_Maestro;
    l_MaestroFin := MaestroFin;
    TROSerializer(ASerializer).ReadInteger('MaestroFin', otSLong, l_MaestroFin);
    MaestroFin := l_MaestroFin;
    l_MaestroIni := MaestroIni;
    TROSerializer(ASerializer).ReadInteger('MaestroIni', otSLong, l_MaestroIni);
    MaestroIni := l_MaestroIni;
    l_Nivel := Nivel;
    TROSerializer(ASerializer).ReadInteger('Nivel', otSLong, l_Nivel);
    Nivel := l_Nivel;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Status := Status;
    TROSerializer(ASerializer).ReadInteger('Status', otSLong, l_Status);
    Status := l_Status;
    l_TipoCalificacion := TipoCalificacion;
    TROSerializer(ASerializer).ReadInteger('TipoCalificacion', otSLong, l_TipoCalificacion);
    TipoCalificacion := l_TipoCalificacion;
    l_TipoPago := TipoPago;
    TROSerializer(ASerializer).ReadInteger('TipoPago', otSLong, l_TipoPago);
    TipoPago := l_TipoPago;
    l_Usuario := Usuario;
    TROSerializer(ASerializer).ReadInteger('Usuario', otSLong, l_Usuario);
    Usuario := l_Usuario;
    l_Valor1 := Valor1;
    TROSerializer(ASerializer).ReadInteger('Valor1', otSLong, l_Valor1);
    Valor1 := l_Valor1;
  end;
end;

procedure TParametrosF.WriteComplex(ASerializer: TObject);
var
  l_Alumno: Integer;
  l_AlumnoFin: Integer;
  l_AlumnoIni: Integer;
  l_Ciclo: Integer;
  l_Factura: Integer;
  l_Familia: Integer;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_Grupo: Integer;
  l_Maestro: Integer;
  l_MaestroFin: Integer;
  l_MaestroIni: Integer;
  l_Nivel: Integer;
  l_Serie: AnsiString;
  l_Status: Integer;
  l_TipoCalificacion: Integer;
  l_TipoPago: Integer;
  l_Usuario: Integer;
  l_Valor1: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TParametrosF);
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_Alumno := Alumno;
    TROSerializer(ASerializer).WriteInteger('Alumno', otSLong, l_Alumno);
    l_AlumnoIni := AlumnoIni;
    TROSerializer(ASerializer).WriteInteger('AlumnoIni', otSLong, l_AlumnoIni);
    l_AlumnoFin := AlumnoFin;
    TROSerializer(ASerializer).WriteInteger('AlumnoFin', otSLong, l_AlumnoFin);
    l_Grupo := Grupo;
    TROSerializer(ASerializer).WriteInteger('Grupo', otSLong, l_Grupo);
    l_Ciclo := Ciclo;
    TROSerializer(ASerializer).WriteInteger('Ciclo', otSLong, l_Ciclo);
    l_Maestro := Maestro;
    TROSerializer(ASerializer).WriteInteger('Maestro', otSLong, l_Maestro);
    l_MaestroIni := MaestroIni;
    TROSerializer(ASerializer).WriteInteger('MaestroIni', otSLong, l_MaestroIni);
    l_MaestroFin := MaestroFin;
    TROSerializer(ASerializer).WriteInteger('MaestroFin', otSLong, l_MaestroFin);
    l_Nivel := Nivel;
    TROSerializer(ASerializer).WriteInteger('Nivel', otSLong, l_Nivel);
    l_TipoPago := TipoPago;
    TROSerializer(ASerializer).WriteInteger('TipoPago', otSLong, l_TipoPago);
    l_TipoCalificacion := TipoCalificacion;
    TROSerializer(ASerializer).WriteInteger('TipoCalificacion', otSLong, l_TipoCalificacion);
    l_Usuario := Usuario;
    TROSerializer(ASerializer).WriteInteger('Usuario', otSLong, l_Usuario);
    l_Familia := Familia;
    TROSerializer(ASerializer).WriteInteger('Familia', otSLong, l_Familia);
    l_Valor1 := Valor1;
    TROSerializer(ASerializer).WriteInteger('Valor1', otSLong, l_Valor1);
    l_Status := Status;
    TROSerializer(ASerializer).WriteInteger('Status', otSLong, l_Status);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Factura := Factura;
    TROSerializer(ASerializer).WriteInteger('Factura', otSLong, l_Factura);
  end
  else begin
    l_Alumno := Alumno;
    TROSerializer(ASerializer).WriteInteger('Alumno', otSLong, l_Alumno);
    l_AlumnoFin := AlumnoFin;
    TROSerializer(ASerializer).WriteInteger('AlumnoFin', otSLong, l_AlumnoFin);
    l_AlumnoIni := AlumnoIni;
    TROSerializer(ASerializer).WriteInteger('AlumnoIni', otSLong, l_AlumnoIni);
    l_Ciclo := Ciclo;
    TROSerializer(ASerializer).WriteInteger('Ciclo', otSLong, l_Ciclo);
    l_Factura := Factura;
    TROSerializer(ASerializer).WriteInteger('Factura', otSLong, l_Factura);
    l_Familia := Familia;
    TROSerializer(ASerializer).WriteInteger('Familia', otSLong, l_Familia);
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_Grupo := Grupo;
    TROSerializer(ASerializer).WriteInteger('Grupo', otSLong, l_Grupo);
    l_Maestro := Maestro;
    TROSerializer(ASerializer).WriteInteger('Maestro', otSLong, l_Maestro);
    l_MaestroFin := MaestroFin;
    TROSerializer(ASerializer).WriteInteger('MaestroFin', otSLong, l_MaestroFin);
    l_MaestroIni := MaestroIni;
    TROSerializer(ASerializer).WriteInteger('MaestroIni', otSLong, l_MaestroIni);
    l_Nivel := Nivel;
    TROSerializer(ASerializer).WriteInteger('Nivel', otSLong, l_Nivel);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Status := Status;
    TROSerializer(ASerializer).WriteInteger('Status', otSLong, l_Status);
    l_TipoCalificacion := TipoCalificacion;
    TROSerializer(ASerializer).WriteInteger('TipoCalificacion', otSLong, l_TipoCalificacion);
    l_TipoPago := TipoPago;
    TROSerializer(ASerializer).WriteInteger('TipoPago', otSLong, l_TipoPago);
    l_Usuario := Usuario;
    TROSerializer(ASerializer).WriteInteger('Usuario', otSLong, l_Usuario);
    l_Valor1 := Valor1;
    TROSerializer(ASerializer).WriteInteger('Valor1', otSLong, l_Valor1);
  end;
end;

{ TParametrosFCollection }
constructor TParametrosFCollection.Create;
begin
  inherited Create(TParametrosF);
end;

constructor TParametrosFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TParametrosFCollection.Add: TParametrosF;
begin
  result := TParametrosF(inherited Add);
end;

function TParametrosFCollection.GetItems(aIndex: integer): TParametrosF;
begin
  result := TParametrosF(inherited Items[aIndex]);
end;

procedure TParametrosFCollection.SetItems(aIndex: integer; const Value: TParametrosF);
begin
  TParametrosF(inherited Items[aIndex]).Assign(Value);
end;

{ TReporteF }

procedure TReporteF.Assign(iSource: TPersistent); 
var lSource: LibraryGauss_Intf.TReporteF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryGauss_Intf.TReporteF) then begin
    lSource := LibraryGauss_Intf.TReporteF(iSource);
    SQL1 := lSource.SQL1;
    SQL2 := lSource.SQL2;
    Template := lSource.Template;
    CampoJoin := lSource.CampoJoin;
  end;
end;

procedure TReporteF.ReadComplex(ASerializer: TObject);
var
  l_CampoJoin: AnsiString;
  l_SQL1: AnsiString;
  l_SQL2: AnsiString;
  l_Template: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).ReadAnsiString('SQL1', l_SQL1);
    SQL1 := l_SQL1;
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).ReadAnsiString('SQL2', l_SQL2);
    SQL2 := l_SQL2;
    l_Template := Template;
    TROSerializer(ASerializer).ReadAnsiString('Template', l_Template);
    Template := l_Template;
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).ReadAnsiString('CampoJoin', l_CampoJoin);
    CampoJoin := l_CampoJoin;
  end
  else begin
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).ReadAnsiString('CampoJoin', l_CampoJoin);
    CampoJoin := l_CampoJoin;
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).ReadAnsiString('SQL1', l_SQL1);
    SQL1 := l_SQL1;
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).ReadAnsiString('SQL2', l_SQL2);
    SQL2 := l_SQL2;
    l_Template := Template;
    TROSerializer(ASerializer).ReadAnsiString('Template', l_Template);
    Template := l_Template;
  end;
end;

procedure TReporteF.WriteComplex(ASerializer: TObject);
var
  l_CampoJoin: AnsiString;
  l_SQL1: AnsiString;
  l_SQL2: AnsiString;
  l_Template: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TReporteF);
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).WriteAnsiString('SQL1', l_SQL1);
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).WriteAnsiString('SQL2', l_SQL2);
    l_Template := Template;
    TROSerializer(ASerializer).WriteAnsiString('Template', l_Template);
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).WriteAnsiString('CampoJoin', l_CampoJoin);
  end
  else begin
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).WriteAnsiString('CampoJoin', l_CampoJoin);
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).WriteAnsiString('SQL1', l_SQL1);
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).WriteAnsiString('SQL2', l_SQL2);
    l_Template := Template;
    TROSerializer(ASerializer).WriteAnsiString('Template', l_Template);
  end;
end;

{ TReporteFCollection }
constructor TReporteFCollection.Create;
begin
  inherited Create(TReporteF);
end;

constructor TReporteFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TReporteFCollection.Add: TReporteF;
begin
  result := TReporteF(inherited Add);
end;

function TReporteFCollection.GetItems(aIndex: integer): TReporteF;
begin
  result := TReporteF(inherited Items[aIndex]);
end;

procedure TReporteFCollection.SetItems(aIndex: integer; const Value: TReporteF);
begin
  TReporteF(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaElectronicaF }

procedure TFacturaElectronicaF.Assign(iSource: TPersistent); 
var lSource: LibraryGauss_Intf.TFacturaElectronicaF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryGauss_Intf.TFacturaElectronicaF) then begin
    lSource := LibraryGauss_Intf.TFacturaElectronicaF(iSource);
    Serie := lSource.Serie;
    Folio := lSource.Folio;
    Fecha := lSource.Fecha;
    noAprobacion := lSource.noAprobacion;
    anoAprobacion := lSource.anoAprobacion;
    tipoComprobante := lSource.tipoComprobante;
    formadePago := lSource.formadePago;
    SubTotal := lSource.SubTotal;
    Total := lSource.Total;
    RFCEmisor := lSource.RFCEmisor;
    NomEmpEmisor := lSource.NomEmpEmisor;
    DireccionEm := lSource.DireccionEm;
    NoExteriorEM := lSource.NoExteriorEM;
    ColoniaEmisor := lSource.ColoniaEmisor;
    MunicipioEmisor := lSource.MunicipioEmisor;
    EstadoEmisor := lSource.EstadoEmisor;
    PaisEmisor := lSource.PaisEmisor;
    CodigoPostalEmisor := lSource.CodigoPostalEmisor;
    RFCReceptor := lSource.RFCReceptor;
    NombreReceptor := lSource.NombreReceptor;
    DomicilioReceptor := lSource.DomicilioReceptor;
    NoExteriorReceptor := lSource.NoExteriorReceptor;
    ColoniaReceptor := lSource.ColoniaReceptor;
    LocalidadReceptor := lSource.LocalidadReceptor;
    MunicipioReceptor := lSource.MunicipioReceptor;
    EstadoReceptor := lSource.EstadoReceptor;
    PaisReceptor := lSource.PaisReceptor;
    CodigoPostalReceptor := lSource.CodigoPostalReceptor;
    FacturaElectronicaDetalleImportes.Assign(lSource.FacturaElectronicaDetalleImportes);
    FacturaElectronicaDetalleImpuestos.Assign(lSource.FacturaElectronicaDetalleImpuestos);
    TotalImpuesto := lSource.TotalImpuesto;
    CalleExpedidoEn := lSource.CalleExpedidoEn;
    NoExterioExpedidoEn := lSource.NoExterioExpedidoEn;
    ColoniaExpedidoEn := lSource.ColoniaExpedidoEn;
    CodigoPostalExpedidoEn := lSource.CodigoPostalExpedidoEn;
    LocalidadExpedidoEn := lSource.LocalidadExpedidoEn;
    MunicipioExpedidoEn := lSource.MunicipioExpedidoEn;
    EstadoExpedidoEn := lSource.EstadoExpedidoEn;
    PaisExpedidoEn := lSource.PaisExpedidoEn;
    Sucursal := lSource.Sucursal;
    email := lSource.email;
  end;
end;

function TFacturaElectronicaF.GetFacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
begin
  if (fFacturaElectronicaDetalleImportes = nil) then fFacturaElectronicaDetalleImportes := ATFacturaElectronicaDetalleImportes.Create();
  result := fFacturaElectronicaDetalleImportes;
end;

function TFacturaElectronicaF.GetFacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
begin
  if (fFacturaElectronicaDetalleImpuestos = nil) then fFacturaElectronicaDetalleImpuestos := ATFacturaElectronicaDetalleImpuestos.Create();
  result := fFacturaElectronicaDetalleImpuestos;
end;

procedure TFacturaElectronicaF.ReadComplex(ASerializer: TObject);
var
  l_anoAprobacion: AnsiString;
  l_CalleExpedidoEn: AnsiString;
  l_CodigoPostalEmisor: AnsiString;
  l_CodigoPostalExpedidoEn: AnsiString;
  l_CodigoPostalReceptor: AnsiString;
  l_ColoniaEmisor: AnsiString;
  l_ColoniaExpedidoEn: AnsiString;
  l_ColoniaReceptor: AnsiString;
  l_DireccionEm: AnsiString;
  l_DomicilioReceptor: AnsiString;
  l_email: AnsiString;
  l_EstadoEmisor: AnsiString;
  l_EstadoExpedidoEn: AnsiString;
  l_EstadoReceptor: AnsiString;
  l_FacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
  l_FacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
  l_Fecha: AnsiString;
  l_Folio: AnsiString;
  l_formadePago: AnsiString;
  l_LocalidadExpedidoEn: AnsiString;
  l_LocalidadReceptor: AnsiString;
  l_MunicipioEmisor: AnsiString;
  l_MunicipioExpedidoEn: AnsiString;
  l_MunicipioReceptor: AnsiString;
  l_noAprobacion: AnsiString;
  l_NoExterioExpedidoEn: AnsiString;
  l_NoExteriorEM: AnsiString;
  l_NoExteriorReceptor: AnsiString;
  l_NombreReceptor: AnsiString;
  l_NomEmpEmisor: AnsiString;
  l_PaisEmisor: AnsiString;
  l_PaisExpedidoEn: AnsiString;
  l_PaisReceptor: AnsiString;
  l_RFCEmisor: AnsiString;
  l_RFCReceptor: AnsiString;
  l_Serie: AnsiString;
  l_SubTotal: AnsiString;
  l_Sucursal: Boolean;
  l_tipoComprobante: AnsiString;
  l_Total: AnsiString;
  l_TotalImpuesto: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadAnsiString('Folio', l_Folio);
    Folio := l_Folio;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadAnsiString('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_noAprobacion := noAprobacion;
    TROSerializer(ASerializer).ReadAnsiString('noAprobacion', l_noAprobacion);
    noAprobacion := l_noAprobacion;
    l_anoAprobacion := anoAprobacion;
    TROSerializer(ASerializer).ReadAnsiString('anoAprobacion', l_anoAprobacion);
    anoAprobacion := l_anoAprobacion;
    l_tipoComprobante := tipoComprobante;
    TROSerializer(ASerializer).ReadAnsiString('tipoComprobante', l_tipoComprobante);
    tipoComprobante := l_tipoComprobante;
    l_formadePago := formadePago;
    TROSerializer(ASerializer).ReadAnsiString('formadePago', l_formadePago);
    formadePago := l_formadePago;
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).ReadAnsiString('SubTotal', l_SubTotal);
    SubTotal := l_SubTotal;
    l_Total := Total;
    TROSerializer(ASerializer).ReadAnsiString('Total', l_Total);
    Total := l_Total;
    l_RFCEmisor := RFCEmisor;
    TROSerializer(ASerializer).ReadAnsiString('RFCEmisor', l_RFCEmisor);
    RFCEmisor := l_RFCEmisor;
    l_NomEmpEmisor := NomEmpEmisor;
    TROSerializer(ASerializer).ReadAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    NomEmpEmisor := l_NomEmpEmisor;
    l_DireccionEm := DireccionEm;
    TROSerializer(ASerializer).ReadAnsiString('DireccionEm', l_DireccionEm);
    DireccionEm := l_DireccionEm;
    l_NoExteriorEM := NoExteriorEM;
    TROSerializer(ASerializer).ReadAnsiString('NoExteriorEM', l_NoExteriorEM);
    NoExteriorEM := l_NoExteriorEM;
    l_ColoniaEmisor := ColoniaEmisor;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    ColoniaEmisor := l_ColoniaEmisor;
    l_MunicipioEmisor := MunicipioEmisor;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    MunicipioEmisor := l_MunicipioEmisor;
    l_EstadoEmisor := EstadoEmisor;
    TROSerializer(ASerializer).ReadAnsiString('EstadoEmisor', l_EstadoEmisor);
    EstadoEmisor := l_EstadoEmisor;
    l_PaisEmisor := PaisEmisor;
    TROSerializer(ASerializer).ReadAnsiString('PaisEmisor', l_PaisEmisor);
    PaisEmisor := l_PaisEmisor;
    l_CodigoPostalEmisor := CodigoPostalEmisor;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    CodigoPostalEmisor := l_CodigoPostalEmisor;
    l_RFCReceptor := RFCReceptor;
    TROSerializer(ASerializer).ReadAnsiString('RFCReceptor', l_RFCReceptor);
    RFCReceptor := l_RFCReceptor;
    l_NombreReceptor := NombreReceptor;
    TROSerializer(ASerializer).ReadAnsiString('NombreReceptor', l_NombreReceptor);
    NombreReceptor := l_NombreReceptor;
    l_DomicilioReceptor := DomicilioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    DomicilioReceptor := l_DomicilioReceptor;
    l_NoExteriorReceptor := NoExteriorReceptor;
    TROSerializer(ASerializer).ReadAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    NoExteriorReceptor := l_NoExteriorReceptor;
    l_ColoniaReceptor := ColoniaReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    ColoniaReceptor := l_ColoniaReceptor;
    l_LocalidadReceptor := LocalidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    LocalidadReceptor := l_LocalidadReceptor;
    l_MunicipioReceptor := MunicipioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    MunicipioReceptor := l_MunicipioReceptor;
    l_EstadoReceptor := EstadoReceptor;
    TROSerializer(ASerializer).ReadAnsiString('EstadoReceptor', l_EstadoReceptor);
    EstadoReceptor := l_EstadoReceptor;
    l_PaisReceptor := PaisReceptor;
    TROSerializer(ASerializer).ReadAnsiString('PaisReceptor', l_PaisReceptor);
    PaisReceptor := l_PaisReceptor;
    l_CodigoPostalReceptor := CodigoPostalReceptor;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    CodigoPostalReceptor := l_CodigoPostalReceptor;
    l_FacturaElectronicaDetalleImportes := FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImportes', ATFacturaElectronicaDetalleImportes, l_FacturaElectronicaDetalleImportes);
    if FacturaElectronicaDetalleImportes <> l_FacturaElectronicaDetalleImportes then FacturaElectronicaDetalleImportes.Free;
    FacturaElectronicaDetalleImportes := l_FacturaElectronicaDetalleImportes;
    l_FacturaElectronicaDetalleImpuestos := FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImpuestos', ATFacturaElectronicaDetalleImpuestos, l_FacturaElectronicaDetalleImpuestos);
    if FacturaElectronicaDetalleImpuestos <> l_FacturaElectronicaDetalleImpuestos then FacturaElectronicaDetalleImpuestos.Free;
    FacturaElectronicaDetalleImpuestos := l_FacturaElectronicaDetalleImpuestos;
    l_TotalImpuesto := TotalImpuesto;
    TROSerializer(ASerializer).ReadAnsiString('TotalImpuesto', l_TotalImpuesto);
    TotalImpuesto := l_TotalImpuesto;
    l_CalleExpedidoEn := CalleExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    CalleExpedidoEn := l_CalleExpedidoEn;
    l_NoExterioExpedidoEn := NoExterioExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    NoExterioExpedidoEn := l_NoExterioExpedidoEn;
    l_ColoniaExpedidoEn := ColoniaExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    ColoniaExpedidoEn := l_ColoniaExpedidoEn;
    l_CodigoPostalExpedidoEn := CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    CodigoPostalExpedidoEn := l_CodigoPostalExpedidoEn;
    l_LocalidadExpedidoEn := LocalidadExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    LocalidadExpedidoEn := l_LocalidadExpedidoEn;
    l_MunicipioExpedidoEn := MunicipioExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    MunicipioExpedidoEn := l_MunicipioExpedidoEn;
    l_EstadoExpedidoEn := EstadoExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    EstadoExpedidoEn := l_EstadoExpedidoEn;
    l_PaisExpedidoEn := PaisExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    PaisExpedidoEn := l_PaisExpedidoEn;
    l_Sucursal := Sucursal;
    TROSerializer(ASerializer).ReadEnumerated('Sucursal',TypeInfo(boolean), l_Sucursal);
    Sucursal := l_Sucursal;
    l_email := email;
    TROSerializer(ASerializer).ReadAnsiString('email', l_email);
    email := l_email;
  end
  else begin
    l_anoAprobacion := anoAprobacion;
    TROSerializer(ASerializer).ReadAnsiString('anoAprobacion', l_anoAprobacion);
    anoAprobacion := l_anoAprobacion;
    l_CalleExpedidoEn := CalleExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    CalleExpedidoEn := l_CalleExpedidoEn;
    l_CodigoPostalEmisor := CodigoPostalEmisor;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    CodigoPostalEmisor := l_CodigoPostalEmisor;
    l_CodigoPostalExpedidoEn := CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    CodigoPostalExpedidoEn := l_CodigoPostalExpedidoEn;
    l_CodigoPostalReceptor := CodigoPostalReceptor;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    CodigoPostalReceptor := l_CodigoPostalReceptor;
    l_ColoniaEmisor := ColoniaEmisor;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    ColoniaEmisor := l_ColoniaEmisor;
    l_ColoniaExpedidoEn := ColoniaExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    ColoniaExpedidoEn := l_ColoniaExpedidoEn;
    l_ColoniaReceptor := ColoniaReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    ColoniaReceptor := l_ColoniaReceptor;
    l_DireccionEm := DireccionEm;
    TROSerializer(ASerializer).ReadAnsiString('DireccionEm', l_DireccionEm);
    DireccionEm := l_DireccionEm;
    l_DomicilioReceptor := DomicilioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    DomicilioReceptor := l_DomicilioReceptor;
    l_email := email;
    TROSerializer(ASerializer).ReadAnsiString('email', l_email);
    email := l_email;
    l_EstadoEmisor := EstadoEmisor;
    TROSerializer(ASerializer).ReadAnsiString('EstadoEmisor', l_EstadoEmisor);
    EstadoEmisor := l_EstadoEmisor;
    l_EstadoExpedidoEn := EstadoExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    EstadoExpedidoEn := l_EstadoExpedidoEn;
    l_EstadoReceptor := EstadoReceptor;
    TROSerializer(ASerializer).ReadAnsiString('EstadoReceptor', l_EstadoReceptor);
    EstadoReceptor := l_EstadoReceptor;
    l_FacturaElectronicaDetalleImportes := FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImportes', ATFacturaElectronicaDetalleImportes, l_FacturaElectronicaDetalleImportes);
    if FacturaElectronicaDetalleImportes <> l_FacturaElectronicaDetalleImportes then FacturaElectronicaDetalleImportes.Free;
    FacturaElectronicaDetalleImportes := l_FacturaElectronicaDetalleImportes;
    l_FacturaElectronicaDetalleImpuestos := FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImpuestos', ATFacturaElectronicaDetalleImpuestos, l_FacturaElectronicaDetalleImpuestos);
    if FacturaElectronicaDetalleImpuestos <> l_FacturaElectronicaDetalleImpuestos then FacturaElectronicaDetalleImpuestos.Free;
    FacturaElectronicaDetalleImpuestos := l_FacturaElectronicaDetalleImpuestos;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadAnsiString('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadAnsiString('Folio', l_Folio);
    Folio := l_Folio;
    l_formadePago := formadePago;
    TROSerializer(ASerializer).ReadAnsiString('formadePago', l_formadePago);
    formadePago := l_formadePago;
    l_LocalidadExpedidoEn := LocalidadExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    LocalidadExpedidoEn := l_LocalidadExpedidoEn;
    l_LocalidadReceptor := LocalidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    LocalidadReceptor := l_LocalidadReceptor;
    l_MunicipioEmisor := MunicipioEmisor;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    MunicipioEmisor := l_MunicipioEmisor;
    l_MunicipioExpedidoEn := MunicipioExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    MunicipioExpedidoEn := l_MunicipioExpedidoEn;
    l_MunicipioReceptor := MunicipioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    MunicipioReceptor := l_MunicipioReceptor;
    l_noAprobacion := noAprobacion;
    TROSerializer(ASerializer).ReadAnsiString('noAprobacion', l_noAprobacion);
    noAprobacion := l_noAprobacion;
    l_NoExterioExpedidoEn := NoExterioExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    NoExterioExpedidoEn := l_NoExterioExpedidoEn;
    l_NoExteriorEM := NoExteriorEM;
    TROSerializer(ASerializer).ReadAnsiString('NoExteriorEM', l_NoExteriorEM);
    NoExteriorEM := l_NoExteriorEM;
    l_NoExteriorReceptor := NoExteriorReceptor;
    TROSerializer(ASerializer).ReadAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    NoExteriorReceptor := l_NoExteriorReceptor;
    l_NombreReceptor := NombreReceptor;
    TROSerializer(ASerializer).ReadAnsiString('NombreReceptor', l_NombreReceptor);
    NombreReceptor := l_NombreReceptor;
    l_NomEmpEmisor := NomEmpEmisor;
    TROSerializer(ASerializer).ReadAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    NomEmpEmisor := l_NomEmpEmisor;
    l_PaisEmisor := PaisEmisor;
    TROSerializer(ASerializer).ReadAnsiString('PaisEmisor', l_PaisEmisor);
    PaisEmisor := l_PaisEmisor;
    l_PaisExpedidoEn := PaisExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    PaisExpedidoEn := l_PaisExpedidoEn;
    l_PaisReceptor := PaisReceptor;
    TROSerializer(ASerializer).ReadAnsiString('PaisReceptor', l_PaisReceptor);
    PaisReceptor := l_PaisReceptor;
    l_RFCEmisor := RFCEmisor;
    TROSerializer(ASerializer).ReadAnsiString('RFCEmisor', l_RFCEmisor);
    RFCEmisor := l_RFCEmisor;
    l_RFCReceptor := RFCReceptor;
    TROSerializer(ASerializer).ReadAnsiString('RFCReceptor', l_RFCReceptor);
    RFCReceptor := l_RFCReceptor;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).ReadAnsiString('SubTotal', l_SubTotal);
    SubTotal := l_SubTotal;
    l_Sucursal := Sucursal;
    TROSerializer(ASerializer).ReadEnumerated('Sucursal',TypeInfo(boolean), l_Sucursal);
    Sucursal := l_Sucursal;
    l_tipoComprobante := tipoComprobante;
    TROSerializer(ASerializer).ReadAnsiString('tipoComprobante', l_tipoComprobante);
    tipoComprobante := l_tipoComprobante;
    l_Total := Total;
    TROSerializer(ASerializer).ReadAnsiString('Total', l_Total);
    Total := l_Total;
    l_TotalImpuesto := TotalImpuesto;
    TROSerializer(ASerializer).ReadAnsiString('TotalImpuesto', l_TotalImpuesto);
    TotalImpuesto := l_TotalImpuesto;
  end;
end;

procedure TFacturaElectronicaF.WriteComplex(ASerializer: TObject);
var
  l_anoAprobacion: AnsiString;
  l_CalleExpedidoEn: AnsiString;
  l_CodigoPostalEmisor: AnsiString;
  l_CodigoPostalExpedidoEn: AnsiString;
  l_CodigoPostalReceptor: AnsiString;
  l_ColoniaEmisor: AnsiString;
  l_ColoniaExpedidoEn: AnsiString;
  l_ColoniaReceptor: AnsiString;
  l_DireccionEm: AnsiString;
  l_DomicilioReceptor: AnsiString;
  l_email: AnsiString;
  l_EstadoEmisor: AnsiString;
  l_EstadoExpedidoEn: AnsiString;
  l_EstadoReceptor: AnsiString;
  l_FacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
  l_FacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
  l_Fecha: AnsiString;
  l_Folio: AnsiString;
  l_formadePago: AnsiString;
  l_LocalidadExpedidoEn: AnsiString;
  l_LocalidadReceptor: AnsiString;
  l_MunicipioEmisor: AnsiString;
  l_MunicipioExpedidoEn: AnsiString;
  l_MunicipioReceptor: AnsiString;
  l_noAprobacion: AnsiString;
  l_NoExterioExpedidoEn: AnsiString;
  l_NoExteriorEM: AnsiString;
  l_NoExteriorReceptor: AnsiString;
  l_NombreReceptor: AnsiString;
  l_NomEmpEmisor: AnsiString;
  l_PaisEmisor: AnsiString;
  l_PaisExpedidoEn: AnsiString;
  l_PaisReceptor: AnsiString;
  l_RFCEmisor: AnsiString;
  l_RFCReceptor: AnsiString;
  l_Serie: AnsiString;
  l_SubTotal: AnsiString;
  l_Sucursal: Boolean;
  l_tipoComprobante: AnsiString;
  l_Total: AnsiString;
  l_TotalImpuesto: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaElectronicaF);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteAnsiString('Folio', l_Folio);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteAnsiString('Fecha', l_Fecha);
    l_noAprobacion := noAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('noAprobacion', l_noAprobacion);
    l_anoAprobacion := anoAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('anoAprobacion', l_anoAprobacion);
    l_tipoComprobante := tipoComprobante;
    TROSerializer(ASerializer).WriteAnsiString('tipoComprobante', l_tipoComprobante);
    l_formadePago := formadePago;
    TROSerializer(ASerializer).WriteAnsiString('formadePago', l_formadePago);
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).WriteAnsiString('SubTotal', l_SubTotal);
    l_Total := Total;
    TROSerializer(ASerializer).WriteAnsiString('Total', l_Total);
    l_RFCEmisor := RFCEmisor;
    TROSerializer(ASerializer).WriteAnsiString('RFCEmisor', l_RFCEmisor);
    l_NomEmpEmisor := NomEmpEmisor;
    TROSerializer(ASerializer).WriteAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    l_DireccionEm := DireccionEm;
    TROSerializer(ASerializer).WriteAnsiString('DireccionEm', l_DireccionEm);
    l_NoExteriorEM := NoExteriorEM;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorEM', l_NoExteriorEM);
    l_ColoniaEmisor := ColoniaEmisor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    l_MunicipioEmisor := MunicipioEmisor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    l_EstadoEmisor := EstadoEmisor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoEmisor', l_EstadoEmisor);
    l_PaisEmisor := PaisEmisor;
    TROSerializer(ASerializer).WriteAnsiString('PaisEmisor', l_PaisEmisor);
    l_CodigoPostalEmisor := CodigoPostalEmisor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    l_RFCReceptor := RFCReceptor;
    TROSerializer(ASerializer).WriteAnsiString('RFCReceptor', l_RFCReceptor);
    l_NombreReceptor := NombreReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NombreReceptor', l_NombreReceptor);
    l_DomicilioReceptor := DomicilioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    l_NoExteriorReceptor := NoExteriorReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    l_ColoniaReceptor := ColoniaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    l_LocalidadReceptor := LocalidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    l_MunicipioReceptor := MunicipioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    l_EstadoReceptor := EstadoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoReceptor', l_EstadoReceptor);
    l_PaisReceptor := PaisReceptor;
    TROSerializer(ASerializer).WriteAnsiString('PaisReceptor', l_PaisReceptor);
    l_CodigoPostalReceptor := CodigoPostalReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    l_FacturaElectronicaDetalleImportes := FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImportes', l_FacturaElectronicaDetalleImportes, ATFacturaElectronicaDetalleImportes);
    l_FacturaElectronicaDetalleImpuestos := FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImpuestos', l_FacturaElectronicaDetalleImpuestos, ATFacturaElectronicaDetalleImpuestos);
    l_TotalImpuesto := TotalImpuesto;
    TROSerializer(ASerializer).WriteAnsiString('TotalImpuesto', l_TotalImpuesto);
    l_CalleExpedidoEn := CalleExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    l_NoExterioExpedidoEn := NoExterioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    l_ColoniaExpedidoEn := ColoniaExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    l_CodigoPostalExpedidoEn := CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    l_LocalidadExpedidoEn := LocalidadExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    l_MunicipioExpedidoEn := MunicipioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    l_EstadoExpedidoEn := EstadoExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    l_PaisExpedidoEn := PaisExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    l_Sucursal := Sucursal;
    TROSerializer(ASerializer).WriteEnumerated('Sucursal',TypeInfo(boolean), l_Sucursal);
    l_email := email;
    TROSerializer(ASerializer).WriteAnsiString('email', l_email);
  end
  else begin
    l_anoAprobacion := anoAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('anoAprobacion', l_anoAprobacion);
    l_CalleExpedidoEn := CalleExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    l_CodigoPostalEmisor := CodigoPostalEmisor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    l_CodigoPostalExpedidoEn := CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    l_CodigoPostalReceptor := CodigoPostalReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    l_ColoniaEmisor := ColoniaEmisor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    l_ColoniaExpedidoEn := ColoniaExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    l_ColoniaReceptor := ColoniaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    l_DireccionEm := DireccionEm;
    TROSerializer(ASerializer).WriteAnsiString('DireccionEm', l_DireccionEm);
    l_DomicilioReceptor := DomicilioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    l_email := email;
    TROSerializer(ASerializer).WriteAnsiString('email', l_email);
    l_EstadoEmisor := EstadoEmisor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoEmisor', l_EstadoEmisor);
    l_EstadoExpedidoEn := EstadoExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    l_EstadoReceptor := EstadoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoReceptor', l_EstadoReceptor);
    l_FacturaElectronicaDetalleImportes := FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImportes', l_FacturaElectronicaDetalleImportes, ATFacturaElectronicaDetalleImportes);
    l_FacturaElectronicaDetalleImpuestos := FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImpuestos', l_FacturaElectronicaDetalleImpuestos, ATFacturaElectronicaDetalleImpuestos);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteAnsiString('Fecha', l_Fecha);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteAnsiString('Folio', l_Folio);
    l_formadePago := formadePago;
    TROSerializer(ASerializer).WriteAnsiString('formadePago', l_formadePago);
    l_LocalidadExpedidoEn := LocalidadExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    l_LocalidadReceptor := LocalidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    l_MunicipioEmisor := MunicipioEmisor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    l_MunicipioExpedidoEn := MunicipioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    l_MunicipioReceptor := MunicipioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    l_noAprobacion := noAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('noAprobacion', l_noAprobacion);
    l_NoExterioExpedidoEn := NoExterioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    l_NoExteriorEM := NoExteriorEM;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorEM', l_NoExteriorEM);
    l_NoExteriorReceptor := NoExteriorReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    l_NombreReceptor := NombreReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NombreReceptor', l_NombreReceptor);
    l_NomEmpEmisor := NomEmpEmisor;
    TROSerializer(ASerializer).WriteAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    l_PaisEmisor := PaisEmisor;
    TROSerializer(ASerializer).WriteAnsiString('PaisEmisor', l_PaisEmisor);
    l_PaisExpedidoEn := PaisExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    l_PaisReceptor := PaisReceptor;
    TROSerializer(ASerializer).WriteAnsiString('PaisReceptor', l_PaisReceptor);
    l_RFCEmisor := RFCEmisor;
    TROSerializer(ASerializer).WriteAnsiString('RFCEmisor', l_RFCEmisor);
    l_RFCReceptor := RFCReceptor;
    TROSerializer(ASerializer).WriteAnsiString('RFCReceptor', l_RFCReceptor);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).WriteAnsiString('SubTotal', l_SubTotal);
    l_Sucursal := Sucursal;
    TROSerializer(ASerializer).WriteEnumerated('Sucursal',TypeInfo(boolean), l_Sucursal);
    l_tipoComprobante := tipoComprobante;
    TROSerializer(ASerializer).WriteAnsiString('tipoComprobante', l_tipoComprobante);
    l_Total := Total;
    TROSerializer(ASerializer).WriteAnsiString('Total', l_Total);
    l_TotalImpuesto := TotalImpuesto;
    TROSerializer(ASerializer).WriteAnsiString('TotalImpuesto', l_TotalImpuesto);
  end;
end;

{ TFacturaElectronicaFCollection }
constructor TFacturaElectronicaFCollection.Create;
begin
  inherited Create(TFacturaElectronicaF);
end;

constructor TFacturaElectronicaFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaElectronicaFCollection.Add: TFacturaElectronicaF;
begin
  result := TFacturaElectronicaF(inherited Add);
end;

function TFacturaElectronicaFCollection.GetItems(aIndex: integer): TFacturaElectronicaF;
begin
  result := TFacturaElectronicaF(inherited Items[aIndex]);
end;

procedure TFacturaElectronicaFCollection.SetItems(aIndex: integer; const Value: TFacturaElectronicaF);
begin
  TFacturaElectronicaF(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaElectronicaDetalleImporteF }

procedure TFacturaElectronicaDetalleImporteF.Assign(iSource: TPersistent); 
var lSource: LibraryGauss_Intf.TFacturaElectronicaDetalleImporteF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryGauss_Intf.TFacturaElectronicaDetalleImporteF) then begin
    lSource := LibraryGauss_Intf.TFacturaElectronicaDetalleImporteF(iSource);
    CantidadReceptor := lSource.CantidadReceptor;
    UnidadReceptor := lSource.UnidadReceptor;
    DescripcionReceptor := lSource.DescripcionReceptor;
    ValorUnitarioReceptor := lSource.ValorUnitarioReceptor;
    ImporteReceptor := lSource.ImporteReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImporteF.ReadComplex(ASerializer: TObject);
var
  l_CantidadReceptor: AnsiString;
  l_DescripcionReceptor: AnsiString;
  l_ImporteReceptor: AnsiString;
  l_UnidadReceptor: AnsiString;
  l_ValorUnitarioReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_CantidadReceptor := CantidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('CantidadReceptor', l_CantidadReceptor);
    CantidadReceptor := l_CantidadReceptor;
    l_UnidadReceptor := UnidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('UnidadReceptor', l_UnidadReceptor);
    UnidadReceptor := l_UnidadReceptor;
    l_DescripcionReceptor := DescripcionReceptor;
    TROSerializer(ASerializer).ReadAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    DescripcionReceptor := l_DescripcionReceptor;
    l_ValorUnitarioReceptor := ValorUnitarioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
    ValorUnitarioReceptor := l_ValorUnitarioReceptor;
    l_ImporteReceptor := ImporteReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImporteReceptor', l_ImporteReceptor);
    ImporteReceptor := l_ImporteReceptor;
  end
  else begin
    l_CantidadReceptor := CantidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('CantidadReceptor', l_CantidadReceptor);
    CantidadReceptor := l_CantidadReceptor;
    l_DescripcionReceptor := DescripcionReceptor;
    TROSerializer(ASerializer).ReadAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    DescripcionReceptor := l_DescripcionReceptor;
    l_ImporteReceptor := ImporteReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImporteReceptor', l_ImporteReceptor);
    ImporteReceptor := l_ImporteReceptor;
    l_UnidadReceptor := UnidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('UnidadReceptor', l_UnidadReceptor);
    UnidadReceptor := l_UnidadReceptor;
    l_ValorUnitarioReceptor := ValorUnitarioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
    ValorUnitarioReceptor := l_ValorUnitarioReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImporteF.WriteComplex(ASerializer: TObject);
var
  l_CantidadReceptor: AnsiString;
  l_DescripcionReceptor: AnsiString;
  l_ImporteReceptor: AnsiString;
  l_UnidadReceptor: AnsiString;
  l_ValorUnitarioReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaElectronicaDetalleImporteF);
    l_CantidadReceptor := CantidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CantidadReceptor', l_CantidadReceptor);
    l_UnidadReceptor := UnidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('UnidadReceptor', l_UnidadReceptor);
    l_DescripcionReceptor := DescripcionReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    l_ValorUnitarioReceptor := ValorUnitarioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
    l_ImporteReceptor := ImporteReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteReceptor', l_ImporteReceptor);
  end
  else begin
    l_CantidadReceptor := CantidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CantidadReceptor', l_CantidadReceptor);
    l_DescripcionReceptor := DescripcionReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    l_ImporteReceptor := ImporteReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteReceptor', l_ImporteReceptor);
    l_UnidadReceptor := UnidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('UnidadReceptor', l_UnidadReceptor);
    l_ValorUnitarioReceptor := ValorUnitarioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
  end;
end;

{ TFacturaElectronicaDetalleImporteFCollection }
constructor TFacturaElectronicaDetalleImporteFCollection.Create;
begin
  inherited Create(TFacturaElectronicaDetalleImporteF);
end;

constructor TFacturaElectronicaDetalleImporteFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaElectronicaDetalleImporteFCollection.Add: TFacturaElectronicaDetalleImporteF;
begin
  result := TFacturaElectronicaDetalleImporteF(inherited Add);
end;

function TFacturaElectronicaDetalleImporteFCollection.GetItems(aIndex: integer): TFacturaElectronicaDetalleImporteF;
begin
  result := TFacturaElectronicaDetalleImporteF(inherited Items[aIndex]);
end;

procedure TFacturaElectronicaDetalleImporteFCollection.LoadFromArray(anArray: ATFacturaElectronicaDetalleImportes);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TFacturaElectronicaDetalleImporteFCollection.SaveToArray(anArray: ATFacturaElectronicaDetalleImportes);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TFacturaElectronicaDetalleImporteF.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TFacturaElectronicaDetalleImporteFCollection.SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImporteF);
begin
  TFacturaElectronicaDetalleImporteF(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaElectronicaDetalleImpuestosF }

procedure TFacturaElectronicaDetalleImpuestosF.Assign(iSource: TPersistent); 
var lSource: LibraryGauss_Intf.TFacturaElectronicaDetalleImpuestosF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryGauss_Intf.TFacturaElectronicaDetalleImpuestosF) then begin
    lSource := LibraryGauss_Intf.TFacturaElectronicaDetalleImpuestosF(iSource);
    ImpuestoReceptor := lSource.ImpuestoReceptor;
    TasaReceptor := lSource.TasaReceptor;
    ImporteImpReceptor := lSource.ImporteImpReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImpuestosF.ReadComplex(ASerializer: TObject);
var
  l_ImporteImpReceptor: AnsiString;
  l_ImpuestoReceptor: AnsiString;
  l_TasaReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ImpuestoReceptor := ImpuestoReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    ImpuestoReceptor := l_ImpuestoReceptor;
    l_TasaReceptor := TasaReceptor;
    TROSerializer(ASerializer).ReadAnsiString('TasaReceptor', l_TasaReceptor);
    TasaReceptor := l_TasaReceptor;
    l_ImporteImpReceptor := ImporteImpReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
    ImporteImpReceptor := l_ImporteImpReceptor;
  end
  else begin
    l_ImporteImpReceptor := ImporteImpReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
    ImporteImpReceptor := l_ImporteImpReceptor;
    l_ImpuestoReceptor := ImpuestoReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    ImpuestoReceptor := l_ImpuestoReceptor;
    l_TasaReceptor := TasaReceptor;
    TROSerializer(ASerializer).ReadAnsiString('TasaReceptor', l_TasaReceptor);
    TasaReceptor := l_TasaReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImpuestosF.WriteComplex(ASerializer: TObject);
var
  l_ImporteImpReceptor: AnsiString;
  l_ImpuestoReceptor: AnsiString;
  l_TasaReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaElectronicaDetalleImpuestosF);
    l_ImpuestoReceptor := ImpuestoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    l_TasaReceptor := TasaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('TasaReceptor', l_TasaReceptor);
    l_ImporteImpReceptor := ImporteImpReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
  end
  else begin
    l_ImporteImpReceptor := ImporteImpReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
    l_ImpuestoReceptor := ImpuestoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    l_TasaReceptor := TasaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('TasaReceptor', l_TasaReceptor);
  end;
end;

{ TFacturaElectronicaDetalleImpuestosFCollection }
constructor TFacturaElectronicaDetalleImpuestosFCollection.Create;
begin
  inherited Create(TFacturaElectronicaDetalleImpuestosF);
end;

constructor TFacturaElectronicaDetalleImpuestosFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaElectronicaDetalleImpuestosFCollection.Add: TFacturaElectronicaDetalleImpuestosF;
begin
  result := TFacturaElectronicaDetalleImpuestosF(inherited Add);
end;

function TFacturaElectronicaDetalleImpuestosFCollection.GetItems(aIndex: integer): TFacturaElectronicaDetalleImpuestosF;
begin
  result := TFacturaElectronicaDetalleImpuestosF(inherited Items[aIndex]);
end;

procedure TFacturaElectronicaDetalleImpuestosFCollection.LoadFromArray(anArray: ATFacturaElectronicaDetalleImpuestos);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TFacturaElectronicaDetalleImpuestosFCollection.SaveToArray(anArray: ATFacturaElectronicaDetalleImpuestos);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TFacturaElectronicaDetalleImpuestosF.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TFacturaElectronicaDetalleImpuestosFCollection.SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImpuestosF);
begin
  TFacturaElectronicaDetalleImpuestosF(inherited Items[aIndex]).Assign(Value);
end;

{ TDataFacturaElectronicaF }

procedure TDataFacturaElectronicaF.Assign(iSource: TPersistent); 
var lSource: LibraryGauss_Intf.TDataFacturaElectronicaF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryGauss_Intf.TDataFacturaElectronicaF) then begin
    lSource := LibraryGauss_Intf.TDataFacturaElectronicaF(iSource);
    FacturaElectronicaF.Assign(lSource.FacturaElectronicaF);
    CadenaOriginal := lSource.CadenaOriginal;
    SelloDigital := lSource.SelloDigital;
    NumCertificado := lSource.NumCertificado;
    Certificado := lSource.Certificado;
  end;
end;

function TDataFacturaElectronicaF.GetFacturaElectronicaF: TFacturaElectronicaF;
begin
  if (fFacturaElectronicaF = nil) then fFacturaElectronicaF := TFacturaElectronicaF.Create();
  result := fFacturaElectronicaF;
end;

procedure TDataFacturaElectronicaF.ReadComplex(ASerializer: TObject);
var
  l_CadenaOriginal: Widestring;
  l_Certificado: Widestring;
  l_FacturaElectronicaF: TFacturaElectronicaF;
  l_NumCertificado: AnsiString;
  l_SelloDigital: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FacturaElectronicaF := FacturaElectronicaF;
    TROSerializer(ASerializer).ReadStruct('FacturaElectronicaF', TFacturaElectronicaF, l_FacturaElectronicaF);
    if FacturaElectronicaF <> l_FacturaElectronicaF then FacturaElectronicaF.Free;
    FacturaElectronicaF := l_FacturaElectronicaF;
    l_CadenaOriginal := CadenaOriginal;
    TROSerializer(ASerializer).ReadWideString('CadenaOriginal', l_CadenaOriginal);
    CadenaOriginal := l_CadenaOriginal;
    l_SelloDigital := SelloDigital;
    TROSerializer(ASerializer).ReadAnsiString('SelloDigital', l_SelloDigital);
    SelloDigital := l_SelloDigital;
    l_NumCertificado := NumCertificado;
    TROSerializer(ASerializer).ReadAnsiString('NumCertificado', l_NumCertificado);
    NumCertificado := l_NumCertificado;
    l_Certificado := Certificado;
    TROSerializer(ASerializer).ReadWideString('Certificado', l_Certificado);
    Certificado := l_Certificado;
  end
  else begin
    l_CadenaOriginal := CadenaOriginal;
    TROSerializer(ASerializer).ReadWideString('CadenaOriginal', l_CadenaOriginal);
    CadenaOriginal := l_CadenaOriginal;
    l_Certificado := Certificado;
    TROSerializer(ASerializer).ReadWideString('Certificado', l_Certificado);
    Certificado := l_Certificado;
    l_FacturaElectronicaF := FacturaElectronicaF;
    TROSerializer(ASerializer).ReadStruct('FacturaElectronicaF', TFacturaElectronicaF, l_FacturaElectronicaF);
    if FacturaElectronicaF <> l_FacturaElectronicaF then FacturaElectronicaF.Free;
    FacturaElectronicaF := l_FacturaElectronicaF;
    l_NumCertificado := NumCertificado;
    TROSerializer(ASerializer).ReadAnsiString('NumCertificado', l_NumCertificado);
    NumCertificado := l_NumCertificado;
    l_SelloDigital := SelloDigital;
    TROSerializer(ASerializer).ReadAnsiString('SelloDigital', l_SelloDigital);
    SelloDigital := l_SelloDigital;
  end;
end;

procedure TDataFacturaElectronicaF.WriteComplex(ASerializer: TObject);
var
  l_CadenaOriginal: Widestring;
  l_Certificado: Widestring;
  l_FacturaElectronicaF: TFacturaElectronicaF;
  l_NumCertificado: AnsiString;
  l_SelloDigital: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDataFacturaElectronicaF);
    l_FacturaElectronicaF := FacturaElectronicaF;
    TROSerializer(ASerializer).WriteStruct('FacturaElectronicaF', l_FacturaElectronicaF, TFacturaElectronicaF);
    l_CadenaOriginal := CadenaOriginal;
    TROSerializer(ASerializer).WriteWideString('CadenaOriginal', l_CadenaOriginal);
    l_SelloDigital := SelloDigital;
    TROSerializer(ASerializer).WriteAnsiString('SelloDigital', l_SelloDigital);
    l_NumCertificado := NumCertificado;
    TROSerializer(ASerializer).WriteAnsiString('NumCertificado', l_NumCertificado);
    l_Certificado := Certificado;
    TROSerializer(ASerializer).WriteWideString('Certificado', l_Certificado);
  end
  else begin
    l_CadenaOriginal := CadenaOriginal;
    TROSerializer(ASerializer).WriteWideString('CadenaOriginal', l_CadenaOriginal);
    l_Certificado := Certificado;
    TROSerializer(ASerializer).WriteWideString('Certificado', l_Certificado);
    l_FacturaElectronicaF := FacturaElectronicaF;
    TROSerializer(ASerializer).WriteStruct('FacturaElectronicaF', l_FacturaElectronicaF, TFacturaElectronicaF);
    l_NumCertificado := NumCertificado;
    TROSerializer(ASerializer).WriteAnsiString('NumCertificado', l_NumCertificado);
    l_SelloDigital := SelloDigital;
    TROSerializer(ASerializer).WriteAnsiString('SelloDigital', l_SelloDigital);
  end;
end;

{ TDataFacturaElectronicaFCollection }
constructor TDataFacturaElectronicaFCollection.Create;
begin
  inherited Create(TDataFacturaElectronicaF);
end;

constructor TDataFacturaElectronicaFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDataFacturaElectronicaFCollection.Add: TDataFacturaElectronicaF;
begin
  result := TDataFacturaElectronicaF(inherited Add);
end;

function TDataFacturaElectronicaFCollection.GetItems(aIndex: integer): TDataFacturaElectronicaF;
begin
  result := TDataFacturaElectronicaF(inherited Items[aIndex]);
end;

procedure TDataFacturaElectronicaFCollection.SetItems(aIndex: integer; const Value: TDataFacturaElectronicaF);
begin
  TDataFacturaElectronicaF(inherited Items[aIndex]).Assign(Value);
end;

{ TDatos }

procedure TDatos.Assign(iSource: TPersistent); 
var lSource: LibraryGauss_Intf.TDatos;
begin
  inherited Assign(iSource);
  if (iSource is LibraryGauss_Intf.TDatos) then begin
    lSource := LibraryGauss_Intf.TDatos(iSource);
    Nombre := lSource.Nombre;
    CODIGO := lSource.CODIGO;
    DIRECCION := lSource.DIRECCION;
    IMSS := lSource.IMSS;
  end;
end;

procedure TDatos.ReadComplex(ASerializer: TObject);
var
  l_CODIGO: AnsiString;
  l_DIRECCION: AnsiString;
  l_IMSS: AnsiString;
  l_Nombre: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_CODIGO := CODIGO;
    TROSerializer(ASerializer).ReadAnsiString('CODIGO', l_CODIGO);
    CODIGO := l_CODIGO;
    l_DIRECCION := DIRECCION;
    TROSerializer(ASerializer).ReadAnsiString('DIRECCION', l_DIRECCION);
    DIRECCION := l_DIRECCION;
    l_IMSS := IMSS;
    TROSerializer(ASerializer).ReadAnsiString('IMSS', l_IMSS);
    IMSS := l_IMSS;
  end
  else begin
    l_CODIGO := CODIGO;
    TROSerializer(ASerializer).ReadAnsiString('CODIGO', l_CODIGO);
    CODIGO := l_CODIGO;
    l_DIRECCION := DIRECCION;
    TROSerializer(ASerializer).ReadAnsiString('DIRECCION', l_DIRECCION);
    DIRECCION := l_DIRECCION;
    l_IMSS := IMSS;
    TROSerializer(ASerializer).ReadAnsiString('IMSS', l_IMSS);
    IMSS := l_IMSS;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
  end;
end;

procedure TDatos.WriteComplex(ASerializer: TObject);
var
  l_CODIGO: AnsiString;
  l_DIRECCION: AnsiString;
  l_IMSS: AnsiString;
  l_Nombre: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatos);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_CODIGO := CODIGO;
    TROSerializer(ASerializer).WriteAnsiString('CODIGO', l_CODIGO);
    l_DIRECCION := DIRECCION;
    TROSerializer(ASerializer).WriteAnsiString('DIRECCION', l_DIRECCION);
    l_IMSS := IMSS;
    TROSerializer(ASerializer).WriteAnsiString('IMSS', l_IMSS);
  end
  else begin
    l_CODIGO := CODIGO;
    TROSerializer(ASerializer).WriteAnsiString('CODIGO', l_CODIGO);
    l_DIRECCION := DIRECCION;
    TROSerializer(ASerializer).WriteAnsiString('DIRECCION', l_DIRECCION);
    l_IMSS := IMSS;
    TROSerializer(ASerializer).WriteAnsiString('IMSS', l_IMSS);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
  end;
end;

{ TDatosCollection }
constructor TDatosCollection.Create;
begin
  inherited Create(TDatos);
end;

constructor TDatosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosCollection.Add: TDatos;
begin
  result := TDatos(inherited Add);
end;

function TDatosCollection.GetItems(aIndex: integer): TDatos;
begin
  result := TDatos(inherited Items[aIndex]);
end;

procedure TDatosCollection.SetItems(aIndex: integer; const Value: TDatos);
begin
  TDatos(inherited Items[aIndex]).Assign(Value);
end;

{ CoServiceGauss }

class function CoServiceGauss.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceGauss;
begin
  result := TServiceGauss_Proxy.Create(aMessage, aTransportChannel);
end;

{ TServiceGauss_Proxy }

function TServiceGauss_Proxy.__GetInterfaceName:string;
begin
  result := 'ServiceGauss';
end;

function TServiceGauss_Proxy.AbreDataSetReportes(const SQL: AnsiString; const Parametros: TParametrosF): Binary;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'AbreDataSetReportes');
    __Message.Write('SQL', TypeInfo(AnsiString), SQL, []);
    __Message.Write('Parametros', TypeInfo(LibraryGauss_Intf.TParametrosF), Parametros, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Binary), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.BuscarReporte(const Nombre: AnsiString): TReporteF;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'BuscarReporte');
    __Message.Write('Nombre', TypeInfo(AnsiString), Nombre, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryGauss_Intf.TReporteF), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.DragPagoMateria(const PAGOMATERIA: Integer; const IDGRUPOTARGET: Integer; const IDGRUPOSOURCE: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'DragPagoMateria');
    __Message.Write('PAGOMATERIA', TypeInfo(Integer), PAGOMATERIA, []);
    __Message.Write('IDGRUPOTARGET', TypeInfo(Integer), IDGRUPOTARGET, []);
    __Message.Write('IDGRUPOSOURCE', TypeInfo(Integer), IDGRUPOSOURCE, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.ActualizaSubTipoPago(const IDTIPOPAGO: Integer; const IDSUBTIPOPAGO: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'ActualizaSubTipoPago');
    __Message.Write('IDTIPOPAGO', TypeInfo(Integer), IDTIPOPAGO, []);
    __Message.Write('IDSUBTIPOPAGO', TypeInfo(Integer), IDSUBTIPOPAGO, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.DatosFacturaElectronica(const FacturaID: Integer): TFacturaElectronicaF;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'DatosFacturaElectronica');
    __Message.Write('FacturaID', TypeInfo(Integer), FacturaID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryGauss_Intf.TFacturaElectronicaF), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.DatosFactura(const Folio: Integer; const Serie: AnsiString): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'DatosFactura');
    __Message.Write('Folio', TypeInfo(Integer), Folio, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.Fecha: DateTime;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'Fecha');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(DateTime), result, [paIsDateTime]);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'Folio');
    __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceGauss_Proxy.GuardaDatosFactura(const DatosFactura: TDatosFactura);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'GuardaDatosFactura');
    __Message.Write('DatosFactura', TypeInfo(LibraryGauss_Intf.TDatosFactura), DatosFactura, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfoF;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'Login');
    __Message.Write('Usuario', TypeInfo(AnsiString), Usuario, []);
    __Message.Write('Clave', TypeInfo(AnsiString), Clave, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryGauss_Intf.TLoginInfoF), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.IniciaCiclo(const IDCICLO: AnsiString): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'IniciaCiclo');
    __Message.Write('IDCICLO', TypeInfo(AnsiString), IDCICLO, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const FolioNew: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'ModificarFolioActual');
    __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('FolioNew', TypeInfo(Integer), FolioNew, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceGauss_Proxy.InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: Widestring; const SelloDigital: Widestring; 
                                                        const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString; 
                                                        const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'InsertaFacturaElectronica');
    __Message.Write('FacturaElectronicaID', TypeInfo(Integer), FacturaElectronicaID, []);
    __Message.Write('CadenaOriginal', TypeInfo(Widestring), CadenaOriginal, []);
    __Message.Write('SelloDigital', TypeInfo(Widestring), SelloDigital, []);
    __Message.Write('FacturaID', TypeInfo(Integer), FacturaID, []);
    __Message.Write('Vigencia', TypeInfo(Boolean), Vigencia, []);
    __Message.Write('Enviado', TypeInfo(Boolean), Enviado, []);
    __Message.Write('NoCertificado', TypeInfo(AnsiString), NoCertificado, []);
    __Message.Write('NoAprobacion', TypeInfo(AnsiString), NoAprobacion, []);
    __Message.Write('FechaAprobacion', TypeInfo(DateTime), FechaAprobacion, [paIsDateTime]);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.FolioActual2(const Serie: AnsiString; const folio: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'FolioActual2');
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('folio', TypeInfo(Integer), folio, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceGauss_Proxy.GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'GuardaAccesos');
    __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
    __Message.Write('Lista', TypeInfo(AnsiString), Lista, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.EliminaMaestroDisponibilidad(const IDMAESTRODISPONIBILIDAD: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'EliminaMaestroDisponibilidad');
    __Message.Write('IDMAESTRODISPONIBILIDAD', TypeInfo(Integer), IDMAESTRODISPONIBILIDAD, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.EliminaMateriaMaestro(const IDMAESTRO: Integer; const IDMATERIA: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'EliminaMateriaMaestro');
    __Message.Write('IDMAESTRO', TypeInfo(Integer), IDMAESTRO, []);
    __Message.Write('IDMATERIA', TypeInfo(Integer), IDMATERIA, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.EliminaPago(const idSubtipoPago: Integer; const status: AnsiString; const idCiclos: Integer; const idGrupo: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'EliminaPago');
    __Message.Write('idSubtipoPago', TypeInfo(Integer), idSubtipoPago, []);
    __Message.Write('status', TypeInfo(AnsiString), status, []);
    __Message.Write('idCiclos', TypeInfo(Integer), idCiclos, []);
    __Message.Write('idGrupo', TypeInfo(Integer), idGrupo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.EliminaPagoCaja(const idSubtipoPago: Integer; const status: AnsiString; const idCiclos: Integer; const idGrupo: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'EliminaPagoCaja');
    __Message.Write('idSubtipoPago', TypeInfo(Integer), idSubtipoPago, []);
    __Message.Write('status', TypeInfo(AnsiString), status, []);
    __Message.Write('idCiclos', TypeInfo(Integer), idCiclos, []);
    __Message.Write('idGrupo', TypeInfo(Integer), idGrupo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.InsertaCaja(const Observaciones: AnsiString; const TipoPago: AnsiString; const idEmpleado: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'InsertaCaja');
    __Message.Write('Observaciones', TypeInfo(AnsiString), Observaciones, []);
    __Message.Write('TipoPago', TypeInfo(AnsiString), TipoPago, []);
    __Message.Write('idEmpleado', TypeInfo(Integer), idEmpleado, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.LiquidaPago(const INTERES: Double; const IDEMPLEADO: Integer; const IDPAGO: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'LiquidaPago');
    __Message.Write('INTERES', TypeInfo(Double), INTERES, []);
    __Message.Write('IDEMPLEADO', TypeInfo(Integer), IDEMPLEADO, []);
    __Message.Write('IDPAGO', TypeInfo(Integer), IDPAGO, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.DividePago(const idPago: Integer; const idEmpleado: Integer; const Importes: Double; const Interes: Double): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'DividePago');
    __Message.Write('idPago', TypeInfo(Integer), idPago, []);
    __Message.Write('idEmpleado', TypeInfo(Integer), idEmpleado, []);
    __Message.Write('Importes', TypeInfo(Double), Importes, []);
    __Message.Write('Interes', TypeInfo(Double), Interes, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.InsertaPagoCaja(const IDPAGO: Integer; const IDCAJA: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'InsertaPagoCaja');
    __Message.Write('IDPAGO', TypeInfo(Integer), IDPAGO, []);
    __Message.Write('IDCAJA', TypeInfo(Integer), IDCAJA, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.AplicaCalificacion(const Calificacion: Double; const Faltas: Integer; const idmaterias: Integer; const idhistorialalumno: Integer; 
                                                const idhistorialgrupo: Integer; const fecha: DateTime; const idtipocalificacion: Integer; const califAux2: Double; 
                                                const califAux1: Double): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'AplicaCalificacion');
    __Message.Write('Calificacion', TypeInfo(Double), Calificacion, []);
    __Message.Write('Faltas', TypeInfo(Integer), Faltas, []);
    __Message.Write('idmaterias', TypeInfo(Integer), idmaterias, []);
    __Message.Write('idhistorialalumno', TypeInfo(Integer), idhistorialalumno, []);
    __Message.Write('idhistorialgrupo', TypeInfo(Integer), idhistorialgrupo, []);
    __Message.Write('fecha', TypeInfo(DateTime), fecha, [paIsDateTime]);
    __Message.Write('idtipocalificacion', TypeInfo(Integer), idtipocalificacion, []);
    __Message.Write('califAux2', TypeInfo(Double), califAux2, []);
    __Message.Write('califAux1', TypeInfo(Double), califAux1, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.HistorialAlumnoDEL(const IDHISTORIALALUMNO: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'HistorialAlumnoDEL');
    __Message.Write('IDHISTORIALALUMNO', TypeInfo(Integer), IDHISTORIALALUMNO, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.BecaDescuento(const IDHISTORIALALUMNO: Integer; const BECA: Double; const DESCUENTO: Double): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'BecaDescuento');
    __Message.Write('IDHISTORIALALUMNO', TypeInfo(Integer), IDHISTORIALALUMNO, []);
    __Message.Write('BECA', TypeInfo(Double), BECA, []);
    __Message.Write('DESCUENTO', TypeInfo(Double), DESCUENTO, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.InsertaHistorialAlumno(const IDHISTORIALALUMNO: Integer; const IDHISTORIALGRUPO: Integer; const IDALUMNO: Integer; const DOCUMENTOSFALTANTES: AnsiString; 
                                                    const BECA: Double; const DESCUENTO: Double): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'InsertaHistorialAlumno');
    __Message.Write('IDHISTORIALALUMNO', TypeInfo(Integer), IDHISTORIALALUMNO, []);
    __Message.Write('IDHISTORIALGRUPO', TypeInfo(Integer), IDHISTORIALGRUPO, []);
    __Message.Write('IDALUMNO', TypeInfo(Integer), IDALUMNO, []);
    __Message.Write('DOCUMENTOSFALTANTES', TypeInfo(AnsiString), DOCUMENTOSFALTANTES, []);
    __Message.Write('BECA', TypeInfo(Double), BECA, []);
    __Message.Write('DESCUENTO', TypeInfo(Double), DESCUENTO, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.CambioGrupo(const IDHISTORIALALUMNO: Integer; const IDHISTORIALGRUPO: Integer; const DOCUMENTOSFALTANTES: AnsiString; 
                                         const BECA: Double; const DESCUENTO: Double): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'CambioGrupo');
    __Message.Write('IDHISTORIALALUMNO', TypeInfo(Integer), IDHISTORIALALUMNO, []);
    __Message.Write('IDHISTORIALGRUPO', TypeInfo(Integer), IDHISTORIALGRUPO, []);
    __Message.Write('DOCUMENTOSFALTANTES', TypeInfo(AnsiString), DOCUMENTOSFALTANTES, []);
    __Message.Write('BECA', TypeInfo(Double), BECA, []);
    __Message.Write('DESCUENTO', TypeInfo(Double), DESCUENTO, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.TipoCalificacion: Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'TipoCalificacion');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.DatosAlumno(const AlumnoID: Integer): TDatos;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'DatosAlumno');
    __Message.Write('AlumnoID', TypeInfo(Integer), AlumnoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryGauss_Intf.TDatos), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.DatosMaestro(const MaestroID: Integer): TDatos;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'DatosMaestro');
    __Message.Write('MaestroID', TypeInfo(Integer), MaestroID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryGauss_Intf.TDatos), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.PagoBanco(const FECHAPAGO: DateTime; const IDEMPLEADO: Integer; const IDPAGO: Integer; const MONTO: Double): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'PagoBanco');
    __Message.Write('FECHAPAGO', TypeInfo(DateTime), FECHAPAGO, [paIsDateTime]);
    __Message.Write('IDEMPLEADO', TypeInfo(Integer), IDEMPLEADO, []);
    __Message.Write('IDPAGO', TypeInfo(Integer), IDPAGO, []);
    __Message.Write('MONTO', TypeInfo(Double), MONTO, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.PrecioProducto(const ProductoID: Integer): Double;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'PrecioProducto');
    __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Double), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.FolioActual(const Campo: AnsiString; const Serie: AnsiString): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'FolioActual');
    __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.ValidaFolioFactura(const Campo: AnsiString; const Folio: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'ValidaFolioFactura');
    __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
    __Message.Write('Folio', TypeInfo(Integer), Folio, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceGauss_Proxy.GuardarDatosFactura(const DatosFactura: TDatosFactura);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'GuardarDatosFactura');
    __Message.Write('DatosFactura', TypeInfo(LibraryGauss_Intf.TDatosFactura), DatosFactura, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceGauss_Proxy.CadenaOriginal(const FacturaID: Integer): TDataFacturaElectronicaF;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryGauss', __InterfaceName, 'CadenaOriginal');
    __Message.Write('FacturaID', TypeInfo(Integer), FacturaID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryGauss_Intf.TDataFacturaElectronicaF), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

initialization
  RegisterROClass(TLoginInfoF);
  RegisterROClass(TOpcionF);
  RegisterROClass(TDatosFactura);
  RegisterROClass(TFactura);
  RegisterROClass(TDetalleFactura);
  RegisterROClass(TParametrosF);
  RegisterROClass(TReporteF);
  RegisterROClass(TFacturaElectronicaF);
  RegisterROClass(TFacturaElectronicaDetalleImporteF);
  RegisterROClass(TFacturaElectronicaDetalleImpuestosF);
  RegisterROClass(TDataFacturaElectronicaF);
  RegisterROClass(TDatos);
  RegisterROClass(ArrayOpcionF);
  RegisterROClass(ATDetalleFactura);
  RegisterROClass(ATFacturaElectronicaDetalleImportes);
  RegisterROClass(ATFacturaElectronicaDetalleImpuestos);
  RegisterProxyClass(IServiceGauss_IID, TServiceGauss_Proxy);


finalization
  UnregisterROClass(TLoginInfoF);
  UnregisterROClass(TOpcionF);
  UnregisterROClass(TDatosFactura);
  UnregisterROClass(TFactura);
  UnregisterROClass(TDetalleFactura);
  UnregisterROClass(TParametrosF);
  UnregisterROClass(TReporteF);
  UnregisterROClass(TFacturaElectronicaF);
  UnregisterROClass(TFacturaElectronicaDetalleImporteF);
  UnregisterROClass(TFacturaElectronicaDetalleImpuestosF);
  UnregisterROClass(TDataFacturaElectronicaF);
  UnregisterROClass(TDatos);
  UnregisterROClass(ArrayOpcionF);
  UnregisterROClass(ATDetalleFactura);
  UnregisterROClass(ATFacturaElectronicaDetalleImportes);
  UnregisterROClass(ATFacturaElectronicaDetalleImpuestos);
  UnregisterProxyClass(IServiceGauss_IID);

end.
