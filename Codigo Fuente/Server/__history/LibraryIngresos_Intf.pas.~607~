unit LibraryIngresos_Intf;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {vcl:} Classes, TypInfo,
  {RemObjects:} uROUri, uROProxy, uROExceptions, uROXMLIntf, uROClasses, uROTypes, uROClientIntf,
  {Used RODLs:} DataAbstract4_Intf;

const
  { Library ID }
  LibraryUID = '{694D764B-832D-480C-893A-6E8B6B0FD1FC}';
  TargetNamespace = '';

  { Service Interface ID's }
  IServiceIngresos_IID : TGUID = '{DB8D9395-4150-4DC0-85B8-CEDDC697105D}';

type
  TSeekOrigin = Classes.TSeekOrigin; // fake declaration
  { Forward declarations }
  IServiceIngresos = interface;

  ACampos = class;
  AEstaciones = class;
  APasos = class;
  ArrayOpcionBI = class;
  ATDetalleFactura = class;
  ATFacturaElectronicaDetalleImportes = class;
  ATFacturaElectronicaDetalleImpuestos = class;
  ATTipoValores = class;
  ATTurnoxFecha = class;

  TLoginInfoBI = class;
  TOpcionBI = class;
  TDatosFactura = class;
  TFactura = class;
  TDetalleFactura = class;
  TParametrosBI = class;
  TReporteBI = class;
  TFacturaElectronicaBI = class;
  TFacturaElectronicaDetalleImporteBI = class;
  TFacturaElectronicaDetalleImpuestosBI = class;
  TDataFacturaElectronicaBI = class;
  TDatos = class;
  TTipoValores = class;
  TCampo = class;
  TExporta = class;
  TParametrosExporta = class;
  TPasos = class;
  TServer = class;
  TEstacion = class;
  TTurnoxFecha = class;
  TEmisor = class;
  TEmisorExpedidoEn = class;
  TReceptor = class;

  { TLoginInfoBI }
  TLoginInfoBI = class(TROComplexType)
  private
    fValida: Boolean;
    fEmpleadoID: Integer;
    fNombreEmpleado: AnsiString;
    fAccesos: ArrayOpcionBI;
    fNumeroEstacion: Integer;
    function GetAccesos: ArrayOpcionBI;
  protected
    property int_Accesos: ArrayOpcionBI read fAccesos;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Valida:Boolean read fValida write fValida;
    property EmpleadoID:Integer read fEmpleadoID write fEmpleadoID;
    property NombreEmpleado:AnsiString read fNombreEmpleado write fNombreEmpleado;
    property Accesos:ArrayOpcionBI read GetAccesos write fAccesos;
    property NumeroEstacion:Integer read fNumeroEstacion write fNumeroEstacion;
  end;

  { TLoginInfoBICollection }
  TLoginInfoBICollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TLoginInfoBI;
    procedure SetItems(aIndex: Integer; const Value: TLoginInfoBI);
  public
    constructor Create; overload;
    function Add: TLoginInfoBI; reintroduce;
    property Items[Index: Integer]:TLoginInfoBI read GetItems write SetItems; default;
  end;

  { TOpcionBI }
  TOpcionBI = class(TROComplexType)
  private
    fOpcionID: Integer;
    fNombre: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property OpcionID:Integer read fOpcionID write fOpcionID;
    property Nombre:AnsiString read fNombre write fNombre;
  end;

  { TOpcionBICollection }
  TOpcionBICollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TOpcionBI;
    procedure SetItems(aIndex: Integer; const Value: TOpcionBI);
  public
    constructor Create; overload;
    function Add: TOpcionBI; reintroduce;
    procedure SaveToArray(anArray: ArrayOpcionBI);
    procedure LoadFromArray(anArray: ArrayOpcionBI);
    property Items[Index: Integer]:TOpcionBI read GetItems write SetItems; default;
  end;

  { TDatosFactura }
  TDatosFactura = class(TROComplexType)
  private
    fFactura: TFactura;
    fDetalles: ATDetalleFactura;
    fEmisor: TEmisor;
    fEmisorExpedidoEn: TEmisorExpedidoEn;
    fReceptor: TReceptor;
    function GetFactura: TFactura;
    function GetDetalles: ATDetalleFactura;
    function GetEmisor: TEmisor;
    function GetEmisorExpedidoEn: TEmisorExpedidoEn;
    function GetReceptor: TReceptor;
  protected
    property int_Factura: TFactura read fFactura;
    property int_Detalles: ATDetalleFactura read fDetalles;
    property int_Emisor: TEmisor read fEmisor;
    property int_EmisorExpedidoEn: TEmisorExpedidoEn read fEmisorExpedidoEn;
    property int_Receptor: TReceptor read fReceptor;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Factura:TFactura read GetFactura write fFactura;
    property Detalles:ATDetalleFactura read GetDetalles write fDetalles;
    property Emisor:TEmisor read GetEmisor write fEmisor;
    property EmisorExpedidoEn:TEmisorExpedidoEn read GetEmisorExpedidoEn write fEmisorExpedidoEn;
    property Receptor:TReceptor read GetReceptor write fReceptor;
  end;

  { TDatosFacturaCollection }
  TDatosFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDatosFactura;
    procedure SetItems(aIndex: Integer; const Value: TDatosFactura);
  public
    constructor Create; overload;
    function Add: TDatosFactura; reintroduce;
    property Items[Index: Integer]:TDatosFactura read GetItems write SetItems; default;
  end;

  { TFactura }
  TFactura = class(TROComplexType)
  private
    fClienteID: Integer;
    fEjercicio: Integer;
    fFacturaID: Integer;
    fFecha: DateTime;
    fFechaImpresion: DateTime;
    fFechaVencimiento: DateTime;
    fFolio: Integer;
    fImpuesto: Double;
    fMovimientoID: Integer;
    fSaldo: Double;
    fSerie: AnsiString;
    fSubtotal: Double;
    fTickets: AnsiString;
    fTotal: Double;
    fUsuarioID: Integer;
    fPeriodo: Integer;
    fImpuestoPorcentaje: Double;
    fFormaPagoID: Integer;
    fNumeroEstacion: Integer;
    fIDCondicionPago: Integer;
    fMetodoPago: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property Ejercicio:Integer read fEjercicio write fEjercicio;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property Fecha:DateTime read fFecha write fFecha;
    property FechaImpresion:DateTime read fFechaImpresion write fFechaImpresion;
    property FechaVencimiento:DateTime read fFechaVencimiento write fFechaVencimiento;
    property Folio:Integer read fFolio write fFolio;
    property Impuesto:Double read fImpuesto write fImpuesto;
    property MovimientoID:Integer read fMovimientoID write fMovimientoID;
    property Saldo:Double read fSaldo write fSaldo;
    property Serie:AnsiString read fSerie write fSerie;
    property Subtotal:Double read fSubtotal write fSubtotal;
    property Tickets:AnsiString read fTickets write fTickets;
    property Total:Double read fTotal write fTotal;
    property UsuarioID:Integer read fUsuarioID write fUsuarioID;
    property Periodo:Integer read fPeriodo write fPeriodo;
    property ImpuestoPorcentaje:Double read fImpuestoPorcentaje write fImpuestoPorcentaje;
    property FormaPagoID:Integer read fFormaPagoID write fFormaPagoID;
    property NumeroEstacion:Integer read fNumeroEstacion write fNumeroEstacion;
    property IDCondicionPago:Integer read fIDCondicionPago write fIDCondicionPago;
    property MetodoPago:AnsiString read fMetodoPago write fMetodoPago;
  end;

  { TFacturaCollection }
  TFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TFactura;
    procedure SetItems(aIndex: Integer; const Value: TFactura);
  public
    constructor Create; overload;
    function Add: TFactura; reintroduce;
    property Items[Index: Integer]:TFactura read GetItems write SetItems; default;
  end;

  { TDetalleFactura }
  TDetalleFactura = class(TROComplexType)
  private
    fDetalleFacturaID: Integer;
    fFacturaID: Integer;
    fCantidad: Double;
    fPrecio: Double;
    fImporte: Double;
    fProductoID: Integer;
    fUnidad: AnsiString;
    fDescripcion: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property DetalleFacturaID:Integer read fDetalleFacturaID write fDetalleFacturaID;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property Cantidad:Double read fCantidad write fCantidad;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
    property ProductoID:Integer read fProductoID write fProductoID;
    property Unidad:AnsiString read fUnidad write fUnidad;
    property Descripcion:AnsiString read fDescripcion write fDescripcion;
  end;

  { TDetalleFacturaCollection }
  TDetalleFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDetalleFactura;
    procedure SetItems(aIndex: Integer; const Value: TDetalleFactura);
  public
    constructor Create; overload;
    function Add: TDetalleFactura; reintroduce;
    procedure SaveToArray(anArray: ATDetalleFactura);
    procedure LoadFromArray(anArray: ATDetalleFactura);
    property Items[Index: Integer]:TDetalleFactura read GetItems write SetItems; default;
  end;

  { TParametrosBI }
  TParametrosBI = class(TROComplexType)
  private
    fFechaIni: DateTime;
    fFechaFin: DateTime;
    fUsuario: Integer;
    fValor1: Integer;
    fStatus: AnsiString;
    fSerie: AnsiString;
    fFactura: Integer;
    fIDTurno: Integer;
    fFacturasCompras: Integer;
    fTurnoInicio: Integer;
    fTurnoFin: Integer;
    fNumeroEstacion: Integer;
    fHorarioIni: Integer;
    fHorarioFin: Integer;
    fNumeroEstacionIni: Integer;
    fNumeroEstacionFin: Integer;
    fClienteIni: Integer;
    fClienteFin: Integer;
    fEstacion: Integer;
    fSecuenciaIni: Integer;
    fSecuenciaFin: Integer;
    fFolioFactura: Integer;
    fEjercicio: Integer;
    fPeriodoFin: Integer;
    fPeriodo: Integer;
    fDia: Integer;
    fEjercicioFin: Integer;
    fDiaFin: Integer;
    fSecuencia: AnsiString;
    fAgrupacion: Integer;
    fAlmacen: Integer;
    fSecuenciaIniLiquidacion: Integer;
    fSecuenciaFinLiquidacion: Integer;
    fMontoFacturado: Integer;
    fTurno: Integer;
    fEmpleadoIni: Integer;
    fEmpleadoFin: Integer;
    fEstacionIni: Integer;
    fEstacionFin: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FechaIni:DateTime read fFechaIni write fFechaIni;
    property FechaFin:DateTime read fFechaFin write fFechaFin;
    property Usuario:Integer read fUsuario write fUsuario;
    property Valor1:Integer read fValor1 write fValor1;
    property Status:AnsiString read fStatus write fStatus;
    property Serie:AnsiString read fSerie write fSerie;
    property Factura:Integer read fFactura write fFactura;
    property IDTurno:Integer read fIDTurno write fIDTurno;
    property FacturasCompras:Integer read fFacturasCompras write fFacturasCompras;
    property TurnoInicio:Integer read fTurnoInicio write fTurnoInicio;
    property TurnoFin:Integer read fTurnoFin write fTurnoFin;
    property NumeroEstacion:Integer read fNumeroEstacion write fNumeroEstacion;
    property HorarioIni:Integer read fHorarioIni write fHorarioIni;
    property HorarioFin:Integer read fHorarioFin write fHorarioFin;
    property NumeroEstacionIni:Integer read fNumeroEstacionIni write fNumeroEstacionIni;
    property NumeroEstacionFin:Integer read fNumeroEstacionFin write fNumeroEstacionFin;
    property ClienteIni:Integer read fClienteIni write fClienteIni;
    property ClienteFin:Integer read fClienteFin write fClienteFin;
    property Estacion:Integer read fEstacion write fEstacion;
    property SecuenciaIni:Integer read fSecuenciaIni write fSecuenciaIni;
    property SecuenciaFin:Integer read fSecuenciaFin write fSecuenciaFin;
    property FolioFactura:Integer read fFolioFactura write fFolioFactura;
    property Ejercicio:Integer read fEjercicio write fEjercicio;
    property PeriodoFin:Integer read fPeriodoFin write fPeriodoFin;
    property Periodo:Integer read fPeriodo write fPeriodo;
    property Dia:Integer read fDia write fDia;
    property EjercicioFin:Integer read fEjercicioFin write fEjercicioFin;
    property DiaFin:Integer read fDiaFin write fDiaFin;
    property Secuencia:AnsiString read fSecuencia write fSecuencia;
    property Agrupacion:Integer read fAgrupacion write fAgrupacion;
    property Almacen:Integer read fAlmacen write fAlmacen;
    property SecuenciaIniLiquidacion:Integer read fSecuenciaIniLiquidacion write fSecuenciaIniLiquidacion;
    property SecuenciaFinLiquidacion:Integer read fSecuenciaFinLiquidacion write fSecuenciaFinLiquidacion;
    property MontoFacturado:Integer read fMontoFacturado write fMontoFacturado;
    property Turno:Integer read fTurno write fTurno;
    property EmpleadoIni:Integer read fEmpleadoIni write fEmpleadoIni;
    property EmpleadoFin:Integer read fEmpleadoFin write fEmpleadoFin;
    property EstacionIni:Integer read fEstacionIni write fEstacionIni;
    property EstacionFin:Integer read fEstacionFin write fEstacionFin;
  end;

  { TParametrosBICollection }
  TParametrosBICollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TParametrosBI;
    procedure SetItems(aIndex: Integer; const Value: TParametrosBI);
  public
    constructor Create; overload;
    function Add: TParametrosBI; reintroduce;
    property Items[Index: Integer]:TParametrosBI read GetItems write SetItems; default;
  end;

  { TReporteBI }
  TReporteBI = class(TROComplexType)
  private
    fSQL1: AnsiString;
    fSQL2: AnsiString;
    fTemplate: AnsiString;
    fCampoJoin: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property SQL1:AnsiString read fSQL1 write fSQL1;
    property SQL2:AnsiString read fSQL2 write fSQL2;
    property Template:AnsiString read fTemplate write fTemplate;
    property CampoJoin:AnsiString read fCampoJoin write fCampoJoin;
  end;

  { TReporteBICollection }
  TReporteBICollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TReporteBI;
    procedure SetItems(aIndex: Integer; const Value: TReporteBI);
  public
    constructor Create; overload;
    function Add: TReporteBI; reintroduce;
    property Items[Index: Integer]:TReporteBI read GetItems write SetItems; default;
  end;

  { TFacturaElectronicaBI }
  TFacturaElectronicaBI = class(TROComplexType)
  private
    fSerie: AnsiString;
    fFolio: AnsiString;
    fFecha: AnsiString;
    fnoAprobacion: AnsiString;
    fanoAprobacion: AnsiString;
    ftipoComprobante: AnsiString;
    fformadePago: AnsiString;
    fSubTotal: AnsiString;
    fTotal: AnsiString;
    fRFCEmisor: AnsiString;
    fNomEmpEmisor: AnsiString;
    fDireccionEm: AnsiString;
    fNoExteriorEM: AnsiString;
    fColoniaEmisor: AnsiString;
    fMunicipioEmisor: AnsiString;
    fEstadoEmisor: AnsiString;
    fPaisEmisor: AnsiString;
    fCodigoPostalEmisor: AnsiString;
    fRFCReceptor: AnsiString;
    fNombreReceptor: AnsiString;
    fDomicilioReceptor: AnsiString;
    fNoExteriorReceptor: AnsiString;
    fColoniaReceptor: AnsiString;
    fLocalidadReceptor: AnsiString;
    fMunicipioReceptor: AnsiString;
    fEstadoReceptor: AnsiString;
    fPaisReceptor: AnsiString;
    fCodigoPostalReceptor: AnsiString;
    fFacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
    fFacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
    fTotalImpuesto: AnsiString;
    fCalleExpedidoEn: AnsiString;
    fNoExterioExpedidoEn: AnsiString;
    fColoniaExpedidoEn: AnsiString;
    fCodigoPostalExpedidoEn: AnsiString;
    fLocalidadExpedidoEn: AnsiString;
    fMunicipioExpedidoEn: AnsiString;
    fEstadoExpedidoEn: AnsiString;
    fPaisExpedidoEn: AnsiString;
    fSucursal: Boolean;
    femail: AnsiString;
    function GetFacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
    function GetFacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
  protected
    property int_FacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes read fFacturaElectronicaDetalleImportes;
    property int_FacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos read fFacturaElectronicaDetalleImpuestos;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Serie:AnsiString read fSerie write fSerie;
    property Folio:AnsiString read fFolio write fFolio;
    property Fecha:AnsiString read fFecha write fFecha;
    property noAprobacion:AnsiString read fnoAprobacion write fnoAprobacion;
    property anoAprobacion:AnsiString read fanoAprobacion write fanoAprobacion;
    property tipoComprobante:AnsiString read ftipoComprobante write ftipoComprobante;
    property formadePago:AnsiString read fformadePago write fformadePago;
    property SubTotal:AnsiString read fSubTotal write fSubTotal;
    property Total:AnsiString read fTotal write fTotal;
    property RFCEmisor:AnsiString read fRFCEmisor write fRFCEmisor;
    property NomEmpEmisor:AnsiString read fNomEmpEmisor write fNomEmpEmisor;
    property DireccionEm:AnsiString read fDireccionEm write fDireccionEm;
    property NoExteriorEM:AnsiString read fNoExteriorEM write fNoExteriorEM;
    property ColoniaEmisor:AnsiString read fColoniaEmisor write fColoniaEmisor;
    property MunicipioEmisor:AnsiString read fMunicipioEmisor write fMunicipioEmisor;
    property EstadoEmisor:AnsiString read fEstadoEmisor write fEstadoEmisor;
    property PaisEmisor:AnsiString read fPaisEmisor write fPaisEmisor;
    property CodigoPostalEmisor:AnsiString read fCodigoPostalEmisor write fCodigoPostalEmisor;
    property RFCReceptor:AnsiString read fRFCReceptor write fRFCReceptor;
    property NombreReceptor:AnsiString read fNombreReceptor write fNombreReceptor;
    property DomicilioReceptor:AnsiString read fDomicilioReceptor write fDomicilioReceptor;
    property NoExteriorReceptor:AnsiString read fNoExteriorReceptor write fNoExteriorReceptor;
    property ColoniaReceptor:AnsiString read fColoniaReceptor write fColoniaReceptor;
    property LocalidadReceptor:AnsiString read fLocalidadReceptor write fLocalidadReceptor;
    property MunicipioReceptor:AnsiString read fMunicipioReceptor write fMunicipioReceptor;
    property EstadoReceptor:AnsiString read fEstadoReceptor write fEstadoReceptor;
    property PaisReceptor:AnsiString read fPaisReceptor write fPaisReceptor;
    property CodigoPostalReceptor:AnsiString read fCodigoPostalReceptor write fCodigoPostalReceptor;
    property FacturaElectronicaDetalleImportes:ATFacturaElectronicaDetalleImportes read GetFacturaElectronicaDetalleImportes write fFacturaElectronicaDetalleImportes;
    property FacturaElectronicaDetalleImpuestos:ATFacturaElectronicaDetalleImpuestos read GetFacturaElectronicaDetalleImpuestos write fFacturaElectronicaDetalleImpuestos;
    property TotalImpuesto:AnsiString read fTotalImpuesto write fTotalImpuesto;
    property CalleExpedidoEn:AnsiString read fCalleExpedidoEn write fCalleExpedidoEn;
    property NoExterioExpedidoEn:AnsiString read fNoExterioExpedidoEn write fNoExterioExpedidoEn;
    property ColoniaExpedidoEn:AnsiString read fColoniaExpedidoEn write fColoniaExpedidoEn;
    property CodigoPostalExpedidoEn:AnsiString read fCodigoPostalExpedidoEn write fCodigoPostalExpedidoEn;
    property LocalidadExpedidoEn:AnsiString read fLocalidadExpedidoEn write fLocalidadExpedidoEn;
    property MunicipioExpedidoEn:AnsiString read fMunicipioExpedidoEn write fMunicipioExpedidoEn;
    property EstadoExpedidoEn:AnsiString read fEstadoExpedidoEn write fEstadoExpedidoEn;
    property PaisExpedidoEn:AnsiString read fPaisExpedidoEn write fPaisExpedidoEn;
    property Sucursal:Boolean read fSucursal write fSucursal;
    property email:AnsiString read femail write femail;
  end;

  { TFacturaElectronicaBICollection }
  TFacturaElectronicaBICollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TFacturaElectronicaBI;
    procedure SetItems(aIndex: Integer; const Value: TFacturaElectronicaBI);
  public
    constructor Create; overload;
    function Add: TFacturaElectronicaBI; reintroduce;
    property Items[Index: Integer]:TFacturaElectronicaBI read GetItems write SetItems; default;
  end;

  { TFacturaElectronicaDetalleImporteBI }
  TFacturaElectronicaDetalleImporteBI = class(TROComplexType)
  private
    fCantidadReceptor: AnsiString;
    fUnidadReceptor: AnsiString;
    fDescripcionReceptor: AnsiString;
    fValorUnitarioReceptor: AnsiString;
    fImporteReceptor: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property CantidadReceptor:AnsiString read fCantidadReceptor write fCantidadReceptor;
    property UnidadReceptor:AnsiString read fUnidadReceptor write fUnidadReceptor;
    property DescripcionReceptor:AnsiString read fDescripcionReceptor write fDescripcionReceptor;
    property ValorUnitarioReceptor:AnsiString read fValorUnitarioReceptor write fValorUnitarioReceptor;
    property ImporteReceptor:AnsiString read fImporteReceptor write fImporteReceptor;
  end;

  { TFacturaElectronicaDetalleImporteBICollection }
  TFacturaElectronicaDetalleImporteBICollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TFacturaElectronicaDetalleImporteBI;
    procedure SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImporteBI);
  public
    constructor Create; overload;
    function Add: TFacturaElectronicaDetalleImporteBI; reintroduce;
    procedure SaveToArray(anArray: ATFacturaElectronicaDetalleImportes);
    procedure LoadFromArray(anArray: ATFacturaElectronicaDetalleImportes);
    property Items[Index: Integer]:TFacturaElectronicaDetalleImporteBI read GetItems write SetItems; default;
  end;

  { TFacturaElectronicaDetalleImpuestosBI }
  TFacturaElectronicaDetalleImpuestosBI = class(TROComplexType)
  private
    fImpuestoReceptor: AnsiString;
    fTasaReceptor: AnsiString;
    fImporteImpReceptor: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ImpuestoReceptor:AnsiString read fImpuestoReceptor write fImpuestoReceptor;
    property TasaReceptor:AnsiString read fTasaReceptor write fTasaReceptor;
    property ImporteImpReceptor:AnsiString read fImporteImpReceptor write fImporteImpReceptor;
  end;

  { TFacturaElectronicaDetalleImpuestosBICollection }
  TFacturaElectronicaDetalleImpuestosBICollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TFacturaElectronicaDetalleImpuestosBI;
    procedure SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImpuestosBI);
  public
    constructor Create; overload;
    function Add: TFacturaElectronicaDetalleImpuestosBI; reintroduce;
    procedure SaveToArray(anArray: ATFacturaElectronicaDetalleImpuestos);
    procedure LoadFromArray(anArray: ATFacturaElectronicaDetalleImpuestos);
    property Items[Index: Integer]:TFacturaElectronicaDetalleImpuestosBI read GetItems write SetItems; default;
  end;

  { TDataFacturaElectronicaBI }
  TDataFacturaElectronicaBI = class(TROComplexType)
  private
    fFacturaElectronicaBI: TFacturaElectronicaBI;
    fCadenaOriginal: UnicodeString;
    fSelloDigital: AnsiString;
    fNumCertificado: AnsiString;
    fCertificado: UnicodeString;
    function GetFacturaElectronicaBI: TFacturaElectronicaBI;
  protected
    property int_FacturaElectronicaBI: TFacturaElectronicaBI read fFacturaElectronicaBI;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FacturaElectronicaBI:TFacturaElectronicaBI read GetFacturaElectronicaBI write fFacturaElectronicaBI;
    property CadenaOriginal:UnicodeString read fCadenaOriginal write fCadenaOriginal;
    property SelloDigital:AnsiString read fSelloDigital write fSelloDigital;
    property NumCertificado:AnsiString read fNumCertificado write fNumCertificado;
    property Certificado:UnicodeString read fCertificado write fCertificado;
  end;

  { TDataFacturaElectronicaBICollection }
  TDataFacturaElectronicaBICollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDataFacturaElectronicaBI;
    procedure SetItems(aIndex: Integer; const Value: TDataFacturaElectronicaBI);
  public
    constructor Create; overload;
    function Add: TDataFacturaElectronicaBI; reintroduce;
    property Items[Index: Integer]:TDataFacturaElectronicaBI read GetItems write SetItems; default;
  end;

  { TDatos }
  TDatos = class(TROComplexType)
  private
    fNombre: AnsiString;
    fCODIGO: AnsiString;
    fDIRECCION: AnsiString;
    fIMSS: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Nombre:AnsiString read fNombre write fNombre;
    property CODIGO:AnsiString read fCODIGO write fCODIGO;
    property DIRECCION:AnsiString read fDIRECCION write fDIRECCION;
    property IMSS:AnsiString read fIMSS write fIMSS;
  end;

  { TDatosCollection }
  TDatosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TDatos;
    procedure SetItems(aIndex: Integer; const Value: TDatos);
  public
    constructor Create; overload;
    function Add: TDatos; reintroduce;
    property Items[Index: Integer]:TDatos read GetItems write SetItems; default;
  end;

  { TTipoValores }
  TTipoValores = class(TROComplexType)
  private
    fIDMONEDA: Integer;
    fVALOR: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property IDMONEDA:Integer read fIDMONEDA write fIDMONEDA;
    property VALOR:Double read fVALOR write fVALOR;
  end;

  { TTipoValoresCollection }
  TTipoValoresCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TTipoValores;
    procedure SetItems(aIndex: Integer; const Value: TTipoValores);
  public
    constructor Create; overload;
    function Add: TTipoValores; reintroduce;
    procedure SaveToArray(anArray: ATTipoValores);
    procedure LoadFromArray(anArray: ATTipoValores);
    property Items[Index: Integer]:TTipoValores read GetItems write SetItems; default;
  end;

  { TCampo }
  TCampo = class(TROComplexType)
  private
    fNombre: AnsiString;
    fSize: Integer;
    fFormato: AnsiString;
    fTipo: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Nombre:AnsiString read fNombre write fNombre;
    property Size:Integer read fSize write fSize;
    property Formato:AnsiString read fFormato write fFormato;
    property Tipo:Integer read fTipo write fTipo;
  end;

  { TCampoCollection }
  TCampoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TCampo;
    procedure SetItems(aIndex: Integer; const Value: TCampo);
  public
    constructor Create; overload;
    function Add: TCampo; reintroduce;
    procedure SaveToArray(anArray: ACampos);
    procedure LoadFromArray(anArray: ACampos);
    property Items[Index: Integer]:TCampo read GetItems write SetItems; default;
  end;

  { TExporta }
  TExporta = class(TROComplexType)
  private
    fNombre: AnsiString;
    fCampos: ACampos;
    fPasos: APasos;
    fTemplate: AnsiString;
    fScriptExporta: AnsiString;
    fScriptDatos: AnsiString;
    fParametros: AnsiString;
    function GetCampos: ACampos;
    function GetPasos: APasos;
  protected
    property int_Campos: ACampos read fCampos;
    property int_Pasos: APasos read fPasos;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Nombre:AnsiString read fNombre write fNombre;
    property Campos:ACampos read GetCampos write fCampos;
    property Pasos:APasos read GetPasos write fPasos;
    property Template:AnsiString read fTemplate write fTemplate;
    property ScriptExporta:AnsiString read fScriptExporta write fScriptExporta;
    property ScriptDatos:AnsiString read fScriptDatos write fScriptDatos;
    property Parametros:AnsiString read fParametros write fParametros;
  end;

  { TExportaCollection }
  TExportaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TExporta;
    procedure SetItems(aIndex: Integer; const Value: TExporta);
  public
    constructor Create; overload;
    function Add: TExporta; reintroduce;
    property Items[Index: Integer]:TExporta read GetItems write SetItems; default;
  end;

  { TParametrosExporta }
  TParametrosExporta = class(TROComplexType)
  private
    fPoliza: Integer;
    fEstacionIni: Integer;
    fEstacionFin: Integer;
    fTurnoIni: Integer;
    fTurnoFin: Integer;
    fFechaIni: DateTime;
    fFechaFin: DateTime;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Poliza:Integer read fPoliza write fPoliza;
    property EstacionIni:Integer read fEstacionIni write fEstacionIni;
    property EstacionFin:Integer read fEstacionFin write fEstacionFin;
    property TurnoIni:Integer read fTurnoIni write fTurnoIni;
    property TurnoFin:Integer read fTurnoFin write fTurnoFin;
    property FechaIni:DateTime read fFechaIni write fFechaIni;
    property FechaFin:DateTime read fFechaFin write fFechaFin;
  end;

  { TParametrosExportaCollection }
  TParametrosExportaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TParametrosExporta;
    procedure SetItems(aIndex: Integer; const Value: TParametrosExporta);
  public
    constructor Create; overload;
    function Add: TParametrosExporta; reintroduce;
    property Items[Index: Integer]:TParametrosExporta read GetItems write SetItems; default;
  end;

  { TPasos }
  TPasos = class(TROComplexType)
  private
    fServer: TServer;
    fSQL: AnsiString;
    function GetServer: TServer;
  protected
    property int_Server: TServer read fServer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Server:TServer read GetServer write fServer;
    property SQL:AnsiString read fSQL write fSQL;
  end;

  { TPasosCollection }
  TPasosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TPasos;
    procedure SetItems(aIndex: Integer; const Value: TPasos);
  public
    constructor Create; overload;
    function Add: TPasos; reintroduce;
    procedure SaveToArray(anArray: APasos);
    procedure LoadFromArray(anArray: APasos);
    property Items[Index: Integer]:TPasos read GetItems write SetItems; default;
  end;

  { TServer }
  TServer = class(TROComplexType)
  private
    fServidorID: Integer;
    fHost: AnsiString;
    fEstaciones: AEstaciones;
    function GetEstaciones: AEstaciones;
  protected
    property int_Estaciones: AEstaciones read fEstaciones;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ServidorID:Integer read fServidorID write fServidorID;
    property Host:AnsiString read fHost write fHost;
    property Estaciones:AEstaciones read GetEstaciones write fEstaciones;
  end;

  { TServerCollection }
  TServerCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TServer;
    procedure SetItems(aIndex: Integer; const Value: TServer);
  public
    constructor Create; overload;
    function Add: TServer; reintroduce;
    property Items[Index: Integer]:TServer read GetItems write SetItems; default;
  end;

  { TEstacion }
  TEstacion = class(TROComplexType)
  private
    fEstacionID: Integer;
    fHost: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property Host:AnsiString read fHost write fHost;
  end;

  { TEstacionCollection }
  TEstacionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TEstacion;
    procedure SetItems(aIndex: Integer; const Value: TEstacion);
  public
    constructor Create; overload;
    function Add: TEstacion; reintroduce;
    procedure SaveToArray(anArray: AEstaciones);
    procedure LoadFromArray(anArray: AEstaciones);
    property Items[Index: Integer]:TEstacion read GetItems write SetItems; default;
  end;

  { TTurnoxFecha }
  TTurnoxFecha = class(TROComplexType)
  private
    fIDTURNO: Integer;
    fFECHA: DateTime;
    fIDHORARIO: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property IDTURNO:Integer read fIDTURNO write fIDTURNO;
    property FECHA:DateTime read fFECHA write fFECHA;
    property IDHORARIO:Integer read fIDHORARIO write fIDHORARIO;
  end;

  { TTurnoxFechaCollection }
  TTurnoxFechaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TTurnoxFecha;
    procedure SetItems(aIndex: Integer; const Value: TTurnoxFecha);
  public
    constructor Create; overload;
    function Add: TTurnoxFecha; reintroduce;
    procedure SaveToArray(anArray: ATTurnoxFecha);
    procedure LoadFromArray(anArray: ATTurnoxFecha);
    property Items[Index: Integer]:TTurnoxFecha read GetItems write SetItems; default;
  end;

  { TEmisor }
  TEmisor = class(TROComplexType)
  private
    fRFC: AnsiString;
    fNOMBRE: AnsiString;
    fCALLE: AnsiString;
    fNOEXTERIOR: AnsiString;
    fNOINTERIOR: AnsiString;
    fCODIGOPOSTAL: AnsiString;
    fCOLONIA: AnsiString;
    fMUNICIPIO: AnsiString;
    fESTADO: AnsiString;
    fPAIS: AnsiString;
    fLOCALIDAD: AnsiString;
    fREGIMENFISCAL: AnsiString;
    fMETODOPAGO: AnsiString;
    fARCHIVOCERTIFICADO: AnsiString;
    fARCHIVOLLAVEPRIVADA: AnsiString;
    fCLAVELLAVEPRIVADA: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property RFC:AnsiString read fRFC write fRFC;
    property NOMBRE:AnsiString read fNOMBRE write fNOMBRE;
    property CALLE:AnsiString read fCALLE write fCALLE;
    property NOEXTERIOR:AnsiString read fNOEXTERIOR write fNOEXTERIOR;
    property NOINTERIOR:AnsiString read fNOINTERIOR write fNOINTERIOR;
    property CODIGOPOSTAL:AnsiString read fCODIGOPOSTAL write fCODIGOPOSTAL;
    property COLONIA:AnsiString read fCOLONIA write fCOLONIA;
    property MUNICIPIO:AnsiString read fMUNICIPIO write fMUNICIPIO;
    property ESTADO:AnsiString read fESTADO write fESTADO;
    property PAIS:AnsiString read fPAIS write fPAIS;
    property LOCALIDAD:AnsiString read fLOCALIDAD write fLOCALIDAD;
    property REGIMENFISCAL:AnsiString read fREGIMENFISCAL write fREGIMENFISCAL;
    property METODOPAGO:AnsiString read fMETODOPAGO write fMETODOPAGO;
    property ARCHIVOCERTIFICADO:AnsiString read fARCHIVOCERTIFICADO write fARCHIVOCERTIFICADO;
    property ARCHIVOLLAVEPRIVADA:AnsiString read fARCHIVOLLAVEPRIVADA write fARCHIVOLLAVEPRIVADA;
    property CLAVELLAVEPRIVADA:AnsiString read fCLAVELLAVEPRIVADA write fCLAVELLAVEPRIVADA;
  end;

  { TEmisorCollection }
  TEmisorCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TEmisor;
    procedure SetItems(aIndex: Integer; const Value: TEmisor);
  public
    constructor Create; overload;
    function Add: TEmisor; reintroduce;
    property Items[Index: Integer]:TEmisor read GetItems write SetItems; default;
  end;

  { TEmisorExpedidoEn }
  TEmisorExpedidoEn = class(TROComplexType)
  private
    fCALLE: AnsiString;
    fNOEXTERIOR: AnsiString;
    fNOINTERIOR: AnsiString;
    fCODIGOPOSTAL: AnsiString;
    fCOLONIA: AnsiString;
    fMUNICIPIO: AnsiString;
    fESTADO: AnsiString;
    fPAIS: AnsiString;
    fLOCALIDAD: AnsiString;
    fREFERENCIA: AnsiString;
    fLUGARDEEXPEDICION: AnsiString;
    fNUMERODECUENTA: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property CALLE:AnsiString read fCALLE write fCALLE;
    property NOEXTERIOR:AnsiString read fNOEXTERIOR write fNOEXTERIOR;
    property NOINTERIOR:AnsiString read fNOINTERIOR write fNOINTERIOR;
    property CODIGOPOSTAL:AnsiString read fCODIGOPOSTAL write fCODIGOPOSTAL;
    property COLONIA:AnsiString read fCOLONIA write fCOLONIA;
    property MUNICIPIO:AnsiString read fMUNICIPIO write fMUNICIPIO;
    property ESTADO:AnsiString read fESTADO write fESTADO;
    property PAIS:AnsiString read fPAIS write fPAIS;
    property LOCALIDAD:AnsiString read fLOCALIDAD write fLOCALIDAD;
    property REFERENCIA:AnsiString read fREFERENCIA write fREFERENCIA;
    property LUGARDEEXPEDICION:AnsiString read fLUGARDEEXPEDICION write fLUGARDEEXPEDICION;
    property NUMERODECUENTA:AnsiString read fNUMERODECUENTA write fNUMERODECUENTA;
  end;

  { TEmisorExpedidoEnCollection }
  TEmisorExpedidoEnCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TEmisorExpedidoEn;
    procedure SetItems(aIndex: Integer; const Value: TEmisorExpedidoEn);
  public
    constructor Create; overload;
    function Add: TEmisorExpedidoEn; reintroduce;
    property Items[Index: Integer]:TEmisorExpedidoEn read GetItems write SetItems; default;
  end;

  { TReceptor }
  TReceptor = class(TROComplexType)
  private
    fRFC: AnsiString;
    fNOMBRE: AnsiString;
    fCALLE: AnsiString;
    fNOEXTERIOR: AnsiString;
    fNOINTERIOR: AnsiString;
    fCODIGOPOSTAL: AnsiString;
    fCOLONIA: AnsiString;
    fMUNICIPIO: AnsiString;
    fESTADO: AnsiString;
    fPAIS: AnsiString;
    fLOCALIDAD: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property RFC:AnsiString read fRFC write fRFC;
    property NOMBRE:AnsiString read fNOMBRE write fNOMBRE;
    property CALLE:AnsiString read fCALLE write fCALLE;
    property NOEXTERIOR:AnsiString read fNOEXTERIOR write fNOEXTERIOR;
    property NOINTERIOR:AnsiString read fNOINTERIOR write fNOINTERIOR;
    property CODIGOPOSTAL:AnsiString read fCODIGOPOSTAL write fCODIGOPOSTAL;
    property COLONIA:AnsiString read fCOLONIA write fCOLONIA;
    property MUNICIPIO:AnsiString read fMUNICIPIO write fMUNICIPIO;
    property ESTADO:AnsiString read fESTADO write fESTADO;
    property PAIS:AnsiString read fPAIS write fPAIS;
    property LOCALIDAD:AnsiString read fLOCALIDAD write fLOCALIDAD;
  end;

  { TReceptorCollection }
  TReceptorCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): TReceptor;
    procedure SetItems(aIndex: Integer; const Value: TReceptor);
  public
    constructor Create; overload;
    function Add: TReceptor; reintroduce;
    property Items[Index: Integer]:TReceptor read GetItems write SetItems; default;
  end;

  { ACampos }
  ACampos_TCampo = array of TCampo;
  ACampos = class(TROArray)
  private
    fCount: Integer;
    fItems : ACampos_TCampo;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TCampo;
    procedure SetItems(aIndex: Integer; const Value: TCampo);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TCampo; overload;
    function Add(const Value: TCampo):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TCampo read GetItems write SetItems; default;
    property InnerArray: ACampos_TCampo read fItems;
  end;

  { AEstaciones }
  AEstaciones_TEstacion = array of TEstacion;
  AEstaciones = class(TROArray)
  private
    fCount: Integer;
    fItems : AEstaciones_TEstacion;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TEstacion;
    procedure SetItems(aIndex: Integer; const Value: TEstacion);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TEstacion; overload;
    function Add(const Value: TEstacion):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TEstacion read GetItems write SetItems; default;
    property InnerArray: AEstaciones_TEstacion read fItems;
  end;

  { APasos }
  APasos_TPasos = array of TPasos;
  APasos = class(TROArray)
  private
    fCount: Integer;
    fItems : APasos_TPasos;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TPasos;
    procedure SetItems(aIndex: Integer; const Value: TPasos);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TPasos; overload;
    function Add(const Value: TPasos):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TPasos read GetItems write SetItems; default;
    property InnerArray: APasos_TPasos read fItems;
  end;

  { ArrayOpcionBI }
  ArrayOpcionBI_TOpcionBI = array of TOpcionBI;
  ArrayOpcionBI = class(TROArray)
  private
    fCount: Integer;
    fItems : ArrayOpcionBI_TOpcionBI;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TOpcionBI;
    procedure SetItems(aIndex: Integer; const Value: TOpcionBI);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TOpcionBI; overload;
    function Add(const Value: TOpcionBI):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TOpcionBI read GetItems write SetItems; default;
    property InnerArray: ArrayOpcionBI_TOpcionBI read fItems;
  end;

  { ATDetalleFactura }
  ATDetalleFactura_TDetalleFactura = array of TDetalleFactura;
  ATDetalleFactura = class(TROArray)
  private
    fCount: Integer;
    fItems : ATDetalleFactura_TDetalleFactura;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TDetalleFactura;
    procedure SetItems(aIndex: Integer; const Value: TDetalleFactura);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleFactura; overload;
    function Add(const Value: TDetalleFactura):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TDetalleFactura read GetItems write SetItems; default;
    property InnerArray: ATDetalleFactura_TDetalleFactura read fItems;
  end;

  { ATFacturaElectronicaDetalleImportes }
  ATFacturaElectronicaDetalleImportes_TFacturaElectronicaDetalleImporteBI = array of TFacturaElectronicaDetalleImporteBI;
  ATFacturaElectronicaDetalleImportes = class(TROArray)
  private
    fCount: Integer;
    fItems : ATFacturaElectronicaDetalleImportes_TFacturaElectronicaDetalleImporteBI;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TFacturaElectronicaDetalleImporteBI;
    procedure SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImporteBI);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TFacturaElectronicaDetalleImporteBI; overload;
    function Add(const Value: TFacturaElectronicaDetalleImporteBI):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TFacturaElectronicaDetalleImporteBI read GetItems write SetItems; default;
    property InnerArray: ATFacturaElectronicaDetalleImportes_TFacturaElectronicaDetalleImporteBI read fItems;
  end;

  { ATFacturaElectronicaDetalleImpuestos }
  ATFacturaElectronicaDetalleImpuestos_TFacturaElectronicaDetalleImpuestosBI = array of TFacturaElectronicaDetalleImpuestosBI;
  ATFacturaElectronicaDetalleImpuestos = class(TROArray)
  private
    fCount: Integer;
    fItems : ATFacturaElectronicaDetalleImpuestos_TFacturaElectronicaDetalleImpuestosBI;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TFacturaElectronicaDetalleImpuestosBI;
    procedure SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImpuestosBI);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TFacturaElectronicaDetalleImpuestosBI; overload;
    function Add(const Value: TFacturaElectronicaDetalleImpuestosBI):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TFacturaElectronicaDetalleImpuestosBI read GetItems write SetItems; default;
    property InnerArray: ATFacturaElectronicaDetalleImpuestos_TFacturaElectronicaDetalleImpuestosBI read fItems;
  end;

  { ATTipoValores }
  ATTipoValores_TTipoValores = array of TTipoValores;
  ATTipoValores = class(TROArray)
  private
    fCount: Integer;
    fItems : ATTipoValores_TTipoValores;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TTipoValores;
    procedure SetItems(aIndex: Integer; const Value: TTipoValores);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TTipoValores; overload;
    function Add(const Value: TTipoValores):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TTipoValores read GetItems write SetItems; default;
    property InnerArray: ATTipoValores_TTipoValores read fItems;
  end;

  { ATTurnoxFecha }
  ATTurnoxFecha_TTurnoxFecha = array of TTurnoxFecha;
  ATTurnoxFecha = class(TROArray)
  private
    fCount: Integer;
    fItems : ATTurnoxFecha_TTurnoxFecha;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: Integer): TTurnoxFecha;
    procedure SetItems(aIndex: Integer; const Value: TTurnoxFecha);
    function GetCount: Integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: System.TClass; override;
    class function GetItemSize: Integer; override;

    function GetItemRef(aIndex: Integer): pointer; override;
    procedure SetItemRef(aIndex: Integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: Integer); override;
    procedure Resize(ElementCount: Integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TTurnoxFecha; overload;
    function Add(const Value: TTurnoxFecha):Integer; overload;

    property Count : Integer read GetCount;
    property Items[Index: Integer]:TTurnoxFecha read GetItems write SetItems; default;
    property InnerArray: ATTurnoxFecha_TTurnoxFecha read fItems;
  end;

  { IServiceIngresos }
  IServiceIngresos = interface(IDataAbstractService)
    ['{DB8D9395-4150-4DC0-85B8-CEDDC697105D}']
    function AbreDataSetReportes(const SQL: AnsiString; const Parametros: TParametrosBI): Binary;
    function AbreTurno(const IDTURNO: Integer; const IDESTACION: Integer; const FECHA: DateTime): AnsiString;
    function ObtenTurnosdeFecha(const Fecha: DateTime; const Estacion: Integer): ATTurnoxFecha;
    function BuscarReporte(const Nombre: AnsiString): TReporteBI;
    function DragPagoMateria(const PAGOMATERIA: Integer; const IDGRUPOTARGET: Integer; const IDGRUPOSOURCE: Integer): Boolean;
    function ActualizaSubTipoPago(const IDTIPOPAGO: Integer; const IDSUBTIPOPAGO: Integer): Boolean;
    function DatosFacturaElectronica(const FacturaID: Integer; const NumeroEstacion: Integer): TFacturaElectronicaBI;
    function DatosFactura(const Folio: Integer; const Serie: AnsiString): Boolean;
    function Fecha: DateTime;
    function Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
    procedure GuardaDatosFactura(const DatosFactura: TDatosFactura);
    function Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfoBI;
    function IniciaCiclo(const IDCICLO: AnsiString): Boolean;
    function ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const FolioNew: Integer): AnsiString;
    procedure InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: UnicodeString; const SelloDigital: UnicodeString;
                                        const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString;
                                        const NoAprobacion: AnsiString; const FechaAprobacion: DateTime; const XMLCFD: UnicodeString; const XMLCFDI: UnicodeString);
    function FolioActual2(const Serie: AnsiString; const folio: Integer): Integer;
    procedure GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
    function EliminaMaestroDisponibilidad(const IDMAESTRODISPONIBILIDAD: Integer): Boolean;
    function EliminaMateriaMaestro(const IDMAESTRO: Integer; const IDMATERIA: Integer): Boolean;
    function EliminaPago(const idSubtipoPago: Integer; const status: AnsiString; const idCiclos: Integer; const idGrupo: Integer): Boolean;
    function EliminaPagoCaja(const idSubtipoPago: Integer; const status: AnsiString; const idCiclos: Integer; const idGrupo: Integer): Boolean;
    function InsertaCaja(const Observaciones: AnsiString; const TipoPago: AnsiString; const idEmpleado: Integer): Integer;
    function LiquidaPago(const INTERES: Double; const IDEMPLEADO: Integer; const IDPAGO: Integer): Boolean;
    function DividePago(const idPago: Integer; const idEmpleado: Integer; const Importes: Double; const Interes: Double): Integer;
    function InsertaPagoCaja(const IDPAGO: Integer; const IDCAJA: Integer): Boolean;
    function AplicaCalificacion(const Calificacion: Double; const Faltas: Integer; const idmaterias: Integer; const idhistorialalumno: Integer;
                                const idhistorialgrupo: Integer; const fecha: DateTime; const idtipocalificacion: Integer; const califAux2: Double;
                                const califAux1: Double): Boolean;
    function HistorialAlumnoDEL(const IDHISTORIALALUMNO: Integer): Boolean;
    function BecaDescuento(const IDHISTORIALALUMNO: Integer; const BECA: Double; const DESCUENTO: Double): Boolean;
    function InsertaHistorialAlumno(const IDHISTORIALALUMNO: Integer; const IDHISTORIALGRUPO: Integer; const IDALUMNO: Integer; const DOCUMENTOSFALTANTES: AnsiString;
                                    const BECA: Double; const DESCUENTO: Double): Boolean;
    function CambioGrupo(const IDHISTORIALALUMNO: Integer; const IDHISTORIALGRUPO: Integer; const DOCUMENTOSFALTANTES: AnsiString;
                         const BECA: Double; const DESCUENTO: Double): Boolean;
    function TipoCalificacion: Integer;
    function DatosAlumno(const AlumnoID: Integer): TDatos;
    function DatosMaestro(const MaestroID: Integer): TDatos;
    function PagoBanco(const FECHAPAGO: DateTime; const IDEMPLEADO: Integer; const IDPAGO: Integer; const MONTO: Double): Integer;
    function PrecioProducto(const ProductoID: Integer): Double;
    function FolioActual(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function ValidaFolioFactura(const Campo: AnsiString; const Folio: Integer): Boolean;
    function GuardarDatosFactura(const DatosFactura: TDatosFactura): AnsiString;
    function ActualizaTipoCampio(const NUMEROESTACION: Int64; const FECHA: DateTime; const VALOR: Double; const IDMONEDA: Integer): Boolean;
    function ObtenTipoValores(const NUMEROESTACION: Integer; const FECHA: DateTime): ATTipoValores;
    function CostoProducto(const IDPRODUCTO: Integer): Double;
    function Exporta(const ExportarID: Integer): TExporta;
    function CierraLiquidacion(const LiquidacionID: Integer): AnsiString;
    function comboestacion(const estacionid: AnsiString): AnsiString;
    function comboscompras(const estacionid: AnsiString): AnsiString;
    function IANcomprasGuarda(const MovimientoAlmacenMaestro: AnsiString; const MovimientoAlmacenDetalle: AnsiString): AnsiString;
  end;

  { CoServiceIngresos }
  CoServiceIngresos = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceIngresos; overload;
    class function Create(const aUri: TROUri): IServiceIngresos; overload;
    class function Create(const aUrl: string): IServiceIngresos; overload;
  end;

  { TServiceIngresos_Proxy }
  TServiceIngresos_Proxy = class(TDataAbstractService_Proxy, IServiceIngresos)
  protected
    function __GetInterfaceName:string; override;

    function AbreDataSetReportes(const SQL: AnsiString; const Parametros: TParametrosBI): Binary;
    function AbreTurno(const IDTURNO: Integer; const IDESTACION: Integer; const FECHA: DateTime): AnsiString;
    function ObtenTurnosdeFecha(const Fecha: DateTime; const Estacion: Integer): ATTurnoxFecha;
    function BuscarReporte(const Nombre: AnsiString): TReporteBI;
    function DragPagoMateria(const PAGOMATERIA: Integer; const IDGRUPOTARGET: Integer; const IDGRUPOSOURCE: Integer): Boolean;
    function ActualizaSubTipoPago(const IDTIPOPAGO: Integer; const IDSUBTIPOPAGO: Integer): Boolean;
    function DatosFacturaElectronica(const FacturaID: Integer; const NumeroEstacion: Integer): TFacturaElectronicaBI;
    function DatosFactura(const Folio: Integer; const Serie: AnsiString): Boolean;
    function Fecha: DateTime;
    function Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
    procedure GuardaDatosFactura(const DatosFactura: TDatosFactura);
    function Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfoBI;
    function IniciaCiclo(const IDCICLO: AnsiString): Boolean;
    function ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const FolioNew: Integer): AnsiString;
    procedure InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: UnicodeString; const SelloDigital: UnicodeString;
                                        const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString;
                                        const NoAprobacion: AnsiString; const FechaAprobacion: DateTime; const XMLCFD: UnicodeString; const XMLCFDI: UnicodeString);
    function FolioActual2(const Serie: AnsiString; const folio: Integer): Integer;
    procedure GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
    function EliminaMaestroDisponibilidad(const IDMAESTRODISPONIBILIDAD: Integer): Boolean;
    function EliminaMateriaMaestro(const IDMAESTRO: Integer; const IDMATERIA: Integer): Boolean;
    function EliminaPago(const idSubtipoPago: Integer; const status: AnsiString; const idCiclos: Integer; const idGrupo: Integer): Boolean;
    function EliminaPagoCaja(const idSubtipoPago: Integer; const status: AnsiString; const idCiclos: Integer; const idGrupo: Integer): Boolean;
    function InsertaCaja(const Observaciones: AnsiString; const TipoPago: AnsiString; const idEmpleado: Integer): Integer;
    function LiquidaPago(const INTERES: Double; const IDEMPLEADO: Integer; const IDPAGO: Integer): Boolean;
    function DividePago(const idPago: Integer; const idEmpleado: Integer; const Importes: Double; const Interes: Double): Integer;
    function InsertaPagoCaja(const IDPAGO: Integer; const IDCAJA: Integer): Boolean;
    function AplicaCalificacion(const Calificacion: Double; const Faltas: Integer; const idmaterias: Integer; const idhistorialalumno: Integer;
                                const idhistorialgrupo: Integer; const fecha: DateTime; const idtipocalificacion: Integer; const califAux2: Double;
                                const califAux1: Double): Boolean;
    function HistorialAlumnoDEL(const IDHISTORIALALUMNO: Integer): Boolean;
    function BecaDescuento(const IDHISTORIALALUMNO: Integer; const BECA: Double; const DESCUENTO: Double): Boolean;
    function InsertaHistorialAlumno(const IDHISTORIALALUMNO: Integer; const IDHISTORIALGRUPO: Integer; const IDALUMNO: Integer; const DOCUMENTOSFALTANTES: AnsiString;
                                    const BECA: Double; const DESCUENTO: Double): Boolean;
    function CambioGrupo(const IDHISTORIALALUMNO: Integer; const IDHISTORIALGRUPO: Integer; const DOCUMENTOSFALTANTES: AnsiString;
                         const BECA: Double; const DESCUENTO: Double): Boolean;
    function TipoCalificacion: Integer;
    function DatosAlumno(const AlumnoID: Integer): TDatos;
    function DatosMaestro(const MaestroID: Integer): TDatos;
    function PagoBanco(const FECHAPAGO: DateTime; const IDEMPLEADO: Integer; const IDPAGO: Integer; const MONTO: Double): Integer;
    function PrecioProducto(const ProductoID: Integer): Double;
    function FolioActual(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function ValidaFolioFactura(const Campo: AnsiString; const Folio: Integer): Boolean;
    function GuardarDatosFactura(const DatosFactura: TDatosFactura): AnsiString;
    function ActualizaTipoCampio(const NUMEROESTACION: Int64; const FECHA: DateTime; const VALOR: Double; const IDMONEDA: Integer): Boolean;
    function ObtenTipoValores(const NUMEROESTACION: Integer; const FECHA: DateTime): ATTipoValores;
    function CostoProducto(const IDPRODUCTO: Integer): Double;
    function Exporta(const ExportarID: Integer): TExporta;
    function CierraLiquidacion(const LiquidacionID: Integer): AnsiString;
    function comboestacion(const estacionid: AnsiString): AnsiString;
    function comboscompras(const estacionid: AnsiString): AnsiString;
    function IANcomprasGuarda(const MovimientoAlmacenMaestro: AnsiString; const MovimientoAlmacenDetalle: AnsiString): AnsiString;
  end;

implementation

uses
  {vcl:} SysUtils,
  {RemObjects:} uROEventRepository, uROEventReceiver, uROSerializer, uROClient, uRORes;

{ ACampos }

procedure ACampos.Assign(iSource: TPersistent);
var
  lSource: ACampos;
  i: Integer;
  lItem: TCampo;
begin
  if (iSource is ACampos) then begin
    lSource := ACampos(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TCampo(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ACampos.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TCampo);
end;

class function ACampos.GetItemClass: System.TClass;
begin
  Result := TCampo;
end;

class function ACampos.GetItemSize: Integer;
begin
  Result := System.SizeOf(TCampo);
end;

function ACampos.GetItems(aIndex: Integer): TCampo;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ACampos.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ACampos.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ACampos.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ACampos.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ACampos.SetItems(aIndex: Integer; const Value: TCampo);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ACampos.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TCampo.Create;
  FCount := ElementCount;
end;

function ACampos.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ACampos.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ACampos.Add: TCampo;
begin
  Result := TCampo.Create;
  Self.Add(Result);
end;

function ACampos.Add(const Value:TCampo): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ACampos.ReadComplex(ASerializer: TObject);
var
  lval: TCampo;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TCampo, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ACampos.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ACampos);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TCampo, i);
end;

{ AEstaciones }

procedure AEstaciones.Assign(iSource: TPersistent);
var
  lSource: AEstaciones;
  i: Integer;
  lItem: TEstacion;
begin
  if (iSource is AEstaciones) then begin
    lSource := AEstaciones(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TEstacion(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function AEstaciones.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TEstacion);
end;

class function AEstaciones.GetItemClass: System.TClass;
begin
  Result := TEstacion;
end;

class function AEstaciones.GetItemSize: Integer;
begin
  Result := System.SizeOf(TEstacion);
end;

function AEstaciones.GetItems(aIndex: Integer): TEstacion;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function AEstaciones.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure AEstaciones.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure AEstaciones.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure AEstaciones.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure AEstaciones.SetItems(aIndex: Integer; const Value: TEstacion);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure AEstaciones.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TEstacion.Create;
  FCount := ElementCount;
end;

function AEstaciones.GetCount: Integer;
begin
  Result := FCount;
end;

procedure AEstaciones.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function AEstaciones.Add: TEstacion;
begin
  Result := TEstacion.Create;
  Self.Add(Result);
end;

function AEstaciones.Add(const Value:TEstacion): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure AEstaciones.ReadComplex(ASerializer: TObject);
var
  lval: TEstacion;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TEstacion, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure AEstaciones.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(AEstaciones);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TEstacion, i);
end;

{ APasos }

procedure APasos.Assign(iSource: TPersistent);
var
  lSource: APasos;
  i: Integer;
  lItem: TPasos;
begin
  if (iSource is APasos) then begin
    lSource := APasos(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TPasos(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function APasos.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TPasos);
end;

class function APasos.GetItemClass: System.TClass;
begin
  Result := TPasos;
end;

class function APasos.GetItemSize: Integer;
begin
  Result := System.SizeOf(TPasos);
end;

function APasos.GetItems(aIndex: Integer): TPasos;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function APasos.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure APasos.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure APasos.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure APasos.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure APasos.SetItems(aIndex: Integer; const Value: TPasos);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure APasos.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TPasos.Create;
  FCount := ElementCount;
end;

function APasos.GetCount: Integer;
begin
  Result := FCount;
end;

procedure APasos.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function APasos.Add: TPasos;
begin
  Result := TPasos.Create;
  Self.Add(Result);
end;

function APasos.Add(const Value:TPasos): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure APasos.ReadComplex(ASerializer: TObject);
var
  lval: TPasos;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TPasos, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure APasos.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(APasos);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TPasos, i);
end;

{ ArrayOpcionBI }

procedure ArrayOpcionBI.Assign(iSource: TPersistent);
var
  lSource: ArrayOpcionBI;
  i: Integer;
  lItem: TOpcionBI;
begin
  if (iSource is ArrayOpcionBI) then begin
    lSource := ArrayOpcionBI(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TOpcionBI(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ArrayOpcionBI.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TOpcionBI);
end;

class function ArrayOpcionBI.GetItemClass: System.TClass;
begin
  Result := TOpcionBI;
end;

class function ArrayOpcionBI.GetItemSize: Integer;
begin
  Result := System.SizeOf(TOpcionBI);
end;

function ArrayOpcionBI.GetItems(aIndex: Integer): TOpcionBI;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ArrayOpcionBI.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ArrayOpcionBI.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ArrayOpcionBI.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ArrayOpcionBI.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ArrayOpcionBI.SetItems(aIndex: Integer; const Value: TOpcionBI);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ArrayOpcionBI.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TOpcionBI.Create;
  FCount := ElementCount;
end;

function ArrayOpcionBI.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ArrayOpcionBI.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ArrayOpcionBI.Add: TOpcionBI;
begin
  Result := TOpcionBI.Create;
  Self.Add(Result);
end;

function ArrayOpcionBI.Add(const Value:TOpcionBI): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ArrayOpcionBI.ReadComplex(ASerializer: TObject);
var
  lval: TOpcionBI;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TOpcionBI, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ArrayOpcionBI.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ArrayOpcionBI);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TOpcionBI, i);
end;

{ ATDetalleFactura }

procedure ATDetalleFactura.Assign(iSource: TPersistent);
var
  lSource: ATDetalleFactura;
  i: Integer;
  lItem: TDetalleFactura;
begin
  if (iSource is ATDetalleFactura) then begin
    lSource := ATDetalleFactura(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TDetalleFactura(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATDetalleFactura.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TDetalleFactura);
end;

class function ATDetalleFactura.GetItemClass: System.TClass;
begin
  Result := TDetalleFactura;
end;

class function ATDetalleFactura.GetItemSize: Integer;
begin
  Result := System.SizeOf(TDetalleFactura);
end;

function ATDetalleFactura.GetItems(aIndex: Integer): TDetalleFactura;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATDetalleFactura.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATDetalleFactura.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATDetalleFactura.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATDetalleFactura.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATDetalleFactura.SetItems(aIndex: Integer; const Value: TDetalleFactura);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATDetalleFactura.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleFactura.Create;
  FCount := ElementCount;
end;

function ATDetalleFactura.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATDetalleFactura.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATDetalleFactura.Add: TDetalleFactura;
begin
  Result := TDetalleFactura.Create;
  Self.Add(Result);
end;

function ATDetalleFactura.Add(const Value:TDetalleFactura): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATDetalleFactura.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleFactura;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleFactura, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATDetalleFactura.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATDetalleFactura);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleFactura, i);
end;

{ ATFacturaElectronicaDetalleImportes }

procedure ATFacturaElectronicaDetalleImportes.Assign(iSource: TPersistent);
var
  lSource: ATFacturaElectronicaDetalleImportes;
  i: Integer;
  lItem: TFacturaElectronicaDetalleImporteBI;
begin
  if (iSource is ATFacturaElectronicaDetalleImportes) then begin
    lSource := ATFacturaElectronicaDetalleImportes(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TFacturaElectronicaDetalleImporteBI(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATFacturaElectronicaDetalleImportes.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TFacturaElectronicaDetalleImporteBI);
end;

class function ATFacturaElectronicaDetalleImportes.GetItemClass: System.TClass;
begin
  Result := TFacturaElectronicaDetalleImporteBI;
end;

class function ATFacturaElectronicaDetalleImportes.GetItemSize: Integer;
begin
  Result := System.SizeOf(TFacturaElectronicaDetalleImporteBI);
end;

function ATFacturaElectronicaDetalleImportes.GetItems(aIndex: Integer): TFacturaElectronicaDetalleImporteBI;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATFacturaElectronicaDetalleImportes.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATFacturaElectronicaDetalleImportes.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATFacturaElectronicaDetalleImportes.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATFacturaElectronicaDetalleImportes.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATFacturaElectronicaDetalleImportes.SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImporteBI);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATFacturaElectronicaDetalleImportes.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TFacturaElectronicaDetalleImporteBI.Create;
  FCount := ElementCount;
end;

function ATFacturaElectronicaDetalleImportes.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATFacturaElectronicaDetalleImportes.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATFacturaElectronicaDetalleImportes.Add: TFacturaElectronicaDetalleImporteBI;
begin
  Result := TFacturaElectronicaDetalleImporteBI.Create;
  Self.Add(Result);
end;

function ATFacturaElectronicaDetalleImportes.Add(const Value:TFacturaElectronicaDetalleImporteBI): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATFacturaElectronicaDetalleImportes.ReadComplex(ASerializer: TObject);
var
  lval: TFacturaElectronicaDetalleImporteBI;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TFacturaElectronicaDetalleImporteBI, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATFacturaElectronicaDetalleImportes.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATFacturaElectronicaDetalleImportes);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TFacturaElectronicaDetalleImporteBI, i);
end;

{ ATFacturaElectronicaDetalleImpuestos }

procedure ATFacturaElectronicaDetalleImpuestos.Assign(iSource: TPersistent);
var
  lSource: ATFacturaElectronicaDetalleImpuestos;
  i: Integer;
  lItem: TFacturaElectronicaDetalleImpuestosBI;
begin
  if (iSource is ATFacturaElectronicaDetalleImpuestos) then begin
    lSource := ATFacturaElectronicaDetalleImpuestos(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TFacturaElectronicaDetalleImpuestosBI(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATFacturaElectronicaDetalleImpuestos.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TFacturaElectronicaDetalleImpuestosBI);
end;

class function ATFacturaElectronicaDetalleImpuestos.GetItemClass: System.TClass;
begin
  Result := TFacturaElectronicaDetalleImpuestosBI;
end;

class function ATFacturaElectronicaDetalleImpuestos.GetItemSize: Integer;
begin
  Result := System.SizeOf(TFacturaElectronicaDetalleImpuestosBI);
end;

function ATFacturaElectronicaDetalleImpuestos.GetItems(aIndex: Integer): TFacturaElectronicaDetalleImpuestosBI;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATFacturaElectronicaDetalleImpuestos.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATFacturaElectronicaDetalleImpuestos.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATFacturaElectronicaDetalleImpuestos.SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImpuestosBI);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TFacturaElectronicaDetalleImpuestosBI.Create;
  FCount := ElementCount;
end;

function ATFacturaElectronicaDetalleImpuestos.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATFacturaElectronicaDetalleImpuestos.Add: TFacturaElectronicaDetalleImpuestosBI;
begin
  Result := TFacturaElectronicaDetalleImpuestosBI.Create;
  Self.Add(Result);
end;

function ATFacturaElectronicaDetalleImpuestos.Add(const Value:TFacturaElectronicaDetalleImpuestosBI): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATFacturaElectronicaDetalleImpuestos.ReadComplex(ASerializer: TObject);
var
  lval: TFacturaElectronicaDetalleImpuestosBI;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TFacturaElectronicaDetalleImpuestosBI, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATFacturaElectronicaDetalleImpuestos.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATFacturaElectronicaDetalleImpuestos);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TFacturaElectronicaDetalleImpuestosBI, i);
end;

{ ATTipoValores }

procedure ATTipoValores.Assign(iSource: TPersistent);
var
  lSource: ATTipoValores;
  i: Integer;
  lItem: TTipoValores;
begin
  if (iSource is ATTipoValores) then begin
    lSource := ATTipoValores(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TTipoValores(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATTipoValores.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TTipoValores);
end;

class function ATTipoValores.GetItemClass: System.TClass;
begin
  Result := TTipoValores;
end;

class function ATTipoValores.GetItemSize: Integer;
begin
  Result := System.SizeOf(TTipoValores);
end;

function ATTipoValores.GetItems(aIndex: Integer): TTipoValores;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATTipoValores.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATTipoValores.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATTipoValores.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATTipoValores.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATTipoValores.SetItems(aIndex: Integer; const Value: TTipoValores);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATTipoValores.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TTipoValores.Create;
  FCount := ElementCount;
end;

function ATTipoValores.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATTipoValores.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATTipoValores.Add: TTipoValores;
begin
  Result := TTipoValores.Create;
  Self.Add(Result);
end;

function ATTipoValores.Add(const Value:TTipoValores): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATTipoValores.ReadComplex(ASerializer: TObject);
var
  lval: TTipoValores;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TTipoValores, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATTipoValores.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATTipoValores);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TTipoValores, i);
end;

{ ATTurnoxFecha }

procedure ATTurnoxFecha.Assign(iSource: TPersistent);
var
  lSource: ATTurnoxFecha;
  i: Integer;
  lItem: TTurnoxFecha;
begin
  if (iSource is ATTurnoxFecha) then begin
    lSource := ATTurnoxFecha(iSource);
    Self.Clear();

    for i := 0 to lSource.Count-1 do
      if System.Assigned(lSource.Items[i]) then begin
        lItem := TTurnoxFecha(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Self.Add(lItem);
      end
      else begin
        Self.Add(nil);
      end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATTurnoxFecha.GetItemType: PTypeInfo;
begin
  Result := System.TypeInfo(TTurnoxFecha);
end;

class function ATTurnoxFecha.GetItemClass: System.TClass;
begin
  Result := TTurnoxFecha;
end;

class function ATTurnoxFecha.GetItemSize: Integer;
begin
  Result := System.SizeOf(TTurnoxFecha);
end;

function ATTurnoxFecha.GetItems(aIndex: Integer): TTurnoxFecha;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function ATTurnoxFecha.GetItemRef(aIndex: Integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

procedure ATTurnoxFecha.SetItemRef(aIndex: Integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATTurnoxFecha.Clear;
var i: Integer;
begin
  for i := 0 to (Self.Count-1) do fItems[i].Free();
  System.SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATTurnoxFecha.Delete(aIndex: Integer);
var
  i: Integer;
begin
  if (aIndex >= Self.Count) then uROClasses.RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free;

  if (aIndex < Self.Count-1) then
    for i := aIndex to Self.Count-2 do fItems[i] := fItems[i+1];

  System.SetLength(fItems, Self.Count-1);
  System.Dec(FCount);
end;

procedure ATTurnoxFecha.SetItems(aIndex: Integer; const Value: TTurnoxFecha);
begin
  if (aIndex < 0) or (aIndex >= Self.Count) then uROClasses.RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATTurnoxFecha.Resize(ElementCount: Integer);
var
  i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  System.SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TTurnoxFecha.Create;
  FCount := ElementCount;
end;

function ATTurnoxFecha.GetCount: Integer;
begin
  Result := FCount;
end;

procedure ATTurnoxFecha.Grow;
var
  lDelta, lCapacity: Integer;
begin
  lCapacity := System.Length(fItems);
  if lCapacity > 64 then
    lDelta := lCapacity div 4
  else
    if lCapacity > 8 then
      lDelta := 16
   else
      lDelta := 4;
  System.SetLength(fItems, lCapacity + lDelta);
end;

function ATTurnoxFecha.Add: TTurnoxFecha;
begin
  Result := TTurnoxFecha.Create;
  Self.Add(Result);
end;

function ATTurnoxFecha.Add(const Value:TTurnoxFecha): Integer;
begin
  Result := Self.Count;
  if System.Length(fItems) = Result then
    Self.Grow;
  fItems[Result] := Value;
  System.Inc(fCount);
end;

procedure ATTurnoxFecha.ReadComplex(ASerializer: TObject);
var
  lval: TTurnoxFecha;
  i: Integer;
begin
  for i := 0 to Self.Count-1 do begin
      TROSerializer(ASerializer).ReadStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), TTurnoxFecha, lval, i);
    Self.Items[i] := lval;
  end;
end;

procedure ATTurnoxFecha.WriteComplex(ASerializer: TObject);
var
  i: Integer;
begin
  TROSerializer(ASerializer).ChangeClass(ATTurnoxFecha);
  for i := 0 to Self.Count-1 do
      TROSerializer(ASerializer).WriteStruct(TROSerializer(ASerializer).GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TTurnoxFecha, i);
end;

{ TLoginInfoBI }

procedure TLoginInfoBI.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TLoginInfoBI;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TLoginInfoBI) then begin
    lSource := LibraryIngresos_Intf.TLoginInfoBI(iSource);

    Self.Valida := lSource.Valida;
    Self.EmpleadoID := lSource.EmpleadoID;
    Self.NombreEmpleado := lSource.NombreEmpleado;
    if System.Assigned(lSource.fAccesos) then
      Self.Accesos.Assign(lSource.fAccesos)
    else
      SysUtils.FreeAndNil(fAccesos);
    Self.NumeroEstacion := lSource.NumeroEstacion;
  end;
end;

function TLoginInfoBI.GetAccesos: ArrayOpcionBI;
begin
  if (fAccesos = nil) then fAccesos := ArrayOpcionBI.Create();
  Result := fAccesos;
end;

procedure TLoginInfoBI.ReadComplex(ASerializer: TObject);
var
  l_Accesos: ArrayOpcionBI;
  l_EmpleadoID: Integer;
  l_NombreEmpleado: AnsiString;
  l_NumeroEstacion: Integer;
  l_Valida: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Valida := Self.Valida;
    try
      TROSerializer(ASerializer).ReadEnumerated('Valida',System.TypeInfo(boolean), l_Valida);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Valida']));
    end;
    Self.Valida := l_Valida;
    l_EmpleadoID := Self.EmpleadoID;
    try
      TROSerializer(ASerializer).ReadInteger('EmpleadoID', TypInfo.otSLong, l_EmpleadoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EmpleadoID']));
    end;
    Self.EmpleadoID := l_EmpleadoID;
    l_NombreEmpleado := Self.NombreEmpleado;
    try
      TROSerializer(ASerializer).ReadAnsiString('NombreEmpleado', l_NombreEmpleado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NombreEmpleado']));
    end;
    Self.NombreEmpleado := l_NombreEmpleado;
    l_Accesos := int_Accesos;
    try
      TROSerializer(ASerializer).ReadArray('Accesos', ArrayOpcionBI, l_Accesos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Accesos']));
    end;
    if int_Accesos <> l_Accesos then Self.Accesos.Free;
    Self.Accesos := l_Accesos;
    l_NumeroEstacion := Self.NumeroEstacion;
    try
      TROSerializer(ASerializer).ReadInteger('NumeroEstacion', TypInfo.otSLong, l_NumeroEstacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NumeroEstacion']));
    end;
    Self.NumeroEstacion := l_NumeroEstacion;
  end
  else begin
    l_Accesos := int_Accesos;
    try
      TROSerializer(ASerializer).ReadArray('Accesos', ArrayOpcionBI, l_Accesos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Accesos']));
    end;
    if int_Accesos <> l_Accesos then Accesos.Free;
    Self.Accesos := l_Accesos;
    l_EmpleadoID := Self.EmpleadoID;
    try
      TROSerializer(ASerializer).ReadInteger('EmpleadoID', TypInfo.otSLong, l_EmpleadoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EmpleadoID']));
    end;
    Self.EmpleadoID := l_EmpleadoID;
    l_NombreEmpleado := Self.NombreEmpleado;
    try
      TROSerializer(ASerializer).ReadAnsiString('NombreEmpleado', l_NombreEmpleado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NombreEmpleado']));
    end;
    Self.NombreEmpleado := l_NombreEmpleado;
    l_NumeroEstacion := Self.NumeroEstacion;
    try
      TROSerializer(ASerializer).ReadInteger('NumeroEstacion', TypInfo.otSLong, l_NumeroEstacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NumeroEstacion']));
    end;
    Self.NumeroEstacion := l_NumeroEstacion;
    l_Valida := Self.Valida;
    try
      TROSerializer(ASerializer).ReadEnumerated('Valida',System.TypeInfo(boolean), l_Valida);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Valida']));
    end;
    Self.Valida := l_Valida;
  end;
end;

procedure TLoginInfoBI.WriteComplex(ASerializer: TObject);
var
  l_Accesos: ArrayOpcionBI;
  l_EmpleadoID: Integer;
  l_NombreEmpleado: AnsiString;
  l_NumeroEstacion: Integer;
  l_Valida: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLoginInfoBI);
    l_Valida := Self.Valida;
    TROSerializer(ASerializer).WriteEnumerated('Valida',System.TypeInfo(boolean), l_Valida);
    l_EmpleadoID := Self.EmpleadoID;
    TROSerializer(ASerializer).WriteInteger('EmpleadoID', TypInfo.otSLong, l_EmpleadoID);
    l_NombreEmpleado := Self.NombreEmpleado;
    TROSerializer(ASerializer).WriteAnsiString('NombreEmpleado', l_NombreEmpleado);
    l_Accesos := int_Accesos;
    TROSerializer(ASerializer).WriteArray('Accesos', l_Accesos, ArrayOpcionBI);
    l_NumeroEstacion := Self.NumeroEstacion;
    TROSerializer(ASerializer).WriteInteger('NumeroEstacion', TypInfo.otSLong, l_NumeroEstacion);
  end
  else begin
    l_Accesos := int_Accesos;
    TROSerializer(ASerializer).WriteArray('Accesos', l_Accesos, ArrayOpcionBI);
    l_EmpleadoID := Self.EmpleadoID;
    TROSerializer(ASerializer).WriteInteger('EmpleadoID', TypInfo.otSLong, l_EmpleadoID);
    l_NombreEmpleado := Self.NombreEmpleado;
    TROSerializer(ASerializer).WriteAnsiString('NombreEmpleado', l_NombreEmpleado);
    l_NumeroEstacion := Self.NumeroEstacion;
    TROSerializer(ASerializer).WriteInteger('NumeroEstacion', TypInfo.otSLong, l_NumeroEstacion);
    l_Valida := Self.Valida;
    TROSerializer(ASerializer).WriteEnumerated('Valida',System.TypeInfo(boolean), l_Valida);
  end;
end;

{ TLoginInfoBICollection }
constructor TLoginInfoBICollection.Create;
begin
  inherited Create(TLoginInfoBI);
end;

constructor TLoginInfoBICollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLoginInfoBICollection.Add: TLoginInfoBI;
begin
  Result := TLoginInfoBI(inherited Add);
end;

function TLoginInfoBICollection.GetItems(aIndex: Integer): TLoginInfoBI;
begin
  Result := TLoginInfoBI(inherited Items[aIndex]);
end;

procedure TLoginInfoBICollection.SetItems(aIndex: Integer; const Value: TLoginInfoBI);
begin
  TLoginInfoBI(inherited Items[aIndex]).Assign(Value);
end;

{ TOpcionBI }

procedure TOpcionBI.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TOpcionBI;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TOpcionBI) then begin
    lSource := LibraryIngresos_Intf.TOpcionBI(iSource);

    Self.OpcionID := lSource.OpcionID;
    Self.Nombre := lSource.Nombre;
  end;
end;

procedure TOpcionBI.ReadComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_OpcionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_OpcionID := Self.OpcionID;
    try
      TROSerializer(ASerializer).ReadInteger('OpcionID', TypInfo.otSLong, l_OpcionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'OpcionID']));
    end;
    Self.OpcionID := l_OpcionID;
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
  end
  else begin
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_OpcionID := Self.OpcionID;
    try
      TROSerializer(ASerializer).ReadInteger('OpcionID', TypInfo.otSLong, l_OpcionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'OpcionID']));
    end;
    Self.OpcionID := l_OpcionID;
  end;
end;

procedure TOpcionBI.WriteComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_OpcionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TOpcionBI);
    l_OpcionID := Self.OpcionID;
    TROSerializer(ASerializer).WriteInteger('OpcionID', TypInfo.otSLong, l_OpcionID);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
  end
  else begin
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_OpcionID := Self.OpcionID;
    TROSerializer(ASerializer).WriteInteger('OpcionID', TypInfo.otSLong, l_OpcionID);
  end;
end;

{ TOpcionBICollection }
constructor TOpcionBICollection.Create;
begin
  inherited Create(TOpcionBI);
end;

constructor TOpcionBICollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TOpcionBICollection.Add: TOpcionBI;
begin
  Result := TOpcionBI(inherited Add);
end;

function TOpcionBICollection.GetItems(aIndex: Integer): TOpcionBI;
begin
  Result := TOpcionBI(inherited Items[aIndex]);
end;

procedure TOpcionBICollection.LoadFromArray(anArray: ArrayOpcionBI);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TOpcionBICollection.SaveToArray(anArray: ArrayOpcionBI);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TOpcionBI(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TOpcionBICollection.SetItems(aIndex: Integer; const Value: TOpcionBI);
begin
  TOpcionBI(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosFactura }

procedure TDatosFactura.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TDatosFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TDatosFactura) then begin
    lSource := LibraryIngresos_Intf.TDatosFactura(iSource);

    if System.Assigned(lSource.fFactura) then
      Self.Factura.Assign(lSource.fFactura)
    else
      SysUtils.FreeAndNil(fFactura);
    if System.Assigned(lSource.fDetalles) then
      Self.Detalles.Assign(lSource.fDetalles)
    else
      SysUtils.FreeAndNil(fDetalles);
    if System.Assigned(lSource.fEmisor) then
      Self.Emisor.Assign(lSource.fEmisor)
    else
      SysUtils.FreeAndNil(fEmisor);
    if System.Assigned(lSource.fEmisorExpedidoEn) then
      Self.EmisorExpedidoEn.Assign(lSource.fEmisorExpedidoEn)
    else
      SysUtils.FreeAndNil(fEmisorExpedidoEn);
    if System.Assigned(lSource.fReceptor) then
      Self.Receptor.Assign(lSource.fReceptor)
    else
      SysUtils.FreeAndNil(fReceptor);
  end;
end;

function TDatosFactura.GetFactura: TFactura;
begin
  if (fFactura = nil) then fFactura := TFactura.Create();
  Result := fFactura;
end;

function TDatosFactura.GetDetalles: ATDetalleFactura;
begin
  if (fDetalles = nil) then fDetalles := ATDetalleFactura.Create();
  Result := fDetalles;
end;

function TDatosFactura.GetEmisor: TEmisor;
begin
  if (fEmisor = nil) then fEmisor := TEmisor.Create();
  Result := fEmisor;
end;

function TDatosFactura.GetEmisorExpedidoEn: TEmisorExpedidoEn;
begin
  if (fEmisorExpedidoEn = nil) then fEmisorExpedidoEn := TEmisorExpedidoEn.Create();
  Result := fEmisorExpedidoEn;
end;

function TDatosFactura.GetReceptor: TReceptor;
begin
  if (fReceptor = nil) then fReceptor := TReceptor.Create();
  Result := fReceptor;
end;

procedure TDatosFactura.ReadComplex(ASerializer: TObject);
var
  l_Detalles: ATDetalleFactura;
  l_Emisor: TEmisor;
  l_EmisorExpedidoEn: TEmisorExpedidoEn;
  l_Factura: TFactura;
  l_Receptor: TReceptor;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Factura := int_Factura;
    try
      TROSerializer(ASerializer).ReadStruct('Factura', TFactura, l_Factura);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Factura']));
    end;
    if int_Factura <> l_Factura then Self.Factura.Free;
    Self.Factura := l_Factura;
    l_Detalles := int_Detalles;
    try
      TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleFactura, l_Detalles);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Detalles']));
    end;
    if int_Detalles <> l_Detalles then Self.Detalles.Free;
    Self.Detalles := l_Detalles;
    l_Emisor := int_Emisor;
    try
      TROSerializer(ASerializer).ReadStruct('Emisor', TEmisor, l_Emisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Emisor']));
    end;
    if int_Emisor <> l_Emisor then Self.Emisor.Free;
    Self.Emisor := l_Emisor;
    l_EmisorExpedidoEn := int_EmisorExpedidoEn;
    try
      TROSerializer(ASerializer).ReadStruct('EmisorExpedidoEn', TEmisorExpedidoEn, l_EmisorExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EmisorExpedidoEn']));
    end;
    if int_EmisorExpedidoEn <> l_EmisorExpedidoEn then Self.EmisorExpedidoEn.Free;
    Self.EmisorExpedidoEn := l_EmisorExpedidoEn;
    l_Receptor := int_Receptor;
    try
      TROSerializer(ASerializer).ReadStruct('Receptor', TReceptor, l_Receptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Receptor']));
    end;
    if int_Receptor <> l_Receptor then Self.Receptor.Free;
    Self.Receptor := l_Receptor;
  end
  else begin
    l_Detalles := int_Detalles;
    try
      TROSerializer(ASerializer).ReadArray('Detalles', ATDetalleFactura, l_Detalles);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Detalles']));
    end;
    if int_Detalles <> l_Detalles then Detalles.Free;
    Self.Detalles := l_Detalles;
    l_Emisor := int_Emisor;
    try
      TROSerializer(ASerializer).ReadStruct('Emisor', TEmisor, l_Emisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Emisor']));
    end;
    if int_Emisor <> l_Emisor then Emisor.Free;
    Self.Emisor := l_Emisor;
    l_EmisorExpedidoEn := int_EmisorExpedidoEn;
    try
      TROSerializer(ASerializer).ReadStruct('EmisorExpedidoEn', TEmisorExpedidoEn, l_EmisorExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EmisorExpedidoEn']));
    end;
    if int_EmisorExpedidoEn <> l_EmisorExpedidoEn then EmisorExpedidoEn.Free;
    Self.EmisorExpedidoEn := l_EmisorExpedidoEn;
    l_Factura := int_Factura;
    try
      TROSerializer(ASerializer).ReadStruct('Factura', TFactura, l_Factura);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Factura']));
    end;
    if int_Factura <> l_Factura then Factura.Free;
    Self.Factura := l_Factura;
    l_Receptor := int_Receptor;
    try
      TROSerializer(ASerializer).ReadStruct('Receptor', TReceptor, l_Receptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Receptor']));
    end;
    if int_Receptor <> l_Receptor then Receptor.Free;
    Self.Receptor := l_Receptor;
  end;
end;

procedure TDatosFactura.WriteComplex(ASerializer: TObject);
var
  l_Detalles: ATDetalleFactura;
  l_Emisor: TEmisor;
  l_EmisorExpedidoEn: TEmisorExpedidoEn;
  l_Factura: TFactura;
  l_Receptor: TReceptor;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosFactura);
    l_Factura := int_Factura;
    TROSerializer(ASerializer).WriteStruct('Factura', l_Factura, TFactura);
    l_Detalles := int_Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleFactura);
    l_Emisor := int_Emisor;
    TROSerializer(ASerializer).WriteStruct('Emisor', l_Emisor, TEmisor);
    l_EmisorExpedidoEn := int_EmisorExpedidoEn;
    TROSerializer(ASerializer).WriteStruct('EmisorExpedidoEn', l_EmisorExpedidoEn, TEmisorExpedidoEn);
    l_Receptor := int_Receptor;
    TROSerializer(ASerializer).WriteStruct('Receptor', l_Receptor, TReceptor);
  end
  else begin
    l_Detalles := int_Detalles;
    TROSerializer(ASerializer).WriteArray('Detalles', l_Detalles, ATDetalleFactura);
    l_Emisor := int_Emisor;
    TROSerializer(ASerializer).WriteStruct('Emisor', l_Emisor, TEmisor);
    l_EmisorExpedidoEn := int_EmisorExpedidoEn;
    TROSerializer(ASerializer).WriteStruct('EmisorExpedidoEn', l_EmisorExpedidoEn, TEmisorExpedidoEn);
    l_Factura := int_Factura;
    TROSerializer(ASerializer).WriteStruct('Factura', l_Factura, TFactura);
    l_Receptor := int_Receptor;
    TROSerializer(ASerializer).WriteStruct('Receptor', l_Receptor, TReceptor);
  end;
end;

{ TDatosFacturaCollection }
constructor TDatosFacturaCollection.Create;
begin
  inherited Create(TDatosFactura);
end;

constructor TDatosFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosFacturaCollection.Add: TDatosFactura;
begin
  Result := TDatosFactura(inherited Add);
end;

function TDatosFacturaCollection.GetItems(aIndex: Integer): TDatosFactura;
begin
  Result := TDatosFactura(inherited Items[aIndex]);
end;

procedure TDatosFacturaCollection.SetItems(aIndex: Integer; const Value: TDatosFactura);
begin
  TDatosFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TFactura }

procedure TFactura.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TFactura) then begin
    lSource := LibraryIngresos_Intf.TFactura(iSource);

    Self.ClienteID := lSource.ClienteID;
    Self.Ejercicio := lSource.Ejercicio;
    Self.FacturaID := lSource.FacturaID;
    Self.Fecha := lSource.Fecha;
    Self.FechaImpresion := lSource.FechaImpresion;
    Self.FechaVencimiento := lSource.FechaVencimiento;
    Self.Folio := lSource.Folio;
    Self.Impuesto := lSource.Impuesto;
    Self.MovimientoID := lSource.MovimientoID;
    Self.Saldo := lSource.Saldo;
    Self.Serie := lSource.Serie;
    Self.Subtotal := lSource.Subtotal;
    Self.Tickets := lSource.Tickets;
    Self.Total := lSource.Total;
    Self.UsuarioID := lSource.UsuarioID;
    Self.Periodo := lSource.Periodo;
    Self.ImpuestoPorcentaje := lSource.ImpuestoPorcentaje;
    Self.FormaPagoID := lSource.FormaPagoID;
    Self.NumeroEstacion := lSource.NumeroEstacion;
    Self.IDCondicionPago := lSource.IDCondicionPago;
    Self.MetodoPago := lSource.MetodoPago;
  end;
end;

procedure TFactura.ReadComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Ejercicio: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_FechaImpresion: DateTime;
  l_FechaVencimiento: DateTime;
  l_Folio: Integer;
  l_FormaPagoID: Integer;
  l_IDCondicionPago: Integer;
  l_Impuesto: Double;
  l_ImpuestoPorcentaje: Double;
  l_MetodoPago: AnsiString;
  l_MovimientoID: Integer;
  l_NumeroEstacion: Integer;
  l_Periodo: Integer;
  l_Saldo: Double;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Tickets: AnsiString;
  l_Total: Double;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_Ejercicio := Self.Ejercicio;
    try
      TROSerializer(ASerializer).ReadInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ejercicio']));
    end;
    Self.Ejercicio := l_Ejercicio;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_FechaImpresion := Self.FechaImpresion;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaImpresion', l_FechaImpresion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaImpresion']));
    end;
    Self.FechaImpresion := l_FechaImpresion;
    l_FechaVencimiento := Self.FechaVencimiento;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaVencimiento', l_FechaVencimiento);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaVencimiento']));
    end;
    Self.FechaVencimiento := l_FechaVencimiento;
    l_Folio := Self.Folio;
    try
      TROSerializer(ASerializer).ReadInteger('Folio', TypInfo.otSLong, l_Folio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Folio']));
    end;
    Self.Folio := l_Folio;
    l_Impuesto := Self.Impuesto;
    try
      TROSerializer(ASerializer).ReadDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Impuesto']));
    end;
    Self.Impuesto := l_Impuesto;
    l_MovimientoID := Self.MovimientoID;
    try
      TROSerializer(ASerializer).ReadInteger('MovimientoID', TypInfo.otSLong, l_MovimientoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MovimientoID']));
    end;
    Self.MovimientoID := l_MovimientoID;
    l_Saldo := Self.Saldo;
    try
      TROSerializer(ASerializer).ReadDouble('Saldo', TypInfo.ftDouble, l_Saldo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Saldo']));
    end;
    Self.Saldo := l_Saldo;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Subtotal := Self.Subtotal;
    try
      TROSerializer(ASerializer).ReadDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Subtotal']));
    end;
    Self.Subtotal := l_Subtotal;
    l_Tickets := Self.Tickets;
    try
      TROSerializer(ASerializer).ReadAnsiString('Tickets', l_Tickets);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Tickets']));
    end;
    Self.Tickets := l_Tickets;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadDouble('Total', TypInfo.ftDouble, l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
    l_UsuarioID := Self.UsuarioID;
    try
      TROSerializer(ASerializer).ReadInteger('UsuarioID', TypInfo.otSLong, l_UsuarioID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'UsuarioID']));
    end;
    Self.UsuarioID := l_UsuarioID;
    l_Periodo := Self.Periodo;
    try
      TROSerializer(ASerializer).ReadInteger('Periodo', TypInfo.otSLong, l_Periodo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Periodo']));
    end;
    Self.Periodo := l_Periodo;
    l_ImpuestoPorcentaje := Self.ImpuestoPorcentaje;
    try
      TROSerializer(ASerializer).ReadDouble('ImpuestoPorcentaje', TypInfo.ftDouble, l_ImpuestoPorcentaje);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImpuestoPorcentaje']));
    end;
    Self.ImpuestoPorcentaje := l_ImpuestoPorcentaje;
    l_FormaPagoID := Self.FormaPagoID;
    try
      TROSerializer(ASerializer).ReadInteger('FormaPagoID', TypInfo.otSLong, l_FormaPagoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FormaPagoID']));
    end;
    Self.FormaPagoID := l_FormaPagoID;
    l_NumeroEstacion := Self.NumeroEstacion;
    try
      TROSerializer(ASerializer).ReadInteger('NumeroEstacion', TypInfo.otSLong, l_NumeroEstacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NumeroEstacion']));
    end;
    Self.NumeroEstacion := l_NumeroEstacion;
    l_IDCondicionPago := Self.IDCondicionPago;
    try
      TROSerializer(ASerializer).ReadInteger('IDCondicionPago', TypInfo.otSLong, l_IDCondicionPago);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IDCondicionPago']));
    end;
    Self.IDCondicionPago := l_IDCondicionPago;
    l_MetodoPago := Self.MetodoPago;
    try
      TROSerializer(ASerializer).ReadAnsiString('MetodoPago', l_MetodoPago);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MetodoPago']));
    end;
    Self.MetodoPago := l_MetodoPago;
  end
  else begin
    l_ClienteID := Self.ClienteID;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteID']));
    end;
    Self.ClienteID := l_ClienteID;
    l_Ejercicio := Self.Ejercicio;
    try
      TROSerializer(ASerializer).ReadInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ejercicio']));
    end;
    Self.Ejercicio := l_Ejercicio;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_FechaImpresion := Self.FechaImpresion;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaImpresion', l_FechaImpresion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaImpresion']));
    end;
    Self.FechaImpresion := l_FechaImpresion;
    l_FechaVencimiento := Self.FechaVencimiento;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaVencimiento', l_FechaVencimiento);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaVencimiento']));
    end;
    Self.FechaVencimiento := l_FechaVencimiento;
    l_Folio := Self.Folio;
    try
      TROSerializer(ASerializer).ReadInteger('Folio', TypInfo.otSLong, l_Folio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Folio']));
    end;
    Self.Folio := l_Folio;
    l_FormaPagoID := Self.FormaPagoID;
    try
      TROSerializer(ASerializer).ReadInteger('FormaPagoID', TypInfo.otSLong, l_FormaPagoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FormaPagoID']));
    end;
    Self.FormaPagoID := l_FormaPagoID;
    l_IDCondicionPago := Self.IDCondicionPago;
    try
      TROSerializer(ASerializer).ReadInteger('IDCondicionPago', TypInfo.otSLong, l_IDCondicionPago);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IDCondicionPago']));
    end;
    Self.IDCondicionPago := l_IDCondicionPago;
    l_Impuesto := Self.Impuesto;
    try
      TROSerializer(ASerializer).ReadDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Impuesto']));
    end;
    Self.Impuesto := l_Impuesto;
    l_ImpuestoPorcentaje := Self.ImpuestoPorcentaje;
    try
      TROSerializer(ASerializer).ReadDouble('ImpuestoPorcentaje', TypInfo.ftDouble, l_ImpuestoPorcentaje);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImpuestoPorcentaje']));
    end;
    Self.ImpuestoPorcentaje := l_ImpuestoPorcentaje;
    l_MetodoPago := Self.MetodoPago;
    try
      TROSerializer(ASerializer).ReadAnsiString('MetodoPago', l_MetodoPago);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MetodoPago']));
    end;
    Self.MetodoPago := l_MetodoPago;
    l_MovimientoID := Self.MovimientoID;
    try
      TROSerializer(ASerializer).ReadInteger('MovimientoID', TypInfo.otSLong, l_MovimientoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MovimientoID']));
    end;
    Self.MovimientoID := l_MovimientoID;
    l_NumeroEstacion := Self.NumeroEstacion;
    try
      TROSerializer(ASerializer).ReadInteger('NumeroEstacion', TypInfo.otSLong, l_NumeroEstacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NumeroEstacion']));
    end;
    Self.NumeroEstacion := l_NumeroEstacion;
    l_Periodo := Self.Periodo;
    try
      TROSerializer(ASerializer).ReadInteger('Periodo', TypInfo.otSLong, l_Periodo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Periodo']));
    end;
    Self.Periodo := l_Periodo;
    l_Saldo := Self.Saldo;
    try
      TROSerializer(ASerializer).ReadDouble('Saldo', TypInfo.ftDouble, l_Saldo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Saldo']));
    end;
    Self.Saldo := l_Saldo;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Subtotal := Self.Subtotal;
    try
      TROSerializer(ASerializer).ReadDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Subtotal']));
    end;
    Self.Subtotal := l_Subtotal;
    l_Tickets := Self.Tickets;
    try
      TROSerializer(ASerializer).ReadAnsiString('Tickets', l_Tickets);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Tickets']));
    end;
    Self.Tickets := l_Tickets;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadDouble('Total', TypInfo.ftDouble, l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
    l_UsuarioID := Self.UsuarioID;
    try
      TROSerializer(ASerializer).ReadInteger('UsuarioID', TypInfo.otSLong, l_UsuarioID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'UsuarioID']));
    end;
    Self.UsuarioID := l_UsuarioID;
  end;
end;

procedure TFactura.WriteComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Ejercicio: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_FechaImpresion: DateTime;
  l_FechaVencimiento: DateTime;
  l_Folio: Integer;
  l_FormaPagoID: Integer;
  l_IDCondicionPago: Integer;
  l_Impuesto: Double;
  l_ImpuestoPorcentaje: Double;
  l_MetodoPago: AnsiString;
  l_MovimientoID: Integer;
  l_NumeroEstacion: Integer;
  l_Periodo: Integer;
  l_Saldo: Double;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Tickets: AnsiString;
  l_Total: Double;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFactura);
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_Ejercicio := Self.Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_FechaImpresion := Self.FechaImpresion;
    TROSerializer(ASerializer).WriteDateTime('FechaImpresion', l_FechaImpresion);
    l_FechaVencimiento := Self.FechaVencimiento;
    TROSerializer(ASerializer).WriteDateTime('FechaVencimiento', l_FechaVencimiento);
    l_Folio := Self.Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', TypInfo.otSLong, l_Folio);
    l_Impuesto := Self.Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    l_MovimientoID := Self.MovimientoID;
    TROSerializer(ASerializer).WriteInteger('MovimientoID', TypInfo.otSLong, l_MovimientoID);
    l_Saldo := Self.Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', TypInfo.ftDouble, l_Saldo);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Subtotal := Self.Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    l_Tickets := Self.Tickets;
    TROSerializer(ASerializer).WriteAnsiString('Tickets', l_Tickets);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteDouble('Total', TypInfo.ftDouble, l_Total);
    l_UsuarioID := Self.UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', TypInfo.otSLong, l_UsuarioID);
    l_Periodo := Self.Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', TypInfo.otSLong, l_Periodo);
    l_ImpuestoPorcentaje := Self.ImpuestoPorcentaje;
    TROSerializer(ASerializer).WriteDouble('ImpuestoPorcentaje', TypInfo.ftDouble, l_ImpuestoPorcentaje);
    l_FormaPagoID := Self.FormaPagoID;
    TROSerializer(ASerializer).WriteInteger('FormaPagoID', TypInfo.otSLong, l_FormaPagoID);
    l_NumeroEstacion := Self.NumeroEstacion;
    TROSerializer(ASerializer).WriteInteger('NumeroEstacion', TypInfo.otSLong, l_NumeroEstacion);
    l_IDCondicionPago := Self.IDCondicionPago;
    TROSerializer(ASerializer).WriteInteger('IDCondicionPago', TypInfo.otSLong, l_IDCondicionPago);
    l_MetodoPago := Self.MetodoPago;
    TROSerializer(ASerializer).WriteAnsiString('MetodoPago', l_MetodoPago);
  end
  else begin
    l_ClienteID := Self.ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', TypInfo.otSLong, l_ClienteID);
    l_Ejercicio := Self.Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_FechaImpresion := Self.FechaImpresion;
    TROSerializer(ASerializer).WriteDateTime('FechaImpresion', l_FechaImpresion);
    l_FechaVencimiento := Self.FechaVencimiento;
    TROSerializer(ASerializer).WriteDateTime('FechaVencimiento', l_FechaVencimiento);
    l_Folio := Self.Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', TypInfo.otSLong, l_Folio);
    l_FormaPagoID := Self.FormaPagoID;
    TROSerializer(ASerializer).WriteInteger('FormaPagoID', TypInfo.otSLong, l_FormaPagoID);
    l_IDCondicionPago := Self.IDCondicionPago;
    TROSerializer(ASerializer).WriteInteger('IDCondicionPago', TypInfo.otSLong, l_IDCondicionPago);
    l_Impuesto := Self.Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', TypInfo.ftDouble, l_Impuesto);
    l_ImpuestoPorcentaje := Self.ImpuestoPorcentaje;
    TROSerializer(ASerializer).WriteDouble('ImpuestoPorcentaje', TypInfo.ftDouble, l_ImpuestoPorcentaje);
    l_MetodoPago := Self.MetodoPago;
    TROSerializer(ASerializer).WriteAnsiString('MetodoPago', l_MetodoPago);
    l_MovimientoID := Self.MovimientoID;
    TROSerializer(ASerializer).WriteInteger('MovimientoID', TypInfo.otSLong, l_MovimientoID);
    l_NumeroEstacion := Self.NumeroEstacion;
    TROSerializer(ASerializer).WriteInteger('NumeroEstacion', TypInfo.otSLong, l_NumeroEstacion);
    l_Periodo := Self.Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', TypInfo.otSLong, l_Periodo);
    l_Saldo := Self.Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', TypInfo.ftDouble, l_Saldo);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Subtotal := Self.Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', TypInfo.ftDouble, l_Subtotal);
    l_Tickets := Self.Tickets;
    TROSerializer(ASerializer).WriteAnsiString('Tickets', l_Tickets);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteDouble('Total', TypInfo.ftDouble, l_Total);
    l_UsuarioID := Self.UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', TypInfo.otSLong, l_UsuarioID);
  end;
end;

{ TFacturaCollection }
constructor TFacturaCollection.Create;
begin
  inherited Create(TFactura);
end;

constructor TFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaCollection.Add: TFactura;
begin
  Result := TFactura(inherited Add);
end;

function TFacturaCollection.GetItems(aIndex: Integer): TFactura;
begin
  Result := TFactura(inherited Items[aIndex]);
end;

procedure TFacturaCollection.SetItems(aIndex: Integer; const Value: TFactura);
begin
  TFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleFactura }

procedure TDetalleFactura.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TDetalleFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TDetalleFactura) then begin
    lSource := LibraryIngresos_Intf.TDetalleFactura(iSource);

    Self.DetalleFacturaID := lSource.DetalleFacturaID;
    Self.FacturaID := lSource.FacturaID;
    Self.Cantidad := lSource.Cantidad;
    Self.Precio := lSource.Precio;
    Self.Importe := lSource.Importe;
    Self.ProductoID := lSource.ProductoID;
    Self.Unidad := lSource.Unidad;
    Self.Descripcion := lSource.Descripcion;
  end;
end;

procedure TDetalleFactura.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Descripcion: AnsiString;
  l_DetalleFacturaID: Integer;
  l_FacturaID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_Unidad: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_DetalleFacturaID := Self.DetalleFacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('DetalleFacturaID', TypInfo.otSLong, l_DetalleFacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DetalleFacturaID']));
    end;
    Self.DetalleFacturaID := l_DetalleFacturaID;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Precio := Self.Precio;
    try
      TROSerializer(ASerializer).ReadDouble('Precio', TypInfo.ftDouble, l_Precio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Precio']));
    end;
    Self.Precio := l_Precio;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
    l_Unidad := Self.Unidad;
    try
      TROSerializer(ASerializer).ReadAnsiString('Unidad', l_Unidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Unidad']));
    end;
    Self.Unidad := l_Unidad;
    l_Descripcion := Self.Descripcion;
    try
      TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Descripcion']));
    end;
    Self.Descripcion := l_Descripcion;
  end
  else begin
    l_Cantidad := Self.Cantidad;
    try
      TROSerializer(ASerializer).ReadDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Cantidad']));
    end;
    Self.Cantidad := l_Cantidad;
    l_Descripcion := Self.Descripcion;
    try
      TROSerializer(ASerializer).ReadAnsiString('Descripcion', l_Descripcion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Descripcion']));
    end;
    Self.Descripcion := l_Descripcion;
    l_DetalleFacturaID := Self.DetalleFacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('DetalleFacturaID', TypInfo.otSLong, l_DetalleFacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DetalleFacturaID']));
    end;
    Self.DetalleFacturaID := l_DetalleFacturaID;
    l_FacturaID := Self.FacturaID;
    try
      TROSerializer(ASerializer).ReadInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaID']));
    end;
    Self.FacturaID := l_FacturaID;
    l_Importe := Self.Importe;
    try
      TROSerializer(ASerializer).ReadDouble('Importe', TypInfo.ftDouble, l_Importe);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Importe']));
    end;
    Self.Importe := l_Importe;
    l_Precio := Self.Precio;
    try
      TROSerializer(ASerializer).ReadDouble('Precio', TypInfo.ftDouble, l_Precio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Precio']));
    end;
    Self.Precio := l_Precio;
    l_ProductoID := Self.ProductoID;
    try
      TROSerializer(ASerializer).ReadInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ProductoID']));
    end;
    Self.ProductoID := l_ProductoID;
    l_Unidad := Self.Unidad;
    try
      TROSerializer(ASerializer).ReadAnsiString('Unidad', l_Unidad);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Unidad']));
    end;
    Self.Unidad := l_Unidad;
  end;
end;

procedure TDetalleFactura.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Descripcion: AnsiString;
  l_DetalleFacturaID: Integer;
  l_FacturaID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_Unidad: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleFactura);
    l_DetalleFacturaID := Self.DetalleFacturaID;
    TROSerializer(ASerializer).WriteInteger('DetalleFacturaID', TypInfo.otSLong, l_DetalleFacturaID);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_Precio := Self.Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', TypInfo.ftDouble, l_Precio);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    l_Unidad := Self.Unidad;
    TROSerializer(ASerializer).WriteAnsiString('Unidad', l_Unidad);
    l_Descripcion := Self.Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
  end
  else begin
    l_Cantidad := Self.Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', TypInfo.ftDouble, l_Cantidad);
    l_Descripcion := Self.Descripcion;
    TROSerializer(ASerializer).WriteAnsiString('Descripcion', l_Descripcion);
    l_DetalleFacturaID := Self.DetalleFacturaID;
    TROSerializer(ASerializer).WriteInteger('DetalleFacturaID', TypInfo.otSLong, l_DetalleFacturaID);
    l_FacturaID := Self.FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', TypInfo.otSLong, l_FacturaID);
    l_Importe := Self.Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', TypInfo.ftDouble, l_Importe);
    l_Precio := Self.Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', TypInfo.ftDouble, l_Precio);
    l_ProductoID := Self.ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', TypInfo.otSLong, l_ProductoID);
    l_Unidad := Self.Unidad;
    TROSerializer(ASerializer).WriteAnsiString('Unidad', l_Unidad);
  end;
end;

{ TDetalleFacturaCollection }
constructor TDetalleFacturaCollection.Create;
begin
  inherited Create(TDetalleFactura);
end;

constructor TDetalleFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleFacturaCollection.Add: TDetalleFactura;
begin
  Result := TDetalleFactura(inherited Add);
end;

function TDetalleFacturaCollection.GetItems(aIndex: Integer): TDetalleFactura;
begin
  Result := TDetalleFactura(inherited Items[aIndex]);
end;

procedure TDetalleFacturaCollection.LoadFromArray(anArray: ATDetalleFactura);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TDetalleFacturaCollection.SaveToArray(anArray: ATDetalleFactura);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TDetalleFactura(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TDetalleFacturaCollection.SetItems(aIndex: Integer; const Value: TDetalleFactura);
begin
  TDetalleFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TParametrosBI }

procedure TParametrosBI.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TParametrosBI;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TParametrosBI) then begin
    lSource := LibraryIngresos_Intf.TParametrosBI(iSource);

    Self.FechaIni := lSource.FechaIni;
    Self.FechaFin := lSource.FechaFin;
    Self.Usuario := lSource.Usuario;
    Self.Valor1 := lSource.Valor1;
    Self.Status := lSource.Status;
    Self.Serie := lSource.Serie;
    Self.Factura := lSource.Factura;
    Self.IDTurno := lSource.IDTurno;
    Self.FacturasCompras := lSource.FacturasCompras;
    Self.TurnoInicio := lSource.TurnoInicio;
    Self.TurnoFin := lSource.TurnoFin;
    Self.NumeroEstacion := lSource.NumeroEstacion;
    Self.HorarioIni := lSource.HorarioIni;
    Self.HorarioFin := lSource.HorarioFin;
    Self.NumeroEstacionIni := lSource.NumeroEstacionIni;
    Self.NumeroEstacionFin := lSource.NumeroEstacionFin;
    Self.ClienteIni := lSource.ClienteIni;
    Self.ClienteFin := lSource.ClienteFin;
    Self.Estacion := lSource.Estacion;
    Self.SecuenciaIni := lSource.SecuenciaIni;
    Self.SecuenciaFin := lSource.SecuenciaFin;
    Self.FolioFactura := lSource.FolioFactura;
    Self.Ejercicio := lSource.Ejercicio;
    Self.PeriodoFin := lSource.PeriodoFin;
    Self.Periodo := lSource.Periodo;
    Self.Dia := lSource.Dia;
    Self.EjercicioFin := lSource.EjercicioFin;
    Self.DiaFin := lSource.DiaFin;
    Self.Secuencia := lSource.Secuencia;
    Self.Agrupacion := lSource.Agrupacion;
    Self.Almacen := lSource.Almacen;
    Self.SecuenciaIniLiquidacion := lSource.SecuenciaIniLiquidacion;
    Self.SecuenciaFinLiquidacion := lSource.SecuenciaFinLiquidacion;
    Self.MontoFacturado := lSource.MontoFacturado;
    Self.Turno := lSource.Turno;
    Self.EmpleadoIni := lSource.EmpleadoIni;
    Self.EmpleadoFin := lSource.EmpleadoFin;
    Self.EstacionIni := lSource.EstacionIni;
    Self.EstacionFin := lSource.EstacionFin;
  end;
end;

procedure TParametrosBI.ReadComplex(ASerializer: TObject);
var
  l_Agrupacion: Integer;
  l_Almacen: Integer;
  l_ClienteFin: Integer;
  l_ClienteIni: Integer;
  l_Dia: Integer;
  l_DiaFin: Integer;
  l_Ejercicio: Integer;
  l_EjercicioFin: Integer;
  l_EmpleadoFin: Integer;
  l_EmpleadoIni: Integer;
  l_Estacion: Integer;
  l_EstacionFin: Integer;
  l_EstacionIni: Integer;
  l_Factura: Integer;
  l_FacturasCompras: Integer;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_FolioFactura: Integer;
  l_HorarioFin: Integer;
  l_HorarioIni: Integer;
  l_IDTurno: Integer;
  l_MontoFacturado: Integer;
  l_NumeroEstacion: Integer;
  l_NumeroEstacionFin: Integer;
  l_NumeroEstacionIni: Integer;
  l_Periodo: Integer;
  l_PeriodoFin: Integer;
  l_Secuencia: AnsiString;
  l_SecuenciaFin: Integer;
  l_SecuenciaFinLiquidacion: Integer;
  l_SecuenciaIni: Integer;
  l_SecuenciaIniLiquidacion: Integer;
  l_Serie: AnsiString;
  l_Status: AnsiString;
  l_Turno: Integer;
  l_TurnoFin: Integer;
  l_TurnoInicio: Integer;
  l_Usuario: Integer;
  l_Valor1: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FechaIni := Self.FechaIni;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaIni']));
    end;
    Self.FechaIni := l_FechaIni;
    l_FechaFin := Self.FechaFin;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaFin']));
    end;
    Self.FechaFin := l_FechaFin;
    l_Usuario := Self.Usuario;
    try
      TROSerializer(ASerializer).ReadInteger('Usuario', TypInfo.otSLong, l_Usuario);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Usuario']));
    end;
    Self.Usuario := l_Usuario;
    l_Valor1 := Self.Valor1;
    try
      TROSerializer(ASerializer).ReadInteger('Valor1', TypInfo.otSLong, l_Valor1);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Valor1']));
    end;
    Self.Valor1 := l_Valor1;
    l_Status := Self.Status;
    try
      TROSerializer(ASerializer).ReadAnsiString('Status', l_Status);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Status']));
    end;
    Self.Status := l_Status;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Factura := Self.Factura;
    try
      TROSerializer(ASerializer).ReadInteger('Factura', TypInfo.otSLong, l_Factura);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Factura']));
    end;
    Self.Factura := l_Factura;
    l_IDTurno := Self.IDTurno;
    try
      TROSerializer(ASerializer).ReadInteger('IDTurno', TypInfo.otSLong, l_IDTurno);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IDTurno']));
    end;
    Self.IDTurno := l_IDTurno;
    l_FacturasCompras := Self.FacturasCompras;
    try
      TROSerializer(ASerializer).ReadInteger('FacturasCompras', TypInfo.otSLong, l_FacturasCompras);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturasCompras']));
    end;
    Self.FacturasCompras := l_FacturasCompras;
    l_TurnoInicio := Self.TurnoInicio;
    try
      TROSerializer(ASerializer).ReadInteger('TurnoInicio', TypInfo.otSLong, l_TurnoInicio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TurnoInicio']));
    end;
    Self.TurnoInicio := l_TurnoInicio;
    l_TurnoFin := Self.TurnoFin;
    try
      TROSerializer(ASerializer).ReadInteger('TurnoFin', TypInfo.otSLong, l_TurnoFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TurnoFin']));
    end;
    Self.TurnoFin := l_TurnoFin;
    l_NumeroEstacion := Self.NumeroEstacion;
    try
      TROSerializer(ASerializer).ReadInteger('NumeroEstacion', TypInfo.otSLong, l_NumeroEstacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NumeroEstacion']));
    end;
    Self.NumeroEstacion := l_NumeroEstacion;
    l_HorarioIni := Self.HorarioIni;
    try
      TROSerializer(ASerializer).ReadInteger('HorarioIni', TypInfo.otSLong, l_HorarioIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'HorarioIni']));
    end;
    Self.HorarioIni := l_HorarioIni;
    l_HorarioFin := Self.HorarioFin;
    try
      TROSerializer(ASerializer).ReadInteger('HorarioFin', TypInfo.otSLong, l_HorarioFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'HorarioFin']));
    end;
    Self.HorarioFin := l_HorarioFin;
    l_NumeroEstacionIni := Self.NumeroEstacionIni;
    try
      TROSerializer(ASerializer).ReadInteger('NumeroEstacionIni', TypInfo.otSLong, l_NumeroEstacionIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NumeroEstacionIni']));
    end;
    Self.NumeroEstacionIni := l_NumeroEstacionIni;
    l_NumeroEstacionFin := Self.NumeroEstacionFin;
    try
      TROSerializer(ASerializer).ReadInteger('NumeroEstacionFin', TypInfo.otSLong, l_NumeroEstacionFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NumeroEstacionFin']));
    end;
    Self.NumeroEstacionFin := l_NumeroEstacionFin;
    l_ClienteIni := Self.ClienteIni;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteIni', TypInfo.otSLong, l_ClienteIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteIni']));
    end;
    Self.ClienteIni := l_ClienteIni;
    l_ClienteFin := Self.ClienteFin;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteFin', TypInfo.otSLong, l_ClienteFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteFin']));
    end;
    Self.ClienteFin := l_ClienteFin;
    l_Estacion := Self.Estacion;
    try
      TROSerializer(ASerializer).ReadInteger('Estacion', TypInfo.otSLong, l_Estacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Estacion']));
    end;
    Self.Estacion := l_Estacion;
    l_SecuenciaIni := Self.SecuenciaIni;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaIni', TypInfo.otSLong, l_SecuenciaIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaIni']));
    end;
    Self.SecuenciaIni := l_SecuenciaIni;
    l_SecuenciaFin := Self.SecuenciaFin;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaFin', TypInfo.otSLong, l_SecuenciaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaFin']));
    end;
    Self.SecuenciaFin := l_SecuenciaFin;
    l_FolioFactura := Self.FolioFactura;
    try
      TROSerializer(ASerializer).ReadInteger('FolioFactura', TypInfo.otSLong, l_FolioFactura);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FolioFactura']));
    end;
    Self.FolioFactura := l_FolioFactura;
    l_Ejercicio := Self.Ejercicio;
    try
      TROSerializer(ASerializer).ReadInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ejercicio']));
    end;
    Self.Ejercicio := l_Ejercicio;
    l_PeriodoFin := Self.PeriodoFin;
    try
      TROSerializer(ASerializer).ReadInteger('PeriodoFin', TypInfo.otSLong, l_PeriodoFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PeriodoFin']));
    end;
    Self.PeriodoFin := l_PeriodoFin;
    l_Periodo := Self.Periodo;
    try
      TROSerializer(ASerializer).ReadInteger('Periodo', TypInfo.otSLong, l_Periodo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Periodo']));
    end;
    Self.Periodo := l_Periodo;
    l_Dia := Self.Dia;
    try
      TROSerializer(ASerializer).ReadInteger('Dia', TypInfo.otSLong, l_Dia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Dia']));
    end;
    Self.Dia := l_Dia;
    l_EjercicioFin := Self.EjercicioFin;
    try
      TROSerializer(ASerializer).ReadInteger('EjercicioFin', TypInfo.otSLong, l_EjercicioFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EjercicioFin']));
    end;
    Self.EjercicioFin := l_EjercicioFin;
    l_DiaFin := Self.DiaFin;
    try
      TROSerializer(ASerializer).ReadInteger('DiaFin', TypInfo.otSLong, l_DiaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DiaFin']));
    end;
    Self.DiaFin := l_DiaFin;
    l_Secuencia := Self.Secuencia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Secuencia', l_Secuencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Secuencia']));
    end;
    Self.Secuencia := l_Secuencia;
    l_Agrupacion := Self.Agrupacion;
    try
      TROSerializer(ASerializer).ReadInteger('Agrupacion', TypInfo.otSLong, l_Agrupacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Agrupacion']));
    end;
    Self.Agrupacion := l_Agrupacion;
    l_Almacen := Self.Almacen;
    try
      TROSerializer(ASerializer).ReadInteger('Almacen', TypInfo.otSLong, l_Almacen);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Almacen']));
    end;
    Self.Almacen := l_Almacen;
    l_SecuenciaIniLiquidacion := Self.SecuenciaIniLiquidacion;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaIniLiquidacion', TypInfo.otSLong, l_SecuenciaIniLiquidacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaIniLiquidacion']));
    end;
    Self.SecuenciaIniLiquidacion := l_SecuenciaIniLiquidacion;
    l_SecuenciaFinLiquidacion := Self.SecuenciaFinLiquidacion;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaFinLiquidacion', TypInfo.otSLong, l_SecuenciaFinLiquidacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaFinLiquidacion']));
    end;
    Self.SecuenciaFinLiquidacion := l_SecuenciaFinLiquidacion;
    l_MontoFacturado := Self.MontoFacturado;
    try
      TROSerializer(ASerializer).ReadInteger('MontoFacturado', TypInfo.otSLong, l_MontoFacturado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MontoFacturado']));
    end;
    Self.MontoFacturado := l_MontoFacturado;
    l_Turno := Self.Turno;
    try
      TROSerializer(ASerializer).ReadInteger('Turno', TypInfo.otSLong, l_Turno);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Turno']));
    end;
    Self.Turno := l_Turno;
    l_EmpleadoIni := Self.EmpleadoIni;
    try
      TROSerializer(ASerializer).ReadInteger('EmpleadoIni', TypInfo.otSLong, l_EmpleadoIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EmpleadoIni']));
    end;
    Self.EmpleadoIni := l_EmpleadoIni;
    l_EmpleadoFin := Self.EmpleadoFin;
    try
      TROSerializer(ASerializer).ReadInteger('EmpleadoFin', TypInfo.otSLong, l_EmpleadoFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EmpleadoFin']));
    end;
    Self.EmpleadoFin := l_EmpleadoFin;
    l_EstacionIni := Self.EstacionIni;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionIni', TypInfo.otSLong, l_EstacionIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionIni']));
    end;
    Self.EstacionIni := l_EstacionIni;
    l_EstacionFin := Self.EstacionFin;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionFin', TypInfo.otSLong, l_EstacionFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionFin']));
    end;
    Self.EstacionFin := l_EstacionFin;
  end
  else begin
    l_Agrupacion := Self.Agrupacion;
    try
      TROSerializer(ASerializer).ReadInteger('Agrupacion', TypInfo.otSLong, l_Agrupacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Agrupacion']));
    end;
    Self.Agrupacion := l_Agrupacion;
    l_Almacen := Self.Almacen;
    try
      TROSerializer(ASerializer).ReadInteger('Almacen', TypInfo.otSLong, l_Almacen);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Almacen']));
    end;
    Self.Almacen := l_Almacen;
    l_ClienteFin := Self.ClienteFin;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteFin', TypInfo.otSLong, l_ClienteFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteFin']));
    end;
    Self.ClienteFin := l_ClienteFin;
    l_ClienteIni := Self.ClienteIni;
    try
      TROSerializer(ASerializer).ReadInteger('ClienteIni', TypInfo.otSLong, l_ClienteIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ClienteIni']));
    end;
    Self.ClienteIni := l_ClienteIni;
    l_Dia := Self.Dia;
    try
      TROSerializer(ASerializer).ReadInteger('Dia', TypInfo.otSLong, l_Dia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Dia']));
    end;
    Self.Dia := l_Dia;
    l_DiaFin := Self.DiaFin;
    try
      TROSerializer(ASerializer).ReadInteger('DiaFin', TypInfo.otSLong, l_DiaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DiaFin']));
    end;
    Self.DiaFin := l_DiaFin;
    l_Ejercicio := Self.Ejercicio;
    try
      TROSerializer(ASerializer).ReadInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Ejercicio']));
    end;
    Self.Ejercicio := l_Ejercicio;
    l_EjercicioFin := Self.EjercicioFin;
    try
      TROSerializer(ASerializer).ReadInteger('EjercicioFin', TypInfo.otSLong, l_EjercicioFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EjercicioFin']));
    end;
    Self.EjercicioFin := l_EjercicioFin;
    l_EmpleadoFin := Self.EmpleadoFin;
    try
      TROSerializer(ASerializer).ReadInteger('EmpleadoFin', TypInfo.otSLong, l_EmpleadoFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EmpleadoFin']));
    end;
    Self.EmpleadoFin := l_EmpleadoFin;
    l_EmpleadoIni := Self.EmpleadoIni;
    try
      TROSerializer(ASerializer).ReadInteger('EmpleadoIni', TypInfo.otSLong, l_EmpleadoIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EmpleadoIni']));
    end;
    Self.EmpleadoIni := l_EmpleadoIni;
    l_Estacion := Self.Estacion;
    try
      TROSerializer(ASerializer).ReadInteger('Estacion', TypInfo.otSLong, l_Estacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Estacion']));
    end;
    Self.Estacion := l_Estacion;
    l_EstacionFin := Self.EstacionFin;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionFin', TypInfo.otSLong, l_EstacionFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionFin']));
    end;
    Self.EstacionFin := l_EstacionFin;
    l_EstacionIni := Self.EstacionIni;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionIni', TypInfo.otSLong, l_EstacionIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionIni']));
    end;
    Self.EstacionIni := l_EstacionIni;
    l_Factura := Self.Factura;
    try
      TROSerializer(ASerializer).ReadInteger('Factura', TypInfo.otSLong, l_Factura);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Factura']));
    end;
    Self.Factura := l_Factura;
    l_FacturasCompras := Self.FacturasCompras;
    try
      TROSerializer(ASerializer).ReadInteger('FacturasCompras', TypInfo.otSLong, l_FacturasCompras);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturasCompras']));
    end;
    Self.FacturasCompras := l_FacturasCompras;
    l_FechaFin := Self.FechaFin;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaFin']));
    end;
    Self.FechaFin := l_FechaFin;
    l_FechaIni := Self.FechaIni;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaIni']));
    end;
    Self.FechaIni := l_FechaIni;
    l_FolioFactura := Self.FolioFactura;
    try
      TROSerializer(ASerializer).ReadInteger('FolioFactura', TypInfo.otSLong, l_FolioFactura);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FolioFactura']));
    end;
    Self.FolioFactura := l_FolioFactura;
    l_HorarioFin := Self.HorarioFin;
    try
      TROSerializer(ASerializer).ReadInteger('HorarioFin', TypInfo.otSLong, l_HorarioFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'HorarioFin']));
    end;
    Self.HorarioFin := l_HorarioFin;
    l_HorarioIni := Self.HorarioIni;
    try
      TROSerializer(ASerializer).ReadInteger('HorarioIni', TypInfo.otSLong, l_HorarioIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'HorarioIni']));
    end;
    Self.HorarioIni := l_HorarioIni;
    l_IDTurno := Self.IDTurno;
    try
      TROSerializer(ASerializer).ReadInteger('IDTurno', TypInfo.otSLong, l_IDTurno);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IDTurno']));
    end;
    Self.IDTurno := l_IDTurno;
    l_MontoFacturado := Self.MontoFacturado;
    try
      TROSerializer(ASerializer).ReadInteger('MontoFacturado', TypInfo.otSLong, l_MontoFacturado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MontoFacturado']));
    end;
    Self.MontoFacturado := l_MontoFacturado;
    l_NumeroEstacion := Self.NumeroEstacion;
    try
      TROSerializer(ASerializer).ReadInteger('NumeroEstacion', TypInfo.otSLong, l_NumeroEstacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NumeroEstacion']));
    end;
    Self.NumeroEstacion := l_NumeroEstacion;
    l_NumeroEstacionFin := Self.NumeroEstacionFin;
    try
      TROSerializer(ASerializer).ReadInteger('NumeroEstacionFin', TypInfo.otSLong, l_NumeroEstacionFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NumeroEstacionFin']));
    end;
    Self.NumeroEstacionFin := l_NumeroEstacionFin;
    l_NumeroEstacionIni := Self.NumeroEstacionIni;
    try
      TROSerializer(ASerializer).ReadInteger('NumeroEstacionIni', TypInfo.otSLong, l_NumeroEstacionIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NumeroEstacionIni']));
    end;
    Self.NumeroEstacionIni := l_NumeroEstacionIni;
    l_Periodo := Self.Periodo;
    try
      TROSerializer(ASerializer).ReadInteger('Periodo', TypInfo.otSLong, l_Periodo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Periodo']));
    end;
    Self.Periodo := l_Periodo;
    l_PeriodoFin := Self.PeriodoFin;
    try
      TROSerializer(ASerializer).ReadInteger('PeriodoFin', TypInfo.otSLong, l_PeriodoFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PeriodoFin']));
    end;
    Self.PeriodoFin := l_PeriodoFin;
    l_Secuencia := Self.Secuencia;
    try
      TROSerializer(ASerializer).ReadAnsiString('Secuencia', l_Secuencia);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Secuencia']));
    end;
    Self.Secuencia := l_Secuencia;
    l_SecuenciaFin := Self.SecuenciaFin;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaFin', TypInfo.otSLong, l_SecuenciaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaFin']));
    end;
    Self.SecuenciaFin := l_SecuenciaFin;
    l_SecuenciaFinLiquidacion := Self.SecuenciaFinLiquidacion;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaFinLiquidacion', TypInfo.otSLong, l_SecuenciaFinLiquidacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaFinLiquidacion']));
    end;
    Self.SecuenciaFinLiquidacion := l_SecuenciaFinLiquidacion;
    l_SecuenciaIni := Self.SecuenciaIni;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaIni', TypInfo.otSLong, l_SecuenciaIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaIni']));
    end;
    Self.SecuenciaIni := l_SecuenciaIni;
    l_SecuenciaIniLiquidacion := Self.SecuenciaIniLiquidacion;
    try
      TROSerializer(ASerializer).ReadInteger('SecuenciaIniLiquidacion', TypInfo.otSLong, l_SecuenciaIniLiquidacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SecuenciaIniLiquidacion']));
    end;
    Self.SecuenciaIniLiquidacion := l_SecuenciaIniLiquidacion;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Status := Self.Status;
    try
      TROSerializer(ASerializer).ReadAnsiString('Status', l_Status);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Status']));
    end;
    Self.Status := l_Status;
    l_Turno := Self.Turno;
    try
      TROSerializer(ASerializer).ReadInteger('Turno', TypInfo.otSLong, l_Turno);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Turno']));
    end;
    Self.Turno := l_Turno;
    l_TurnoFin := Self.TurnoFin;
    try
      TROSerializer(ASerializer).ReadInteger('TurnoFin', TypInfo.otSLong, l_TurnoFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TurnoFin']));
    end;
    Self.TurnoFin := l_TurnoFin;
    l_TurnoInicio := Self.TurnoInicio;
    try
      TROSerializer(ASerializer).ReadInteger('TurnoInicio', TypInfo.otSLong, l_TurnoInicio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TurnoInicio']));
    end;
    Self.TurnoInicio := l_TurnoInicio;
    l_Usuario := Self.Usuario;
    try
      TROSerializer(ASerializer).ReadInteger('Usuario', TypInfo.otSLong, l_Usuario);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Usuario']));
    end;
    Self.Usuario := l_Usuario;
    l_Valor1 := Self.Valor1;
    try
      TROSerializer(ASerializer).ReadInteger('Valor1', TypInfo.otSLong, l_Valor1);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Valor1']));
    end;
    Self.Valor1 := l_Valor1;
  end;
end;

procedure TParametrosBI.WriteComplex(ASerializer: TObject);
var
  l_Agrupacion: Integer;
  l_Almacen: Integer;
  l_ClienteFin: Integer;
  l_ClienteIni: Integer;
  l_Dia: Integer;
  l_DiaFin: Integer;
  l_Ejercicio: Integer;
  l_EjercicioFin: Integer;
  l_EmpleadoFin: Integer;
  l_EmpleadoIni: Integer;
  l_Estacion: Integer;
  l_EstacionFin: Integer;
  l_EstacionIni: Integer;
  l_Factura: Integer;
  l_FacturasCompras: Integer;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_FolioFactura: Integer;
  l_HorarioFin: Integer;
  l_HorarioIni: Integer;
  l_IDTurno: Integer;
  l_MontoFacturado: Integer;
  l_NumeroEstacion: Integer;
  l_NumeroEstacionFin: Integer;
  l_NumeroEstacionIni: Integer;
  l_Periodo: Integer;
  l_PeriodoFin: Integer;
  l_Secuencia: AnsiString;
  l_SecuenciaFin: Integer;
  l_SecuenciaFinLiquidacion: Integer;
  l_SecuenciaIni: Integer;
  l_SecuenciaIniLiquidacion: Integer;
  l_Serie: AnsiString;
  l_Status: AnsiString;
  l_Turno: Integer;
  l_TurnoFin: Integer;
  l_TurnoInicio: Integer;
  l_Usuario: Integer;
  l_Valor1: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TParametrosBI);
    l_FechaIni := Self.FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_FechaFin := Self.FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_Usuario := Self.Usuario;
    TROSerializer(ASerializer).WriteInteger('Usuario', TypInfo.otSLong, l_Usuario);
    l_Valor1 := Self.Valor1;
    TROSerializer(ASerializer).WriteInteger('Valor1', TypInfo.otSLong, l_Valor1);
    l_Status := Self.Status;
    TROSerializer(ASerializer).WriteAnsiString('Status', l_Status);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Factura := Self.Factura;
    TROSerializer(ASerializer).WriteInteger('Factura', TypInfo.otSLong, l_Factura);
    l_IDTurno := Self.IDTurno;
    TROSerializer(ASerializer).WriteInteger('IDTurno', TypInfo.otSLong, l_IDTurno);
    l_FacturasCompras := Self.FacturasCompras;
    TROSerializer(ASerializer).WriteInteger('FacturasCompras', TypInfo.otSLong, l_FacturasCompras);
    l_TurnoInicio := Self.TurnoInicio;
    TROSerializer(ASerializer).WriteInteger('TurnoInicio', TypInfo.otSLong, l_TurnoInicio);
    l_TurnoFin := Self.TurnoFin;
    TROSerializer(ASerializer).WriteInteger('TurnoFin', TypInfo.otSLong, l_TurnoFin);
    l_NumeroEstacion := Self.NumeroEstacion;
    TROSerializer(ASerializer).WriteInteger('NumeroEstacion', TypInfo.otSLong, l_NumeroEstacion);
    l_HorarioIni := Self.HorarioIni;
    TROSerializer(ASerializer).WriteInteger('HorarioIni', TypInfo.otSLong, l_HorarioIni);
    l_HorarioFin := Self.HorarioFin;
    TROSerializer(ASerializer).WriteInteger('HorarioFin', TypInfo.otSLong, l_HorarioFin);
    l_NumeroEstacionIni := Self.NumeroEstacionIni;
    TROSerializer(ASerializer).WriteInteger('NumeroEstacionIni', TypInfo.otSLong, l_NumeroEstacionIni);
    l_NumeroEstacionFin := Self.NumeroEstacionFin;
    TROSerializer(ASerializer).WriteInteger('NumeroEstacionFin', TypInfo.otSLong, l_NumeroEstacionFin);
    l_ClienteIni := Self.ClienteIni;
    TROSerializer(ASerializer).WriteInteger('ClienteIni', TypInfo.otSLong, l_ClienteIni);
    l_ClienteFin := Self.ClienteFin;
    TROSerializer(ASerializer).WriteInteger('ClienteFin', TypInfo.otSLong, l_ClienteFin);
    l_Estacion := Self.Estacion;
    TROSerializer(ASerializer).WriteInteger('Estacion', TypInfo.otSLong, l_Estacion);
    l_SecuenciaIni := Self.SecuenciaIni;
    TROSerializer(ASerializer).WriteInteger('SecuenciaIni', TypInfo.otSLong, l_SecuenciaIni);
    l_SecuenciaFin := Self.SecuenciaFin;
    TROSerializer(ASerializer).WriteInteger('SecuenciaFin', TypInfo.otSLong, l_SecuenciaFin);
    l_FolioFactura := Self.FolioFactura;
    TROSerializer(ASerializer).WriteInteger('FolioFactura', TypInfo.otSLong, l_FolioFactura);
    l_Ejercicio := Self.Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    l_PeriodoFin := Self.PeriodoFin;
    TROSerializer(ASerializer).WriteInteger('PeriodoFin', TypInfo.otSLong, l_PeriodoFin);
    l_Periodo := Self.Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', TypInfo.otSLong, l_Periodo);
    l_Dia := Self.Dia;
    TROSerializer(ASerializer).WriteInteger('Dia', TypInfo.otSLong, l_Dia);
    l_EjercicioFin := Self.EjercicioFin;
    TROSerializer(ASerializer).WriteInteger('EjercicioFin', TypInfo.otSLong, l_EjercicioFin);
    l_DiaFin := Self.DiaFin;
    TROSerializer(ASerializer).WriteInteger('DiaFin', TypInfo.otSLong, l_DiaFin);
    l_Secuencia := Self.Secuencia;
    TROSerializer(ASerializer).WriteAnsiString('Secuencia', l_Secuencia);
    l_Agrupacion := Self.Agrupacion;
    TROSerializer(ASerializer).WriteInteger('Agrupacion', TypInfo.otSLong, l_Agrupacion);
    l_Almacen := Self.Almacen;
    TROSerializer(ASerializer).WriteInteger('Almacen', TypInfo.otSLong, l_Almacen);
    l_SecuenciaIniLiquidacion := Self.SecuenciaIniLiquidacion;
    TROSerializer(ASerializer).WriteInteger('SecuenciaIniLiquidacion', TypInfo.otSLong, l_SecuenciaIniLiquidacion);
    l_SecuenciaFinLiquidacion := Self.SecuenciaFinLiquidacion;
    TROSerializer(ASerializer).WriteInteger('SecuenciaFinLiquidacion', TypInfo.otSLong, l_SecuenciaFinLiquidacion);
    l_MontoFacturado := Self.MontoFacturado;
    TROSerializer(ASerializer).WriteInteger('MontoFacturado', TypInfo.otSLong, l_MontoFacturado);
    l_Turno := Self.Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', TypInfo.otSLong, l_Turno);
    l_EmpleadoIni := Self.EmpleadoIni;
    TROSerializer(ASerializer).WriteInteger('EmpleadoIni', TypInfo.otSLong, l_EmpleadoIni);
    l_EmpleadoFin := Self.EmpleadoFin;
    TROSerializer(ASerializer).WriteInteger('EmpleadoFin', TypInfo.otSLong, l_EmpleadoFin);
    l_EstacionIni := Self.EstacionIni;
    TROSerializer(ASerializer).WriteInteger('EstacionIni', TypInfo.otSLong, l_EstacionIni);
    l_EstacionFin := Self.EstacionFin;
    TROSerializer(ASerializer).WriteInteger('EstacionFin', TypInfo.otSLong, l_EstacionFin);
  end
  else begin
    l_Agrupacion := Self.Agrupacion;
    TROSerializer(ASerializer).WriteInteger('Agrupacion', TypInfo.otSLong, l_Agrupacion);
    l_Almacen := Self.Almacen;
    TROSerializer(ASerializer).WriteInteger('Almacen', TypInfo.otSLong, l_Almacen);
    l_ClienteFin := Self.ClienteFin;
    TROSerializer(ASerializer).WriteInteger('ClienteFin', TypInfo.otSLong, l_ClienteFin);
    l_ClienteIni := Self.ClienteIni;
    TROSerializer(ASerializer).WriteInteger('ClienteIni', TypInfo.otSLong, l_ClienteIni);
    l_Dia := Self.Dia;
    TROSerializer(ASerializer).WriteInteger('Dia', TypInfo.otSLong, l_Dia);
    l_DiaFin := Self.DiaFin;
    TROSerializer(ASerializer).WriteInteger('DiaFin', TypInfo.otSLong, l_DiaFin);
    l_Ejercicio := Self.Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', TypInfo.otSLong, l_Ejercicio);
    l_EjercicioFin := Self.EjercicioFin;
    TROSerializer(ASerializer).WriteInteger('EjercicioFin', TypInfo.otSLong, l_EjercicioFin);
    l_EmpleadoFin := Self.EmpleadoFin;
    TROSerializer(ASerializer).WriteInteger('EmpleadoFin', TypInfo.otSLong, l_EmpleadoFin);
    l_EmpleadoIni := Self.EmpleadoIni;
    TROSerializer(ASerializer).WriteInteger('EmpleadoIni', TypInfo.otSLong, l_EmpleadoIni);
    l_Estacion := Self.Estacion;
    TROSerializer(ASerializer).WriteInteger('Estacion', TypInfo.otSLong, l_Estacion);
    l_EstacionFin := Self.EstacionFin;
    TROSerializer(ASerializer).WriteInteger('EstacionFin', TypInfo.otSLong, l_EstacionFin);
    l_EstacionIni := Self.EstacionIni;
    TROSerializer(ASerializer).WriteInteger('EstacionIni', TypInfo.otSLong, l_EstacionIni);
    l_Factura := Self.Factura;
    TROSerializer(ASerializer).WriteInteger('Factura', TypInfo.otSLong, l_Factura);
    l_FacturasCompras := Self.FacturasCompras;
    TROSerializer(ASerializer).WriteInteger('FacturasCompras', TypInfo.otSLong, l_FacturasCompras);
    l_FechaFin := Self.FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_FechaIni := Self.FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_FolioFactura := Self.FolioFactura;
    TROSerializer(ASerializer).WriteInteger('FolioFactura', TypInfo.otSLong, l_FolioFactura);
    l_HorarioFin := Self.HorarioFin;
    TROSerializer(ASerializer).WriteInteger('HorarioFin', TypInfo.otSLong, l_HorarioFin);
    l_HorarioIni := Self.HorarioIni;
    TROSerializer(ASerializer).WriteInteger('HorarioIni', TypInfo.otSLong, l_HorarioIni);
    l_IDTurno := Self.IDTurno;
    TROSerializer(ASerializer).WriteInteger('IDTurno', TypInfo.otSLong, l_IDTurno);
    l_MontoFacturado := Self.MontoFacturado;
    TROSerializer(ASerializer).WriteInteger('MontoFacturado', TypInfo.otSLong, l_MontoFacturado);
    l_NumeroEstacion := Self.NumeroEstacion;
    TROSerializer(ASerializer).WriteInteger('NumeroEstacion', TypInfo.otSLong, l_NumeroEstacion);
    l_NumeroEstacionFin := Self.NumeroEstacionFin;
    TROSerializer(ASerializer).WriteInteger('NumeroEstacionFin', TypInfo.otSLong, l_NumeroEstacionFin);
    l_NumeroEstacionIni := Self.NumeroEstacionIni;
    TROSerializer(ASerializer).WriteInteger('NumeroEstacionIni', TypInfo.otSLong, l_NumeroEstacionIni);
    l_Periodo := Self.Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', TypInfo.otSLong, l_Periodo);
    l_PeriodoFin := Self.PeriodoFin;
    TROSerializer(ASerializer).WriteInteger('PeriodoFin', TypInfo.otSLong, l_PeriodoFin);
    l_Secuencia := Self.Secuencia;
    TROSerializer(ASerializer).WriteAnsiString('Secuencia', l_Secuencia);
    l_SecuenciaFin := Self.SecuenciaFin;
    TROSerializer(ASerializer).WriteInteger('SecuenciaFin', TypInfo.otSLong, l_SecuenciaFin);
    l_SecuenciaFinLiquidacion := Self.SecuenciaFinLiquidacion;
    TROSerializer(ASerializer).WriteInteger('SecuenciaFinLiquidacion', TypInfo.otSLong, l_SecuenciaFinLiquidacion);
    l_SecuenciaIni := Self.SecuenciaIni;
    TROSerializer(ASerializer).WriteInteger('SecuenciaIni', TypInfo.otSLong, l_SecuenciaIni);
    l_SecuenciaIniLiquidacion := Self.SecuenciaIniLiquidacion;
    TROSerializer(ASerializer).WriteInteger('SecuenciaIniLiquidacion', TypInfo.otSLong, l_SecuenciaIniLiquidacion);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Status := Self.Status;
    TROSerializer(ASerializer).WriteAnsiString('Status', l_Status);
    l_Turno := Self.Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', TypInfo.otSLong, l_Turno);
    l_TurnoFin := Self.TurnoFin;
    TROSerializer(ASerializer).WriteInteger('TurnoFin', TypInfo.otSLong, l_TurnoFin);
    l_TurnoInicio := Self.TurnoInicio;
    TROSerializer(ASerializer).WriteInteger('TurnoInicio', TypInfo.otSLong, l_TurnoInicio);
    l_Usuario := Self.Usuario;
    TROSerializer(ASerializer).WriteInteger('Usuario', TypInfo.otSLong, l_Usuario);
    l_Valor1 := Self.Valor1;
    TROSerializer(ASerializer).WriteInteger('Valor1', TypInfo.otSLong, l_Valor1);
  end;
end;

{ TParametrosBICollection }
constructor TParametrosBICollection.Create;
begin
  inherited Create(TParametrosBI);
end;

constructor TParametrosBICollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TParametrosBICollection.Add: TParametrosBI;
begin
  Result := TParametrosBI(inherited Add);
end;

function TParametrosBICollection.GetItems(aIndex: Integer): TParametrosBI;
begin
  Result := TParametrosBI(inherited Items[aIndex]);
end;

procedure TParametrosBICollection.SetItems(aIndex: Integer; const Value: TParametrosBI);
begin
  TParametrosBI(inherited Items[aIndex]).Assign(Value);
end;

{ TReporteBI }

procedure TReporteBI.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TReporteBI;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TReporteBI) then begin
    lSource := LibraryIngresos_Intf.TReporteBI(iSource);

    Self.SQL1 := lSource.SQL1;
    Self.SQL2 := lSource.SQL2;
    Self.Template := lSource.Template;
    Self.CampoJoin := lSource.CampoJoin;
  end;
end;

procedure TReporteBI.ReadComplex(ASerializer: TObject);
var
  l_CampoJoin: AnsiString;
  l_SQL1: AnsiString;
  l_SQL2: AnsiString;
  l_Template: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_SQL1 := Self.SQL1;
    try
      TROSerializer(ASerializer).ReadAnsiString('SQL1', l_SQL1);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SQL1']));
    end;
    Self.SQL1 := l_SQL1;
    l_SQL2 := Self.SQL2;
    try
      TROSerializer(ASerializer).ReadAnsiString('SQL2', l_SQL2);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SQL2']));
    end;
    Self.SQL2 := l_SQL2;
    l_Template := Self.Template;
    try
      TROSerializer(ASerializer).ReadAnsiString('Template', l_Template);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Template']));
    end;
    Self.Template := l_Template;
    l_CampoJoin := Self.CampoJoin;
    try
      TROSerializer(ASerializer).ReadAnsiString('CampoJoin', l_CampoJoin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CampoJoin']));
    end;
    Self.CampoJoin := l_CampoJoin;
  end
  else begin
    l_CampoJoin := Self.CampoJoin;
    try
      TROSerializer(ASerializer).ReadAnsiString('CampoJoin', l_CampoJoin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CampoJoin']));
    end;
    Self.CampoJoin := l_CampoJoin;
    l_SQL1 := Self.SQL1;
    try
      TROSerializer(ASerializer).ReadAnsiString('SQL1', l_SQL1);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SQL1']));
    end;
    Self.SQL1 := l_SQL1;
    l_SQL2 := Self.SQL2;
    try
      TROSerializer(ASerializer).ReadAnsiString('SQL2', l_SQL2);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SQL2']));
    end;
    Self.SQL2 := l_SQL2;
    l_Template := Self.Template;
    try
      TROSerializer(ASerializer).ReadAnsiString('Template', l_Template);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Template']));
    end;
    Self.Template := l_Template;
  end;
end;

procedure TReporteBI.WriteComplex(ASerializer: TObject);
var
  l_CampoJoin: AnsiString;
  l_SQL1: AnsiString;
  l_SQL2: AnsiString;
  l_Template: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TReporteBI);
    l_SQL1 := Self.SQL1;
    TROSerializer(ASerializer).WriteAnsiString('SQL1', l_SQL1);
    l_SQL2 := Self.SQL2;
    TROSerializer(ASerializer).WriteAnsiString('SQL2', l_SQL2);
    l_Template := Self.Template;
    TROSerializer(ASerializer).WriteAnsiString('Template', l_Template);
    l_CampoJoin := Self.CampoJoin;
    TROSerializer(ASerializer).WriteAnsiString('CampoJoin', l_CampoJoin);
  end
  else begin
    l_CampoJoin := Self.CampoJoin;
    TROSerializer(ASerializer).WriteAnsiString('CampoJoin', l_CampoJoin);
    l_SQL1 := Self.SQL1;
    TROSerializer(ASerializer).WriteAnsiString('SQL1', l_SQL1);
    l_SQL2 := Self.SQL2;
    TROSerializer(ASerializer).WriteAnsiString('SQL2', l_SQL2);
    l_Template := Self.Template;
    TROSerializer(ASerializer).WriteAnsiString('Template', l_Template);
  end;
end;

{ TReporteBICollection }
constructor TReporteBICollection.Create;
begin
  inherited Create(TReporteBI);
end;

constructor TReporteBICollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TReporteBICollection.Add: TReporteBI;
begin
  Result := TReporteBI(inherited Add);
end;

function TReporteBICollection.GetItems(aIndex: Integer): TReporteBI;
begin
  Result := TReporteBI(inherited Items[aIndex]);
end;

procedure TReporteBICollection.SetItems(aIndex: Integer; const Value: TReporteBI);
begin
  TReporteBI(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaElectronicaBI }

procedure TFacturaElectronicaBI.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TFacturaElectronicaBI;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TFacturaElectronicaBI) then begin
    lSource := LibraryIngresos_Intf.TFacturaElectronicaBI(iSource);

    Self.Serie := lSource.Serie;
    Self.Folio := lSource.Folio;
    Self.Fecha := lSource.Fecha;
    Self.noAprobacion := lSource.noAprobacion;
    Self.anoAprobacion := lSource.anoAprobacion;
    Self.tipoComprobante := lSource.tipoComprobante;
    Self.formadePago := lSource.formadePago;
    Self.SubTotal := lSource.SubTotal;
    Self.Total := lSource.Total;
    Self.RFCEmisor := lSource.RFCEmisor;
    Self.NomEmpEmisor := lSource.NomEmpEmisor;
    Self.DireccionEm := lSource.DireccionEm;
    Self.NoExteriorEM := lSource.NoExteriorEM;
    Self.ColoniaEmisor := lSource.ColoniaEmisor;
    Self.MunicipioEmisor := lSource.MunicipioEmisor;
    Self.EstadoEmisor := lSource.EstadoEmisor;
    Self.PaisEmisor := lSource.PaisEmisor;
    Self.CodigoPostalEmisor := lSource.CodigoPostalEmisor;
    Self.RFCReceptor := lSource.RFCReceptor;
    Self.NombreReceptor := lSource.NombreReceptor;
    Self.DomicilioReceptor := lSource.DomicilioReceptor;
    Self.NoExteriorReceptor := lSource.NoExteriorReceptor;
    Self.ColoniaReceptor := lSource.ColoniaReceptor;
    Self.LocalidadReceptor := lSource.LocalidadReceptor;
    Self.MunicipioReceptor := lSource.MunicipioReceptor;
    Self.EstadoReceptor := lSource.EstadoReceptor;
    Self.PaisReceptor := lSource.PaisReceptor;
    Self.CodigoPostalReceptor := lSource.CodigoPostalReceptor;
    if System.Assigned(lSource.fFacturaElectronicaDetalleImportes) then
      Self.FacturaElectronicaDetalleImportes.Assign(lSource.fFacturaElectronicaDetalleImportes)
    else
      SysUtils.FreeAndNil(fFacturaElectronicaDetalleImportes);
    if System.Assigned(lSource.fFacturaElectronicaDetalleImpuestos) then
      Self.FacturaElectronicaDetalleImpuestos.Assign(lSource.fFacturaElectronicaDetalleImpuestos)
    else
      SysUtils.FreeAndNil(fFacturaElectronicaDetalleImpuestos);
    Self.TotalImpuesto := lSource.TotalImpuesto;
    Self.CalleExpedidoEn := lSource.CalleExpedidoEn;
    Self.NoExterioExpedidoEn := lSource.NoExterioExpedidoEn;
    Self.ColoniaExpedidoEn := lSource.ColoniaExpedidoEn;
    Self.CodigoPostalExpedidoEn := lSource.CodigoPostalExpedidoEn;
    Self.LocalidadExpedidoEn := lSource.LocalidadExpedidoEn;
    Self.MunicipioExpedidoEn := lSource.MunicipioExpedidoEn;
    Self.EstadoExpedidoEn := lSource.EstadoExpedidoEn;
    Self.PaisExpedidoEn := lSource.PaisExpedidoEn;
    Self.Sucursal := lSource.Sucursal;
    Self.email := lSource.email;
  end;
end;

function TFacturaElectronicaBI.GetFacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
begin
  if (fFacturaElectronicaDetalleImportes = nil) then fFacturaElectronicaDetalleImportes := ATFacturaElectronicaDetalleImportes.Create();
  Result := fFacturaElectronicaDetalleImportes;
end;

function TFacturaElectronicaBI.GetFacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
begin
  if (fFacturaElectronicaDetalleImpuestos = nil) then fFacturaElectronicaDetalleImpuestos := ATFacturaElectronicaDetalleImpuestos.Create();
  Result := fFacturaElectronicaDetalleImpuestos;
end;

procedure TFacturaElectronicaBI.ReadComplex(ASerializer: TObject);
var
  l_anoAprobacion: AnsiString;
  l_CalleExpedidoEn: AnsiString;
  l_CodigoPostalEmisor: AnsiString;
  l_CodigoPostalExpedidoEn: AnsiString;
  l_CodigoPostalReceptor: AnsiString;
  l_ColoniaEmisor: AnsiString;
  l_ColoniaExpedidoEn: AnsiString;
  l_ColoniaReceptor: AnsiString;
  l_DireccionEm: AnsiString;
  l_DomicilioReceptor: AnsiString;
  l_email: AnsiString;
  l_EstadoEmisor: AnsiString;
  l_EstadoExpedidoEn: AnsiString;
  l_EstadoReceptor: AnsiString;
  l_FacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
  l_FacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
  l_Fecha: AnsiString;
  l_Folio: AnsiString;
  l_formadePago: AnsiString;
  l_LocalidadExpedidoEn: AnsiString;
  l_LocalidadReceptor: AnsiString;
  l_MunicipioEmisor: AnsiString;
  l_MunicipioExpedidoEn: AnsiString;
  l_MunicipioReceptor: AnsiString;
  l_noAprobacion: AnsiString;
  l_NoExterioExpedidoEn: AnsiString;
  l_NoExteriorEM: AnsiString;
  l_NoExteriorReceptor: AnsiString;
  l_NombreReceptor: AnsiString;
  l_NomEmpEmisor: AnsiString;
  l_PaisEmisor: AnsiString;
  l_PaisExpedidoEn: AnsiString;
  l_PaisReceptor: AnsiString;
  l_RFCEmisor: AnsiString;
  l_RFCReceptor: AnsiString;
  l_Serie: AnsiString;
  l_SubTotal: AnsiString;
  l_Sucursal: Boolean;
  l_tipoComprobante: AnsiString;
  l_Total: AnsiString;
  l_TotalImpuesto: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_Folio := Self.Folio;
    try
      TROSerializer(ASerializer).ReadAnsiString('Folio', l_Folio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Folio']));
    end;
    Self.Folio := l_Folio;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadAnsiString('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_noAprobacion := Self.noAprobacion;
    try
      TROSerializer(ASerializer).ReadAnsiString('noAprobacion', l_noAprobacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'noAprobacion']));
    end;
    Self.noAprobacion := l_noAprobacion;
    l_anoAprobacion := Self.anoAprobacion;
    try
      TROSerializer(ASerializer).ReadAnsiString('anoAprobacion', l_anoAprobacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'anoAprobacion']));
    end;
    Self.anoAprobacion := l_anoAprobacion;
    l_tipoComprobante := Self.tipoComprobante;
    try
      TROSerializer(ASerializer).ReadAnsiString('tipoComprobante', l_tipoComprobante);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'tipoComprobante']));
    end;
    Self.tipoComprobante := l_tipoComprobante;
    l_formadePago := Self.formadePago;
    try
      TROSerializer(ASerializer).ReadAnsiString('formadePago', l_formadePago);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'formadePago']));
    end;
    Self.formadePago := l_formadePago;
    l_SubTotal := Self.SubTotal;
    try
      TROSerializer(ASerializer).ReadAnsiString('SubTotal', l_SubTotal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SubTotal']));
    end;
    Self.SubTotal := l_SubTotal;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadAnsiString('Total', l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
    l_RFCEmisor := Self.RFCEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('RFCEmisor', l_RFCEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'RFCEmisor']));
    end;
    Self.RFCEmisor := l_RFCEmisor;
    l_NomEmpEmisor := Self.NomEmpEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NomEmpEmisor']));
    end;
    Self.NomEmpEmisor := l_NomEmpEmisor;
    l_DireccionEm := Self.DireccionEm;
    try
      TROSerializer(ASerializer).ReadAnsiString('DireccionEm', l_DireccionEm);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DireccionEm']));
    end;
    Self.DireccionEm := l_DireccionEm;
    l_NoExteriorEM := Self.NoExteriorEM;
    try
      TROSerializer(ASerializer).ReadAnsiString('NoExteriorEM', l_NoExteriorEM);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoExteriorEM']));
    end;
    Self.NoExteriorEM := l_NoExteriorEM;
    l_ColoniaEmisor := Self.ColoniaEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ColoniaEmisor']));
    end;
    Self.ColoniaEmisor := l_ColoniaEmisor;
    l_MunicipioEmisor := Self.MunicipioEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MunicipioEmisor']));
    end;
    Self.MunicipioEmisor := l_MunicipioEmisor;
    l_EstadoEmisor := Self.EstadoEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('EstadoEmisor', l_EstadoEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstadoEmisor']));
    end;
    Self.EstadoEmisor := l_EstadoEmisor;
    l_PaisEmisor := Self.PaisEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('PaisEmisor', l_PaisEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PaisEmisor']));
    end;
    Self.PaisEmisor := l_PaisEmisor;
    l_CodigoPostalEmisor := Self.CodigoPostalEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CodigoPostalEmisor']));
    end;
    Self.CodigoPostalEmisor := l_CodigoPostalEmisor;
    l_RFCReceptor := Self.RFCReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('RFCReceptor', l_RFCReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'RFCReceptor']));
    end;
    Self.RFCReceptor := l_RFCReceptor;
    l_NombreReceptor := Self.NombreReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('NombreReceptor', l_NombreReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NombreReceptor']));
    end;
    Self.NombreReceptor := l_NombreReceptor;
    l_DomicilioReceptor := Self.DomicilioReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DomicilioReceptor']));
    end;
    Self.DomicilioReceptor := l_DomicilioReceptor;
    l_NoExteriorReceptor := Self.NoExteriorReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoExteriorReceptor']));
    end;
    Self.NoExteriorReceptor := l_NoExteriorReceptor;
    l_ColoniaReceptor := Self.ColoniaReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ColoniaReceptor']));
    end;
    Self.ColoniaReceptor := l_ColoniaReceptor;
    l_LocalidadReceptor := Self.LocalidadReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LocalidadReceptor']));
    end;
    Self.LocalidadReceptor := l_LocalidadReceptor;
    l_MunicipioReceptor := Self.MunicipioReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MunicipioReceptor']));
    end;
    Self.MunicipioReceptor := l_MunicipioReceptor;
    l_EstadoReceptor := Self.EstadoReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('EstadoReceptor', l_EstadoReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstadoReceptor']));
    end;
    Self.EstadoReceptor := l_EstadoReceptor;
    l_PaisReceptor := Self.PaisReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('PaisReceptor', l_PaisReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PaisReceptor']));
    end;
    Self.PaisReceptor := l_PaisReceptor;
    l_CodigoPostalReceptor := Self.CodigoPostalReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CodigoPostalReceptor']));
    end;
    Self.CodigoPostalReceptor := l_CodigoPostalReceptor;
    l_FacturaElectronicaDetalleImportes := int_FacturaElectronicaDetalleImportes;
    try
      TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImportes', ATFacturaElectronicaDetalleImportes, l_FacturaElectronicaDetalleImportes);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaElectronicaDetalleImportes']));
    end;
    if int_FacturaElectronicaDetalleImportes <> l_FacturaElectronicaDetalleImportes then Self.FacturaElectronicaDetalleImportes.Free;
    Self.FacturaElectronicaDetalleImportes := l_FacturaElectronicaDetalleImportes;
    l_FacturaElectronicaDetalleImpuestos := int_FacturaElectronicaDetalleImpuestos;
    try
      TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImpuestos', ATFacturaElectronicaDetalleImpuestos, l_FacturaElectronicaDetalleImpuestos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaElectronicaDetalleImpuestos']));
    end;
    if int_FacturaElectronicaDetalleImpuestos <> l_FacturaElectronicaDetalleImpuestos then Self.FacturaElectronicaDetalleImpuestos.Free;
    Self.FacturaElectronicaDetalleImpuestos := l_FacturaElectronicaDetalleImpuestos;
    l_TotalImpuesto := Self.TotalImpuesto;
    try
      TROSerializer(ASerializer).ReadAnsiString('TotalImpuesto', l_TotalImpuesto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TotalImpuesto']));
    end;
    Self.TotalImpuesto := l_TotalImpuesto;
    l_CalleExpedidoEn := Self.CalleExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CalleExpedidoEn']));
    end;
    Self.CalleExpedidoEn := l_CalleExpedidoEn;
    l_NoExterioExpedidoEn := Self.NoExterioExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoExterioExpedidoEn']));
    end;
    Self.NoExterioExpedidoEn := l_NoExterioExpedidoEn;
    l_ColoniaExpedidoEn := Self.ColoniaExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ColoniaExpedidoEn']));
    end;
    Self.ColoniaExpedidoEn := l_ColoniaExpedidoEn;
    l_CodigoPostalExpedidoEn := Self.CodigoPostalExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CodigoPostalExpedidoEn']));
    end;
    Self.CodigoPostalExpedidoEn := l_CodigoPostalExpedidoEn;
    l_LocalidadExpedidoEn := Self.LocalidadExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LocalidadExpedidoEn']));
    end;
    Self.LocalidadExpedidoEn := l_LocalidadExpedidoEn;
    l_MunicipioExpedidoEn := Self.MunicipioExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MunicipioExpedidoEn']));
    end;
    Self.MunicipioExpedidoEn := l_MunicipioExpedidoEn;
    l_EstadoExpedidoEn := Self.EstadoExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstadoExpedidoEn']));
    end;
    Self.EstadoExpedidoEn := l_EstadoExpedidoEn;
    l_PaisExpedidoEn := Self.PaisExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PaisExpedidoEn']));
    end;
    Self.PaisExpedidoEn := l_PaisExpedidoEn;
    l_Sucursal := Self.Sucursal;
    try
      TROSerializer(ASerializer).ReadEnumerated('Sucursal',System.TypeInfo(boolean), l_Sucursal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Sucursal']));
    end;
    Self.Sucursal := l_Sucursal;
    l_email := Self.email;
    try
      TROSerializer(ASerializer).ReadAnsiString('email', l_email);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'email']));
    end;
    Self.email := l_email;
  end
  else begin
    l_anoAprobacion := Self.anoAprobacion;
    try
      TROSerializer(ASerializer).ReadAnsiString('anoAprobacion', l_anoAprobacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'anoAprobacion']));
    end;
    Self.anoAprobacion := l_anoAprobacion;
    l_CalleExpedidoEn := Self.CalleExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CalleExpedidoEn']));
    end;
    Self.CalleExpedidoEn := l_CalleExpedidoEn;
    l_CodigoPostalEmisor := Self.CodigoPostalEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CodigoPostalEmisor']));
    end;
    Self.CodigoPostalEmisor := l_CodigoPostalEmisor;
    l_CodigoPostalExpedidoEn := Self.CodigoPostalExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CodigoPostalExpedidoEn']));
    end;
    Self.CodigoPostalExpedidoEn := l_CodigoPostalExpedidoEn;
    l_CodigoPostalReceptor := Self.CodigoPostalReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CodigoPostalReceptor']));
    end;
    Self.CodigoPostalReceptor := l_CodigoPostalReceptor;
    l_ColoniaEmisor := Self.ColoniaEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ColoniaEmisor']));
    end;
    Self.ColoniaEmisor := l_ColoniaEmisor;
    l_ColoniaExpedidoEn := Self.ColoniaExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ColoniaExpedidoEn']));
    end;
    Self.ColoniaExpedidoEn := l_ColoniaExpedidoEn;
    l_ColoniaReceptor := Self.ColoniaReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ColoniaReceptor']));
    end;
    Self.ColoniaReceptor := l_ColoniaReceptor;
    l_DireccionEm := Self.DireccionEm;
    try
      TROSerializer(ASerializer).ReadAnsiString('DireccionEm', l_DireccionEm);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DireccionEm']));
    end;
    Self.DireccionEm := l_DireccionEm;
    l_DomicilioReceptor := Self.DomicilioReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DomicilioReceptor']));
    end;
    Self.DomicilioReceptor := l_DomicilioReceptor;
    l_email := Self.email;
    try
      TROSerializer(ASerializer).ReadAnsiString('email', l_email);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'email']));
    end;
    Self.email := l_email;
    l_EstadoEmisor := Self.EstadoEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('EstadoEmisor', l_EstadoEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstadoEmisor']));
    end;
    Self.EstadoEmisor := l_EstadoEmisor;
    l_EstadoExpedidoEn := Self.EstadoExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstadoExpedidoEn']));
    end;
    Self.EstadoExpedidoEn := l_EstadoExpedidoEn;
    l_EstadoReceptor := Self.EstadoReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('EstadoReceptor', l_EstadoReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstadoReceptor']));
    end;
    Self.EstadoReceptor := l_EstadoReceptor;
    l_FacturaElectronicaDetalleImportes := int_FacturaElectronicaDetalleImportes;
    try
      TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImportes', ATFacturaElectronicaDetalleImportes, l_FacturaElectronicaDetalleImportes);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaElectronicaDetalleImportes']));
    end;
    if int_FacturaElectronicaDetalleImportes <> l_FacturaElectronicaDetalleImportes then FacturaElectronicaDetalleImportes.Free;
    Self.FacturaElectronicaDetalleImportes := l_FacturaElectronicaDetalleImportes;
    l_FacturaElectronicaDetalleImpuestos := int_FacturaElectronicaDetalleImpuestos;
    try
      TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImpuestos', ATFacturaElectronicaDetalleImpuestos, l_FacturaElectronicaDetalleImpuestos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaElectronicaDetalleImpuestos']));
    end;
    if int_FacturaElectronicaDetalleImpuestos <> l_FacturaElectronicaDetalleImpuestos then FacturaElectronicaDetalleImpuestos.Free;
    Self.FacturaElectronicaDetalleImpuestos := l_FacturaElectronicaDetalleImpuestos;
    l_Fecha := Self.Fecha;
    try
      TROSerializer(ASerializer).ReadAnsiString('Fecha', l_Fecha);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Fecha']));
    end;
    Self.Fecha := l_Fecha;
    l_Folio := Self.Folio;
    try
      TROSerializer(ASerializer).ReadAnsiString('Folio', l_Folio);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Folio']));
    end;
    Self.Folio := l_Folio;
    l_formadePago := Self.formadePago;
    try
      TROSerializer(ASerializer).ReadAnsiString('formadePago', l_formadePago);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'formadePago']));
    end;
    Self.formadePago := l_formadePago;
    l_LocalidadExpedidoEn := Self.LocalidadExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LocalidadExpedidoEn']));
    end;
    Self.LocalidadExpedidoEn := l_LocalidadExpedidoEn;
    l_LocalidadReceptor := Self.LocalidadReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LocalidadReceptor']));
    end;
    Self.LocalidadReceptor := l_LocalidadReceptor;
    l_MunicipioEmisor := Self.MunicipioEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MunicipioEmisor']));
    end;
    Self.MunicipioEmisor := l_MunicipioEmisor;
    l_MunicipioExpedidoEn := Self.MunicipioExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MunicipioExpedidoEn']));
    end;
    Self.MunicipioExpedidoEn := l_MunicipioExpedidoEn;
    l_MunicipioReceptor := Self.MunicipioReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MunicipioReceptor']));
    end;
    Self.MunicipioReceptor := l_MunicipioReceptor;
    l_noAprobacion := Self.noAprobacion;
    try
      TROSerializer(ASerializer).ReadAnsiString('noAprobacion', l_noAprobacion);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'noAprobacion']));
    end;
    Self.noAprobacion := l_noAprobacion;
    l_NoExterioExpedidoEn := Self.NoExterioExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoExterioExpedidoEn']));
    end;
    Self.NoExterioExpedidoEn := l_NoExterioExpedidoEn;
    l_NoExteriorEM := Self.NoExteriorEM;
    try
      TROSerializer(ASerializer).ReadAnsiString('NoExteriorEM', l_NoExteriorEM);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoExteriorEM']));
    end;
    Self.NoExteriorEM := l_NoExteriorEM;
    l_NoExteriorReceptor := Self.NoExteriorReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NoExteriorReceptor']));
    end;
    Self.NoExteriorReceptor := l_NoExteriorReceptor;
    l_NombreReceptor := Self.NombreReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('NombreReceptor', l_NombreReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NombreReceptor']));
    end;
    Self.NombreReceptor := l_NombreReceptor;
    l_NomEmpEmisor := Self.NomEmpEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NomEmpEmisor']));
    end;
    Self.NomEmpEmisor := l_NomEmpEmisor;
    l_PaisEmisor := Self.PaisEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('PaisEmisor', l_PaisEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PaisEmisor']));
    end;
    Self.PaisEmisor := l_PaisEmisor;
    l_PaisExpedidoEn := Self.PaisExpedidoEn;
    try
      TROSerializer(ASerializer).ReadAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PaisExpedidoEn']));
    end;
    Self.PaisExpedidoEn := l_PaisExpedidoEn;
    l_PaisReceptor := Self.PaisReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('PaisReceptor', l_PaisReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PaisReceptor']));
    end;
    Self.PaisReceptor := l_PaisReceptor;
    l_RFCEmisor := Self.RFCEmisor;
    try
      TROSerializer(ASerializer).ReadAnsiString('RFCEmisor', l_RFCEmisor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'RFCEmisor']));
    end;
    Self.RFCEmisor := l_RFCEmisor;
    l_RFCReceptor := Self.RFCReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('RFCReceptor', l_RFCReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'RFCReceptor']));
    end;
    Self.RFCReceptor := l_RFCReceptor;
    l_Serie := Self.Serie;
    try
      TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Serie']));
    end;
    Self.Serie := l_Serie;
    l_SubTotal := Self.SubTotal;
    try
      TROSerializer(ASerializer).ReadAnsiString('SubTotal', l_SubTotal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SubTotal']));
    end;
    Self.SubTotal := l_SubTotal;
    l_Sucursal := Self.Sucursal;
    try
      TROSerializer(ASerializer).ReadEnumerated('Sucursal',System.TypeInfo(boolean), l_Sucursal);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Sucursal']));
    end;
    Self.Sucursal := l_Sucursal;
    l_tipoComprobante := Self.tipoComprobante;
    try
      TROSerializer(ASerializer).ReadAnsiString('tipoComprobante', l_tipoComprobante);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'tipoComprobante']));
    end;
    Self.tipoComprobante := l_tipoComprobante;
    l_Total := Self.Total;
    try
      TROSerializer(ASerializer).ReadAnsiString('Total', l_Total);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Total']));
    end;
    Self.Total := l_Total;
    l_TotalImpuesto := Self.TotalImpuesto;
    try
      TROSerializer(ASerializer).ReadAnsiString('TotalImpuesto', l_TotalImpuesto);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TotalImpuesto']));
    end;
    Self.TotalImpuesto := l_TotalImpuesto;
  end;
end;

procedure TFacturaElectronicaBI.WriteComplex(ASerializer: TObject);
var
  l_anoAprobacion: AnsiString;
  l_CalleExpedidoEn: AnsiString;
  l_CodigoPostalEmisor: AnsiString;
  l_CodigoPostalExpedidoEn: AnsiString;
  l_CodigoPostalReceptor: AnsiString;
  l_ColoniaEmisor: AnsiString;
  l_ColoniaExpedidoEn: AnsiString;
  l_ColoniaReceptor: AnsiString;
  l_DireccionEm: AnsiString;
  l_DomicilioReceptor: AnsiString;
  l_email: AnsiString;
  l_EstadoEmisor: AnsiString;
  l_EstadoExpedidoEn: AnsiString;
  l_EstadoReceptor: AnsiString;
  l_FacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
  l_FacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
  l_Fecha: AnsiString;
  l_Folio: AnsiString;
  l_formadePago: AnsiString;
  l_LocalidadExpedidoEn: AnsiString;
  l_LocalidadReceptor: AnsiString;
  l_MunicipioEmisor: AnsiString;
  l_MunicipioExpedidoEn: AnsiString;
  l_MunicipioReceptor: AnsiString;
  l_noAprobacion: AnsiString;
  l_NoExterioExpedidoEn: AnsiString;
  l_NoExteriorEM: AnsiString;
  l_NoExteriorReceptor: AnsiString;
  l_NombreReceptor: AnsiString;
  l_NomEmpEmisor: AnsiString;
  l_PaisEmisor: AnsiString;
  l_PaisExpedidoEn: AnsiString;
  l_PaisReceptor: AnsiString;
  l_RFCEmisor: AnsiString;
  l_RFCReceptor: AnsiString;
  l_Serie: AnsiString;
  l_SubTotal: AnsiString;
  l_Sucursal: Boolean;
  l_tipoComprobante: AnsiString;
  l_Total: AnsiString;
  l_TotalImpuesto: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaElectronicaBI);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Folio := Self.Folio;
    TROSerializer(ASerializer).WriteAnsiString('Folio', l_Folio);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteAnsiString('Fecha', l_Fecha);
    l_noAprobacion := Self.noAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('noAprobacion', l_noAprobacion);
    l_anoAprobacion := Self.anoAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('anoAprobacion', l_anoAprobacion);
    l_tipoComprobante := Self.tipoComprobante;
    TROSerializer(ASerializer).WriteAnsiString('tipoComprobante', l_tipoComprobante);
    l_formadePago := Self.formadePago;
    TROSerializer(ASerializer).WriteAnsiString('formadePago', l_formadePago);
    l_SubTotal := Self.SubTotal;
    TROSerializer(ASerializer).WriteAnsiString('SubTotal', l_SubTotal);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteAnsiString('Total', l_Total);
    l_RFCEmisor := Self.RFCEmisor;
    TROSerializer(ASerializer).WriteAnsiString('RFCEmisor', l_RFCEmisor);
    l_NomEmpEmisor := Self.NomEmpEmisor;
    TROSerializer(ASerializer).WriteAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    l_DireccionEm := Self.DireccionEm;
    TROSerializer(ASerializer).WriteAnsiString('DireccionEm', l_DireccionEm);
    l_NoExteriorEM := Self.NoExteriorEM;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorEM', l_NoExteriorEM);
    l_ColoniaEmisor := Self.ColoniaEmisor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    l_MunicipioEmisor := Self.MunicipioEmisor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    l_EstadoEmisor := Self.EstadoEmisor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoEmisor', l_EstadoEmisor);
    l_PaisEmisor := Self.PaisEmisor;
    TROSerializer(ASerializer).WriteAnsiString('PaisEmisor', l_PaisEmisor);
    l_CodigoPostalEmisor := Self.CodigoPostalEmisor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    l_RFCReceptor := Self.RFCReceptor;
    TROSerializer(ASerializer).WriteAnsiString('RFCReceptor', l_RFCReceptor);
    l_NombreReceptor := Self.NombreReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NombreReceptor', l_NombreReceptor);
    l_DomicilioReceptor := Self.DomicilioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    l_NoExteriorReceptor := Self.NoExteriorReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    l_ColoniaReceptor := Self.ColoniaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    l_LocalidadReceptor := Self.LocalidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    l_MunicipioReceptor := Self.MunicipioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    l_EstadoReceptor := Self.EstadoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoReceptor', l_EstadoReceptor);
    l_PaisReceptor := Self.PaisReceptor;
    TROSerializer(ASerializer).WriteAnsiString('PaisReceptor', l_PaisReceptor);
    l_CodigoPostalReceptor := Self.CodigoPostalReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    l_FacturaElectronicaDetalleImportes := int_FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImportes', l_FacturaElectronicaDetalleImportes, ATFacturaElectronicaDetalleImportes);
    l_FacturaElectronicaDetalleImpuestos := int_FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImpuestos', l_FacturaElectronicaDetalleImpuestos, ATFacturaElectronicaDetalleImpuestos);
    l_TotalImpuesto := Self.TotalImpuesto;
    TROSerializer(ASerializer).WriteAnsiString('TotalImpuesto', l_TotalImpuesto);
    l_CalleExpedidoEn := Self.CalleExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    l_NoExterioExpedidoEn := Self.NoExterioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    l_ColoniaExpedidoEn := Self.ColoniaExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    l_CodigoPostalExpedidoEn := Self.CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    l_LocalidadExpedidoEn := Self.LocalidadExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    l_MunicipioExpedidoEn := Self.MunicipioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    l_EstadoExpedidoEn := Self.EstadoExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    l_PaisExpedidoEn := Self.PaisExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    l_Sucursal := Self.Sucursal;
    TROSerializer(ASerializer).WriteEnumerated('Sucursal',System.TypeInfo(boolean), l_Sucursal);
    l_email := Self.email;
    TROSerializer(ASerializer).WriteAnsiString('email', l_email);
  end
  else begin
    l_anoAprobacion := Self.anoAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('anoAprobacion', l_anoAprobacion);
    l_CalleExpedidoEn := Self.CalleExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    l_CodigoPostalEmisor := Self.CodigoPostalEmisor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    l_CodigoPostalExpedidoEn := Self.CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    l_CodigoPostalReceptor := Self.CodigoPostalReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    l_ColoniaEmisor := Self.ColoniaEmisor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    l_ColoniaExpedidoEn := Self.ColoniaExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    l_ColoniaReceptor := Self.ColoniaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    l_DireccionEm := Self.DireccionEm;
    TROSerializer(ASerializer).WriteAnsiString('DireccionEm', l_DireccionEm);
    l_DomicilioReceptor := Self.DomicilioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    l_email := Self.email;
    TROSerializer(ASerializer).WriteAnsiString('email', l_email);
    l_EstadoEmisor := Self.EstadoEmisor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoEmisor', l_EstadoEmisor);
    l_EstadoExpedidoEn := Self.EstadoExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    l_EstadoReceptor := Self.EstadoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoReceptor', l_EstadoReceptor);
    l_FacturaElectronicaDetalleImportes := int_FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImportes', l_FacturaElectronicaDetalleImportes, ATFacturaElectronicaDetalleImportes);
    l_FacturaElectronicaDetalleImpuestos := int_FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImpuestos', l_FacturaElectronicaDetalleImpuestos, ATFacturaElectronicaDetalleImpuestos);
    l_Fecha := Self.Fecha;
    TROSerializer(ASerializer).WriteAnsiString('Fecha', l_Fecha);
    l_Folio := Self.Folio;
    TROSerializer(ASerializer).WriteAnsiString('Folio', l_Folio);
    l_formadePago := Self.formadePago;
    TROSerializer(ASerializer).WriteAnsiString('formadePago', l_formadePago);
    l_LocalidadExpedidoEn := Self.LocalidadExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    l_LocalidadReceptor := Self.LocalidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    l_MunicipioEmisor := Self.MunicipioEmisor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    l_MunicipioExpedidoEn := Self.MunicipioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    l_MunicipioReceptor := Self.MunicipioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    l_noAprobacion := Self.noAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('noAprobacion', l_noAprobacion);
    l_NoExterioExpedidoEn := Self.NoExterioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    l_NoExteriorEM := Self.NoExteriorEM;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorEM', l_NoExteriorEM);
    l_NoExteriorReceptor := Self.NoExteriorReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    l_NombreReceptor := Self.NombreReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NombreReceptor', l_NombreReceptor);
    l_NomEmpEmisor := Self.NomEmpEmisor;
    TROSerializer(ASerializer).WriteAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    l_PaisEmisor := Self.PaisEmisor;
    TROSerializer(ASerializer).WriteAnsiString('PaisEmisor', l_PaisEmisor);
    l_PaisExpedidoEn := Self.PaisExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    l_PaisReceptor := Self.PaisReceptor;
    TROSerializer(ASerializer).WriteAnsiString('PaisReceptor', l_PaisReceptor);
    l_RFCEmisor := Self.RFCEmisor;
    TROSerializer(ASerializer).WriteAnsiString('RFCEmisor', l_RFCEmisor);
    l_RFCReceptor := Self.RFCReceptor;
    TROSerializer(ASerializer).WriteAnsiString('RFCReceptor', l_RFCReceptor);
    l_Serie := Self.Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_SubTotal := Self.SubTotal;
    TROSerializer(ASerializer).WriteAnsiString('SubTotal', l_SubTotal);
    l_Sucursal := Self.Sucursal;
    TROSerializer(ASerializer).WriteEnumerated('Sucursal',System.TypeInfo(boolean), l_Sucursal);
    l_tipoComprobante := Self.tipoComprobante;
    TROSerializer(ASerializer).WriteAnsiString('tipoComprobante', l_tipoComprobante);
    l_Total := Self.Total;
    TROSerializer(ASerializer).WriteAnsiString('Total', l_Total);
    l_TotalImpuesto := Self.TotalImpuesto;
    TROSerializer(ASerializer).WriteAnsiString('TotalImpuesto', l_TotalImpuesto);
  end;
end;

{ TFacturaElectronicaBICollection }
constructor TFacturaElectronicaBICollection.Create;
begin
  inherited Create(TFacturaElectronicaBI);
end;

constructor TFacturaElectronicaBICollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaElectronicaBICollection.Add: TFacturaElectronicaBI;
begin
  Result := TFacturaElectronicaBI(inherited Add);
end;

function TFacturaElectronicaBICollection.GetItems(aIndex: Integer): TFacturaElectronicaBI;
begin
  Result := TFacturaElectronicaBI(inherited Items[aIndex]);
end;

procedure TFacturaElectronicaBICollection.SetItems(aIndex: Integer; const Value: TFacturaElectronicaBI);
begin
  TFacturaElectronicaBI(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaElectronicaDetalleImporteBI }

procedure TFacturaElectronicaDetalleImporteBI.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TFacturaElectronicaDetalleImporteBI;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TFacturaElectronicaDetalleImporteBI) then begin
    lSource := LibraryIngresos_Intf.TFacturaElectronicaDetalleImporteBI(iSource);

    Self.CantidadReceptor := lSource.CantidadReceptor;
    Self.UnidadReceptor := lSource.UnidadReceptor;
    Self.DescripcionReceptor := lSource.DescripcionReceptor;
    Self.ValorUnitarioReceptor := lSource.ValorUnitarioReceptor;
    Self.ImporteReceptor := lSource.ImporteReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImporteBI.ReadComplex(ASerializer: TObject);
var
  l_CantidadReceptor: AnsiString;
  l_DescripcionReceptor: AnsiString;
  l_ImporteReceptor: AnsiString;
  l_UnidadReceptor: AnsiString;
  l_ValorUnitarioReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_CantidadReceptor := Self.CantidadReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('CantidadReceptor', l_CantidadReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CantidadReceptor']));
    end;
    Self.CantidadReceptor := l_CantidadReceptor;
    l_UnidadReceptor := Self.UnidadReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('UnidadReceptor', l_UnidadReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'UnidadReceptor']));
    end;
    Self.UnidadReceptor := l_UnidadReceptor;
    l_DescripcionReceptor := Self.DescripcionReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DescripcionReceptor']));
    end;
    Self.DescripcionReceptor := l_DescripcionReceptor;
    l_ValorUnitarioReceptor := Self.ValorUnitarioReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ValorUnitarioReceptor']));
    end;
    Self.ValorUnitarioReceptor := l_ValorUnitarioReceptor;
    l_ImporteReceptor := Self.ImporteReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ImporteReceptor', l_ImporteReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImporteReceptor']));
    end;
    Self.ImporteReceptor := l_ImporteReceptor;
  end
  else begin
    l_CantidadReceptor := Self.CantidadReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('CantidadReceptor', l_CantidadReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CantidadReceptor']));
    end;
    Self.CantidadReceptor := l_CantidadReceptor;
    l_DescripcionReceptor := Self.DescripcionReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DescripcionReceptor']));
    end;
    Self.DescripcionReceptor := l_DescripcionReceptor;
    l_ImporteReceptor := Self.ImporteReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ImporteReceptor', l_ImporteReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImporteReceptor']));
    end;
    Self.ImporteReceptor := l_ImporteReceptor;
    l_UnidadReceptor := Self.UnidadReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('UnidadReceptor', l_UnidadReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'UnidadReceptor']));
    end;
    Self.UnidadReceptor := l_UnidadReceptor;
    l_ValorUnitarioReceptor := Self.ValorUnitarioReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ValorUnitarioReceptor']));
    end;
    Self.ValorUnitarioReceptor := l_ValorUnitarioReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImporteBI.WriteComplex(ASerializer: TObject);
var
  l_CantidadReceptor: AnsiString;
  l_DescripcionReceptor: AnsiString;
  l_ImporteReceptor: AnsiString;
  l_UnidadReceptor: AnsiString;
  l_ValorUnitarioReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaElectronicaDetalleImporteBI);
    l_CantidadReceptor := Self.CantidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CantidadReceptor', l_CantidadReceptor);
    l_UnidadReceptor := Self.UnidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('UnidadReceptor', l_UnidadReceptor);
    l_DescripcionReceptor := Self.DescripcionReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    l_ValorUnitarioReceptor := Self.ValorUnitarioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
    l_ImporteReceptor := Self.ImporteReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteReceptor', l_ImporteReceptor);
  end
  else begin
    l_CantidadReceptor := Self.CantidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CantidadReceptor', l_CantidadReceptor);
    l_DescripcionReceptor := Self.DescripcionReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    l_ImporteReceptor := Self.ImporteReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteReceptor', l_ImporteReceptor);
    l_UnidadReceptor := Self.UnidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('UnidadReceptor', l_UnidadReceptor);
    l_ValorUnitarioReceptor := Self.ValorUnitarioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
  end;
end;

{ TFacturaElectronicaDetalleImporteBICollection }
constructor TFacturaElectronicaDetalleImporteBICollection.Create;
begin
  inherited Create(TFacturaElectronicaDetalleImporteBI);
end;

constructor TFacturaElectronicaDetalleImporteBICollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaElectronicaDetalleImporteBICollection.Add: TFacturaElectronicaDetalleImporteBI;
begin
  Result := TFacturaElectronicaDetalleImporteBI(inherited Add);
end;

function TFacturaElectronicaDetalleImporteBICollection.GetItems(aIndex: Integer): TFacturaElectronicaDetalleImporteBI;
begin
  Result := TFacturaElectronicaDetalleImporteBI(inherited Items[aIndex]);
end;

procedure TFacturaElectronicaDetalleImporteBICollection.LoadFromArray(anArray: ATFacturaElectronicaDetalleImportes);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TFacturaElectronicaDetalleImporteBICollection.SaveToArray(anArray: ATFacturaElectronicaDetalleImportes);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TFacturaElectronicaDetalleImporteBI(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TFacturaElectronicaDetalleImporteBICollection.SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImporteBI);
begin
  TFacturaElectronicaDetalleImporteBI(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaElectronicaDetalleImpuestosBI }

procedure TFacturaElectronicaDetalleImpuestosBI.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TFacturaElectronicaDetalleImpuestosBI;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TFacturaElectronicaDetalleImpuestosBI) then begin
    lSource := LibraryIngresos_Intf.TFacturaElectronicaDetalleImpuestosBI(iSource);

    Self.ImpuestoReceptor := lSource.ImpuestoReceptor;
    Self.TasaReceptor := lSource.TasaReceptor;
    Self.ImporteImpReceptor := lSource.ImporteImpReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImpuestosBI.ReadComplex(ASerializer: TObject);
var
  l_ImporteImpReceptor: AnsiString;
  l_ImpuestoReceptor: AnsiString;
  l_TasaReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ImpuestoReceptor := Self.ImpuestoReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImpuestoReceptor']));
    end;
    Self.ImpuestoReceptor := l_ImpuestoReceptor;
    l_TasaReceptor := Self.TasaReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('TasaReceptor', l_TasaReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TasaReceptor']));
    end;
    Self.TasaReceptor := l_TasaReceptor;
    l_ImporteImpReceptor := Self.ImporteImpReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImporteImpReceptor']));
    end;
    Self.ImporteImpReceptor := l_ImporteImpReceptor;
  end
  else begin
    l_ImporteImpReceptor := Self.ImporteImpReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImporteImpReceptor']));
    end;
    Self.ImporteImpReceptor := l_ImporteImpReceptor;
    l_ImpuestoReceptor := Self.ImpuestoReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ImpuestoReceptor']));
    end;
    Self.ImpuestoReceptor := l_ImpuestoReceptor;
    l_TasaReceptor := Self.TasaReceptor;
    try
      TROSerializer(ASerializer).ReadAnsiString('TasaReceptor', l_TasaReceptor);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TasaReceptor']));
    end;
    Self.TasaReceptor := l_TasaReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImpuestosBI.WriteComplex(ASerializer: TObject);
var
  l_ImporteImpReceptor: AnsiString;
  l_ImpuestoReceptor: AnsiString;
  l_TasaReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaElectronicaDetalleImpuestosBI);
    l_ImpuestoReceptor := Self.ImpuestoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    l_TasaReceptor := Self.TasaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('TasaReceptor', l_TasaReceptor);
    l_ImporteImpReceptor := Self.ImporteImpReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
  end
  else begin
    l_ImporteImpReceptor := Self.ImporteImpReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
    l_ImpuestoReceptor := Self.ImpuestoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    l_TasaReceptor := Self.TasaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('TasaReceptor', l_TasaReceptor);
  end;
end;

{ TFacturaElectronicaDetalleImpuestosBICollection }
constructor TFacturaElectronicaDetalleImpuestosBICollection.Create;
begin
  inherited Create(TFacturaElectronicaDetalleImpuestosBI);
end;

constructor TFacturaElectronicaDetalleImpuestosBICollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaElectronicaDetalleImpuestosBICollection.Add: TFacturaElectronicaDetalleImpuestosBI;
begin
  Result := TFacturaElectronicaDetalleImpuestosBI(inherited Add);
end;

function TFacturaElectronicaDetalleImpuestosBICollection.GetItems(aIndex: Integer): TFacturaElectronicaDetalleImpuestosBI;
begin
  Result := TFacturaElectronicaDetalleImpuestosBI(inherited Items[aIndex]);
end;

procedure TFacturaElectronicaDetalleImpuestosBICollection.LoadFromArray(anArray: ATFacturaElectronicaDetalleImpuestos);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TFacturaElectronicaDetalleImpuestosBICollection.SaveToArray(anArray: ATFacturaElectronicaDetalleImpuestos);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TFacturaElectronicaDetalleImpuestosBI(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TFacturaElectronicaDetalleImpuestosBICollection.SetItems(aIndex: Integer; const Value: TFacturaElectronicaDetalleImpuestosBI);
begin
  TFacturaElectronicaDetalleImpuestosBI(inherited Items[aIndex]).Assign(Value);
end;

{ TDataFacturaElectronicaBI }

procedure TDataFacturaElectronicaBI.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TDataFacturaElectronicaBI;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TDataFacturaElectronicaBI) then begin
    lSource := LibraryIngresos_Intf.TDataFacturaElectronicaBI(iSource);

    if System.Assigned(lSource.fFacturaElectronicaBI) then
      Self.FacturaElectronicaBI.Assign(lSource.fFacturaElectronicaBI)
    else
      SysUtils.FreeAndNil(fFacturaElectronicaBI);
    Self.CadenaOriginal := lSource.CadenaOriginal;
    Self.SelloDigital := lSource.SelloDigital;
    Self.NumCertificado := lSource.NumCertificado;
    Self.Certificado := lSource.Certificado;
  end;
end;

function TDataFacturaElectronicaBI.GetFacturaElectronicaBI: TFacturaElectronicaBI;
begin
  if (fFacturaElectronicaBI = nil) then fFacturaElectronicaBI := TFacturaElectronicaBI.Create();
  Result := fFacturaElectronicaBI;
end;

procedure TDataFacturaElectronicaBI.ReadComplex(ASerializer: TObject);
var
  l_CadenaOriginal: UnicodeString;
  l_Certificado: UnicodeString;
  l_FacturaElectronicaBI: TFacturaElectronicaBI;
  l_NumCertificado: AnsiString;
  l_SelloDigital: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FacturaElectronicaBI := int_FacturaElectronicaBI;
    try
      TROSerializer(ASerializer).ReadStruct('FacturaElectronicaBI', TFacturaElectronicaBI, l_FacturaElectronicaBI);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaElectronicaBI']));
    end;
    if int_FacturaElectronicaBI <> l_FacturaElectronicaBI then Self.FacturaElectronicaBI.Free;
    Self.FacturaElectronicaBI := l_FacturaElectronicaBI;
    l_CadenaOriginal := Self.CadenaOriginal;
    try
{$IFDEF UNICODE}
      TROSerializer(ASerializer).ReadUnicodeString('CadenaOriginal', l_CadenaOriginal);
{$ELSE}
      TROSerializer(ASerializer).ReadWideString('CadenaOriginal', l_CadenaOriginal);
{$ENDIF}
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CadenaOriginal']));
    end;
    Self.CadenaOriginal := l_CadenaOriginal;
    l_SelloDigital := Self.SelloDigital;
    try
      TROSerializer(ASerializer).ReadAnsiString('SelloDigital', l_SelloDigital);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SelloDigital']));
    end;
    Self.SelloDigital := l_SelloDigital;
    l_NumCertificado := Self.NumCertificado;
    try
      TROSerializer(ASerializer).ReadAnsiString('NumCertificado', l_NumCertificado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NumCertificado']));
    end;
    Self.NumCertificado := l_NumCertificado;
    l_Certificado := Self.Certificado;
    try
{$IFDEF UNICODE}
      TROSerializer(ASerializer).ReadUnicodeString('Certificado', l_Certificado);
{$ELSE}
      TROSerializer(ASerializer).ReadWideString('Certificado', l_Certificado);
{$ENDIF}
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Certificado']));
    end;
    Self.Certificado := l_Certificado;
  end
  else begin
    l_CadenaOriginal := Self.CadenaOriginal;
    try
{$IFDEF UNICODE}
      TROSerializer(ASerializer).ReadUnicodeString('CadenaOriginal', l_CadenaOriginal);
{$ELSE}
      TROSerializer(ASerializer).ReadWideString('CadenaOriginal', l_CadenaOriginal);
{$ENDIF}
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CadenaOriginal']));
    end;
    Self.CadenaOriginal := l_CadenaOriginal;
    l_Certificado := Self.Certificado;
    try
{$IFDEF UNICODE}
      TROSerializer(ASerializer).ReadUnicodeString('Certificado', l_Certificado);
{$ELSE}
      TROSerializer(ASerializer).ReadWideString('Certificado', l_Certificado);
{$ENDIF}
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Certificado']));
    end;
    Self.Certificado := l_Certificado;
    l_FacturaElectronicaBI := int_FacturaElectronicaBI;
    try
      TROSerializer(ASerializer).ReadStruct('FacturaElectronicaBI', TFacturaElectronicaBI, l_FacturaElectronicaBI);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FacturaElectronicaBI']));
    end;
    if int_FacturaElectronicaBI <> l_FacturaElectronicaBI then FacturaElectronicaBI.Free;
    Self.FacturaElectronicaBI := l_FacturaElectronicaBI;
    l_NumCertificado := Self.NumCertificado;
    try
      TROSerializer(ASerializer).ReadAnsiString('NumCertificado', l_NumCertificado);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NumCertificado']));
    end;
    Self.NumCertificado := l_NumCertificado;
    l_SelloDigital := Self.SelloDigital;
    try
      TROSerializer(ASerializer).ReadAnsiString('SelloDigital', l_SelloDigital);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SelloDigital']));
    end;
    Self.SelloDigital := l_SelloDigital;
  end;
end;

procedure TDataFacturaElectronicaBI.WriteComplex(ASerializer: TObject);
var
  l_CadenaOriginal: UnicodeString;
  l_Certificado: UnicodeString;
  l_FacturaElectronicaBI: TFacturaElectronicaBI;
  l_NumCertificado: AnsiString;
  l_SelloDigital: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDataFacturaElectronicaBI);
    l_FacturaElectronicaBI := int_FacturaElectronicaBI;
    TROSerializer(ASerializer).WriteStruct('FacturaElectronicaBI', l_FacturaElectronicaBI, TFacturaElectronicaBI);
    l_CadenaOriginal := Self.CadenaOriginal;
{$IFDEF UNICODE}
    TROSerializer(ASerializer).WriteUnicodeString('CadenaOriginal', l_CadenaOriginal);
{$ELSE}
    TROSerializer(ASerializer).WriteWideString('CadenaOriginal', l_CadenaOriginal);
{$ENDIF}
    l_SelloDigital := Self.SelloDigital;
    TROSerializer(ASerializer).WriteAnsiString('SelloDigital', l_SelloDigital);
    l_NumCertificado := Self.NumCertificado;
    TROSerializer(ASerializer).WriteAnsiString('NumCertificado', l_NumCertificado);
    l_Certificado := Self.Certificado;
{$IFDEF UNICODE}
    TROSerializer(ASerializer).WriteUnicodeString('Certificado', l_Certificado);
{$ELSE}
    TROSerializer(ASerializer).WriteWideString('Certificado', l_Certificado);
{$ENDIF}
  end
  else begin
    l_CadenaOriginal := Self.CadenaOriginal;
{$IFDEF UNICODE}
    TROSerializer(ASerializer).WriteUnicodeString('CadenaOriginal', l_CadenaOriginal);
{$ELSE}
    TROSerializer(ASerializer).WriteWideString('CadenaOriginal', l_CadenaOriginal);
{$ENDIF}
    l_Certificado := Self.Certificado;
{$IFDEF UNICODE}
    TROSerializer(ASerializer).WriteUnicodeString('Certificado', l_Certificado);
{$ELSE}
    TROSerializer(ASerializer).WriteWideString('Certificado', l_Certificado);
{$ENDIF}
    l_FacturaElectronicaBI := int_FacturaElectronicaBI;
    TROSerializer(ASerializer).WriteStruct('FacturaElectronicaBI', l_FacturaElectronicaBI, TFacturaElectronicaBI);
    l_NumCertificado := Self.NumCertificado;
    TROSerializer(ASerializer).WriteAnsiString('NumCertificado', l_NumCertificado);
    l_SelloDigital := Self.SelloDigital;
    TROSerializer(ASerializer).WriteAnsiString('SelloDigital', l_SelloDigital);
  end;
end;

{ TDataFacturaElectronicaBICollection }
constructor TDataFacturaElectronicaBICollection.Create;
begin
  inherited Create(TDataFacturaElectronicaBI);
end;

constructor TDataFacturaElectronicaBICollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDataFacturaElectronicaBICollection.Add: TDataFacturaElectronicaBI;
begin
  Result := TDataFacturaElectronicaBI(inherited Add);
end;

function TDataFacturaElectronicaBICollection.GetItems(aIndex: Integer): TDataFacturaElectronicaBI;
begin
  Result := TDataFacturaElectronicaBI(inherited Items[aIndex]);
end;

procedure TDataFacturaElectronicaBICollection.SetItems(aIndex: Integer; const Value: TDataFacturaElectronicaBI);
begin
  TDataFacturaElectronicaBI(inherited Items[aIndex]).Assign(Value);
end;

{ TDatos }

procedure TDatos.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TDatos;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TDatos) then begin
    lSource := LibraryIngresos_Intf.TDatos(iSource);

    Self.Nombre := lSource.Nombre;
    Self.CODIGO := lSource.CODIGO;
    Self.DIRECCION := lSource.DIRECCION;
    Self.IMSS := lSource.IMSS;
  end;
end;

procedure TDatos.ReadComplex(ASerializer: TObject);
var
  l_CODIGO: AnsiString;
  l_DIRECCION: AnsiString;
  l_IMSS: AnsiString;
  l_Nombre: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_CODIGO := Self.CODIGO;
    try
      TROSerializer(ASerializer).ReadAnsiString('CODIGO', l_CODIGO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CODIGO']));
    end;
    Self.CODIGO := l_CODIGO;
    l_DIRECCION := Self.DIRECCION;
    try
      TROSerializer(ASerializer).ReadAnsiString('DIRECCION', l_DIRECCION);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DIRECCION']));
    end;
    Self.DIRECCION := l_DIRECCION;
    l_IMSS := Self.IMSS;
    try
      TROSerializer(ASerializer).ReadAnsiString('IMSS', l_IMSS);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IMSS']));
    end;
    Self.IMSS := l_IMSS;
  end
  else begin
    l_CODIGO := Self.CODIGO;
    try
      TROSerializer(ASerializer).ReadAnsiString('CODIGO', l_CODIGO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CODIGO']));
    end;
    Self.CODIGO := l_CODIGO;
    l_DIRECCION := Self.DIRECCION;
    try
      TROSerializer(ASerializer).ReadAnsiString('DIRECCION', l_DIRECCION);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'DIRECCION']));
    end;
    Self.DIRECCION := l_DIRECCION;
    l_IMSS := Self.IMSS;
    try
      TROSerializer(ASerializer).ReadAnsiString('IMSS', l_IMSS);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IMSS']));
    end;
    Self.IMSS := l_IMSS;
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
  end;
end;

procedure TDatos.WriteComplex(ASerializer: TObject);
var
  l_CODIGO: AnsiString;
  l_DIRECCION: AnsiString;
  l_IMSS: AnsiString;
  l_Nombre: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatos);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_CODIGO := Self.CODIGO;
    TROSerializer(ASerializer).WriteAnsiString('CODIGO', l_CODIGO);
    l_DIRECCION := Self.DIRECCION;
    TROSerializer(ASerializer).WriteAnsiString('DIRECCION', l_DIRECCION);
    l_IMSS := Self.IMSS;
    TROSerializer(ASerializer).WriteAnsiString('IMSS', l_IMSS);
  end
  else begin
    l_CODIGO := Self.CODIGO;
    TROSerializer(ASerializer).WriteAnsiString('CODIGO', l_CODIGO);
    l_DIRECCION := Self.DIRECCION;
    TROSerializer(ASerializer).WriteAnsiString('DIRECCION', l_DIRECCION);
    l_IMSS := Self.IMSS;
    TROSerializer(ASerializer).WriteAnsiString('IMSS', l_IMSS);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
  end;
end;

{ TDatosCollection }
constructor TDatosCollection.Create;
begin
  inherited Create(TDatos);
end;

constructor TDatosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosCollection.Add: TDatos;
begin
  Result := TDatos(inherited Add);
end;

function TDatosCollection.GetItems(aIndex: Integer): TDatos;
begin
  Result := TDatos(inherited Items[aIndex]);
end;

procedure TDatosCollection.SetItems(aIndex: Integer; const Value: TDatos);
begin
  TDatos(inherited Items[aIndex]).Assign(Value);
end;

{ TTipoValores }

procedure TTipoValores.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TTipoValores;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TTipoValores) then begin
    lSource := LibraryIngresos_Intf.TTipoValores(iSource);

    Self.IDMONEDA := lSource.IDMONEDA;
    Self.VALOR := lSource.VALOR;
  end;
end;

procedure TTipoValores.ReadComplex(ASerializer: TObject);
var
  l_IDMONEDA: Integer;
  l_VALOR: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_IDMONEDA := Self.IDMONEDA;
    try
      TROSerializer(ASerializer).ReadInteger('IDMONEDA', TypInfo.otSLong, l_IDMONEDA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IDMONEDA']));
    end;
    Self.IDMONEDA := l_IDMONEDA;
    l_VALOR := Self.VALOR;
    try
      TROSerializer(ASerializer).ReadDouble('VALOR', TypInfo.ftDouble, l_VALOR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'VALOR']));
    end;
    Self.VALOR := l_VALOR;
  end
  else begin
    l_IDMONEDA := Self.IDMONEDA;
    try
      TROSerializer(ASerializer).ReadInteger('IDMONEDA', TypInfo.otSLong, l_IDMONEDA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IDMONEDA']));
    end;
    Self.IDMONEDA := l_IDMONEDA;
    l_VALOR := Self.VALOR;
    try
      TROSerializer(ASerializer).ReadDouble('VALOR', TypInfo.ftDouble, l_VALOR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'VALOR']));
    end;
    Self.VALOR := l_VALOR;
  end;
end;

procedure TTipoValores.WriteComplex(ASerializer: TObject);
var
  l_IDMONEDA: Integer;
  l_VALOR: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TTipoValores);
    l_IDMONEDA := Self.IDMONEDA;
    TROSerializer(ASerializer).WriteInteger('IDMONEDA', TypInfo.otSLong, l_IDMONEDA);
    l_VALOR := Self.VALOR;
    TROSerializer(ASerializer).WriteDouble('VALOR', TypInfo.ftDouble, l_VALOR);
  end
  else begin
    l_IDMONEDA := Self.IDMONEDA;
    TROSerializer(ASerializer).WriteInteger('IDMONEDA', TypInfo.otSLong, l_IDMONEDA);
    l_VALOR := Self.VALOR;
    TROSerializer(ASerializer).WriteDouble('VALOR', TypInfo.ftDouble, l_VALOR);
  end;
end;

{ TTipoValoresCollection }
constructor TTipoValoresCollection.Create;
begin
  inherited Create(TTipoValores);
end;

constructor TTipoValoresCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TTipoValoresCollection.Add: TTipoValores;
begin
  Result := TTipoValores(inherited Add);
end;

function TTipoValoresCollection.GetItems(aIndex: Integer): TTipoValores;
begin
  Result := TTipoValores(inherited Items[aIndex]);
end;

procedure TTipoValoresCollection.LoadFromArray(anArray: ATTipoValores);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TTipoValoresCollection.SaveToArray(anArray: ATTipoValores);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TTipoValores(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TTipoValoresCollection.SetItems(aIndex: Integer; const Value: TTipoValores);
begin
  TTipoValores(inherited Items[aIndex]).Assign(Value);
end;

{ TCampo }

procedure TCampo.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TCampo;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TCampo) then begin
    lSource := LibraryIngresos_Intf.TCampo(iSource);

    Self.Nombre := lSource.Nombre;
    Self.Size := lSource.Size;
    Self.Formato := lSource.Formato;
    Self.Tipo := lSource.Tipo;
  end;
end;

procedure TCampo.ReadComplex(ASerializer: TObject);
var
  l_Formato: AnsiString;
  l_Nombre: AnsiString;
  l_Size: Integer;
  l_Tipo: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_Size := Self.Size;
    try
      TROSerializer(ASerializer).ReadInteger('Size', TypInfo.otSLong, l_Size);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Size']));
    end;
    Self.Size := l_Size;
    l_Formato := Self.Formato;
    try
      TROSerializer(ASerializer).ReadAnsiString('Formato', l_Formato);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Formato']));
    end;
    Self.Formato := l_Formato;
    l_Tipo := Self.Tipo;
    try
      TROSerializer(ASerializer).ReadInteger('Tipo', TypInfo.otSLong, l_Tipo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Tipo']));
    end;
    Self.Tipo := l_Tipo;
  end
  else begin
    l_Formato := Self.Formato;
    try
      TROSerializer(ASerializer).ReadAnsiString('Formato', l_Formato);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Formato']));
    end;
    Self.Formato := l_Formato;
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_Size := Self.Size;
    try
      TROSerializer(ASerializer).ReadInteger('Size', TypInfo.otSLong, l_Size);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Size']));
    end;
    Self.Size := l_Size;
    l_Tipo := Self.Tipo;
    try
      TROSerializer(ASerializer).ReadInteger('Tipo', TypInfo.otSLong, l_Tipo);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Tipo']));
    end;
    Self.Tipo := l_Tipo;
  end;
end;

procedure TCampo.WriteComplex(ASerializer: TObject);
var
  l_Formato: AnsiString;
  l_Nombre: AnsiString;
  l_Size: Integer;
  l_Tipo: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TCampo);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Size := Self.Size;
    TROSerializer(ASerializer).WriteInteger('Size', TypInfo.otSLong, l_Size);
    l_Formato := Self.Formato;
    TROSerializer(ASerializer).WriteAnsiString('Formato', l_Formato);
    l_Tipo := Self.Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', TypInfo.otSLong, l_Tipo);
  end
  else begin
    l_Formato := Self.Formato;
    TROSerializer(ASerializer).WriteAnsiString('Formato', l_Formato);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Size := Self.Size;
    TROSerializer(ASerializer).WriteInteger('Size', TypInfo.otSLong, l_Size);
    l_Tipo := Self.Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', TypInfo.otSLong, l_Tipo);
  end;
end;

{ TCampoCollection }
constructor TCampoCollection.Create;
begin
  inherited Create(TCampo);
end;

constructor TCampoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TCampoCollection.Add: TCampo;
begin
  Result := TCampo(inherited Add);
end;

function TCampoCollection.GetItems(aIndex: Integer): TCampo;
begin
  Result := TCampo(inherited Items[aIndex]);
end;

procedure TCampoCollection.LoadFromArray(anArray: ACampos);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TCampoCollection.SaveToArray(anArray: ACampos);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TCampo(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TCampoCollection.SetItems(aIndex: Integer; const Value: TCampo);
begin
  TCampo(inherited Items[aIndex]).Assign(Value);
end;

{ TExporta }

procedure TExporta.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TExporta;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TExporta) then begin
    lSource := LibraryIngresos_Intf.TExporta(iSource);

    Self.Nombre := lSource.Nombre;
    if System.Assigned(lSource.fCampos) then
      Self.Campos.Assign(lSource.fCampos)
    else
      SysUtils.FreeAndNil(fCampos);
    if System.Assigned(lSource.fPasos) then
      Self.Pasos.Assign(lSource.fPasos)
    else
      SysUtils.FreeAndNil(fPasos);
    Self.Template := lSource.Template;
    Self.ScriptExporta := lSource.ScriptExporta;
    Self.ScriptDatos := lSource.ScriptDatos;
    Self.Parametros := lSource.Parametros;
  end;
end;

function TExporta.GetCampos: ACampos;
begin
  if (fCampos = nil) then fCampos := ACampos.Create();
  Result := fCampos;
end;

function TExporta.GetPasos: APasos;
begin
  if (fPasos = nil) then fPasos := APasos.Create();
  Result := fPasos;
end;

procedure TExporta.ReadComplex(ASerializer: TObject);
var
  l_Campos: ACampos;
  l_Nombre: AnsiString;
  l_Parametros: AnsiString;
  l_Pasos: APasos;
  l_ScriptDatos: AnsiString;
  l_ScriptExporta: AnsiString;
  l_Template: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_Campos := int_Campos;
    try
      TROSerializer(ASerializer).ReadArray('Campos', ACampos, l_Campos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Campos']));
    end;
    if int_Campos <> l_Campos then Self.Campos.Free;
    Self.Campos := l_Campos;
    l_Pasos := int_Pasos;
    try
      TROSerializer(ASerializer).ReadArray('Pasos', APasos, l_Pasos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Pasos']));
    end;
    if int_Pasos <> l_Pasos then Self.Pasos.Free;
    Self.Pasos := l_Pasos;
    l_Template := Self.Template;
    try
      TROSerializer(ASerializer).ReadAnsiString('Template', l_Template);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Template']));
    end;
    Self.Template := l_Template;
    l_ScriptExporta := Self.ScriptExporta;
    try
      TROSerializer(ASerializer).ReadAnsiString('ScriptExporta', l_ScriptExporta);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ScriptExporta']));
    end;
    Self.ScriptExporta := l_ScriptExporta;
    l_ScriptDatos := Self.ScriptDatos;
    try
      TROSerializer(ASerializer).ReadAnsiString('ScriptDatos', l_ScriptDatos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ScriptDatos']));
    end;
    Self.ScriptDatos := l_ScriptDatos;
    l_Parametros := Self.Parametros;
    try
      TROSerializer(ASerializer).ReadAnsiString('Parametros', l_Parametros);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Parametros']));
    end;
    Self.Parametros := l_Parametros;
  end
  else begin
    l_Campos := int_Campos;
    try
      TROSerializer(ASerializer).ReadArray('Campos', ACampos, l_Campos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Campos']));
    end;
    if int_Campos <> l_Campos then Campos.Free;
    Self.Campos := l_Campos;
    l_Nombre := Self.Nombre;
    try
      TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Nombre']));
    end;
    Self.Nombre := l_Nombre;
    l_Parametros := Self.Parametros;
    try
      TROSerializer(ASerializer).ReadAnsiString('Parametros', l_Parametros);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Parametros']));
    end;
    Self.Parametros := l_Parametros;
    l_Pasos := int_Pasos;
    try
      TROSerializer(ASerializer).ReadArray('Pasos', APasos, l_Pasos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Pasos']));
    end;
    if int_Pasos <> l_Pasos then Pasos.Free;
    Self.Pasos := l_Pasos;
    l_ScriptDatos := Self.ScriptDatos;
    try
      TROSerializer(ASerializer).ReadAnsiString('ScriptDatos', l_ScriptDatos);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ScriptDatos']));
    end;
    Self.ScriptDatos := l_ScriptDatos;
    l_ScriptExporta := Self.ScriptExporta;
    try
      TROSerializer(ASerializer).ReadAnsiString('ScriptExporta', l_ScriptExporta);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ScriptExporta']));
    end;
    Self.ScriptExporta := l_ScriptExporta;
    l_Template := Self.Template;
    try
      TROSerializer(ASerializer).ReadAnsiString('Template', l_Template);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Template']));
    end;
    Self.Template := l_Template;
  end;
end;

procedure TExporta.WriteComplex(ASerializer: TObject);
var
  l_Campos: ACampos;
  l_Nombre: AnsiString;
  l_Parametros: AnsiString;
  l_Pasos: APasos;
  l_ScriptDatos: AnsiString;
  l_ScriptExporta: AnsiString;
  l_Template: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TExporta);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Campos := int_Campos;
    TROSerializer(ASerializer).WriteArray('Campos', l_Campos, ACampos);
    l_Pasos := int_Pasos;
    TROSerializer(ASerializer).WriteArray('Pasos', l_Pasos, APasos);
    l_Template := Self.Template;
    TROSerializer(ASerializer).WriteAnsiString('Template', l_Template);
    l_ScriptExporta := Self.ScriptExporta;
    TROSerializer(ASerializer).WriteAnsiString('ScriptExporta', l_ScriptExporta);
    l_ScriptDatos := Self.ScriptDatos;
    TROSerializer(ASerializer).WriteAnsiString('ScriptDatos', l_ScriptDatos);
    l_Parametros := Self.Parametros;
    TROSerializer(ASerializer).WriteAnsiString('Parametros', l_Parametros);
  end
  else begin
    l_Campos := int_Campos;
    TROSerializer(ASerializer).WriteArray('Campos', l_Campos, ACampos);
    l_Nombre := Self.Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Parametros := Self.Parametros;
    TROSerializer(ASerializer).WriteAnsiString('Parametros', l_Parametros);
    l_Pasos := int_Pasos;
    TROSerializer(ASerializer).WriteArray('Pasos', l_Pasos, APasos);
    l_ScriptDatos := Self.ScriptDatos;
    TROSerializer(ASerializer).WriteAnsiString('ScriptDatos', l_ScriptDatos);
    l_ScriptExporta := Self.ScriptExporta;
    TROSerializer(ASerializer).WriteAnsiString('ScriptExporta', l_ScriptExporta);
    l_Template := Self.Template;
    TROSerializer(ASerializer).WriteAnsiString('Template', l_Template);
  end;
end;

{ TExportaCollection }
constructor TExportaCollection.Create;
begin
  inherited Create(TExporta);
end;

constructor TExportaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TExportaCollection.Add: TExporta;
begin
  Result := TExporta(inherited Add);
end;

function TExportaCollection.GetItems(aIndex: Integer): TExporta;
begin
  Result := TExporta(inherited Items[aIndex]);
end;

procedure TExportaCollection.SetItems(aIndex: Integer; const Value: TExporta);
begin
  TExporta(inherited Items[aIndex]).Assign(Value);
end;

{ TParametrosExporta }

procedure TParametrosExporta.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TParametrosExporta;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TParametrosExporta) then begin
    lSource := LibraryIngresos_Intf.TParametrosExporta(iSource);

    Self.Poliza := lSource.Poliza;
    Self.EstacionIni := lSource.EstacionIni;
    Self.EstacionFin := lSource.EstacionFin;
    Self.TurnoIni := lSource.TurnoIni;
    Self.TurnoFin := lSource.TurnoFin;
    Self.FechaIni := lSource.FechaIni;
    Self.FechaFin := lSource.FechaFin;
  end;
end;

procedure TParametrosExporta.ReadComplex(ASerializer: TObject);
var
  l_EstacionFin: Integer;
  l_EstacionIni: Integer;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_Poliza: Integer;
  l_TurnoFin: Integer;
  l_TurnoIni: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Poliza := Self.Poliza;
    try
      TROSerializer(ASerializer).ReadInteger('Poliza', TypInfo.otSLong, l_Poliza);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Poliza']));
    end;
    Self.Poliza := l_Poliza;
    l_EstacionIni := Self.EstacionIni;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionIni', TypInfo.otSLong, l_EstacionIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionIni']));
    end;
    Self.EstacionIni := l_EstacionIni;
    l_EstacionFin := Self.EstacionFin;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionFin', TypInfo.otSLong, l_EstacionFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionFin']));
    end;
    Self.EstacionFin := l_EstacionFin;
    l_TurnoIni := Self.TurnoIni;
    try
      TROSerializer(ASerializer).ReadInteger('TurnoIni', TypInfo.otSLong, l_TurnoIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TurnoIni']));
    end;
    Self.TurnoIni := l_TurnoIni;
    l_TurnoFin := Self.TurnoFin;
    try
      TROSerializer(ASerializer).ReadInteger('TurnoFin', TypInfo.otSLong, l_TurnoFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TurnoFin']));
    end;
    Self.TurnoFin := l_TurnoFin;
    l_FechaIni := Self.FechaIni;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaIni']));
    end;
    Self.FechaIni := l_FechaIni;
    l_FechaFin := Self.FechaFin;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaFin']));
    end;
    Self.FechaFin := l_FechaFin;
  end
  else begin
    l_EstacionFin := Self.EstacionFin;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionFin', TypInfo.otSLong, l_EstacionFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionFin']));
    end;
    Self.EstacionFin := l_EstacionFin;
    l_EstacionIni := Self.EstacionIni;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionIni', TypInfo.otSLong, l_EstacionIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionIni']));
    end;
    Self.EstacionIni := l_EstacionIni;
    l_FechaFin := Self.FechaFin;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaFin']));
    end;
    Self.FechaFin := l_FechaFin;
    l_FechaIni := Self.FechaIni;
    try
      TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FechaIni']));
    end;
    Self.FechaIni := l_FechaIni;
    l_Poliza := Self.Poliza;
    try
      TROSerializer(ASerializer).ReadInteger('Poliza', TypInfo.otSLong, l_Poliza);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Poliza']));
    end;
    Self.Poliza := l_Poliza;
    l_TurnoFin := Self.TurnoFin;
    try
      TROSerializer(ASerializer).ReadInteger('TurnoFin', TypInfo.otSLong, l_TurnoFin);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TurnoFin']));
    end;
    Self.TurnoFin := l_TurnoFin;
    l_TurnoIni := Self.TurnoIni;
    try
      TROSerializer(ASerializer).ReadInteger('TurnoIni', TypInfo.otSLong, l_TurnoIni);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'TurnoIni']));
    end;
    Self.TurnoIni := l_TurnoIni;
  end;
end;

procedure TParametrosExporta.WriteComplex(ASerializer: TObject);
var
  l_EstacionFin: Integer;
  l_EstacionIni: Integer;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_Poliza: Integer;
  l_TurnoFin: Integer;
  l_TurnoIni: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TParametrosExporta);
    l_Poliza := Self.Poliza;
    TROSerializer(ASerializer).WriteInteger('Poliza', TypInfo.otSLong, l_Poliza);
    l_EstacionIni := Self.EstacionIni;
    TROSerializer(ASerializer).WriteInteger('EstacionIni', TypInfo.otSLong, l_EstacionIni);
    l_EstacionFin := Self.EstacionFin;
    TROSerializer(ASerializer).WriteInteger('EstacionFin', TypInfo.otSLong, l_EstacionFin);
    l_TurnoIni := Self.TurnoIni;
    TROSerializer(ASerializer).WriteInteger('TurnoIni', TypInfo.otSLong, l_TurnoIni);
    l_TurnoFin := Self.TurnoFin;
    TROSerializer(ASerializer).WriteInteger('TurnoFin', TypInfo.otSLong, l_TurnoFin);
    l_FechaIni := Self.FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_FechaFin := Self.FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
  end
  else begin
    l_EstacionFin := Self.EstacionFin;
    TROSerializer(ASerializer).WriteInteger('EstacionFin', TypInfo.otSLong, l_EstacionFin);
    l_EstacionIni := Self.EstacionIni;
    TROSerializer(ASerializer).WriteInteger('EstacionIni', TypInfo.otSLong, l_EstacionIni);
    l_FechaFin := Self.FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_FechaIni := Self.FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_Poliza := Self.Poliza;
    TROSerializer(ASerializer).WriteInteger('Poliza', TypInfo.otSLong, l_Poliza);
    l_TurnoFin := Self.TurnoFin;
    TROSerializer(ASerializer).WriteInteger('TurnoFin', TypInfo.otSLong, l_TurnoFin);
    l_TurnoIni := Self.TurnoIni;
    TROSerializer(ASerializer).WriteInteger('TurnoIni', TypInfo.otSLong, l_TurnoIni);
  end;
end;

{ TParametrosExportaCollection }
constructor TParametrosExportaCollection.Create;
begin
  inherited Create(TParametrosExporta);
end;

constructor TParametrosExportaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TParametrosExportaCollection.Add: TParametrosExporta;
begin
  Result := TParametrosExporta(inherited Add);
end;

function TParametrosExportaCollection.GetItems(aIndex: Integer): TParametrosExporta;
begin
  Result := TParametrosExporta(inherited Items[aIndex]);
end;

procedure TParametrosExportaCollection.SetItems(aIndex: Integer; const Value: TParametrosExporta);
begin
  TParametrosExporta(inherited Items[aIndex]).Assign(Value);
end;

{ TPasos }

procedure TPasos.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TPasos;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TPasos) then begin
    lSource := LibraryIngresos_Intf.TPasos(iSource);

    if System.Assigned(lSource.fServer) then
      Self.Server.Assign(lSource.fServer)
    else
      SysUtils.FreeAndNil(fServer);
    Self.SQL := lSource.SQL;
  end;
end;

function TPasos.GetServer: TServer;
begin
  if (fServer = nil) then fServer := TServer.Create();
  Result := fServer;
end;

procedure TPasos.ReadComplex(ASerializer: TObject);
var
  l_Server: TServer;
  l_SQL: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Server := int_Server;
    try
      TROSerializer(ASerializer).ReadStruct('Server', TServer, l_Server);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Server']));
    end;
    if int_Server <> l_Server then Self.Server.Free;
    Self.Server := l_Server;
    l_SQL := Self.SQL;
    try
      TROSerializer(ASerializer).ReadAnsiString('SQL', l_SQL);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SQL']));
    end;
    Self.SQL := l_SQL;
  end
  else begin
    l_Server := int_Server;
    try
      TROSerializer(ASerializer).ReadStruct('Server', TServer, l_Server);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Server']));
    end;
    if int_Server <> l_Server then Server.Free;
    Self.Server := l_Server;
    l_SQL := Self.SQL;
    try
      TROSerializer(ASerializer).ReadAnsiString('SQL', l_SQL);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'SQL']));
    end;
    Self.SQL := l_SQL;
  end;
end;

procedure TPasos.WriteComplex(ASerializer: TObject);
var
  l_Server: TServer;
  l_SQL: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TPasos);
    l_Server := int_Server;
    TROSerializer(ASerializer).WriteStruct('Server', l_Server, TServer);
    l_SQL := Self.SQL;
    TROSerializer(ASerializer).WriteAnsiString('SQL', l_SQL);
  end
  else begin
    l_Server := int_Server;
    TROSerializer(ASerializer).WriteStruct('Server', l_Server, TServer);
    l_SQL := Self.SQL;
    TROSerializer(ASerializer).WriteAnsiString('SQL', l_SQL);
  end;
end;

{ TPasosCollection }
constructor TPasosCollection.Create;
begin
  inherited Create(TPasos);
end;

constructor TPasosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TPasosCollection.Add: TPasos;
begin
  Result := TPasos(inherited Add);
end;

function TPasosCollection.GetItems(aIndex: Integer): TPasos;
begin
  Result := TPasos(inherited Items[aIndex]);
end;

procedure TPasosCollection.LoadFromArray(anArray: APasos);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TPasosCollection.SaveToArray(anArray: APasos);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TPasos(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TPasosCollection.SetItems(aIndex: Integer; const Value: TPasos);
begin
  TPasos(inherited Items[aIndex]).Assign(Value);
end;

{ TServer }

procedure TServer.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TServer;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TServer) then begin
    lSource := LibraryIngresos_Intf.TServer(iSource);

    Self.ServidorID := lSource.ServidorID;
    Self.Host := lSource.Host;
    if System.Assigned(lSource.fEstaciones) then
      Self.Estaciones.Assign(lSource.fEstaciones)
    else
      SysUtils.FreeAndNil(fEstaciones);
  end;
end;

function TServer.GetEstaciones: AEstaciones;
begin
  if (fEstaciones = nil) then fEstaciones := AEstaciones.Create();
  Result := fEstaciones;
end;

procedure TServer.ReadComplex(ASerializer: TObject);
var
  l_Estaciones: AEstaciones;
  l_Host: AnsiString;
  l_ServidorID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ServidorID := Self.ServidorID;
    try
      TROSerializer(ASerializer).ReadInteger('ServidorID', TypInfo.otSLong, l_ServidorID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ServidorID']));
    end;
    Self.ServidorID := l_ServidorID;
    l_Host := Self.Host;
    try
      TROSerializer(ASerializer).ReadAnsiString('Host', l_Host);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Host']));
    end;
    Self.Host := l_Host;
    l_Estaciones := int_Estaciones;
    try
      TROSerializer(ASerializer).ReadArray('Estaciones', AEstaciones, l_Estaciones);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Estaciones']));
    end;
    if int_Estaciones <> l_Estaciones then Self.Estaciones.Free;
    Self.Estaciones := l_Estaciones;
  end
  else begin
    l_Estaciones := int_Estaciones;
    try
      TROSerializer(ASerializer).ReadArray('Estaciones', AEstaciones, l_Estaciones);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Estaciones']));
    end;
    if int_Estaciones <> l_Estaciones then Estaciones.Free;
    Self.Estaciones := l_Estaciones;
    l_Host := Self.Host;
    try
      TROSerializer(ASerializer).ReadAnsiString('Host', l_Host);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Host']));
    end;
    Self.Host := l_Host;
    l_ServidorID := Self.ServidorID;
    try
      TROSerializer(ASerializer).ReadInteger('ServidorID', TypInfo.otSLong, l_ServidorID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ServidorID']));
    end;
    Self.ServidorID := l_ServidorID;
  end;
end;

procedure TServer.WriteComplex(ASerializer: TObject);
var
  l_Estaciones: AEstaciones;
  l_Host: AnsiString;
  l_ServidorID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TServer);
    l_ServidorID := Self.ServidorID;
    TROSerializer(ASerializer).WriteInteger('ServidorID', TypInfo.otSLong, l_ServidorID);
    l_Host := Self.Host;
    TROSerializer(ASerializer).WriteAnsiString('Host', l_Host);
    l_Estaciones := int_Estaciones;
    TROSerializer(ASerializer).WriteArray('Estaciones', l_Estaciones, AEstaciones);
  end
  else begin
    l_Estaciones := int_Estaciones;
    TROSerializer(ASerializer).WriteArray('Estaciones', l_Estaciones, AEstaciones);
    l_Host := Self.Host;
    TROSerializer(ASerializer).WriteAnsiString('Host', l_Host);
    l_ServidorID := Self.ServidorID;
    TROSerializer(ASerializer).WriteInteger('ServidorID', TypInfo.otSLong, l_ServidorID);
  end;
end;

{ TServerCollection }
constructor TServerCollection.Create;
begin
  inherited Create(TServer);
end;

constructor TServerCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TServerCollection.Add: TServer;
begin
  Result := TServer(inherited Add);
end;

function TServerCollection.GetItems(aIndex: Integer): TServer;
begin
  Result := TServer(inherited Items[aIndex]);
end;

procedure TServerCollection.SetItems(aIndex: Integer; const Value: TServer);
begin
  TServer(inherited Items[aIndex]).Assign(Value);
end;

{ TEstacion }

procedure TEstacion.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TEstacion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TEstacion) then begin
    lSource := LibraryIngresos_Intf.TEstacion(iSource);

    Self.EstacionID := lSource.EstacionID;
    Self.Host := lSource.Host;
  end;
end;

procedure TEstacion.ReadComplex(ASerializer: TObject);
var
  l_EstacionID: Integer;
  l_Host: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_Host := Self.Host;
    try
      TROSerializer(ASerializer).ReadAnsiString('Host', l_Host);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Host']));
    end;
    Self.Host := l_Host;
  end
  else begin
    l_EstacionID := Self.EstacionID;
    try
      TROSerializer(ASerializer).ReadInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'EstacionID']));
    end;
    Self.EstacionID := l_EstacionID;
    l_Host := Self.Host;
    try
      TROSerializer(ASerializer).ReadAnsiString('Host', l_Host);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'Host']));
    end;
    Self.Host := l_Host;
  end;
end;

procedure TEstacion.WriteComplex(ASerializer: TObject);
var
  l_EstacionID: Integer;
  l_Host: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TEstacion);
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_Host := Self.Host;
    TROSerializer(ASerializer).WriteAnsiString('Host', l_Host);
  end
  else begin
    l_EstacionID := Self.EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', TypInfo.otSLong, l_EstacionID);
    l_Host := Self.Host;
    TROSerializer(ASerializer).WriteAnsiString('Host', l_Host);
  end;
end;

{ TEstacionCollection }
constructor TEstacionCollection.Create;
begin
  inherited Create(TEstacion);
end;

constructor TEstacionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TEstacionCollection.Add: TEstacion;
begin
  Result := TEstacion(inherited Add);
end;

function TEstacionCollection.GetItems(aIndex: Integer): TEstacion;
begin
  Result := TEstacion(inherited Items[aIndex]);
end;

procedure TEstacionCollection.LoadFromArray(anArray: AEstaciones);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TEstacionCollection.SaveToArray(anArray: AEstaciones);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TEstacion(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TEstacionCollection.SetItems(aIndex: Integer; const Value: TEstacion);
begin
  TEstacion(inherited Items[aIndex]).Assign(Value);
end;

{ TTurnoxFecha }

procedure TTurnoxFecha.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TTurnoxFecha;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TTurnoxFecha) then begin
    lSource := LibraryIngresos_Intf.TTurnoxFecha(iSource);

    Self.IDTURNO := lSource.IDTURNO;
    Self.FECHA := lSource.FECHA;
    Self.IDHORARIO := lSource.IDHORARIO;
  end;
end;

procedure TTurnoxFecha.ReadComplex(ASerializer: TObject);
var
  l_FECHA: DateTime;
  l_IDHORARIO: Integer;
  l_IDTURNO: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_IDTURNO := Self.IDTURNO;
    try
      TROSerializer(ASerializer).ReadInteger('IDTURNO', TypInfo.otSLong, l_IDTURNO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IDTURNO']));
    end;
    Self.IDTURNO := l_IDTURNO;
    l_FECHA := Self.FECHA;
    try
      TROSerializer(ASerializer).ReadDateTime('FECHA', l_FECHA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FECHA']));
    end;
    Self.FECHA := l_FECHA;
    l_IDHORARIO := Self.IDHORARIO;
    try
      TROSerializer(ASerializer).ReadInteger('IDHORARIO', TypInfo.otSLong, l_IDHORARIO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IDHORARIO']));
    end;
    Self.IDHORARIO := l_IDHORARIO;
  end
  else begin
    l_FECHA := Self.FECHA;
    try
      TROSerializer(ASerializer).ReadDateTime('FECHA', l_FECHA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'FECHA']));
    end;
    Self.FECHA := l_FECHA;
    l_IDHORARIO := Self.IDHORARIO;
    try
      TROSerializer(ASerializer).ReadInteger('IDHORARIO', TypInfo.otSLong, l_IDHORARIO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IDHORARIO']));
    end;
    Self.IDHORARIO := l_IDHORARIO;
    l_IDTURNO := Self.IDTURNO;
    try
      TROSerializer(ASerializer).ReadInteger('IDTURNO', TypInfo.otSLong, l_IDTURNO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'IDTURNO']));
    end;
    Self.IDTURNO := l_IDTURNO;
  end;
end;

procedure TTurnoxFecha.WriteComplex(ASerializer: TObject);
var
  l_FECHA: DateTime;
  l_IDHORARIO: Integer;
  l_IDTURNO: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TTurnoxFecha);
    l_IDTURNO := Self.IDTURNO;
    TROSerializer(ASerializer).WriteInteger('IDTURNO', TypInfo.otSLong, l_IDTURNO);
    l_FECHA := Self.FECHA;
    TROSerializer(ASerializer).WriteDateTime('FECHA', l_FECHA);
    l_IDHORARIO := Self.IDHORARIO;
    TROSerializer(ASerializer).WriteInteger('IDHORARIO', TypInfo.otSLong, l_IDHORARIO);
  end
  else begin
    l_FECHA := Self.FECHA;
    TROSerializer(ASerializer).WriteDateTime('FECHA', l_FECHA);
    l_IDHORARIO := Self.IDHORARIO;
    TROSerializer(ASerializer).WriteInteger('IDHORARIO', TypInfo.otSLong, l_IDHORARIO);
    l_IDTURNO := Self.IDTURNO;
    TROSerializer(ASerializer).WriteInteger('IDTURNO', TypInfo.otSLong, l_IDTURNO);
  end;
end;

{ TTurnoxFechaCollection }
constructor TTurnoxFechaCollection.Create;
begin
  inherited Create(TTurnoxFecha);
end;

constructor TTurnoxFechaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TTurnoxFechaCollection.Add: TTurnoxFecha;
begin
  Result := TTurnoxFecha(inherited Add);
end;

function TTurnoxFechaCollection.GetItems(aIndex: Integer): TTurnoxFecha;
begin
  Result := TTurnoxFecha(inherited Items[aIndex]);
end;

procedure TTurnoxFechaCollection.LoadFromArray(anArray: ATTurnoxFecha);
var
  i : Integer;
begin
  Self.Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure TTurnoxFechaCollection.SaveToArray(anArray: ATTurnoxFecha);
var
  i : Integer;
begin
  anArray.Clear;
  for i := 0 to (Self.Count-1) do begin
    if System.Assigned(Self.Items[i]) then
      anArray.Add(TTurnoxFecha(Self.Items[i].Clone))
    else
      anArray.Add(nil);
  end;
end;

procedure TTurnoxFechaCollection.SetItems(aIndex: Integer; const Value: TTurnoxFecha);
begin
  TTurnoxFecha(inherited Items[aIndex]).Assign(Value);
end;

{ TEmisor }

procedure TEmisor.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TEmisor;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TEmisor) then begin
    lSource := LibraryIngresos_Intf.TEmisor(iSource);

    Self.RFC := lSource.RFC;
    Self.NOMBRE := lSource.NOMBRE;
    Self.CALLE := lSource.CALLE;
    Self.NOEXTERIOR := lSource.NOEXTERIOR;
    Self.NOINTERIOR := lSource.NOINTERIOR;
    Self.CODIGOPOSTAL := lSource.CODIGOPOSTAL;
    Self.COLONIA := lSource.COLONIA;
    Self.MUNICIPIO := lSource.MUNICIPIO;
    Self.ESTADO := lSource.ESTADO;
    Self.PAIS := lSource.PAIS;
    Self.LOCALIDAD := lSource.LOCALIDAD;
    Self.REGIMENFISCAL := lSource.REGIMENFISCAL;
    Self.METODOPAGO := lSource.METODOPAGO;
    Self.ARCHIVOCERTIFICADO := lSource.ARCHIVOCERTIFICADO;
    Self.ARCHIVOLLAVEPRIVADA := lSource.ARCHIVOLLAVEPRIVADA;
    Self.CLAVELLAVEPRIVADA := lSource.CLAVELLAVEPRIVADA;
  end;
end;

procedure TEmisor.ReadComplex(ASerializer: TObject);
var
  l_ARCHIVOCERTIFICADO: AnsiString;
  l_ARCHIVOLLAVEPRIVADA: AnsiString;
  l_CALLE: AnsiString;
  l_CLAVELLAVEPRIVADA: AnsiString;
  l_CODIGOPOSTAL: AnsiString;
  l_COLONIA: AnsiString;
  l_ESTADO: AnsiString;
  l_LOCALIDAD: AnsiString;
  l_METODOPAGO: AnsiString;
  l_MUNICIPIO: AnsiString;
  l_NOEXTERIOR: AnsiString;
  l_NOINTERIOR: AnsiString;
  l_NOMBRE: AnsiString;
  l_PAIS: AnsiString;
  l_REGIMENFISCAL: AnsiString;
  l_RFC: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_RFC := Self.RFC;
    try
      TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'RFC']));
    end;
    Self.RFC := l_RFC;
    l_NOMBRE := Self.NOMBRE;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOMBRE', l_NOMBRE);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOMBRE']));
    end;
    Self.NOMBRE := l_NOMBRE;
    l_CALLE := Self.CALLE;
    try
      TROSerializer(ASerializer).ReadAnsiString('CALLE', l_CALLE);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CALLE']));
    end;
    Self.CALLE := l_CALLE;
    l_NOEXTERIOR := Self.NOEXTERIOR;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOEXTERIOR', l_NOEXTERIOR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOEXTERIOR']));
    end;
    Self.NOEXTERIOR := l_NOEXTERIOR;
    l_NOINTERIOR := Self.NOINTERIOR;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOINTERIOR', l_NOINTERIOR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOINTERIOR']));
    end;
    Self.NOINTERIOR := l_NOINTERIOR;
    l_CODIGOPOSTAL := Self.CODIGOPOSTAL;
    try
      TROSerializer(ASerializer).ReadAnsiString('CODIGOPOSTAL', l_CODIGOPOSTAL);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CODIGOPOSTAL']));
    end;
    Self.CODIGOPOSTAL := l_CODIGOPOSTAL;
    l_COLONIA := Self.COLONIA;
    try
      TROSerializer(ASerializer).ReadAnsiString('COLONIA', l_COLONIA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'COLONIA']));
    end;
    Self.COLONIA := l_COLONIA;
    l_MUNICIPIO := Self.MUNICIPIO;
    try
      TROSerializer(ASerializer).ReadAnsiString('MUNICIPIO', l_MUNICIPIO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MUNICIPIO']));
    end;
    Self.MUNICIPIO := l_MUNICIPIO;
    l_ESTADO := Self.ESTADO;
    try
      TROSerializer(ASerializer).ReadAnsiString('ESTADO', l_ESTADO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ESTADO']));
    end;
    Self.ESTADO := l_ESTADO;
    l_PAIS := Self.PAIS;
    try
      TROSerializer(ASerializer).ReadAnsiString('PAIS', l_PAIS);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PAIS']));
    end;
    Self.PAIS := l_PAIS;
    l_LOCALIDAD := Self.LOCALIDAD;
    try
      TROSerializer(ASerializer).ReadAnsiString('LOCALIDAD', l_LOCALIDAD);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LOCALIDAD']));
    end;
    Self.LOCALIDAD := l_LOCALIDAD;
    l_REGIMENFISCAL := Self.REGIMENFISCAL;
    try
      TROSerializer(ASerializer).ReadAnsiString('REGIMENFISCAL', l_REGIMENFISCAL);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'REGIMENFISCAL']));
    end;
    Self.REGIMENFISCAL := l_REGIMENFISCAL;
    l_METODOPAGO := Self.METODOPAGO;
    try
      TROSerializer(ASerializer).ReadAnsiString('METODOPAGO', l_METODOPAGO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'METODOPAGO']));
    end;
    Self.METODOPAGO := l_METODOPAGO;
    l_ARCHIVOCERTIFICADO := Self.ARCHIVOCERTIFICADO;
    try
      TROSerializer(ASerializer).ReadAnsiString('ARCHIVOCERTIFICADO', l_ARCHIVOCERTIFICADO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ARCHIVOCERTIFICADO']));
    end;
    Self.ARCHIVOCERTIFICADO := l_ARCHIVOCERTIFICADO;
    l_ARCHIVOLLAVEPRIVADA := Self.ARCHIVOLLAVEPRIVADA;
    try
      TROSerializer(ASerializer).ReadAnsiString('ARCHIVOLLAVEPRIVADA', l_ARCHIVOLLAVEPRIVADA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ARCHIVOLLAVEPRIVADA']));
    end;
    Self.ARCHIVOLLAVEPRIVADA := l_ARCHIVOLLAVEPRIVADA;
    l_CLAVELLAVEPRIVADA := Self.CLAVELLAVEPRIVADA;
    try
      TROSerializer(ASerializer).ReadAnsiString('CLAVELLAVEPRIVADA', l_CLAVELLAVEPRIVADA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CLAVELLAVEPRIVADA']));
    end;
    Self.CLAVELLAVEPRIVADA := l_CLAVELLAVEPRIVADA;
  end
  else begin
    l_ARCHIVOCERTIFICADO := Self.ARCHIVOCERTIFICADO;
    try
      TROSerializer(ASerializer).ReadAnsiString('ARCHIVOCERTIFICADO', l_ARCHIVOCERTIFICADO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ARCHIVOCERTIFICADO']));
    end;
    Self.ARCHIVOCERTIFICADO := l_ARCHIVOCERTIFICADO;
    l_ARCHIVOLLAVEPRIVADA := Self.ARCHIVOLLAVEPRIVADA;
    try
      TROSerializer(ASerializer).ReadAnsiString('ARCHIVOLLAVEPRIVADA', l_ARCHIVOLLAVEPRIVADA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ARCHIVOLLAVEPRIVADA']));
    end;
    Self.ARCHIVOLLAVEPRIVADA := l_ARCHIVOLLAVEPRIVADA;
    l_CALLE := Self.CALLE;
    try
      TROSerializer(ASerializer).ReadAnsiString('CALLE', l_CALLE);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CALLE']));
    end;
    Self.CALLE := l_CALLE;
    l_CLAVELLAVEPRIVADA := Self.CLAVELLAVEPRIVADA;
    try
      TROSerializer(ASerializer).ReadAnsiString('CLAVELLAVEPRIVADA', l_CLAVELLAVEPRIVADA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CLAVELLAVEPRIVADA']));
    end;
    Self.CLAVELLAVEPRIVADA := l_CLAVELLAVEPRIVADA;
    l_CODIGOPOSTAL := Self.CODIGOPOSTAL;
    try
      TROSerializer(ASerializer).ReadAnsiString('CODIGOPOSTAL', l_CODIGOPOSTAL);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CODIGOPOSTAL']));
    end;
    Self.CODIGOPOSTAL := l_CODIGOPOSTAL;
    l_COLONIA := Self.COLONIA;
    try
      TROSerializer(ASerializer).ReadAnsiString('COLONIA', l_COLONIA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'COLONIA']));
    end;
    Self.COLONIA := l_COLONIA;
    l_ESTADO := Self.ESTADO;
    try
      TROSerializer(ASerializer).ReadAnsiString('ESTADO', l_ESTADO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ESTADO']));
    end;
    Self.ESTADO := l_ESTADO;
    l_LOCALIDAD := Self.LOCALIDAD;
    try
      TROSerializer(ASerializer).ReadAnsiString('LOCALIDAD', l_LOCALIDAD);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LOCALIDAD']));
    end;
    Self.LOCALIDAD := l_LOCALIDAD;
    l_METODOPAGO := Self.METODOPAGO;
    try
      TROSerializer(ASerializer).ReadAnsiString('METODOPAGO', l_METODOPAGO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'METODOPAGO']));
    end;
    Self.METODOPAGO := l_METODOPAGO;
    l_MUNICIPIO := Self.MUNICIPIO;
    try
      TROSerializer(ASerializer).ReadAnsiString('MUNICIPIO', l_MUNICIPIO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MUNICIPIO']));
    end;
    Self.MUNICIPIO := l_MUNICIPIO;
    l_NOEXTERIOR := Self.NOEXTERIOR;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOEXTERIOR', l_NOEXTERIOR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOEXTERIOR']));
    end;
    Self.NOEXTERIOR := l_NOEXTERIOR;
    l_NOINTERIOR := Self.NOINTERIOR;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOINTERIOR', l_NOINTERIOR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOINTERIOR']));
    end;
    Self.NOINTERIOR := l_NOINTERIOR;
    l_NOMBRE := Self.NOMBRE;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOMBRE', l_NOMBRE);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOMBRE']));
    end;
    Self.NOMBRE := l_NOMBRE;
    l_PAIS := Self.PAIS;
    try
      TROSerializer(ASerializer).ReadAnsiString('PAIS', l_PAIS);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PAIS']));
    end;
    Self.PAIS := l_PAIS;
    l_REGIMENFISCAL := Self.REGIMENFISCAL;
    try
      TROSerializer(ASerializer).ReadAnsiString('REGIMENFISCAL', l_REGIMENFISCAL);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'REGIMENFISCAL']));
    end;
    Self.REGIMENFISCAL := l_REGIMENFISCAL;
    l_RFC := Self.RFC;
    try
      TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'RFC']));
    end;
    Self.RFC := l_RFC;
  end;
end;

procedure TEmisor.WriteComplex(ASerializer: TObject);
var
  l_ARCHIVOCERTIFICADO: AnsiString;
  l_ARCHIVOLLAVEPRIVADA: AnsiString;
  l_CALLE: AnsiString;
  l_CLAVELLAVEPRIVADA: AnsiString;
  l_CODIGOPOSTAL: AnsiString;
  l_COLONIA: AnsiString;
  l_ESTADO: AnsiString;
  l_LOCALIDAD: AnsiString;
  l_METODOPAGO: AnsiString;
  l_MUNICIPIO: AnsiString;
  l_NOEXTERIOR: AnsiString;
  l_NOINTERIOR: AnsiString;
  l_NOMBRE: AnsiString;
  l_PAIS: AnsiString;
  l_REGIMENFISCAL: AnsiString;
  l_RFC: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TEmisor);
    l_RFC := Self.RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_NOMBRE := Self.NOMBRE;
    TROSerializer(ASerializer).WriteAnsiString('NOMBRE', l_NOMBRE);
    l_CALLE := Self.CALLE;
    TROSerializer(ASerializer).WriteAnsiString('CALLE', l_CALLE);
    l_NOEXTERIOR := Self.NOEXTERIOR;
    TROSerializer(ASerializer).WriteAnsiString('NOEXTERIOR', l_NOEXTERIOR);
    l_NOINTERIOR := Self.NOINTERIOR;
    TROSerializer(ASerializer).WriteAnsiString('NOINTERIOR', l_NOINTERIOR);
    l_CODIGOPOSTAL := Self.CODIGOPOSTAL;
    TROSerializer(ASerializer).WriteAnsiString('CODIGOPOSTAL', l_CODIGOPOSTAL);
    l_COLONIA := Self.COLONIA;
    TROSerializer(ASerializer).WriteAnsiString('COLONIA', l_COLONIA);
    l_MUNICIPIO := Self.MUNICIPIO;
    TROSerializer(ASerializer).WriteAnsiString('MUNICIPIO', l_MUNICIPIO);
    l_ESTADO := Self.ESTADO;
    TROSerializer(ASerializer).WriteAnsiString('ESTADO', l_ESTADO);
    l_PAIS := Self.PAIS;
    TROSerializer(ASerializer).WriteAnsiString('PAIS', l_PAIS);
    l_LOCALIDAD := Self.LOCALIDAD;
    TROSerializer(ASerializer).WriteAnsiString('LOCALIDAD', l_LOCALIDAD);
    l_REGIMENFISCAL := Self.REGIMENFISCAL;
    TROSerializer(ASerializer).WriteAnsiString('REGIMENFISCAL', l_REGIMENFISCAL);
    l_METODOPAGO := Self.METODOPAGO;
    TROSerializer(ASerializer).WriteAnsiString('METODOPAGO', l_METODOPAGO);
    l_ARCHIVOCERTIFICADO := Self.ARCHIVOCERTIFICADO;
    TROSerializer(ASerializer).WriteAnsiString('ARCHIVOCERTIFICADO', l_ARCHIVOCERTIFICADO);
    l_ARCHIVOLLAVEPRIVADA := Self.ARCHIVOLLAVEPRIVADA;
    TROSerializer(ASerializer).WriteAnsiString('ARCHIVOLLAVEPRIVADA', l_ARCHIVOLLAVEPRIVADA);
    l_CLAVELLAVEPRIVADA := Self.CLAVELLAVEPRIVADA;
    TROSerializer(ASerializer).WriteAnsiString('CLAVELLAVEPRIVADA', l_CLAVELLAVEPRIVADA);
  end
  else begin
    l_ARCHIVOCERTIFICADO := Self.ARCHIVOCERTIFICADO;
    TROSerializer(ASerializer).WriteAnsiString('ARCHIVOCERTIFICADO', l_ARCHIVOCERTIFICADO);
    l_ARCHIVOLLAVEPRIVADA := Self.ARCHIVOLLAVEPRIVADA;
    TROSerializer(ASerializer).WriteAnsiString('ARCHIVOLLAVEPRIVADA', l_ARCHIVOLLAVEPRIVADA);
    l_CALLE := Self.CALLE;
    TROSerializer(ASerializer).WriteAnsiString('CALLE', l_CALLE);
    l_CLAVELLAVEPRIVADA := Self.CLAVELLAVEPRIVADA;
    TROSerializer(ASerializer).WriteAnsiString('CLAVELLAVEPRIVADA', l_CLAVELLAVEPRIVADA);
    l_CODIGOPOSTAL := Self.CODIGOPOSTAL;
    TROSerializer(ASerializer).WriteAnsiString('CODIGOPOSTAL', l_CODIGOPOSTAL);
    l_COLONIA := Self.COLONIA;
    TROSerializer(ASerializer).WriteAnsiString('COLONIA', l_COLONIA);
    l_ESTADO := Self.ESTADO;
    TROSerializer(ASerializer).WriteAnsiString('ESTADO', l_ESTADO);
    l_LOCALIDAD := Self.LOCALIDAD;
    TROSerializer(ASerializer).WriteAnsiString('LOCALIDAD', l_LOCALIDAD);
    l_METODOPAGO := Self.METODOPAGO;
    TROSerializer(ASerializer).WriteAnsiString('METODOPAGO', l_METODOPAGO);
    l_MUNICIPIO := Self.MUNICIPIO;
    TROSerializer(ASerializer).WriteAnsiString('MUNICIPIO', l_MUNICIPIO);
    l_NOEXTERIOR := Self.NOEXTERIOR;
    TROSerializer(ASerializer).WriteAnsiString('NOEXTERIOR', l_NOEXTERIOR);
    l_NOINTERIOR := Self.NOINTERIOR;
    TROSerializer(ASerializer).WriteAnsiString('NOINTERIOR', l_NOINTERIOR);
    l_NOMBRE := Self.NOMBRE;
    TROSerializer(ASerializer).WriteAnsiString('NOMBRE', l_NOMBRE);
    l_PAIS := Self.PAIS;
    TROSerializer(ASerializer).WriteAnsiString('PAIS', l_PAIS);
    l_REGIMENFISCAL := Self.REGIMENFISCAL;
    TROSerializer(ASerializer).WriteAnsiString('REGIMENFISCAL', l_REGIMENFISCAL);
    l_RFC := Self.RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
  end;
end;

{ TEmisorCollection }
constructor TEmisorCollection.Create;
begin
  inherited Create(TEmisor);
end;

constructor TEmisorCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TEmisorCollection.Add: TEmisor;
begin
  Result := TEmisor(inherited Add);
end;

function TEmisorCollection.GetItems(aIndex: Integer): TEmisor;
begin
  Result := TEmisor(inherited Items[aIndex]);
end;

procedure TEmisorCollection.SetItems(aIndex: Integer; const Value: TEmisor);
begin
  TEmisor(inherited Items[aIndex]).Assign(Value);
end;

{ TEmisorExpedidoEn }

procedure TEmisorExpedidoEn.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TEmisorExpedidoEn;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TEmisorExpedidoEn) then begin
    lSource := LibraryIngresos_Intf.TEmisorExpedidoEn(iSource);

    Self.CALLE := lSource.CALLE;
    Self.NOEXTERIOR := lSource.NOEXTERIOR;
    Self.NOINTERIOR := lSource.NOINTERIOR;
    Self.CODIGOPOSTAL := lSource.CODIGOPOSTAL;
    Self.COLONIA := lSource.COLONIA;
    Self.MUNICIPIO := lSource.MUNICIPIO;
    Self.ESTADO := lSource.ESTADO;
    Self.PAIS := lSource.PAIS;
    Self.LOCALIDAD := lSource.LOCALIDAD;
    Self.REFERENCIA := lSource.REFERENCIA;
    Self.LUGARDEEXPEDICION := lSource.LUGARDEEXPEDICION;
    Self.NUMERODECUENTA := lSource.NUMERODECUENTA;
  end;
end;

procedure TEmisorExpedidoEn.ReadComplex(ASerializer: TObject);
var
  l_CALLE: AnsiString;
  l_CODIGOPOSTAL: AnsiString;
  l_COLONIA: AnsiString;
  l_ESTADO: AnsiString;
  l_LOCALIDAD: AnsiString;
  l_LUGARDEEXPEDICION: AnsiString;
  l_MUNICIPIO: AnsiString;
  l_NOEXTERIOR: AnsiString;
  l_NOINTERIOR: AnsiString;
  l_NUMERODECUENTA: AnsiString;
  l_PAIS: AnsiString;
  l_REFERENCIA: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_CALLE := Self.CALLE;
    try
      TROSerializer(ASerializer).ReadAnsiString('CALLE', l_CALLE);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CALLE']));
    end;
    Self.CALLE := l_CALLE;
    l_NOEXTERIOR := Self.NOEXTERIOR;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOEXTERIOR', l_NOEXTERIOR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOEXTERIOR']));
    end;
    Self.NOEXTERIOR := l_NOEXTERIOR;
    l_NOINTERIOR := Self.NOINTERIOR;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOINTERIOR', l_NOINTERIOR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOINTERIOR']));
    end;
    Self.NOINTERIOR := l_NOINTERIOR;
    l_CODIGOPOSTAL := Self.CODIGOPOSTAL;
    try
      TROSerializer(ASerializer).ReadAnsiString('CODIGOPOSTAL', l_CODIGOPOSTAL);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CODIGOPOSTAL']));
    end;
    Self.CODIGOPOSTAL := l_CODIGOPOSTAL;
    l_COLONIA := Self.COLONIA;
    try
      TROSerializer(ASerializer).ReadAnsiString('COLONIA', l_COLONIA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'COLONIA']));
    end;
    Self.COLONIA := l_COLONIA;
    l_MUNICIPIO := Self.MUNICIPIO;
    try
      TROSerializer(ASerializer).ReadAnsiString('MUNICIPIO', l_MUNICIPIO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MUNICIPIO']));
    end;
    Self.MUNICIPIO := l_MUNICIPIO;
    l_ESTADO := Self.ESTADO;
    try
      TROSerializer(ASerializer).ReadAnsiString('ESTADO', l_ESTADO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ESTADO']));
    end;
    Self.ESTADO := l_ESTADO;
    l_PAIS := Self.PAIS;
    try
      TROSerializer(ASerializer).ReadAnsiString('PAIS', l_PAIS);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PAIS']));
    end;
    Self.PAIS := l_PAIS;
    l_LOCALIDAD := Self.LOCALIDAD;
    try
      TROSerializer(ASerializer).ReadAnsiString('LOCALIDAD', l_LOCALIDAD);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LOCALIDAD']));
    end;
    Self.LOCALIDAD := l_LOCALIDAD;
    l_REFERENCIA := Self.REFERENCIA;
    try
      TROSerializer(ASerializer).ReadAnsiString('REFERENCIA', l_REFERENCIA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'REFERENCIA']));
    end;
    Self.REFERENCIA := l_REFERENCIA;
    l_LUGARDEEXPEDICION := Self.LUGARDEEXPEDICION;
    try
      TROSerializer(ASerializer).ReadAnsiString('LUGARDEEXPEDICION', l_LUGARDEEXPEDICION);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LUGARDEEXPEDICION']));
    end;
    Self.LUGARDEEXPEDICION := l_LUGARDEEXPEDICION;
    l_NUMERODECUENTA := Self.NUMERODECUENTA;
    try
      TROSerializer(ASerializer).ReadAnsiString('NUMERODECUENTA', l_NUMERODECUENTA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NUMERODECUENTA']));
    end;
    Self.NUMERODECUENTA := l_NUMERODECUENTA;
  end
  else begin
    l_CALLE := Self.CALLE;
    try
      TROSerializer(ASerializer).ReadAnsiString('CALLE', l_CALLE);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CALLE']));
    end;
    Self.CALLE := l_CALLE;
    l_CODIGOPOSTAL := Self.CODIGOPOSTAL;
    try
      TROSerializer(ASerializer).ReadAnsiString('CODIGOPOSTAL', l_CODIGOPOSTAL);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CODIGOPOSTAL']));
    end;
    Self.CODIGOPOSTAL := l_CODIGOPOSTAL;
    l_COLONIA := Self.COLONIA;
    try
      TROSerializer(ASerializer).ReadAnsiString('COLONIA', l_COLONIA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'COLONIA']));
    end;
    Self.COLONIA := l_COLONIA;
    l_ESTADO := Self.ESTADO;
    try
      TROSerializer(ASerializer).ReadAnsiString('ESTADO', l_ESTADO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ESTADO']));
    end;
    Self.ESTADO := l_ESTADO;
    l_LOCALIDAD := Self.LOCALIDAD;
    try
      TROSerializer(ASerializer).ReadAnsiString('LOCALIDAD', l_LOCALIDAD);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LOCALIDAD']));
    end;
    Self.LOCALIDAD := l_LOCALIDAD;
    l_LUGARDEEXPEDICION := Self.LUGARDEEXPEDICION;
    try
      TROSerializer(ASerializer).ReadAnsiString('LUGARDEEXPEDICION', l_LUGARDEEXPEDICION);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LUGARDEEXPEDICION']));
    end;
    Self.LUGARDEEXPEDICION := l_LUGARDEEXPEDICION;
    l_MUNICIPIO := Self.MUNICIPIO;
    try
      TROSerializer(ASerializer).ReadAnsiString('MUNICIPIO', l_MUNICIPIO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MUNICIPIO']));
    end;
    Self.MUNICIPIO := l_MUNICIPIO;
    l_NOEXTERIOR := Self.NOEXTERIOR;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOEXTERIOR', l_NOEXTERIOR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOEXTERIOR']));
    end;
    Self.NOEXTERIOR := l_NOEXTERIOR;
    l_NOINTERIOR := Self.NOINTERIOR;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOINTERIOR', l_NOINTERIOR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOINTERIOR']));
    end;
    Self.NOINTERIOR := l_NOINTERIOR;
    l_NUMERODECUENTA := Self.NUMERODECUENTA;
    try
      TROSerializer(ASerializer).ReadAnsiString('NUMERODECUENTA', l_NUMERODECUENTA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NUMERODECUENTA']));
    end;
    Self.NUMERODECUENTA := l_NUMERODECUENTA;
    l_PAIS := Self.PAIS;
    try
      TROSerializer(ASerializer).ReadAnsiString('PAIS', l_PAIS);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PAIS']));
    end;
    Self.PAIS := l_PAIS;
    l_REFERENCIA := Self.REFERENCIA;
    try
      TROSerializer(ASerializer).ReadAnsiString('REFERENCIA', l_REFERENCIA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'REFERENCIA']));
    end;
    Self.REFERENCIA := l_REFERENCIA;
  end;
end;

procedure TEmisorExpedidoEn.WriteComplex(ASerializer: TObject);
var
  l_CALLE: AnsiString;
  l_CODIGOPOSTAL: AnsiString;
  l_COLONIA: AnsiString;
  l_ESTADO: AnsiString;
  l_LOCALIDAD: AnsiString;
  l_LUGARDEEXPEDICION: AnsiString;
  l_MUNICIPIO: AnsiString;
  l_NOEXTERIOR: AnsiString;
  l_NOINTERIOR: AnsiString;
  l_NUMERODECUENTA: AnsiString;
  l_PAIS: AnsiString;
  l_REFERENCIA: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TEmisorExpedidoEn);
    l_CALLE := Self.CALLE;
    TROSerializer(ASerializer).WriteAnsiString('CALLE', l_CALLE);
    l_NOEXTERIOR := Self.NOEXTERIOR;
    TROSerializer(ASerializer).WriteAnsiString('NOEXTERIOR', l_NOEXTERIOR);
    l_NOINTERIOR := Self.NOINTERIOR;
    TROSerializer(ASerializer).WriteAnsiString('NOINTERIOR', l_NOINTERIOR);
    l_CODIGOPOSTAL := Self.CODIGOPOSTAL;
    TROSerializer(ASerializer).WriteAnsiString('CODIGOPOSTAL', l_CODIGOPOSTAL);
    l_COLONIA := Self.COLONIA;
    TROSerializer(ASerializer).WriteAnsiString('COLONIA', l_COLONIA);
    l_MUNICIPIO := Self.MUNICIPIO;
    TROSerializer(ASerializer).WriteAnsiString('MUNICIPIO', l_MUNICIPIO);
    l_ESTADO := Self.ESTADO;
    TROSerializer(ASerializer).WriteAnsiString('ESTADO', l_ESTADO);
    l_PAIS := Self.PAIS;
    TROSerializer(ASerializer).WriteAnsiString('PAIS', l_PAIS);
    l_LOCALIDAD := Self.LOCALIDAD;
    TROSerializer(ASerializer).WriteAnsiString('LOCALIDAD', l_LOCALIDAD);
    l_REFERENCIA := Self.REFERENCIA;
    TROSerializer(ASerializer).WriteAnsiString('REFERENCIA', l_REFERENCIA);
    l_LUGARDEEXPEDICION := Self.LUGARDEEXPEDICION;
    TROSerializer(ASerializer).WriteAnsiString('LUGARDEEXPEDICION', l_LUGARDEEXPEDICION);
    l_NUMERODECUENTA := Self.NUMERODECUENTA;
    TROSerializer(ASerializer).WriteAnsiString('NUMERODECUENTA', l_NUMERODECUENTA);
  end
  else begin
    l_CALLE := Self.CALLE;
    TROSerializer(ASerializer).WriteAnsiString('CALLE', l_CALLE);
    l_CODIGOPOSTAL := Self.CODIGOPOSTAL;
    TROSerializer(ASerializer).WriteAnsiString('CODIGOPOSTAL', l_CODIGOPOSTAL);
    l_COLONIA := Self.COLONIA;
    TROSerializer(ASerializer).WriteAnsiString('COLONIA', l_COLONIA);
    l_ESTADO := Self.ESTADO;
    TROSerializer(ASerializer).WriteAnsiString('ESTADO', l_ESTADO);
    l_LOCALIDAD := Self.LOCALIDAD;
    TROSerializer(ASerializer).WriteAnsiString('LOCALIDAD', l_LOCALIDAD);
    l_LUGARDEEXPEDICION := Self.LUGARDEEXPEDICION;
    TROSerializer(ASerializer).WriteAnsiString('LUGARDEEXPEDICION', l_LUGARDEEXPEDICION);
    l_MUNICIPIO := Self.MUNICIPIO;
    TROSerializer(ASerializer).WriteAnsiString('MUNICIPIO', l_MUNICIPIO);
    l_NOEXTERIOR := Self.NOEXTERIOR;
    TROSerializer(ASerializer).WriteAnsiString('NOEXTERIOR', l_NOEXTERIOR);
    l_NOINTERIOR := Self.NOINTERIOR;
    TROSerializer(ASerializer).WriteAnsiString('NOINTERIOR', l_NOINTERIOR);
    l_NUMERODECUENTA := Self.NUMERODECUENTA;
    TROSerializer(ASerializer).WriteAnsiString('NUMERODECUENTA', l_NUMERODECUENTA);
    l_PAIS := Self.PAIS;
    TROSerializer(ASerializer).WriteAnsiString('PAIS', l_PAIS);
    l_REFERENCIA := Self.REFERENCIA;
    TROSerializer(ASerializer).WriteAnsiString('REFERENCIA', l_REFERENCIA);
  end;
end;

{ TEmisorExpedidoEnCollection }
constructor TEmisorExpedidoEnCollection.Create;
begin
  inherited Create(TEmisorExpedidoEn);
end;

constructor TEmisorExpedidoEnCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TEmisorExpedidoEnCollection.Add: TEmisorExpedidoEn;
begin
  Result := TEmisorExpedidoEn(inherited Add);
end;

function TEmisorExpedidoEnCollection.GetItems(aIndex: Integer): TEmisorExpedidoEn;
begin
  Result := TEmisorExpedidoEn(inherited Items[aIndex]);
end;

procedure TEmisorExpedidoEnCollection.SetItems(aIndex: Integer; const Value: TEmisorExpedidoEn);
begin
  TEmisorExpedidoEn(inherited Items[aIndex]).Assign(Value);
end;

{ TReceptor }

procedure TReceptor.Assign(iSource: TPersistent);
var
  lSource: LibraryIngresos_Intf.TReceptor;
begin
  inherited Assign(iSource);
  if (iSource is LibraryIngresos_Intf.TReceptor) then begin
    lSource := LibraryIngresos_Intf.TReceptor(iSource);

    Self.RFC := lSource.RFC;
    Self.NOMBRE := lSource.NOMBRE;
    Self.CALLE := lSource.CALLE;
    Self.NOEXTERIOR := lSource.NOEXTERIOR;
    Self.NOINTERIOR := lSource.NOINTERIOR;
    Self.CODIGOPOSTAL := lSource.CODIGOPOSTAL;
    Self.COLONIA := lSource.COLONIA;
    Self.MUNICIPIO := lSource.MUNICIPIO;
    Self.ESTADO := lSource.ESTADO;
    Self.PAIS := lSource.PAIS;
    Self.LOCALIDAD := lSource.LOCALIDAD;
  end;
end;

procedure TReceptor.ReadComplex(ASerializer: TObject);
var
  l_CALLE: AnsiString;
  l_CODIGOPOSTAL: AnsiString;
  l_COLONIA: AnsiString;
  l_ESTADO: AnsiString;
  l_LOCALIDAD: AnsiString;
  l_MUNICIPIO: AnsiString;
  l_NOEXTERIOR: AnsiString;
  l_NOINTERIOR: AnsiString;
  l_NOMBRE: AnsiString;
  l_PAIS: AnsiString;
  l_RFC: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_RFC := Self.RFC;
    try
      TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'RFC']));
    end;
    Self.RFC := l_RFC;
    l_NOMBRE := Self.NOMBRE;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOMBRE', l_NOMBRE);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOMBRE']));
    end;
    Self.NOMBRE := l_NOMBRE;
    l_CALLE := Self.CALLE;
    try
      TROSerializer(ASerializer).ReadAnsiString('CALLE', l_CALLE);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CALLE']));
    end;
    Self.CALLE := l_CALLE;
    l_NOEXTERIOR := Self.NOEXTERIOR;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOEXTERIOR', l_NOEXTERIOR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOEXTERIOR']));
    end;
    Self.NOEXTERIOR := l_NOEXTERIOR;
    l_NOINTERIOR := Self.NOINTERIOR;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOINTERIOR', l_NOINTERIOR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOINTERIOR']));
    end;
    Self.NOINTERIOR := l_NOINTERIOR;
    l_CODIGOPOSTAL := Self.CODIGOPOSTAL;
    try
      TROSerializer(ASerializer).ReadAnsiString('CODIGOPOSTAL', l_CODIGOPOSTAL);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CODIGOPOSTAL']));
    end;
    Self.CODIGOPOSTAL := l_CODIGOPOSTAL;
    l_COLONIA := Self.COLONIA;
    try
      TROSerializer(ASerializer).ReadAnsiString('COLONIA', l_COLONIA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'COLONIA']));
    end;
    Self.COLONIA := l_COLONIA;
    l_MUNICIPIO := Self.MUNICIPIO;
    try
      TROSerializer(ASerializer).ReadAnsiString('MUNICIPIO', l_MUNICIPIO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MUNICIPIO']));
    end;
    Self.MUNICIPIO := l_MUNICIPIO;
    l_ESTADO := Self.ESTADO;
    try
      TROSerializer(ASerializer).ReadAnsiString('ESTADO', l_ESTADO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ESTADO']));
    end;
    Self.ESTADO := l_ESTADO;
    l_PAIS := Self.PAIS;
    try
      TROSerializer(ASerializer).ReadAnsiString('PAIS', l_PAIS);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PAIS']));
    end;
    Self.PAIS := l_PAIS;
    l_LOCALIDAD := Self.LOCALIDAD;
    try
      TROSerializer(ASerializer).ReadAnsiString('LOCALIDAD', l_LOCALIDAD);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LOCALIDAD']));
    end;
    Self.LOCALIDAD := l_LOCALIDAD;
  end
  else begin
    l_CALLE := Self.CALLE;
    try
      TROSerializer(ASerializer).ReadAnsiString('CALLE', l_CALLE);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CALLE']));
    end;
    Self.CALLE := l_CALLE;
    l_CODIGOPOSTAL := Self.CODIGOPOSTAL;
    try
      TROSerializer(ASerializer).ReadAnsiString('CODIGOPOSTAL', l_CODIGOPOSTAL);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'CODIGOPOSTAL']));
    end;
    Self.CODIGOPOSTAL := l_CODIGOPOSTAL;
    l_COLONIA := Self.COLONIA;
    try
      TROSerializer(ASerializer).ReadAnsiString('COLONIA', l_COLONIA);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'COLONIA']));
    end;
    Self.COLONIA := l_COLONIA;
    l_ESTADO := Self.ESTADO;
    try
      TROSerializer(ASerializer).ReadAnsiString('ESTADO', l_ESTADO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'ESTADO']));
    end;
    Self.ESTADO := l_ESTADO;
    l_LOCALIDAD := Self.LOCALIDAD;
    try
      TROSerializer(ASerializer).ReadAnsiString('LOCALIDAD', l_LOCALIDAD);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'LOCALIDAD']));
    end;
    Self.LOCALIDAD := l_LOCALIDAD;
    l_MUNICIPIO := Self.MUNICIPIO;
    try
      TROSerializer(ASerializer).ReadAnsiString('MUNICIPIO', l_MUNICIPIO);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'MUNICIPIO']));
    end;
    Self.MUNICIPIO := l_MUNICIPIO;
    l_NOEXTERIOR := Self.NOEXTERIOR;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOEXTERIOR', l_NOEXTERIOR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOEXTERIOR']));
    end;
    Self.NOEXTERIOR := l_NOEXTERIOR;
    l_NOINTERIOR := Self.NOINTERIOR;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOINTERIOR', l_NOINTERIOR);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOINTERIOR']));
    end;
    Self.NOINTERIOR := l_NOINTERIOR;
    l_NOMBRE := Self.NOMBRE;
    try
      TROSerializer(ASerializer).ReadAnsiString('NOMBRE', l_NOMBRE);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'NOMBRE']));
    end;
    Self.NOMBRE := l_NOMBRE;
    l_PAIS := Self.PAIS;
    try
      TROSerializer(ASerializer).ReadAnsiString('PAIS', l_PAIS);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'PAIS']));
    end;
    Self.PAIS := l_PAIS;
    l_RFC := Self.RFC;
    try
      TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    except
      on E: SysUtils.Exception do
        uROClasses.RaiseError(SysUtils.Format('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName, E.Message, 'RFC']));
    end;
    Self.RFC := l_RFC;
  end;
end;

procedure TReceptor.WriteComplex(ASerializer: TObject);
var
  l_CALLE: AnsiString;
  l_CODIGOPOSTAL: AnsiString;
  l_COLONIA: AnsiString;
  l_ESTADO: AnsiString;
  l_LOCALIDAD: AnsiString;
  l_MUNICIPIO: AnsiString;
  l_NOEXTERIOR: AnsiString;
  l_NOINTERIOR: AnsiString;
  l_NOMBRE: AnsiString;
  l_PAIS: AnsiString;
  l_RFC: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TReceptor);
    l_RFC := Self.RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_NOMBRE := Self.NOMBRE;
    TROSerializer(ASerializer).WriteAnsiString('NOMBRE', l_NOMBRE);
    l_CALLE := Self.CALLE;
    TROSerializer(ASerializer).WriteAnsiString('CALLE', l_CALLE);
    l_NOEXTERIOR := Self.NOEXTERIOR;
    TROSerializer(ASerializer).WriteAnsiString('NOEXTERIOR', l_NOEXTERIOR);
    l_NOINTERIOR := Self.NOINTERIOR;
    TROSerializer(ASerializer).WriteAnsiString('NOINTERIOR', l_NOINTERIOR);
    l_CODIGOPOSTAL := Self.CODIGOPOSTAL;
    TROSerializer(ASerializer).WriteAnsiString('CODIGOPOSTAL', l_CODIGOPOSTAL);
    l_COLONIA := Self.COLONIA;
    TROSerializer(ASerializer).WriteAnsiString('COLONIA', l_COLONIA);
    l_MUNICIPIO := Self.MUNICIPIO;
    TROSerializer(ASerializer).WriteAnsiString('MUNICIPIO', l_MUNICIPIO);
    l_ESTADO := Self.ESTADO;
    TROSerializer(ASerializer).WriteAnsiString('ESTADO', l_ESTADO);
    l_PAIS := Self.PAIS;
    TROSerializer(ASerializer).WriteAnsiString('PAIS', l_PAIS);
    l_LOCALIDAD := Self.LOCALIDAD;
    TROSerializer(ASerializer).WriteAnsiString('LOCALIDAD', l_LOCALIDAD);
  end
  else begin
    l_CALLE := Self.CALLE;
    TROSerializer(ASerializer).WriteAnsiString('CALLE', l_CALLE);
    l_CODIGOPOSTAL := Self.CODIGOPOSTAL;
    TROSerializer(ASerializer).WriteAnsiString('CODIGOPOSTAL', l_CODIGOPOSTAL);
    l_COLONIA := Self.COLONIA;
    TROSerializer(ASerializer).WriteAnsiString('COLONIA', l_COLONIA);
    l_ESTADO := Self.ESTADO;
    TROSerializer(ASerializer).WriteAnsiString('ESTADO', l_ESTADO);
    l_LOCALIDAD := Self.LOCALIDAD;
    TROSerializer(ASerializer).WriteAnsiString('LOCALIDAD', l_LOCALIDAD);
    l_MUNICIPIO := Self.MUNICIPIO;
    TROSerializer(ASerializer).WriteAnsiString('MUNICIPIO', l_MUNICIPIO);
    l_NOEXTERIOR := Self.NOEXTERIOR;
    TROSerializer(ASerializer).WriteAnsiString('NOEXTERIOR', l_NOEXTERIOR);
    l_NOINTERIOR := Self.NOINTERIOR;
    TROSerializer(ASerializer).WriteAnsiString('NOINTERIOR', l_NOINTERIOR);
    l_NOMBRE := Self.NOMBRE;
    TROSerializer(ASerializer).WriteAnsiString('NOMBRE', l_NOMBRE);
    l_PAIS := Self.PAIS;
    TROSerializer(ASerializer).WriteAnsiString('PAIS', l_PAIS);
    l_RFC := Self.RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
  end;
end;

{ TReceptorCollection }
constructor TReceptorCollection.Create;
begin
  inherited Create(TReceptor);
end;

constructor TReceptorCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TReceptorCollection.Add: TReceptor;
begin
  Result := TReceptor(inherited Add);
end;

function TReceptorCollection.GetItems(aIndex: Integer): TReceptor;
begin
  Result := TReceptor(inherited Items[aIndex]);
end;

procedure TReceptorCollection.SetItems(aIndex: Integer; const Value: TReceptor);
begin
  TReceptor(inherited Items[aIndex]).Assign(Value);
end;

{ CoServiceIngresos }

class function CoServiceIngresos.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceIngresos;
begin
  Result := TServiceIngresos_Proxy.Create(aMessage, aTransportChannel);
end;

class function CoServiceIngresos.Create(const aUri: TROUri): IServiceIngresos;
begin
  Result := TServiceIngresos_Proxy.Create(aUri);
end;

class function CoServiceIngresos.Create(const aUrl: string): IServiceIngresos;
begin
  Result := TServiceIngresos_Proxy.Create(aUrl);
end;

{ TServiceIngresos_Proxy }

function TServiceIngresos_Proxy.__GetInterfaceName:string;
begin
  Result := 'ServiceIngresos';
end;

function TServiceIngresos_Proxy.AbreDataSetReportes(const SQL: AnsiString; const Parametros: TParametrosBI): Binary;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'AbreDataSetReportes');
    lMessage.Write('SQL', System.TypeInfo(AnsiString), SQL, []);
    lMessage.Write('Parametros', System.TypeInfo(LibraryIngresos_Intf.TParametrosBI), Parametros, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Binary), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.AbreTurno(const IDTURNO: Integer; const IDESTACION: Integer; const FECHA: DateTime): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'AbreTurno');
    lMessage.Write('IDTURNO', System.TypeInfo(Integer), IDTURNO, []);
    lMessage.Write('IDESTACION', System.TypeInfo(Integer), IDESTACION, []);
    lMessage.Write('FECHA', System.TypeInfo(DateTime), FECHA, [paIsDateTime]);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.ObtenTurnosdeFecha(const Fecha: DateTime; const Estacion: Integer): ATTurnoxFecha;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'ObtenTurnosdeFecha');
    lMessage.Write('Fecha', System.TypeInfo(DateTime), Fecha, [paIsDateTime]);
    lMessage.Write('Estacion', System.TypeInfo(Integer), Estacion, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryIngresos_Intf.ATTurnoxFecha), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.BuscarReporte(const Nombre: AnsiString): TReporteBI;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'BuscarReporte');
    lMessage.Write('Nombre', System.TypeInfo(AnsiString), Nombre, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryIngresos_Intf.TReporteBI), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.DragPagoMateria(const PAGOMATERIA: Integer; const IDGRUPOTARGET: Integer; const IDGRUPOSOURCE: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'DragPagoMateria');
    lMessage.Write('PAGOMATERIA', System.TypeInfo(Integer), PAGOMATERIA, []);
    lMessage.Write('IDGRUPOTARGET', System.TypeInfo(Integer), IDGRUPOTARGET, []);
    lMessage.Write('IDGRUPOSOURCE', System.TypeInfo(Integer), IDGRUPOSOURCE, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.ActualizaSubTipoPago(const IDTIPOPAGO: Integer; const IDSUBTIPOPAGO: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'ActualizaSubTipoPago');
    lMessage.Write('IDTIPOPAGO', System.TypeInfo(Integer), IDTIPOPAGO, []);
    lMessage.Write('IDSUBTIPOPAGO', System.TypeInfo(Integer), IDSUBTIPOPAGO, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.DatosFacturaElectronica(const FacturaID: Integer; const NumeroEstacion: Integer): TFacturaElectronicaBI;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'DatosFacturaElectronica');
    lMessage.Write('FacturaID', System.TypeInfo(Integer), FacturaID, []);
    lMessage.Write('NumeroEstacion', System.TypeInfo(Integer), NumeroEstacion, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryIngresos_Intf.TFacturaElectronicaBI), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.DatosFactura(const Folio: Integer; const Serie: AnsiString): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'DatosFactura');
    lMessage.Write('Folio', System.TypeInfo(Integer), Folio, []);
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.Fecha: DateTime;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'Fecha');
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(DateTime), Result, [paIsDateTime]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'Folio');
    lMessage.Write('Campo', System.TypeInfo(AnsiString), Campo, []);
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceIngresos_Proxy.GuardaDatosFactura(const DatosFactura: TDatosFactura);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'GuardaDatosFactura');
    lMessage.Write('DatosFactura', System.TypeInfo(LibraryIngresos_Intf.TDatosFactura), DatosFactura, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfoBI;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'Login');
    lMessage.Write('Usuario', System.TypeInfo(AnsiString), Usuario, []);
    lMessage.Write('Clave', System.TypeInfo(AnsiString), Clave, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryIngresos_Intf.TLoginInfoBI), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.IniciaCiclo(const IDCICLO: AnsiString): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'IniciaCiclo');
    lMessage.Write('IDCICLO', System.TypeInfo(AnsiString), IDCICLO, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const FolioNew: Integer): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'ModificarFolioActual');
    lMessage.Write('Campo', System.TypeInfo(AnsiString), Campo, []);
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Write('FolioNew', System.TypeInfo(Integer), FolioNew, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceIngresos_Proxy.InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: UnicodeString; const SelloDigital: UnicodeString;
                                                           const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString;
                                                           const NoAprobacion: AnsiString; const FechaAprobacion: DateTime; const XMLCFD: UnicodeString; const XMLCFDI: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'InsertaFacturaElectronica');
    lMessage.Write('FacturaElectronicaID', System.TypeInfo(Integer), FacturaElectronicaID, []);
    lMessage.Write('CadenaOriginal', System.TypeInfo(UnicodeString), CadenaOriginal, []);
    lMessage.Write('SelloDigital', System.TypeInfo(UnicodeString), SelloDigital, []);
    lMessage.Write('FacturaID', System.TypeInfo(Integer), FacturaID, []);
    lMessage.Write('Vigencia', System.TypeInfo(Boolean), Vigencia, []);
    lMessage.Write('Enviado', System.TypeInfo(Boolean), Enviado, []);
    lMessage.Write('NoCertificado', System.TypeInfo(AnsiString), NoCertificado, []);
    lMessage.Write('NoAprobacion', System.TypeInfo(AnsiString), NoAprobacion, []);
    lMessage.Write('FechaAprobacion', System.TypeInfo(DateTime), FechaAprobacion, [paIsDateTime]);
    lMessage.Write('XMLCFD', System.TypeInfo(UnicodeString), XMLCFD, []);
    lMessage.Write('XMLCFDI', System.TypeInfo(UnicodeString), XMLCFDI, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.FolioActual2(const Serie: AnsiString; const folio: Integer): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'FolioActual2');
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Write('folio', System.TypeInfo(Integer), folio, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TServiceIngresos_Proxy.GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'GuardaAccesos');
    lMessage.Write('UsuarioID', System.TypeInfo(Integer), UsuarioID, []);
    lMessage.Write('Lista', System.TypeInfo(AnsiString), Lista, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.EliminaMaestroDisponibilidad(const IDMAESTRODISPONIBILIDAD: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'EliminaMaestroDisponibilidad');
    lMessage.Write('IDMAESTRODISPONIBILIDAD', System.TypeInfo(Integer), IDMAESTRODISPONIBILIDAD, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.EliminaMateriaMaestro(const IDMAESTRO: Integer; const IDMATERIA: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'EliminaMateriaMaestro');
    lMessage.Write('IDMAESTRO', System.TypeInfo(Integer), IDMAESTRO, []);
    lMessage.Write('IDMATERIA', System.TypeInfo(Integer), IDMATERIA, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.EliminaPago(const idSubtipoPago: Integer; const status: AnsiString; const idCiclos: Integer; const idGrupo: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'EliminaPago');
    lMessage.Write('idSubtipoPago', System.TypeInfo(Integer), idSubtipoPago, []);
    lMessage.Write('status', System.TypeInfo(AnsiString), status, []);
    lMessage.Write('idCiclos', System.TypeInfo(Integer), idCiclos, []);
    lMessage.Write('idGrupo', System.TypeInfo(Integer), idGrupo, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.EliminaPagoCaja(const idSubtipoPago: Integer; const status: AnsiString; const idCiclos: Integer; const idGrupo: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'EliminaPagoCaja');
    lMessage.Write('idSubtipoPago', System.TypeInfo(Integer), idSubtipoPago, []);
    lMessage.Write('status', System.TypeInfo(AnsiString), status, []);
    lMessage.Write('idCiclos', System.TypeInfo(Integer), idCiclos, []);
    lMessage.Write('idGrupo', System.TypeInfo(Integer), idGrupo, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.InsertaCaja(const Observaciones: AnsiString; const TipoPago: AnsiString; const idEmpleado: Integer): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'InsertaCaja');
    lMessage.Write('Observaciones', System.TypeInfo(AnsiString), Observaciones, []);
    lMessage.Write('TipoPago', System.TypeInfo(AnsiString), TipoPago, []);
    lMessage.Write('idEmpleado', System.TypeInfo(Integer), idEmpleado, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.LiquidaPago(const INTERES: Double; const IDEMPLEADO: Integer; const IDPAGO: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'LiquidaPago');
    lMessage.Write('INTERES', System.TypeInfo(Double), INTERES, []);
    lMessage.Write('IDEMPLEADO', System.TypeInfo(Integer), IDEMPLEADO, []);
    lMessage.Write('IDPAGO', System.TypeInfo(Integer), IDPAGO, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.DividePago(const idPago: Integer; const idEmpleado: Integer; const Importes: Double; const Interes: Double): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'DividePago');
    lMessage.Write('idPago', System.TypeInfo(Integer), idPago, []);
    lMessage.Write('idEmpleado', System.TypeInfo(Integer), idEmpleado, []);
    lMessage.Write('Importes', System.TypeInfo(Double), Importes, []);
    lMessage.Write('Interes', System.TypeInfo(Double), Interes, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.InsertaPagoCaja(const IDPAGO: Integer; const IDCAJA: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'InsertaPagoCaja');
    lMessage.Write('IDPAGO', System.TypeInfo(Integer), IDPAGO, []);
    lMessage.Write('IDCAJA', System.TypeInfo(Integer), IDCAJA, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.AplicaCalificacion(const Calificacion: Double; const Faltas: Integer; const idmaterias: Integer; const idhistorialalumno: Integer;
                                                   const idhistorialgrupo: Integer; const fecha: DateTime; const idtipocalificacion: Integer; const califAux2: Double;
                                                   const califAux1: Double): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'AplicaCalificacion');
    lMessage.Write('Calificacion', System.TypeInfo(Double), Calificacion, []);
    lMessage.Write('Faltas', System.TypeInfo(Integer), Faltas, []);
    lMessage.Write('idmaterias', System.TypeInfo(Integer), idmaterias, []);
    lMessage.Write('idhistorialalumno', System.TypeInfo(Integer), idhistorialalumno, []);
    lMessage.Write('idhistorialgrupo', System.TypeInfo(Integer), idhistorialgrupo, []);
    lMessage.Write('fecha', System.TypeInfo(DateTime), fecha, [paIsDateTime]);
    lMessage.Write('idtipocalificacion', System.TypeInfo(Integer), idtipocalificacion, []);
    lMessage.Write('califAux2', System.TypeInfo(Double), califAux2, []);
    lMessage.Write('califAux1', System.TypeInfo(Double), califAux1, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.HistorialAlumnoDEL(const IDHISTORIALALUMNO: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'HistorialAlumnoDEL');
    lMessage.Write('IDHISTORIALALUMNO', System.TypeInfo(Integer), IDHISTORIALALUMNO, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.BecaDescuento(const IDHISTORIALALUMNO: Integer; const BECA: Double; const DESCUENTO: Double): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'BecaDescuento');
    lMessage.Write('IDHISTORIALALUMNO', System.TypeInfo(Integer), IDHISTORIALALUMNO, []);
    lMessage.Write('BECA', System.TypeInfo(Double), BECA, []);
    lMessage.Write('DESCUENTO', System.TypeInfo(Double), DESCUENTO, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.InsertaHistorialAlumno(const IDHISTORIALALUMNO: Integer; const IDHISTORIALGRUPO: Integer; const IDALUMNO: Integer; const DOCUMENTOSFALTANTES: AnsiString;
                                                       const BECA: Double; const DESCUENTO: Double): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'InsertaHistorialAlumno');
    lMessage.Write('IDHISTORIALALUMNO', System.TypeInfo(Integer), IDHISTORIALALUMNO, []);
    lMessage.Write('IDHISTORIALGRUPO', System.TypeInfo(Integer), IDHISTORIALGRUPO, []);
    lMessage.Write('IDALUMNO', System.TypeInfo(Integer), IDALUMNO, []);
    lMessage.Write('DOCUMENTOSFALTANTES', System.TypeInfo(AnsiString), DOCUMENTOSFALTANTES, []);
    lMessage.Write('BECA', System.TypeInfo(Double), BECA, []);
    lMessage.Write('DESCUENTO', System.TypeInfo(Double), DESCUENTO, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.CambioGrupo(const IDHISTORIALALUMNO: Integer; const IDHISTORIALGRUPO: Integer; const DOCUMENTOSFALTANTES: AnsiString;
                                            const BECA: Double; const DESCUENTO: Double): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'CambioGrupo');
    lMessage.Write('IDHISTORIALALUMNO', System.TypeInfo(Integer), IDHISTORIALALUMNO, []);
    lMessage.Write('IDHISTORIALGRUPO', System.TypeInfo(Integer), IDHISTORIALGRUPO, []);
    lMessage.Write('DOCUMENTOSFALTANTES', System.TypeInfo(AnsiString), DOCUMENTOSFALTANTES, []);
    lMessage.Write('BECA', System.TypeInfo(Double), BECA, []);
    lMessage.Write('DESCUENTO', System.TypeInfo(Double), DESCUENTO, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.TipoCalificacion: Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'TipoCalificacion');
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.DatosAlumno(const AlumnoID: Integer): TDatos;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'DatosAlumno');
    lMessage.Write('AlumnoID', System.TypeInfo(Integer), AlumnoID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryIngresos_Intf.TDatos), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.DatosMaestro(const MaestroID: Integer): TDatos;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'DatosMaestro');
    lMessage.Write('MaestroID', System.TypeInfo(Integer), MaestroID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryIngresos_Intf.TDatos), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.PagoBanco(const FECHAPAGO: DateTime; const IDEMPLEADO: Integer; const IDPAGO: Integer; const MONTO: Double): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'PagoBanco');
    lMessage.Write('FECHAPAGO', System.TypeInfo(DateTime), FECHAPAGO, [paIsDateTime]);
    lMessage.Write('IDEMPLEADO', System.TypeInfo(Integer), IDEMPLEADO, []);
    lMessage.Write('IDPAGO', System.TypeInfo(Integer), IDPAGO, []);
    lMessage.Write('MONTO', System.TypeInfo(Double), MONTO, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.PrecioProducto(const ProductoID: Integer): Double;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'PrecioProducto');
    lMessage.Write('ProductoID', System.TypeInfo(Integer), ProductoID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Double), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.FolioActual(const Campo: AnsiString; const Serie: AnsiString): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'FolioActual');
    lMessage.Write('Campo', System.TypeInfo(AnsiString), Campo, []);
    lMessage.Write('Serie', System.TypeInfo(AnsiString), Serie, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.ValidaFolioFactura(const Campo: AnsiString; const Folio: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'ValidaFolioFactura');
    lMessage.Write('Campo', System.TypeInfo(AnsiString), Campo, []);
    lMessage.Write('Folio', System.TypeInfo(Integer), Folio, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.GuardarDatosFactura(const DatosFactura: TDatosFactura): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'GuardarDatosFactura');
    lMessage.Write('DatosFactura', System.TypeInfo(LibraryIngresos_Intf.TDatosFactura), DatosFactura, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.ActualizaTipoCampio(const NUMEROESTACION: Int64; const FECHA: DateTime; const VALOR: Double; const IDMONEDA: Integer): Boolean;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'ActualizaTipoCampio');
    lMessage.Write('NUMEROESTACION', System.TypeInfo(Int64), NUMEROESTACION, []);
    lMessage.Write('FECHA', System.TypeInfo(DateTime), FECHA, [paIsDateTime]);
    lMessage.Write('VALOR', System.TypeInfo(Double), VALOR, []);
    lMessage.Write('IDMONEDA', System.TypeInfo(Integer), IDMONEDA, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Boolean), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.ObtenTipoValores(const NUMEROESTACION: Integer; const FECHA: DateTime): ATTipoValores;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'ObtenTipoValores');
    lMessage.Write('NUMEROESTACION', System.TypeInfo(Integer), NUMEROESTACION, []);
    lMessage.Write('FECHA', System.TypeInfo(DateTime), FECHA, [paIsDateTime]);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryIngresos_Intf.ATTipoValores), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.CostoProducto(const IDPRODUCTO: Integer): Double;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'CostoProducto');
    lMessage.Write('IDPRODUCTO', System.TypeInfo(Integer), IDPRODUCTO, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Double), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.Exporta(const ExportarID: Integer): TExporta;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    Result := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'Exporta');
    lMessage.Write('ExportarID', System.TypeInfo(Integer), ExportarID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(LibraryIngresos_Intf.TExporta), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.CierraLiquidacion(const LiquidacionID: Integer): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'CierraLiquidacion');
    lMessage.Write('LiquidacionID', System.TypeInfo(Integer), LiquidacionID, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.comboestacion(const estacionid: AnsiString): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'comboestacion');
    lMessage.Write('estacionid', System.TypeInfo(AnsiString), estacionid, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.comboscompras(const estacionid: AnsiString): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'comboscompras');
    lMessage.Write('estacionid', System.TypeInfo(AnsiString), estacionid, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TServiceIngresos_Proxy.IANcomprasGuarda(const MovimientoAlmacenMaestro: AnsiString; const MovimientoAlmacenDetalle: AnsiString): AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'LibraryIngresos', __InterfaceName, 'IANcomprasGuarda');
    lMessage.Write('MovimientoAlmacenMaestro', System.TypeInfo(AnsiString), MovimientoAlmacenMaestro, []);
    lMessage.Write('MovimientoAlmacenDetalle', System.TypeInfo(AnsiString), MovimientoAlmacenDetalle, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

initialization
  RegisterROClass(TLoginInfoBI);
  RegisterROClass(TOpcionBI);
  RegisterROClass(TDatosFactura);
  RegisterROClass(TFactura);
  RegisterROClass(TDetalleFactura);
  RegisterROClass(TParametrosBI);
  RegisterROClass(TReporteBI);
  RegisterROClass(TFacturaElectronicaBI);
  RegisterROClass(TFacturaElectronicaDetalleImporteBI);
  RegisterROClass(TFacturaElectronicaDetalleImpuestosBI);
  RegisterROClass(TDataFacturaElectronicaBI);
  RegisterROClass(TDatos);
  RegisterROClass(TTipoValores);
  RegisterROClass(TCampo);
  RegisterROClass(TExporta);
  RegisterROClass(TParametrosExporta);
  RegisterROClass(TPasos);
  RegisterROClass(TServer);
  RegisterROClass(TEstacion);
  RegisterROClass(TTurnoxFecha);
  RegisterROClass(TEmisor);
  RegisterROClass(TEmisorExpedidoEn);
  RegisterROClass(TReceptor);
  RegisterROClass(ACampos);
  RegisterROClass(AEstaciones);
  RegisterROClass(APasos);
  RegisterROClass(ArrayOpcionBI);
  RegisterROClass(ATDetalleFactura);
  RegisterROClass(ATFacturaElectronicaDetalleImportes);
  RegisterROClass(ATFacturaElectronicaDetalleImpuestos);
  RegisterROClass(ATTipoValores);
  RegisterROClass(ATTurnoxFecha);
  RegisterProxyClass(IServiceIngresos_IID, TServiceIngresos_Proxy);


finalization
  UnregisterROClass(TLoginInfoBI);
  UnregisterROClass(TOpcionBI);
  UnregisterROClass(TDatosFactura);
  UnregisterROClass(TFactura);
  UnregisterROClass(TDetalleFactura);
  UnregisterROClass(TParametrosBI);
  UnregisterROClass(TReporteBI);
  UnregisterROClass(TFacturaElectronicaBI);
  UnregisterROClass(TFacturaElectronicaDetalleImporteBI);
  UnregisterROClass(TFacturaElectronicaDetalleImpuestosBI);
  UnregisterROClass(TDataFacturaElectronicaBI);
  UnregisterROClass(TDatos);
  UnregisterROClass(TTipoValores);
  UnregisterROClass(TCampo);
  UnregisterROClass(TExporta);
  UnregisterROClass(TParametrosExporta);
  UnregisterROClass(TPasos);
  UnregisterROClass(TServer);
  UnregisterROClass(TEstacion);
  UnregisterROClass(TTurnoxFecha);
  UnregisterROClass(TEmisor);
  UnregisterROClass(TEmisorExpedidoEn);
  UnregisterROClass(TReceptor);
  UnregisterROClass(ACampos);
  UnregisterROClass(AEstaciones);
  UnregisterROClass(APasos);
  UnregisterROClass(ArrayOpcionBI);
  UnregisterROClass(ATDetalleFactura);
  UnregisterROClass(ATFacturaElectronicaDetalleImportes);
  UnregisterROClass(ATFacturaElectronicaDetalleImpuestos);
  UnregisterROClass(ATTipoValores);
  UnregisterROClass(ATTurnoxFecha);
  UnregisterProxyClass(IServiceIngresos_IID);


end.
