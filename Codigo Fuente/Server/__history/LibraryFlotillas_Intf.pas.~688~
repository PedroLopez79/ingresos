unit LibraryFlotillas_Intf;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I Remobjects.inc}

interface

uses
  {vcl:} Classes, TypInfo,
  {RemObjects:} uROXMLIntf, uROClasses, uROClient, uROTypes, uROClientIntf,
  {Used RODLs:} DataAbstract4_Intf;

const
  { Library ID }
  LibraryUID = '{7FBCA9F0-91E6-419E-B735-F9EC8846F43A}';
  TargetNamespace = '';

  { Service Interface ID's }
  IServiceFlotillas_IID : TGUID = '{5730396E-2B5F-44B2-93E0-E78CC6C4624D}';

  { Event ID's }

type
  { Forward declarations }
  IServiceFlotillas = interface;

  ArrayOpcionF = class;
  ATDetalleFactura = class;
  TDocumentosConSaldoArray = class;
  ATDetalleCupon = class;
  aConsumo = class;
  aTarjetaLlave = class;
  AGeneraCupon = class;
  AAutorizacion = class;
  AProductoF = class;
  ATFacturaElectronicaDetalleImportes = class;
  ATFacturaElectronicaDetalleImpuestos = class;
  TDocumentosCuponesArray = class;
  AConceptoEstadodeCuentaCombustible = class;
  AImpuestoConceptoEstadodeCuentaCombustible = class;

  TLoginInfoF = class;
  TOpcionF = class;
  TDatosFactura = class;
  TFactura = class;
  TDetalleFactura = class;
  TDocumentosConSaldo = class;
  TCliente = class;
  TParametrosF = class;
  TDetalleCupon = class;
  TReporteF = class;
  TCuponValido = class;
  TConsumo = class;
  TAutorizacion = class;
  TAutoriza = class;
  TTarjeta = class;
  TMovimiento = class;
  TSaldoDocumento = class;
  TDatosVehiculo = class;
  TTarjetaLLave = class;
  TBancaria = class;
  TGeneraCupon = class;
  TDatosTicketConsumo = class;
  TProductoF = class;
  TDatosClienteOtros = class;
  TTiempoAire = class;
  TDatosVerifica = class;
  TDatosVerifoneF = class;
  TConfirmaEnvioF = class;
  TFacturaElectronicaF = class;
  TFacturaElectronicaDetalleImporteF = class;
  TFacturaElectronicaDetalleImpuestosF = class;
  TDocumentoCupones = class;
  TMonederoElectronico = class;
  TConceptoEstadodeCuentaCombustible = class;
  TImpuestoConceptoEstadodeCuentaCombustible = class;
  TDataFacturaElectronicaF = class;
  TBitacoraGOB = class;
  TUnidadesGOB = class;
  TEnviaDatosFacturaGOB = class;
  TAutorizaGOB = class;



  { Enumerateds }

  { TLoginInfoF }
  TLoginInfoF = class(TROComplexType)
  private
    fValida: Boolean;
    fEmpleadoID: Integer;
    fNombreEmpleado: AnsiString;
    fAccesos: ArrayOpcionF;
    function GetAccesos: ArrayOpcionF;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Valida:Boolean read fValida write fValida;
    property EmpleadoID:Integer read fEmpleadoID write fEmpleadoID;
    property NombreEmpleado:AnsiString read fNombreEmpleado write fNombreEmpleado;
    property Accesos:ArrayOpcionF read GetAccesos write fAccesos;
  end;

  { TLoginInfoFCollection }
  TLoginInfoFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TLoginInfoF;
    procedure SetItems(aIndex: integer; const Value: TLoginInfoF);
  public
    constructor Create; overload;
    function Add: TLoginInfoF; reintroduce;
    property Items[Index: integer]:TLoginInfoF read GetItems write SetItems; default;
  end;

  { TOpcionF }
  TOpcionF = class(TROComplexType)
  private
    fOpcionID: Integer;
    fNombre: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property OpcionID:Integer read fOpcionID write fOpcionID;
    property Nombre:AnsiString read fNombre write fNombre;
  end;

  { TOpcionFCollection }
  TOpcionFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TOpcionF;
    procedure SetItems(aIndex: integer; const Value: TOpcionF);
  public
    constructor Create; overload;
    function Add: TOpcionF; reintroduce;
    procedure SaveToArray(anArray: ArrayOpcionF);
    procedure LoadFromArray(anArray: ArrayOpcionF);
    property Items[Index: integer]:TOpcionF read GetItems write SetItems; default;
  end;

  { TDatosFactura }
  TDatosFactura = class(TROComplexType)
  private
    fFactura: TFactura;
    fDetalleFactura: ATDetalleFactura;
    fDetalleCupon: ATDetalleCupon;
    function GetFactura: TFactura;
    function GetDetalleFactura: ATDetalleFactura;
    function GetDetalleCupon: ATDetalleCupon;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Factura:TFactura read GetFactura write fFactura;
    property DetalleFactura:ATDetalleFactura read GetDetalleFactura write fDetalleFactura;
    property DetalleCupon:ATDetalleCupon read GetDetalleCupon write fDetalleCupon;
  end;

  { TDatosFacturaCollection }
  TDatosFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosFactura;
    procedure SetItems(aIndex: integer; const Value: TDatosFactura);
  public
    constructor Create; overload;
    function Add: TDatosFactura; reintroduce;
    property Items[Index: integer]:TDatosFactura read GetItems write SetItems; default;
  end;

  { TFactura }
  TFactura = class(TROComplexType)
  private
    fClienteID: Integer;
    fEjercicio: Integer;
    fFacturaID: Integer;
    fFecha: DateTime;
    fFechaImpresion: DateTime;
    fFechaVencimiento: DateTime;
    fFolio: Integer;
    fImpuesto: Double;
    fMovimientoID: Integer;
    fSaldo: Double;
    fSerie: AnsiString;
    fSubtotal: Double;
    fTickets: AnsiString;
    fTotal: Double;
    fUsuarioID: Integer;
    fPeriodo: Integer;
    fIVA: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property Ejercicio:Integer read fEjercicio write fEjercicio;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property Fecha:DateTime read fFecha write fFecha;
    property FechaImpresion:DateTime read fFechaImpresion write fFechaImpresion;
    property FechaVencimiento:DateTime read fFechaVencimiento write fFechaVencimiento;
    property Folio:Integer read fFolio write fFolio;
    property Impuesto:Double read fImpuesto write fImpuesto;
    property MovimientoID:Integer read fMovimientoID write fMovimientoID;
    property Saldo:Double read fSaldo write fSaldo;
    property Serie:AnsiString read fSerie write fSerie;
    property Subtotal:Double read fSubtotal write fSubtotal;
    property Tickets:AnsiString read fTickets write fTickets;
    property Total:Double read fTotal write fTotal;
    property UsuarioID:Integer read fUsuarioID write fUsuarioID;
    property Periodo:Integer read fPeriodo write fPeriodo;
    property IVA:Double read fIVA write fIVA;
  end;

  { TFacturaCollection }
  TFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFactura;
    procedure SetItems(aIndex: integer; const Value: TFactura);
  public
    constructor Create; overload;
    function Add: TFactura; reintroduce;
    property Items[Index: integer]:TFactura read GetItems write SetItems; default;
  end;

  { TDetalleFactura }
  TDetalleFactura = class(TROComplexType)
  private
    fDetalleFacturaID: Integer;
    fFacturaID: Integer;
    fCantidad: Double;
    fPrecio: Double;
    fImporte: Double;
    fProductoID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property DetalleFacturaID:Integer read fDetalleFacturaID write fDetalleFacturaID;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property Cantidad:Double read fCantidad write fCantidad;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
    property ProductoID:Integer read fProductoID write fProductoID;
  end;

  { TDetalleFacturaCollection }
  TDetalleFacturaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDetalleFactura;
    procedure SetItems(aIndex: integer; const Value: TDetalleFactura);
  public
    constructor Create; overload;
    function Add: TDetalleFactura; reintroduce;
    procedure SaveToArray(anArray: ATDetalleFactura);
    procedure LoadFromArray(anArray: ATDetalleFactura);
    property Items[Index: integer]:TDetalleFactura read GetItems write SetItems; default;
  end;

  { TDocumentosConSaldo }
  TDocumentosConSaldo = class(TROComplexType)
  private
    fReferencia: AnsiString;
    fImporte: Double;
    fSaldo: Double;
    fFecha: DateTime;
    fVencimiento: DateTime;
    fDocumentoID: Integer;
    fEnRecibo: Double;
    fMovimientoID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Importe:Double read fImporte write fImporte;
    property Saldo:Double read fSaldo write fSaldo;
    property Fecha:DateTime read fFecha write fFecha;
    property Vencimiento:DateTime read fVencimiento write fVencimiento;
    property DocumentoID:Integer read fDocumentoID write fDocumentoID;
    property EnRecibo:Double read fEnRecibo write fEnRecibo;
    property MovimientoID:Integer read fMovimientoID write fMovimientoID;
  end;

  { TDocumentosConSaldoCollection }
  TDocumentosConSaldoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDocumentosConSaldo;
    procedure SetItems(aIndex: integer; const Value: TDocumentosConSaldo);
  public
    constructor Create; overload;
    function Add: TDocumentosConSaldo; reintroduce;
    procedure SaveToArray(anArray: TDocumentosConSaldoArray);
    procedure LoadFromArray(anArray: TDocumentosConSaldoArray);
    property Items[Index: integer]:TDocumentosConSaldo read GetItems write SetItems; default;
  end;

  { TCliente }
  TCliente = class(TROComplexType)
  private
    fNombre: AnsiString;
    fRFC: AnsiString;
    fPlazoPago: Integer;
    fCuentaContable: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Nombre:AnsiString read fNombre write fNombre;
    property RFC:AnsiString read fRFC write fRFC;
    property PlazoPago:Integer read fPlazoPago write fPlazoPago;
    property CuentaContable:AnsiString read fCuentaContable write fCuentaContable;
  end;

  { TClienteCollection }
  TClienteCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TCliente;
    procedure SetItems(aIndex: integer; const Value: TCliente);
  public
    constructor Create; overload;
    function Add: TCliente; reintroduce;
    property Items[Index: integer]:TCliente read GetItems write SetItems; default;
  end;

  { TParametrosF }
  TParametrosF = class(TROComplexType)
  private
    fFechaIni: DateTime;
    fFechaFin: DateTime;
    fTipoFecha: Integer;
    fClienteIni: Integer;
    fClienteFin: Integer;
    fGrupo: AnsiString;
    fEstacionIni: Integer;
    fEstacionFin: Integer;
    fFacturaIni: Integer;
    fFacturaFin: Integer;
    fFechaCorte: DateTime;
    fVenc0: Integer;
    fVenc1: Integer;
    fVenc2: Integer;
    fVenc3: Integer;
    fVenc4: Integer;
    fSeleccion: Integer;
    fOrden: Integer;
    fStatus: Integer;
    fImporteLitros: Integer;
    fTarjetaIni: Integer;
    fTarjetaFin: Integer;
    fTipoMov: AnsiString;
    fFormaCompraID: Integer;
    fDiaFacturarID: Integer;
    fAgenteIni: Integer;
    fAgenteFin: Integer;
    fMovimientos: AnsiString;
    fEjercicio: Integer;
    fPeriodoIni: Integer;
    fPeriodoFin: Integer;
    fSerie: AnsiString;
    fIdentificador: Integer;
    fFacID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FechaIni:DateTime read fFechaIni write fFechaIni;
    property FechaFin:DateTime read fFechaFin write fFechaFin;
    property TipoFecha:Integer read fTipoFecha write fTipoFecha;
    property ClienteIni:Integer read fClienteIni write fClienteIni;
    property ClienteFin:Integer read fClienteFin write fClienteFin;
    property Grupo:AnsiString read fGrupo write fGrupo;
    property EstacionIni:Integer read fEstacionIni write fEstacionIni;
    property EstacionFin:Integer read fEstacionFin write fEstacionFin;
    property FacturaIni:Integer read fFacturaIni write fFacturaIni;
    property FacturaFin:Integer read fFacturaFin write fFacturaFin;
    property FechaCorte:DateTime read fFechaCorte write fFechaCorte;
    property Venc0:Integer read fVenc0 write fVenc0;
    property Venc1:Integer read fVenc1 write fVenc1;
    property Venc2:Integer read fVenc2 write fVenc2;
    property Venc3:Integer read fVenc3 write fVenc3;
    property Venc4:Integer read fVenc4 write fVenc4;
    property Seleccion:Integer read fSeleccion write fSeleccion;
    property Orden:Integer read fOrden write fOrden;
    property Status:Integer read fStatus write fStatus;
    property ImporteLitros:Integer read fImporteLitros write fImporteLitros;
    property TarjetaIni:Integer read fTarjetaIni write fTarjetaIni;
    property TarjetaFin:Integer read fTarjetaFin write fTarjetaFin;
    property TipoMov:AnsiString read fTipoMov write fTipoMov;
    property FormaCompraID:Integer read fFormaCompraID write fFormaCompraID;
    property DiaFacturarID:Integer read fDiaFacturarID write fDiaFacturarID;
    property AgenteIni:Integer read fAgenteIni write fAgenteIni;
    property AgenteFin:Integer read fAgenteFin write fAgenteFin;
    property Movimientos:AnsiString read fMovimientos write fMovimientos;
    property Ejercicio:Integer read fEjercicio write fEjercicio;
    property PeriodoIni:Integer read fPeriodoIni write fPeriodoIni;
    property PeriodoFin:Integer read fPeriodoFin write fPeriodoFin;
    property Serie:AnsiString read fSerie write fSerie;
    property Identificador:Integer read fIdentificador write fIdentificador;
    property FacID:Integer read fFacID write fFacID;
  end;

  { TParametrosFCollection }
  TParametrosFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TParametrosF;
    procedure SetItems(aIndex: integer; const Value: TParametrosF);
  public
    constructor Create; overload;
    function Add: TParametrosF; reintroduce;
    property Items[Index: integer]:TParametrosF read GetItems write SetItems; default;
  end;

  { TDetalleCupon }
  TDetalleCupon = class(TROComplexType)
  private
    fDenominacion: Double;
    fCantidad: Double;
    fReferencia: AnsiString;
    fFacturaID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Denominacion:Double read fDenominacion write fDenominacion;
    property Cantidad:Double read fCantidad write fCantidad;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property FacturaID:Integer read fFacturaID write fFacturaID;
  end;

  { TDetalleCuponCollection }
  TDetalleCuponCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDetalleCupon;
    procedure SetItems(aIndex: integer; const Value: TDetalleCupon);
  public
    constructor Create; overload;
    function Add: TDetalleCupon; reintroduce;
    procedure SaveToArray(anArray: ATDetalleCupon);
    procedure LoadFromArray(anArray: ATDetalleCupon);
    property Items[Index: integer]:TDetalleCupon read GetItems write SetItems; default;
  end;

  { TReporteF }
  TReporteF = class(TROComplexType)
  private
    fSQL1: AnsiString;
    fSQL2: AnsiString;
    fTemplate: AnsiString;
    fCampoJoin: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property SQL1:AnsiString read fSQL1 write fSQL1;
    property SQL2:AnsiString read fSQL2 write fSQL2;
    property Template:AnsiString read fTemplate write fTemplate;
    property CampoJoin:AnsiString read fCampoJoin write fCampoJoin;
  end;

  { TReporteFCollection }
  TReporteFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TReporteF;
    procedure SetItems(aIndex: integer; const Value: TReporteF);
  public
    constructor Create; overload;
    function Add: TReporteF; reintroduce;
    property Items[Index: integer]:TReporteF read GetItems write SetItems; default;
  end;

  { TCuponValido }
  TCuponValido = class(TROComplexType)
  private
    fCuponID: Integer;
    fImporte: Double;
    fStatus: AnsiString;
    fReferencia: AnsiString;
    fNombre: AnsiString;
    fRazonSocial: AnsiString;
    fDomicilio: AnsiString;
    fRFC: AnsiString;
    fCuentaContable: AnsiString;
    fTarjetaID: Integer;
    fMsnError: AnsiString;
    fValido: Boolean;
    fClienteID: Integer;
    fGasolineroID: Integer;
    fVehiculoID: Integer;
    fGrupo: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property CuponID:Integer read fCuponID write fCuponID;
    property Importe:Double read fImporte write fImporte;
    property Status:AnsiString read fStatus write fStatus;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Nombre:AnsiString read fNombre write fNombre;
    property RazonSocial:AnsiString read fRazonSocial write fRazonSocial;
    property Domicilio:AnsiString read fDomicilio write fDomicilio;
    property RFC:AnsiString read fRFC write fRFC;
    property CuentaContable:AnsiString read fCuentaContable write fCuentaContable;
    property TarjetaID:Integer read fTarjetaID write fTarjetaID;
    property MsnError:AnsiString read fMsnError write fMsnError;
    property Valido:Boolean read fValido write fValido;
    property ClienteID:Integer read fClienteID write fClienteID;
    property GasolineroID:Integer read fGasolineroID write fGasolineroID;
    property VehiculoID:Integer read fVehiculoID write fVehiculoID;
    property Grupo:Integer read fGrupo write fGrupo;
  end;

  { TCuponValidoCollection }
  TCuponValidoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TCuponValido;
    procedure SetItems(aIndex: integer; const Value: TCuponValido);
  public
    constructor Create; overload;
    function Add: TCuponValido; reintroduce;
    property Items[Index: integer]:TCuponValido read GetItems write SetItems; default;
  end;

  { TConsumo }
  TConsumo = class(TROComplexType)
  private
    fSecuenciaVenta: Integer;
    fSerie: AnsiString;
    fEstacionID: Integer;
    fFechaMovimiento: DateTime;
    fFechaCarga: DateTime;
    fEjercicio: Integer;
    fPeriodo: Integer;
    fDia: Integer;
    fTurno: Integer;
    fKilometraje: Integer;
    fReferencia: AnsiString;
    fTarjeta: AnsiString;
    fPosicionCarga: Integer;
    fCantidad: Double;
    fPrecio: Double;
    fImporte: Double;
    fImpuestoImporte: Double;
    fImpuestoPorcentaje: Double;
    fCuentaContable: AnsiString;
    fManualAutomatico: AnsiString;
    fFacturado: Integer;
    fEnIngresos: Integer;
    fAuditado: Integer;
    fFacturaID: Integer;
    fProductoID: Integer;
    fGasolineroID: Integer;
    fClienteID: Integer;
    fIEPS: Double;
    fUsuarioID: Integer;
    fVehiculoID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property SecuenciaVenta:Integer read fSecuenciaVenta write fSecuenciaVenta;
    property Serie:AnsiString read fSerie write fSerie;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property FechaMovimiento:DateTime read fFechaMovimiento write fFechaMovimiento;
    property FechaCarga:DateTime read fFechaCarga write fFechaCarga;
    property Ejercicio:Integer read fEjercicio write fEjercicio;
    property Periodo:Integer read fPeriodo write fPeriodo;
    property Dia:Integer read fDia write fDia;
    property Turno:Integer read fTurno write fTurno;
    property Kilometraje:Integer read fKilometraje write fKilometraje;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Tarjeta:AnsiString read fTarjeta write fTarjeta;
    property PosicionCarga:Integer read fPosicionCarga write fPosicionCarga;
    property Cantidad:Double read fCantidad write fCantidad;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
    property ImpuestoImporte:Double read fImpuestoImporte write fImpuestoImporte;
    property ImpuestoPorcentaje:Double read fImpuestoPorcentaje write fImpuestoPorcentaje;
    property CuentaContable:AnsiString read fCuentaContable write fCuentaContable;
    property ManualAutomatico:AnsiString read fManualAutomatico write fManualAutomatico;
    property Facturado:Integer read fFacturado write fFacturado;
    property EnIngresos:Integer read fEnIngresos write fEnIngresos;
    property Auditado:Integer read fAuditado write fAuditado;
    property FacturaID:Integer read fFacturaID write fFacturaID;
    property ProductoID:Integer read fProductoID write fProductoID;
    property GasolineroID:Integer read fGasolineroID write fGasolineroID;
    property ClienteID:Integer read fClienteID write fClienteID;
    property IEPS:Double read fIEPS write fIEPS;
    property UsuarioID:Integer read fUsuarioID write fUsuarioID;
    property VehiculoID:Integer read fVehiculoID write fVehiculoID;
  end;

  { TConsumoCollection }
  TConsumoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TConsumo;
    procedure SetItems(aIndex: integer; const Value: TConsumo);
  public
    constructor Create; overload;
    function Add: TConsumo; reintroduce;
    procedure SaveToArray(anArray: aConsumo);
    procedure LoadFromArray(anArray: aConsumo);
    property Items[Index: integer]:TConsumo read GetItems write SetItems; default;
  end;

  { TAutorizacion }
  TAutorizacion = class(TROComplexType)
  private
    fAutorizacionID: Integer;
    fFecha: DateTime;
    fImporte: Double;
    fCantidad: Double;
    fImporteCantidad: AnsiString;
    fPosicionCarga: Integer;
    fReferencia: AnsiString;
    fEstacionID: Integer;
    fVehiculoID: Integer;
    fClienteID: Integer;
    fGasolineroID: Integer;
    fOdometro: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property AutorizacionID:Integer read fAutorizacionID write fAutorizacionID;
    property Fecha:DateTime read fFecha write fFecha;
    property Importe:Double read fImporte write fImporte;
    property Cantidad:Double read fCantidad write fCantidad;
    property ImporteCantidad:AnsiString read fImporteCantidad write fImporteCantidad;
    property PosicionCarga:Integer read fPosicionCarga write fPosicionCarga;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property VehiculoID:Integer read fVehiculoID write fVehiculoID;
    property ClienteID:Integer read fClienteID write fClienteID;
    property GasolineroID:Integer read fGasolineroID write fGasolineroID;
    property Odometro:Integer read fOdometro write fOdometro;
  end;

  { TAutorizacionCollection }
  TAutorizacionCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TAutorizacion;
    procedure SetItems(aIndex: integer; const Value: TAutorizacion);
  public
    constructor Create; overload;
    function Add: TAutorizacion; reintroduce;
    procedure SaveToArray(anArray: AAutorizacion);
    procedure LoadFromArray(anArray: AAutorizacion);
    property Items[Index: integer]:TAutorizacion read GetItems write SetItems; default;
  end;

  { TAutoriza }
  TAutoriza = class(TROComplexType)
  private
    fEstacionID: Integer;
    fReferencia: AnsiString;
    fDigitoSeguridad: Integer;
    fPosicionCarga: Integer;
    fTerminal: AnsiString;
    fNIP: AnsiString;
    fOdometro: Integer;
    fMagna: Double;
    fPremium: Double;
    fDiesel: Double;
    fSeleccionDeProducto: AnsiString;
    fAutorizacionID: Integer;
    fGasolineroID: Integer;
    fClienteID: Integer;
    fVehiculoID: Integer;
    fCantidad: Double;
    fImporteCantidad: AnsiString;
    fFecha: DateTime;
    fImporte: Double;
    fTipo: Integer;
    fPresetMN: Double;
    fPresetLT: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property DigitoSeguridad:Integer read fDigitoSeguridad write fDigitoSeguridad;
    property PosicionCarga:Integer read fPosicionCarga write fPosicionCarga;
    property Terminal:AnsiString read fTerminal write fTerminal;
    property NIP:AnsiString read fNIP write fNIP;
    property Odometro:Integer read fOdometro write fOdometro;
    property Magna:Double read fMagna write fMagna;
    property Premium:Double read fPremium write fPremium;
    property Diesel:Double read fDiesel write fDiesel;
    property SeleccionDeProducto:AnsiString read fSeleccionDeProducto write fSeleccionDeProducto;
    property AutorizacionID:Integer read fAutorizacionID write fAutorizacionID;
    property GasolineroID:Integer read fGasolineroID write fGasolineroID;
    property ClienteID:Integer read fClienteID write fClienteID;
    property VehiculoID:Integer read fVehiculoID write fVehiculoID;
    property Cantidad:Double read fCantidad write fCantidad;
    property ImporteCantidad:AnsiString read fImporteCantidad write fImporteCantidad;
    property Fecha:DateTime read fFecha write fFecha;
    property Importe:Double read fImporte write fImporte;
    property Tipo:Integer read fTipo write fTipo;
    property PresetMN:Double read fPresetMN write fPresetMN;
    property PresetLT:Double read fPresetLT write fPresetLT;
  end;

  { TAutorizaCollection }
  TAutorizaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TAutoriza;
    procedure SetItems(aIndex: integer; const Value: TAutoriza);
  public
    constructor Create; overload;
    function Add: TAutoriza; reintroduce;
    property Items[Index: integer]:TAutoriza read GetItems write SetItems; default;
  end;

  { TTarjeta }
  TTarjeta = class(TROComplexType)
  private
    fGasolineroID: Integer;
    fClienteID: Integer;
    fVehiculoID: Integer;
    fCantidad: Double;
    fLitrosImporte: AnsiString;
    fMsnError: AnsiString;
    fStatus: Integer;
    fValido: Boolean;
    fNombre: AnsiString;
    fRazonSocial: AnsiString;
    fRFC: AnsiString;
    fIdentificacion: AnsiString;
    fSaldo: Double;
    fMensaje: AnsiString;
    fCentroCostos: AnsiString;
    fClasificacion: AnsiString;
    fProductos: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property GasolineroID:Integer read fGasolineroID write fGasolineroID;
    property ClienteID:Integer read fClienteID write fClienteID;
    property VehiculoID:Integer read fVehiculoID write fVehiculoID;
    property Cantidad:Double read fCantidad write fCantidad;
    property LitrosImporte:AnsiString read fLitrosImporte write fLitrosImporte;
    property MsnError:AnsiString read fMsnError write fMsnError;
    property Status:Integer read fStatus write fStatus;
    property Valido:Boolean read fValido write fValido;
    property Nombre:AnsiString read fNombre write fNombre;
    property RazonSocial:AnsiString read fRazonSocial write fRazonSocial;
    property RFC:AnsiString read fRFC write fRFC;
    property Identificacion:AnsiString read fIdentificacion write fIdentificacion;
    property Saldo:Double read fSaldo write fSaldo;
    property Mensaje:AnsiString read fMensaje write fMensaje;
    property CentroCostos:AnsiString read fCentroCostos write fCentroCostos;
    property Clasificacion:AnsiString read fClasificacion write fClasificacion;
    property Productos:AnsiString read fProductos write fProductos;
  end;

  { TTarjetaCollection }
  TTarjetaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TTarjeta;
    procedure SetItems(aIndex: integer; const Value: TTarjeta);
  public
    constructor Create; overload;
    function Add: TTarjeta; reintroduce;
    property Items[Index: integer]:TTarjeta read GetItems write SetItems; default;
  end;

  { TMovimiento }
  TMovimiento = class(TROComplexType)
  private
    fMovimientoID: Integer;
    fFechaMovimiento: DateTime;
    fFechaVencimiento: DateTime;
    fReferencia: AnsiString;
    fEjercicio: Integer;
    fPeriodo: Integer;
    fCargoAbono: AnsiString;
    fCargo: Double;
    fAbono: Double;
    fFechaRegistro: DateTime;
    fOrigen: AnsiString;
    fAfectaSaldos: Boolean;
    fTipoMovimiento: AnsiString;
    fUsuarioID: Integer;
    fClienteID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property MovimientoID:Integer read fMovimientoID write fMovimientoID;
    property FechaMovimiento:DateTime read fFechaMovimiento write fFechaMovimiento;
    property FechaVencimiento:DateTime read fFechaVencimiento write fFechaVencimiento;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Ejercicio:Integer read fEjercicio write fEjercicio;
    property Periodo:Integer read fPeriodo write fPeriodo;
    property CargoAbono:AnsiString read fCargoAbono write fCargoAbono;
    property Cargo:Double read fCargo write fCargo;
    property Abono:Double read fAbono write fAbono;
    property FechaRegistro:DateTime read fFechaRegistro write fFechaRegistro;
    property Origen:AnsiString read fOrigen write fOrigen;
    property AfectaSaldos:Boolean read fAfectaSaldos write fAfectaSaldos;
    property TipoMovimiento:AnsiString read fTipoMovimiento write fTipoMovimiento;
    property UsuarioID:Integer read fUsuarioID write fUsuarioID;
    property ClienteID:Integer read fClienteID write fClienteID;
  end;

  { TMovimientoCollection }
  TMovimientoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TMovimiento;
    procedure SetItems(aIndex: integer; const Value: TMovimiento);
  public
    constructor Create; overload;
    function Add: TMovimiento; reintroduce;
    property Items[Index: integer]:TMovimiento read GetItems write SetItems; default;
  end;

  { TSaldoDocumento }
  TSaldoDocumento = class(TROComplexType)
  private
    fSaldoDocumentoID: Integer;
    fFecha: DateTime;
    fFechaVencimiento: DateTime;
    fCargo: Double;
    fAbono: Double;
    fReferencia: AnsiString;
    fClienteID: Integer;
    fMovimientoID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property SaldoDocumentoID:Integer read fSaldoDocumentoID write fSaldoDocumentoID;
    property Fecha:DateTime read fFecha write fFecha;
    property FechaVencimiento:DateTime read fFechaVencimiento write fFechaVencimiento;
    property Cargo:Double read fCargo write fCargo;
    property Abono:Double read fAbono write fAbono;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property ClienteID:Integer read fClienteID write fClienteID;
    property MovimientoID:Integer read fMovimientoID write fMovimientoID;
  end;

  { TSaldoDocumentoCollection }
  TSaldoDocumentoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TSaldoDocumento;
    procedure SetItems(aIndex: integer; const Value: TSaldoDocumento);
  public
    constructor Create; overload;
    function Add: TSaldoDocumento; reintroduce;
    property Items[Index: integer]:TSaldoDocumento read GetItems write SetItems; default;
  end;

  { TDatosVehiculo }
  TDatosVehiculo = class(TROComplexType)
  private
    fClienteID: Integer;
    fVehiculoID: Integer;
    fClienteNombre: AnsiString;
    fReferencia: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property VehiculoID:Integer read fVehiculoID write fVehiculoID;
    property ClienteNombre:AnsiString read fClienteNombre write fClienteNombre;
    property Referencia:AnsiString read fReferencia write fReferencia;
  end;

  { TDatosVehiculoCollection }
  TDatosVehiculoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosVehiculo;
    procedure SetItems(aIndex: integer; const Value: TDatosVehiculo);
  public
    constructor Create; overload;
    function Add: TDatosVehiculo; reintroduce;
    property Items[Index: integer]:TDatosVehiculo read GetItems write SetItems; default;
  end;

  { TTarjetaLLave }
  TTarjetaLLave = class(TROComplexType)
  private
    fUsuarioID: Integer;
    fNombre: AnsiString;
    fTarjeta: AnsiString;
    fEstacionID: Integer;
    fActivo: Boolean;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property UsuarioID:Integer read fUsuarioID write fUsuarioID;
    property Nombre:AnsiString read fNombre write fNombre;
    property Tarjeta:AnsiString read fTarjeta write fTarjeta;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property Activo:Boolean read fActivo write fActivo;
  end;

  { TTarjetaLLaveCollection }
  TTarjetaLLaveCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TTarjetaLLave;
    procedure SetItems(aIndex: integer; const Value: TTarjetaLLave);
  public
    constructor Create; overload;
    function Add: TTarjetaLLave; reintroduce;
    procedure SaveToArray(anArray: aTarjetaLlave);
    procedure LoadFromArray(anArray: aTarjetaLlave);
    property Items[Index: integer]:TTarjetaLLave read GetItems write SetItems; default;
  end;

  { TBancaria }
  TBancaria = class(TROComplexType)
  private
    fMensaje: AnsiString;
    fTarjeta: AnsiString;
    fNombreCliente: AnsiString;
    fAprobada: Boolean;
    fID: Integer;
    fAutorizacion: AnsiString;
    fComision: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Mensaje:AnsiString read fMensaje write fMensaje;
    property Tarjeta:AnsiString read fTarjeta write fTarjeta;
    property NombreCliente:AnsiString read fNombreCliente write fNombreCliente;
    property Aprobada:Boolean read fAprobada write fAprobada;
    property ID:Integer read fID write fID;
    property Autorizacion:AnsiString read fAutorizacion write fAutorizacion;
    property Comision:Double read fComision write fComision;
  end;

  { TBancariaCollection }
  TBancariaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TBancaria;
    procedure SetItems(aIndex: integer; const Value: TBancaria);
  public
    constructor Create; overload;
    function Add: TBancaria; reintroduce;
    property Items[Index: integer]:TBancaria read GetItems write SetItems; default;
  end;

  { TGeneraCupon }
  TGeneraCupon = class(TROComplexType)
  private
    fCantidad: Integer;
    fDenominacion: Double;
    fReferencia: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Cantidad:Integer read fCantidad write fCantidad;
    property Denominacion:Double read fDenominacion write fDenominacion;
    property Referencia:AnsiString read fReferencia write fReferencia;
  end;

  { TGeneraCuponCollection }
  TGeneraCuponCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TGeneraCupon;
    procedure SetItems(aIndex: integer; const Value: TGeneraCupon);
  public
    constructor Create; overload;
    function Add: TGeneraCupon; reintroduce;
    procedure SaveToArray(anArray: AGeneraCupon);
    procedure LoadFromArray(anArray: AGeneraCupon);
    property Items[Index: integer]:TGeneraCupon read GetItems write SetItems; default;
  end;

  { TDatosTicketConsumo }
  TDatosTicketConsumo = class(TROComplexType)
  private
    fSecuencia: Integer;
    fBombaID: Integer;
    fFecha: DateTime;
    fNombreProducto: AnsiString;
    fCliente: AnsiString;
    fIdentificacion: AnsiString;
    fReferencia: AnsiString;
    fOdometro: Integer;
    fVolumen: Double;
    fPrecio: Double;
    fImporte: Double;
    fIVA: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Secuencia:Integer read fSecuencia write fSecuencia;
    property BombaID:Integer read fBombaID write fBombaID;
    property Fecha:DateTime read fFecha write fFecha;
    property NombreProducto:AnsiString read fNombreProducto write fNombreProducto;
    property Cliente:AnsiString read fCliente write fCliente;
    property Identificacion:AnsiString read fIdentificacion write fIdentificacion;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Odometro:Integer read fOdometro write fOdometro;
    property Volumen:Double read fVolumen write fVolumen;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
    property IVA:Double read fIVA write fIVA;
  end;

  { TDatosTicketConsumoCollection }
  TDatosTicketConsumoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosTicketConsumo;
    procedure SetItems(aIndex: integer; const Value: TDatosTicketConsumo);
  public
    constructor Create; overload;
    function Add: TDatosTicketConsumo; reintroduce;
    property Items[Index: integer]:TDatosTicketConsumo read GetItems write SetItems; default;
  end;

  { TProductoF }
  TProductoF = class(TROComplexType)
  private
    fID: Integer;
    fNombre: AnsiString;
    fPrecio: Double;
    fCantidad: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ID:Integer read fID write fID;
    property Nombre:AnsiString read fNombre write fNombre;
    property Precio:Double read fPrecio write fPrecio;
    property Cantidad:Double read fCantidad write fCantidad;
  end;

  { TProductoFCollection }
  TProductoFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TProductoF;
    procedure SetItems(aIndex: integer; const Value: TProductoF);
  public
    constructor Create; overload;
    function Add: TProductoF; reintroduce;
    procedure SaveToArray(anArray: AProductoF);
    procedure LoadFromArray(anArray: AProductoF);
    property Items[Index: integer]:TProductoF read GetItems write SetItems; default;
  end;

  { TDatosClienteOtros }
  TDatosClienteOtros = class(TROComplexType)
  private
    fClienteID: Integer;
    fVehiculoID: Integer;
    fNombre: AnsiString;
    fIdentificacion: AnsiString;
    fIVA: Double;
    fGasolineroID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property VehiculoID:Integer read fVehiculoID write fVehiculoID;
    property Nombre:AnsiString read fNombre write fNombre;
    property Identificacion:AnsiString read fIdentificacion write fIdentificacion;
    property IVA:Double read fIVA write fIVA;
    property GasolineroID:Integer read fGasolineroID write fGasolineroID;
  end;

  { TDatosClienteOtrosCollection }
  TDatosClienteOtrosCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosClienteOtros;
    procedure SetItems(aIndex: integer; const Value: TDatosClienteOtros);
  public
    constructor Create; overload;
    function Add: TDatosClienteOtros; reintroduce;
    property Items[Index: integer]:TDatosClienteOtros read GetItems write SetItems; default;
  end;

  { TTiempoAire }
  TTiempoAire = class(TROComplexType)
  private
    fProveedor: Integer;
    fTelefono: AnsiString;
    fImporte: Double;
    fAccepted: Boolean;
    fidTrans: AnsiString;
    fTransID: AnsiString;
    fNotes: AnsiString;
    fInstructions: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Proveedor:Integer read fProveedor write fProveedor;
    property Telefono:AnsiString read fTelefono write fTelefono;
    property Importe:Double read fImporte write fImporte;
    property Accepted:Boolean read fAccepted write fAccepted;
    property idTrans:AnsiString read fidTrans write fidTrans;
    property TransID:AnsiString read fTransID write fTransID;
    property Notes:AnsiString read fNotes write fNotes;
    property Instructions:AnsiString read fInstructions write fInstructions;
  end;

  { TTiempoAireCollection }
  TTiempoAireCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TTiempoAire;
    procedure SetItems(aIndex: integer; const Value: TTiempoAire);
  public
    constructor Create; overload;
    function Add: TTiempoAire; reintroduce;
    property Items[Index: integer]:TTiempoAire read GetItems write SetItems; default;
  end;

  { TDatosVerifica }
  TDatosVerifica = class(TROComplexType)
  private
    fAfectarHistorico: Boolean;
    fKMS: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property AfectarHistorico:Boolean read fAfectarHistorico write fAfectarHistorico;
    property KMS:Integer read fKMS write fKMS;
  end;

  { TDatosVerificaCollection }
  TDatosVerificaCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosVerifica;
    procedure SetItems(aIndex: integer; const Value: TDatosVerifica);
  public
    constructor Create; overload;
    function Add: TDatosVerifica; reintroduce;
    property Items[Index: integer]:TDatosVerifica read GetItems write SetItems; default;
  end;

  { TDatosVerifoneF }
  TDatosVerifoneF = class(TROComplexType)
  private
    fClienteID: Integer;
    fVehiculoID: Integer;
    fNombre: AnsiString;
    fRazonSocial: AnsiString;
    fDomicilio: AnsiString;
    fColonia: AnsiString;
    fCiudad: AnsiString;
    fRFC: AnsiString;
    fNIP: Integer;
    fIdentificacion: AnsiString;
    fUsuario: AnsiString;
    fAcumuladoMNMes: Double;
    fKMS: Integer;
    fReferencia: AnsiString;
    fAutorizada: Boolean;
    fVolumenImporte: AnsiString;
    fAutorizacionMN: Double;
    fAutorizacionLT: Double;
    fStatusID: Integer;
    fMensaje: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ClienteID:Integer read fClienteID write fClienteID;
    property VehiculoID:Integer read fVehiculoID write fVehiculoID;
    property Nombre:AnsiString read fNombre write fNombre;
    property RazonSocial:AnsiString read fRazonSocial write fRazonSocial;
    property Domicilio:AnsiString read fDomicilio write fDomicilio;
    property Colonia:AnsiString read fColonia write fColonia;
    property Ciudad:AnsiString read fCiudad write fCiudad;
    property RFC:AnsiString read fRFC write fRFC;
    property NIP:Integer read fNIP write fNIP;
    property Identificacion:AnsiString read fIdentificacion write fIdentificacion;
    property Usuario:AnsiString read fUsuario write fUsuario;
    property AcumuladoMNMes:Double read fAcumuladoMNMes write fAcumuladoMNMes;
    property KMS:Integer read fKMS write fKMS;
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Autorizada:Boolean read fAutorizada write fAutorizada;
    property VolumenImporte:AnsiString read fVolumenImporte write fVolumenImporte;
    property AutorizacionMN:Double read fAutorizacionMN write fAutorizacionMN;
    property AutorizacionLT:Double read fAutorizacionLT write fAutorizacionLT;
    property StatusID:Integer read fStatusID write fStatusID;
    property Mensaje:AnsiString read fMensaje write fMensaje;
  end;

  { TDatosVerifoneFCollection }
  TDatosVerifoneFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDatosVerifoneF;
    procedure SetItems(aIndex: integer; const Value: TDatosVerifoneF);
  public
    constructor Create; overload;
    function Add: TDatosVerifoneF; reintroduce;
    property Items[Index: integer]:TDatosVerifoneF read GetItems write SetItems; default;
  end;

  { TConfirmaEnvioF }
  TConfirmaEnvioF = class(TROComplexType)
  private
    fTipo: Integer;
    fConsumo: TConsumo;
    fHost: AnsiString;
    fFecha: DateTime;
    function GetConsumo: TConsumo;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Tipo:Integer read fTipo write fTipo;
    property Consumo:TConsumo read GetConsumo write fConsumo;
    property Host:AnsiString read fHost write fHost;
    property Fecha:DateTime read fFecha write fFecha;
  end;

  { TConfirmaEnvioFCollection }
  TConfirmaEnvioFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TConfirmaEnvioF;
    procedure SetItems(aIndex: integer; const Value: TConfirmaEnvioF);
  public
    constructor Create; overload;
    function Add: TConfirmaEnvioF; reintroduce;
    property Items[Index: integer]:TConfirmaEnvioF read GetItems write SetItems; default;
  end;

  { TFacturaElectronicaF }
  TFacturaElectronicaF = class(TROComplexType)
  private
    fSerie: AnsiString;
    fFolio: AnsiString;
    fFecha: AnsiString;
    fnoAprobacion: AnsiString;
    fanoAprobacion: AnsiString;
    ftipoComprobante: AnsiString;
    fformadePago: AnsiString;
    fSubTotal: AnsiString;
    fTotal: AnsiString;
    fRFCEmisor: AnsiString;
    fNomEmpEmisor: AnsiString;
    fDireccionEm: AnsiString;
    fNoExteriorEM: AnsiString;
    fColoniaEmisor: AnsiString;
    fMunicipioEmisor: AnsiString;
    fEstadoEmisor: AnsiString;
    fPaisEmisor: AnsiString;
    fCodigoPostalEmisor: AnsiString;
    fRFCReceptor: AnsiString;
    fNombreReceptor: AnsiString;
    fDomicilioReceptor: AnsiString;
    fNoExteriorReceptor: AnsiString;
    fColoniaReceptor: AnsiString;
    fLocalidadReceptor: AnsiString;
    fMunicipioReceptor: AnsiString;
    fEstadoReceptor: AnsiString;
    fPaisReceptor: AnsiString;
    fCodigoPostalReceptor: AnsiString;
    fFacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
    fFacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
    fTotalImpuesto: AnsiString;
    fCalleExpedidoEn: AnsiString;
    fNoExterioExpedidoEn: AnsiString;
    fColoniaExpedidoEn: AnsiString;
    fCodigoPostalExpedidoEn: AnsiString;
    fLocalidadExpedidoEn: AnsiString;
    fMunicipioExpedidoEn: AnsiString;
    fEstadoExpedidoEn: AnsiString;
    fPaisExpedidoEn: AnsiString;
    fSucursal: Boolean;
    femail: AnsiString;
    function GetFacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
    function GetFacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Serie:AnsiString read fSerie write fSerie;
    property Folio:AnsiString read fFolio write fFolio;
    property Fecha:AnsiString read fFecha write fFecha;
    property noAprobacion:AnsiString read fnoAprobacion write fnoAprobacion;
    property anoAprobacion:AnsiString read fanoAprobacion write fanoAprobacion;
    property tipoComprobante:AnsiString read ftipoComprobante write ftipoComprobante;
    property formadePago:AnsiString read fformadePago write fformadePago;
    property SubTotal:AnsiString read fSubTotal write fSubTotal;
    property Total:AnsiString read fTotal write fTotal;
    property RFCEmisor:AnsiString read fRFCEmisor write fRFCEmisor;
    property NomEmpEmisor:AnsiString read fNomEmpEmisor write fNomEmpEmisor;
    property DireccionEm:AnsiString read fDireccionEm write fDireccionEm;
    property NoExteriorEM:AnsiString read fNoExteriorEM write fNoExteriorEM;
    property ColoniaEmisor:AnsiString read fColoniaEmisor write fColoniaEmisor;
    property MunicipioEmisor:AnsiString read fMunicipioEmisor write fMunicipioEmisor;
    property EstadoEmisor:AnsiString read fEstadoEmisor write fEstadoEmisor;
    property PaisEmisor:AnsiString read fPaisEmisor write fPaisEmisor;
    property CodigoPostalEmisor:AnsiString read fCodigoPostalEmisor write fCodigoPostalEmisor;
    property RFCReceptor:AnsiString read fRFCReceptor write fRFCReceptor;
    property NombreReceptor:AnsiString read fNombreReceptor write fNombreReceptor;
    property DomicilioReceptor:AnsiString read fDomicilioReceptor write fDomicilioReceptor;
    property NoExteriorReceptor:AnsiString read fNoExteriorReceptor write fNoExteriorReceptor;
    property ColoniaReceptor:AnsiString read fColoniaReceptor write fColoniaReceptor;
    property LocalidadReceptor:AnsiString read fLocalidadReceptor write fLocalidadReceptor;
    property MunicipioReceptor:AnsiString read fMunicipioReceptor write fMunicipioReceptor;
    property EstadoReceptor:AnsiString read fEstadoReceptor write fEstadoReceptor;
    property PaisReceptor:AnsiString read fPaisReceptor write fPaisReceptor;
    property CodigoPostalReceptor:AnsiString read fCodigoPostalReceptor write fCodigoPostalReceptor;
    property FacturaElectronicaDetalleImportes:ATFacturaElectronicaDetalleImportes read GetFacturaElectronicaDetalleImportes write fFacturaElectronicaDetalleImportes;
    property FacturaElectronicaDetalleImpuestos:ATFacturaElectronicaDetalleImpuestos read GetFacturaElectronicaDetalleImpuestos write fFacturaElectronicaDetalleImpuestos;
    property TotalImpuesto:AnsiString read fTotalImpuesto write fTotalImpuesto;
    property CalleExpedidoEn:AnsiString read fCalleExpedidoEn write fCalleExpedidoEn;
    property NoExterioExpedidoEn:AnsiString read fNoExterioExpedidoEn write fNoExterioExpedidoEn;
    property ColoniaExpedidoEn:AnsiString read fColoniaExpedidoEn write fColoniaExpedidoEn;
    property CodigoPostalExpedidoEn:AnsiString read fCodigoPostalExpedidoEn write fCodigoPostalExpedidoEn;
    property LocalidadExpedidoEn:AnsiString read fLocalidadExpedidoEn write fLocalidadExpedidoEn;
    property MunicipioExpedidoEn:AnsiString read fMunicipioExpedidoEn write fMunicipioExpedidoEn;
    property EstadoExpedidoEn:AnsiString read fEstadoExpedidoEn write fEstadoExpedidoEn;
    property PaisExpedidoEn:AnsiString read fPaisExpedidoEn write fPaisExpedidoEn;
    property Sucursal:Boolean read fSucursal write fSucursal;
    property email:AnsiString read femail write femail;
  end;

  { TFacturaElectronicaFCollection }
  TFacturaElectronicaFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFacturaElectronicaF;
    procedure SetItems(aIndex: integer; const Value: TFacturaElectronicaF);
  public
    constructor Create; overload;
    function Add: TFacturaElectronicaF; reintroduce;
    property Items[Index: integer]:TFacturaElectronicaF read GetItems write SetItems; default;
  end;

  { TFacturaElectronicaDetalleImporteF }
  TFacturaElectronicaDetalleImporteF = class(TROComplexType)
  private
    fCantidadReceptor: AnsiString;
    fUnidadReceptor: AnsiString;
    fDescripcionReceptor: AnsiString;
    fValorUnitarioReceptor: AnsiString;
    fImporteReceptor: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property CantidadReceptor:AnsiString read fCantidadReceptor write fCantidadReceptor;
    property UnidadReceptor:AnsiString read fUnidadReceptor write fUnidadReceptor;
    property DescripcionReceptor:AnsiString read fDescripcionReceptor write fDescripcionReceptor;
    property ValorUnitarioReceptor:AnsiString read fValorUnitarioReceptor write fValorUnitarioReceptor;
    property ImporteReceptor:AnsiString read fImporteReceptor write fImporteReceptor;
  end;

  { TFacturaElectronicaDetalleImporteFCollection }
  TFacturaElectronicaDetalleImporteFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFacturaElectronicaDetalleImporteF;
    procedure SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImporteF);
  public
    constructor Create; overload;
    function Add: TFacturaElectronicaDetalleImporteF; reintroduce;
    procedure SaveToArray(anArray: ATFacturaElectronicaDetalleImportes);
    procedure LoadFromArray(anArray: ATFacturaElectronicaDetalleImportes);
    property Items[Index: integer]:TFacturaElectronicaDetalleImporteF read GetItems write SetItems; default;
  end;

  { TFacturaElectronicaDetalleImpuestosF }
  TFacturaElectronicaDetalleImpuestosF = class(TROComplexType)
  private
    fImpuestoReceptor: AnsiString;
    fTasaReceptor: AnsiString;
    fImporteImpReceptor: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property ImpuestoReceptor:AnsiString read fImpuestoReceptor write fImpuestoReceptor;
    property TasaReceptor:AnsiString read fTasaReceptor write fTasaReceptor;
    property ImporteImpReceptor:AnsiString read fImporteImpReceptor write fImporteImpReceptor;
  end;

  { TFacturaElectronicaDetalleImpuestosFCollection }
  TFacturaElectronicaDetalleImpuestosFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TFacturaElectronicaDetalleImpuestosF;
    procedure SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImpuestosF);
  public
    constructor Create; overload;
    function Add: TFacturaElectronicaDetalleImpuestosF; reintroduce;
    procedure SaveToArray(anArray: ATFacturaElectronicaDetalleImpuestos);
    procedure LoadFromArray(anArray: ATFacturaElectronicaDetalleImpuestos);
    property Items[Index: integer]:TFacturaElectronicaDetalleImpuestosF read GetItems write SetItems; default;
  end;

  { TDocumentoCupones }
  TDocumentoCupones = class(TROComplexType)
  private
    fReferencia: AnsiString;
    fSerie: AnsiString;
    faFolio: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Referencia:AnsiString read fReferencia write fReferencia;
    property Serie:AnsiString read fSerie write fSerie;
    property aFolio:Integer read faFolio write faFolio;
  end;

  { TDocumentoCuponesCollection }
  TDocumentoCuponesCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDocumentoCupones;
    procedure SetItems(aIndex: integer; const Value: TDocumentoCupones);
  public
    constructor Create; overload;
    function Add: TDocumentoCupones; reintroduce;
    procedure SaveToArray(anArray: TDocumentosCuponesArray);
    procedure LoadFromArray(anArray: TDocumentosCuponesArray);
    property Items[Index: integer]:TDocumentoCupones read GetItems write SetItems; default;
  end;

  { TMonederoElectronico }
  TMonederoElectronico = class(TROComplexType)
  private
    ftipoOperacion: AnsiString;
    fNumerodeCuenta: AnsiString;
    fSubTotal: AnsiString;
    fTotal: AnsiString;
    fconceptoEstadodeCuentaCombustible: AConceptoEstadodeCuentaCombustible;
    function GetconceptoEstadodeCuentaCombustible: AConceptoEstadodeCuentaCombustible;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property tipoOperacion:AnsiString read ftipoOperacion write ftipoOperacion;
    property NumerodeCuenta:AnsiString read fNumerodeCuenta write fNumerodeCuenta;
    property SubTotal:AnsiString read fSubTotal write fSubTotal;
    property Total:AnsiString read fTotal write fTotal;
    property conceptoEstadodeCuentaCombustible:AConceptoEstadodeCuentaCombustible read GetconceptoEstadodeCuentaCombustible write fconceptoEstadodeCuentaCombustible;
  end;

  { TMonederoElectronicoCollection }
  TMonederoElectronicoCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TMonederoElectronico;
    procedure SetItems(aIndex: integer; const Value: TMonederoElectronico);
  public
    constructor Create; overload;
    function Add: TMonederoElectronico; reintroduce;
    property Items[Index: integer]:TMonederoElectronico read GetItems write SetItems; default;
  end;

  { TConceptoEstadodeCuentaCombustible }
  TConceptoEstadodeCuentaCombustible = class(TROComplexType)
  private
    fidentificacion: AnsiString;
    ffecha: AnsiString;
    frfc: AnsiString;
    fclaveEstacion: AnsiString;
    fcantidad: AnsiString;
    fnombreCombustible: AnsiString;
    ffolioOperacion: AnsiString;
    fvalorUnitario: AnsiString;
    fimporte: AnsiString;
    fdetalleimpuesto: AImpuestoConceptoEstadodeCuentaCombustible;
    function Getdetalleimpuesto: AImpuestoConceptoEstadodeCuentaCombustible;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property identificacion:AnsiString read fidentificacion write fidentificacion;
    property fecha:AnsiString read ffecha write ffecha;
    property rfc:AnsiString read frfc write frfc;
    property claveEstacion:AnsiString read fclaveEstacion write fclaveEstacion;
    property cantidad:AnsiString read fcantidad write fcantidad;
    property nombreCombustible:AnsiString read fnombreCombustible write fnombreCombustible;
    property folioOperacion:AnsiString read ffolioOperacion write ffolioOperacion;
    property valorUnitario:AnsiString read fvalorUnitario write fvalorUnitario;
    property importe:AnsiString read fimporte write fimporte;
    property detalleimpuesto:AImpuestoConceptoEstadodeCuentaCombustible read Getdetalleimpuesto write fdetalleimpuesto;
  end;

  { TConceptoEstadodeCuentaCombustibleCollection }
  TConceptoEstadodeCuentaCombustibleCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TConceptoEstadodeCuentaCombustible;
    procedure SetItems(aIndex: integer; const Value: TConceptoEstadodeCuentaCombustible);
  public
    constructor Create; overload;
    function Add: TConceptoEstadodeCuentaCombustible; reintroduce;
    procedure SaveToArray(anArray: AConceptoEstadodeCuentaCombustible);
    procedure LoadFromArray(anArray: AConceptoEstadodeCuentaCombustible);
    property Items[Index: integer]:TConceptoEstadodeCuentaCombustible read GetItems write SetItems; default;
  end;

  { TImpuestoConceptoEstadodeCuentaCombustible }
  TImpuestoConceptoEstadodeCuentaCombustible = class(TROComplexType)
  private
    fimpuesto: AnsiString;
    ftasa: AnsiString;
    fimporteimpuesto: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property impuesto:AnsiString read fimpuesto write fimpuesto;
    property tasa:AnsiString read ftasa write ftasa;
    property importeimpuesto:AnsiString read fimporteimpuesto write fimporteimpuesto;
  end;

  { TImpuestoConceptoEstadodeCuentaCombustibleCollection }
  TImpuestoConceptoEstadodeCuentaCombustibleCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TImpuestoConceptoEstadodeCuentaCombustible;
    procedure SetItems(aIndex: integer; const Value: TImpuestoConceptoEstadodeCuentaCombustible);
  public
    constructor Create; overload;
    function Add: TImpuestoConceptoEstadodeCuentaCombustible; reintroduce;
    procedure SaveToArray(anArray: AImpuestoConceptoEstadodeCuentaCombustible);
    procedure LoadFromArray(anArray: AImpuestoConceptoEstadodeCuentaCombustible);
    property Items[Index: integer]:TImpuestoConceptoEstadodeCuentaCombustible read GetItems write SetItems; default;
  end;

  { TDataFacturaElectronicaF }
  TDataFacturaElectronicaF = class(TROComplexType)
  private
    fFacturaElectronicaF: TFacturaElectronicaF;
    fMonederoElectronico: TMonederoElectronico;
    fCadenaOriginal: Widestring;
    fSelloDigital: AnsiString;
    fNumCertificado: AnsiString;
    fCertificado: Widestring;
    function GetFacturaElectronicaF: TFacturaElectronicaF;
    function GetMonederoElectronico: TMonederoElectronico;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property FacturaElectronicaF:TFacturaElectronicaF read GetFacturaElectronicaF write fFacturaElectronicaF;
    property MonederoElectronico:TMonederoElectronico read GetMonederoElectronico write fMonederoElectronico;
    property CadenaOriginal:Widestring read fCadenaOriginal write fCadenaOriginal;
    property SelloDigital:AnsiString read fSelloDigital write fSelloDigital;
    property NumCertificado:AnsiString read fNumCertificado write fNumCertificado;
    property Certificado:Widestring read fCertificado write fCertificado;
  end;

  { TDataFacturaElectronicaFCollection }
  TDataFacturaElectronicaFCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TDataFacturaElectronicaF;
    procedure SetItems(aIndex: integer; const Value: TDataFacturaElectronicaF);
  public
    constructor Create; overload;
    function Add: TDataFacturaElectronicaF; reintroduce;
    property Items[Index: integer]:TDataFacturaElectronicaF read GetItems write SetItems; default;
  end;

  { TBitacoraGOB }
  TBitacoraGOB = class(TROComplexType)
  private
    fFecha: DateTime;
    fIDAutorizacion: Integer;
    fIDConsumoGuardadoGOB: Integer;
    fSecuenciaVenta: Integer;
    fFechaCarga: DateTime;
    fRFID: AnsiString;
    fTurno: Integer;
    fKilometraje: Integer;
    fPosicionCarga: Integer;
    fCantidad: Double;
    fPrecio: Double;
    fImporte: Double;
    fImpuestoImporte: Double;
    fImpuestoPorcentaje: Double;
    fProductoID: Integer;
    fGasolineroID: Integer;
    fIEPS: Double;
    fEstacionID: Integer;
    fSaldo: Double;
    fClienteID: Integer;
    fVehiculoID: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Fecha:DateTime read fFecha write fFecha;
    property IDAutorizacion:Integer read fIDAutorizacion write fIDAutorizacion;
    property IDConsumoGuardadoGOB:Integer read fIDConsumoGuardadoGOB write fIDConsumoGuardadoGOB;
    property SecuenciaVenta:Integer read fSecuenciaVenta write fSecuenciaVenta;
    property FechaCarga:DateTime read fFechaCarga write fFechaCarga;
    property RFID:AnsiString read fRFID write fRFID;
    property Turno:Integer read fTurno write fTurno;
    property Kilometraje:Integer read fKilometraje write fKilometraje;
    property PosicionCarga:Integer read fPosicionCarga write fPosicionCarga;
    property Cantidad:Double read fCantidad write fCantidad;
    property Precio:Double read fPrecio write fPrecio;
    property Importe:Double read fImporte write fImporte;
    property ImpuestoImporte:Double read fImpuestoImporte write fImpuestoImporte;
    property ImpuestoPorcentaje:Double read fImpuestoPorcentaje write fImpuestoPorcentaje;
    property ProductoID:Integer read fProductoID write fProductoID;
    property GasolineroID:Integer read fGasolineroID write fGasolineroID;
    property IEPS:Double read fIEPS write fIEPS;
    property EstacionID:Integer read fEstacionID write fEstacionID;
    property Saldo:Double read fSaldo write fSaldo;
    property ClienteID:Integer read fClienteID write fClienteID;
    property VehiculoID:Integer read fVehiculoID write fVehiculoID;
  end;

  { TBitacoraGOBCollection }
  TBitacoraGOBCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TBitacoraGOB;
    procedure SetItems(aIndex: integer; const Value: TBitacoraGOB);
  public
    constructor Create; overload;
    function Add: TBitacoraGOB; reintroduce;
    property Items[Index: integer]:TBitacoraGOB read GetItems write SetItems; default;
  end;

  { TUnidadesGOB }
  TUnidadesGOB = class(TROComplexType)
  private
    fNumeroEconomico: AnsiString;
    fInventario: AnsiString;
    fPlacas: AnsiString;
    fMarcas: AnsiString;
    fModelo: AnsiString;
    fColor: AnsiString;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property NumeroEconomico:AnsiString read fNumeroEconomico write fNumeroEconomico;
    property Inventario:AnsiString read fInventario write fInventario;
    property Placas:AnsiString read fPlacas write fPlacas;
    property Marcas:AnsiString read fMarcas write fMarcas;
    property Modelo:AnsiString read fModelo write fModelo;
    property Color:AnsiString read fColor write fColor;
  end;

  { TUnidadesGOBCollection }
  TUnidadesGOBCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TUnidadesGOB;
    procedure SetItems(aIndex: integer; const Value: TUnidadesGOB);
  public
    constructor Create; overload;
    function Add: TUnidadesGOB; reintroduce;
    property Items[Index: integer]:TUnidadesGOB read GetItems write SetItems; default;
  end;

  { TEnviaDatosFacturaGOB }
  TEnviaDatosFacturaGOB = class(TROComplexType)
  private
    fFactura: AnsiString;
    fFecha: DateTime;
    fSubTotal: Double;
    fIVA: Double;
    fDetalle: Widestring;
    fTotal: Double;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property Factura:AnsiString read fFactura write fFactura;
    property Fecha:DateTime read fFecha write fFecha;
    property SubTotal:Double read fSubTotal write fSubTotal;
    property IVA:Double read fIVA write fIVA;
    property Detalle:Widestring read fDetalle write fDetalle;
    property Total:Double read fTotal write fTotal;
  end;

  { TEnviaDatosFacturaGOBCollection }
  TEnviaDatosFacturaGOBCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TEnviaDatosFacturaGOB;
    procedure SetItems(aIndex: integer; const Value: TEnviaDatosFacturaGOB);
  public
    constructor Create; overload;
    function Add: TEnviaDatosFacturaGOB; reintroduce;
    property Items[Index: integer]:TEnviaDatosFacturaGOB read GetItems write SetItems; default;
  end;

  { TAutorizaGOB }
  TAutorizaGOB = class(TROComplexType)
  private
    fREFERENCIAGOB: AnsiString;
    fSALDOGOB: Double;
    fCLASIFICACION: Integer;
  public
    procedure Assign(iSource: TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    property REFERENCIAGOB:AnsiString read fREFERENCIAGOB write fREFERENCIAGOB;
    property SALDOGOB:Double read fSALDOGOB write fSALDOGOB;
    property CLASIFICACION:Integer read fCLASIFICACION write fCLASIFICACION;
  end;

  { TAutorizaGOBCollection }
  TAutorizaGOBCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): TAutorizaGOB;
    procedure SetItems(aIndex: integer; const Value: TAutorizaGOB);
  public
    constructor Create; overload;
    function Add: TAutorizaGOB; reintroduce;
    property Items[Index: integer]:TAutorizaGOB read GetItems write SetItems; default;
  end;

  { ArrayOpcionF }
  ArrayOpcionF_TOpcionF = array of TOpcionF;
  ArrayOpcionF = class(TROArray)
  private
    fCount: Integer;
    fItems : ArrayOpcionF_TOpcionF;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TOpcionF;
    procedure SetItems(aIndex: integer; const Value: TOpcionF);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TOpcionF; overload;
    function Add(const Value: TOpcionF):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TOpcionF read GetItems write SetItems; default;
    property InnerArray: ArrayOpcionF_TOpcionF read fItems;
  end;

  { ATDetalleFactura }
  ATDetalleFactura_TDetalleFactura = array of TDetalleFactura;
  ATDetalleFactura = class(TROArray)
  private
    fCount: Integer;
    fItems : ATDetalleFactura_TDetalleFactura;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDetalleFactura;
    procedure SetItems(aIndex: integer; const Value: TDetalleFactura);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleFactura; overload;
    function Add(const Value: TDetalleFactura):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDetalleFactura read GetItems write SetItems; default;
    property InnerArray: ATDetalleFactura_TDetalleFactura read fItems;
  end;

  { TDocumentosConSaldoArray }
  TDocumentosConSaldoArray_TDocumentosConSaldo = array of TDocumentosConSaldo;
  TDocumentosConSaldoArray = class(TROArray)
  private
    fCount: Integer;
    fItems : TDocumentosConSaldoArray_TDocumentosConSaldo;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDocumentosConSaldo;
    procedure SetItems(aIndex: integer; const Value: TDocumentosConSaldo);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDocumentosConSaldo; overload;
    function Add(const Value: TDocumentosConSaldo):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDocumentosConSaldo read GetItems write SetItems; default;
    property InnerArray: TDocumentosConSaldoArray_TDocumentosConSaldo read fItems;
  end;

  { ATDetalleCupon }
  ATDetalleCupon_TDetalleCupon = array of TDetalleCupon;
  ATDetalleCupon = class(TROArray)
  private
    fCount: Integer;
    fItems : ATDetalleCupon_TDetalleCupon;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDetalleCupon;
    procedure SetItems(aIndex: integer; const Value: TDetalleCupon);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDetalleCupon; overload;
    function Add(const Value: TDetalleCupon):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDetalleCupon read GetItems write SetItems; default;
    property InnerArray: ATDetalleCupon_TDetalleCupon read fItems;
  end;

  { aConsumo }
  aConsumo_TConsumo = array of TConsumo;
  aConsumo = class(TROArray)
  private
    fCount: Integer;
    fItems : aConsumo_TConsumo;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TConsumo;
    procedure SetItems(aIndex: integer; const Value: TConsumo);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TConsumo; overload;
    function Add(const Value: TConsumo):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TConsumo read GetItems write SetItems; default;
    property InnerArray: aConsumo_TConsumo read fItems;
  end;

  { aTarjetaLlave }
  aTarjetaLlave_TTarjetaLLave = array of TTarjetaLLave;
  aTarjetaLlave = class(TROArray)
  private
    fCount: Integer;
    fItems : aTarjetaLlave_TTarjetaLLave;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TTarjetaLLave;
    procedure SetItems(aIndex: integer; const Value: TTarjetaLLave);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TTarjetaLLave; overload;
    function Add(const Value: TTarjetaLLave):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TTarjetaLLave read GetItems write SetItems; default;
    property InnerArray: aTarjetaLlave_TTarjetaLLave read fItems;
  end;

  { AGeneraCupon }
  AGeneraCupon_TGeneraCupon = array of TGeneraCupon;
  AGeneraCupon = class(TROArray)
  private
    fCount: Integer;
    fItems : AGeneraCupon_TGeneraCupon;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TGeneraCupon;
    procedure SetItems(aIndex: integer; const Value: TGeneraCupon);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TGeneraCupon; overload;
    function Add(const Value: TGeneraCupon):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TGeneraCupon read GetItems write SetItems; default;
    property InnerArray: AGeneraCupon_TGeneraCupon read fItems;
  end;

  { AAutorizacion }
  AAutorizacion_TAutorizacion = array of TAutorizacion;
  AAutorizacion = class(TROArray)
  private
    fCount: Integer;
    fItems : AAutorizacion_TAutorizacion;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TAutorizacion;
    procedure SetItems(aIndex: integer; const Value: TAutorizacion);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TAutorizacion; overload;
    function Add(const Value: TAutorizacion):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TAutorizacion read GetItems write SetItems; default;
    property InnerArray: AAutorizacion_TAutorizacion read fItems;
  end;

  { AProductoF }
  AProductoF_TProductoF = array of TProductoF;
  AProductoF = class(TROArray)
  private
    fCount: Integer;
    fItems : AProductoF_TProductoF;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TProductoF;
    procedure SetItems(aIndex: integer; const Value: TProductoF);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TProductoF; overload;
    function Add(const Value: TProductoF):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TProductoF read GetItems write SetItems; default;
    property InnerArray: AProductoF_TProductoF read fItems;
  end;

  { ATFacturaElectronicaDetalleImportes }
  ATFacturaElectronicaDetalleImportes_TFacturaElectronicaDetalleImporteF = array of TFacturaElectronicaDetalleImporteF;
  ATFacturaElectronicaDetalleImportes = class(TROArray)
  private
    fCount: Integer;
    fItems : ATFacturaElectronicaDetalleImportes_TFacturaElectronicaDetalleImporteF;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TFacturaElectronicaDetalleImporteF;
    procedure SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImporteF);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TFacturaElectronicaDetalleImporteF; overload;
    function Add(const Value: TFacturaElectronicaDetalleImporteF):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TFacturaElectronicaDetalleImporteF read GetItems write SetItems; default;
    property InnerArray: ATFacturaElectronicaDetalleImportes_TFacturaElectronicaDetalleImporteF read fItems;
  end;

  { ATFacturaElectronicaDetalleImpuestos }
  ATFacturaElectronicaDetalleImpuestos_TFacturaElectronicaDetalleImpuestosF = array of TFacturaElectronicaDetalleImpuestosF;
  ATFacturaElectronicaDetalleImpuestos = class(TROArray)
  private
    fCount: Integer;
    fItems : ATFacturaElectronicaDetalleImpuestos_TFacturaElectronicaDetalleImpuestosF;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TFacturaElectronicaDetalleImpuestosF;
    procedure SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImpuestosF);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TFacturaElectronicaDetalleImpuestosF; overload;
    function Add(const Value: TFacturaElectronicaDetalleImpuestosF):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TFacturaElectronicaDetalleImpuestosF read GetItems write SetItems; default;
    property InnerArray: ATFacturaElectronicaDetalleImpuestos_TFacturaElectronicaDetalleImpuestosF read fItems;
  end;

  { TDocumentosCuponesArray }
  TDocumentosCuponesArray_TDocumentoCupones = array of TDocumentoCupones;
  TDocumentosCuponesArray = class(TROArray)
  private
    fCount: Integer;
    fItems : TDocumentosCuponesArray_TDocumentoCupones;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TDocumentoCupones;
    procedure SetItems(aIndex: integer; const Value: TDocumentoCupones);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TDocumentoCupones; overload;
    function Add(const Value: TDocumentoCupones):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TDocumentoCupones read GetItems write SetItems; default;
    property InnerArray: TDocumentosCuponesArray_TDocumentoCupones read fItems;
  end;

  { AConceptoEstadodeCuentaCombustible }
  AConceptoEstadodeCuentaCombustible_TConceptoEstadodeCuentaCombustible = array of TConceptoEstadodeCuentaCombustible;
  AConceptoEstadodeCuentaCombustible = class(TROArray)
  private
    fCount: Integer;
    fItems : AConceptoEstadodeCuentaCombustible_TConceptoEstadodeCuentaCombustible;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TConceptoEstadodeCuentaCombustible;
    procedure SetItems(aIndex: integer; const Value: TConceptoEstadodeCuentaCombustible);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TConceptoEstadodeCuentaCombustible; overload;
    function Add(const Value: TConceptoEstadodeCuentaCombustible):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TConceptoEstadodeCuentaCombustible read GetItems write SetItems; default;
    property InnerArray: AConceptoEstadodeCuentaCombustible_TConceptoEstadodeCuentaCombustible read fItems;
  end;

  { AImpuestoConceptoEstadodeCuentaCombustible }
  AImpuestoConceptoEstadodeCuentaCombustible_TImpuestoConceptoEstadodeCuentaCombustible = array of TImpuestoConceptoEstadodeCuentaCombustible;
  AImpuestoConceptoEstadodeCuentaCombustible = class(TROArray)
  private
    fCount: Integer;
    fItems : AImpuestoConceptoEstadodeCuentaCombustible_TImpuestoConceptoEstadodeCuentaCombustible;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): TImpuestoConceptoEstadodeCuentaCombustible;
    procedure SetItems(aIndex: integer; const Value: TImpuestoConceptoEstadodeCuentaCombustible);
    function GetCount: integer; override;
  public
    class function GetItemType: PTypeInfo; override;
    class function GetItemClass: TClass; override;
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    function Add: TImpuestoConceptoEstadodeCuentaCombustible; overload;
    function Add(const Value: TImpuestoConceptoEstadodeCuentaCombustible):integer; overload;

    property Count : integer read GetCount;
    property Items[Index: integer]:TImpuestoConceptoEstadodeCuentaCombustible read GetItems write SetItems; default;
    property InnerArray: AImpuestoConceptoEstadodeCuentaCombustible_TImpuestoConceptoEstadodeCuentaCombustible read fItems;
  end;

  { IServiceFlotillas }
  IServiceFlotillas = interface(IDataAbstractService)
    ['{5730396E-2B5F-44B2-93E0-E78CC6C4624D}']
    function AbreDataSetReportes(const SQL: AnsiString; const Parametros: TParametrosF): Binary;
    procedure ActualizaHistorial(const Consumo: TConsumo);
    function AfectarMovimientos(const Movimiento: TMovimiento): Boolean;
    function AfectarSaldoDocumento(const SaldoDocumento: TSaldoDocumento): Boolean;
    procedure AgregaReferencia(const VehiculoID: Integer; const Tipo: Integer; const Referencia: AnsiString);
    function AgregaSecuencias(const Consumos: aConsumo): Boolean;
    function RegistraPagosFaltantes(const SaldoDocumentoID: Integer; const Fecha: DateTime; const FechaVencimiento: DateTime; const Cargo: Double; 
                                    const Abono: Double; const Referencia: AnsiString; const ClienteID: Integer; const MovimientoID: Integer; 
                                    const ReciboID: Integer; const BancoID: Integer; const Folio: Integer; const Ejercicio: Integer; const Periodo: Integer; 
                                    const Cheque: AnsiString; const Importe: Double; const CuentaContableCliente: AnsiString; const UsuarioID: Integer; 
                                    const EstacionID: Integer): Integer;
    function AutorizaTarjeta(const Autoriza: TAutoriza): TTarjeta;
    function Bancaria(const Terminal: AnsiString; const Supervisor: AnsiString; const BombaID: Integer; const EstacionID: Integer; 
                      const Track1: AnsiString; const Track2: AnsiString; const Importe: Double; const Ticket: Integer; const Serie: AnsiString; 
                      const Comision: Double; const BancariaTipoID: Integer; const CajaID: Integer): TBancaria;
    function BuscaAutorizacionTajeta(const ClienteID: Integer; const VehiculoID: Integer; const GasolineroID: Integer): Boolean;
    function BuscarReporte(const Nombre: AnsiString): TReporteF;
    function CambioFactura(const Serie: AnsiString; const Folio: Integer; const NevaSerie: AnsiString; const NuevoFolio: Integer; 
                           const FechaImpresion: DateTime): AnsiString;
    function CancelaGrupo(const Grupo: Integer): Boolean;
    function CancelarCupones(const Lista: AnsiString; const UsuarioID: Integer): AnsiString;
    function CancelarLote(const LoteID: Integer; const UsuarioID: Integer): AnsiString;
    function CaracteresCupon: AnsiString;
    function CierrePeriodo(const Periodo: Integer; const Ejercicio: Integer; const UsuarioID: Integer): Boolean;
    function ClaveACupon(const Clave: AnsiString): Integer;
    function DatosCliente(const ClienteID: Integer): TCliente;
    function DatosFactura(const Folio: Integer; const Serie: AnsiString): Boolean;
    function DatosVehiculo(const VehiculoID: Integer): TDatosVehiculo;
    function DocumentosConSaldo(const ClienteID: Integer): TDocumentosConSaldoArray;
    procedure EliminaAutorizacion(const AutorizacionID: Integer);
    function EliminaAutorizacionVehiculo(const Referencia: AnsiString): Boolean;
    function EliminaFactura(const Folio: Integer; const Serie: AnsiString): Boolean;
    procedure EliminaReferencia(const VehiculoID: Integer; const Tipo: Integer);
    procedure EliminaVehiculoProducto(const VehiculoID: Integer; const ProductoID: Integer);
    function FacturaRecibo(const Cliente: Integer; const Importe: Double; const EstacionID: Integer; const EmpleadoID: Integer; 
                           const SerieFactura: AnsiString; const ProductoID: Integer): Integer;
    function FacturaEstacion(const DatosFactura: TDatosFactura; const EstacionID: Integer): Integer;
    function FacturaCupon(const Cliente: Integer; const Importe: Double; const EstacionID: Integer; const EmpleadoID: Integer; 
                          const SerieFactura: AnsiString): Integer;
    function Fecha: DateTime;
    function Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function GasolineroID: Integer;
    function GasolineroNombre: AnsiString;
    procedure GeneraCupones(const LoteCuponID: Integer; const ClienteID: Integer; const EstacionID: Integer; const Identificador: Integer; 
                            const Cupones: AGeneraCupon; const TipoCupon: Boolean; const Serie: AnsiString; const aFolio: Integer);
    function GenerarFacturas(const Serie: AnsiString; const fol: Integer; const FechaCorte: DateTime; const FechaContable: DateTime; 
                             const DiaFacturar: Integer; const Magna: Boolean; const Premium: Boolean; const Diesel: Boolean; const EmpleadoID: Integer): Integer;
    procedure GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
    function GuardaAutorizacion(const Autorizacion: TAutoriza): Boolean;
    procedure GuardaDatosFactura(const DatosFactura: TDatosFactura);
    function GuardarConsumo(const Consumo: TConsumo): Boolean;
    function InsertaBitacora(const ClienteID: Integer; const UsuarioID: Integer; const Tabla: AnsiString; const Campo: AnsiString; 
                             const ValorAnterior: AnsiString; const ValorNuevo: AnsiString): Boolean;
    function Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfoF;
    function ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const FolioNew: Integer): AnsiString;
    function ObtenCuponValido(const Barras: AnsiString; const Grupo: Integer; const Autoriza: TAutoriza): TCuponValido;
    function QuemarCupon(const Consumo: TConsumo; const Barras: AnsiString): Boolean;
    function ReferenciaTarjeta(const VehiculoID: Integer): AnsiString;
    function Series(const Campo: AnsiString): AnsiString;
    function StatusCupon(const Codigo: AnsiString): AnsiString;
    function TarjetaConsumo(const Tarjeta: AnsiString; const Consumo: TConsumo): Boolean;
    function TarjetasLLave: aTarjetaLlave;
    function ValidaSecuencias(const EstacionID: Integer; const Secuencias: AnsiString): AnsiString;
    procedure VehiculoProducto(const VehiculoID: Integer; const ProductoID: Integer);
    function REDConsumo(const EstacionID: Integer; const Serie: AnsiString; const TicketID: Integer; const AutorizacionID: Integer; 
                        const Importe: Double; const ProductoID: Integer): TDatosTicketConsumo;
    function REDAutorizaciones(const EstacionID: Integer; const BombaID: Integer): AAutorizacion;
    function PrecioProducto(const ProductoID: Integer): Double;
    function TiempoAire(const EstacionID: Integer; const BombaID: Integer; const Telefono: AnsiString; const ProveedorID: Integer; 
                        const Importe: Double; const CajaID: Integer; const LLave: AnsiString): TTiempoAire;
    function CashBack(const EstacionID: Integer; const BombaID: Integer; const Terminal: AnsiString; const Track1: AnsiString; 
                      const Track2: AnsiString; const Importe: Double; const LLave: AnsiString; const CajaID: Integer): TBancaria;
    function DatosProducto(const ID: Integer): TProductoF;
    function IVAEstacion(const EstacionID: Integer): Double;
    function DatosClienteOtros(const Tarjeta: AnsiString; const EstacionID: Integer): TDatosClienteOtros;
    procedure ClasificacionCliente(const ClienteID: Integer; const Clasificacion: Integer);
    procedure ClasificacionVehiculo(const VehiculoID: Integer; const Clasificacion: Integer);
    function Clasificacion: Integer;
    function DatosVerifica(const VehiculoID: Integer): TDatosVerifica;
    function DatosVerificaReferencia(const Referencia: AnsiString): TDatosVerifica;
    function Rendimiento(const EstacionID: Integer; const TicketID: Integer): Double;
    function DatosVerifone(const VehiculoID: Integer; const Referencia: AnsiString): TDatosVerifoneF;
    function CambiaNIP(const Referencia: AnsiString; const NIP: Integer): Boolean;
    function CambiaClienteConsumo(const EstacionID: Integer; const Ticket: Integer; const Serie: AnsiString; const ClienteID: Integer; 
                                  const VehiculoID: Integer): Boolean;
    function CuponManual(const EstacionID: Integer; const TurnoID: Integer; const BombaID: Integer; const Barras: AnsiString): TCuponValido;
    function GeneraFacturasXCliente(const ClienteID: Integer; const Productos: AnsiString; const FechaCorte: DateTime; const FechaContable: DateTime; 
                                    const Serie: AnsiString; const aFolio: Integer; const EmpleadoID: Integer): Integer;
    function ValidaConsumo(const Consumo: TConsumo): Integer;
    function ClienteCupon(const Barra: AnsiString): Integer;
    function QuemarCupon_Manual(const Consumo: TConsumo; const Barras: AnsiString): Boolean;
    function GeneraFacturasXClienteCupones(const ClienteID: Integer; const Productos: AnsiString; const FechaCorte: DateTime; const FechaContable: DateTime; 
                                           const EmpleadoID: Integer; const Serie: AnsiString; const aFolio: Integer): Integer;
    function DocumentosCupones(const ClienteID: Integer): TDocumentosCuponesArray;
    function AroVehiculo(const Referencia: AnsiString): AnsiString;
    function DatosFacturaElectronica(const FacturaID: Integer; const GasolineroID: Integer): TFacturaElectronicaF;
    procedure InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: Widestring; const SelloDigital: Widestring; 
                                        const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString; 
                                        const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
    function FolioActual2(const Serie: AnsiString; const folio: Integer): Integer;
    function DatosMonedero(const FacturaID: Integer; const GasolineroID: Integer): TMonederoElectronico;
    function CadenaOriginal(const FacturaID: Integer; const GasolineroID: Integer): TDataFacturaElectronicaF;
    function GOBCHIP(const Referencia: AnsiString): Boolean;
    function GuardaBitacoraGOB(const BitacoraGOB: TBitacoraGOB): Boolean;
    function GuardarConsumoGOB(const Consumo: TConsumo): Boolean;
    function DatosUnidadesGOB(const TARJETA: AnsiString): TUnidadesGOB;
    function EnviaDatosFacturaGOB(const DatosFacturaEnviaGOB: TEnviaDatosFacturaGOB): Boolean;
    function AutorizaGOB(const Referencia: AnsiString): TAutorizaGOB;
  end;

  { CoServiceFlotillas }
  CoServiceFlotillas = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceFlotillas;
  end;

  { TServiceFlotillas_Proxy }
  TServiceFlotillas_Proxy = class(TDataAbstractService_Proxy, IServiceFlotillas)
  protected
    function __GetInterfaceName:string; override;

    function AbreDataSetReportes(const SQL: AnsiString; const Parametros: TParametrosF): Binary;
    procedure ActualizaHistorial(const Consumo: TConsumo);
    function AfectarMovimientos(const Movimiento: TMovimiento): Boolean;
    function AfectarSaldoDocumento(const SaldoDocumento: TSaldoDocumento): Boolean;
    procedure AgregaReferencia(const VehiculoID: Integer; const Tipo: Integer; const Referencia: AnsiString);
    function AgregaSecuencias(const Consumos: aConsumo): Boolean;
    function RegistraPagosFaltantes(const SaldoDocumentoID: Integer; const Fecha: DateTime; const FechaVencimiento: DateTime; const Cargo: Double; 
                                    const Abono: Double; const Referencia: AnsiString; const ClienteID: Integer; const MovimientoID: Integer; 
                                    const ReciboID: Integer; const BancoID: Integer; const Folio: Integer; const Ejercicio: Integer; const Periodo: Integer; 
                                    const Cheque: AnsiString; const Importe: Double; const CuentaContableCliente: AnsiString; const UsuarioID: Integer; 
                                    const EstacionID: Integer): Integer;
    function AutorizaTarjeta(const Autoriza: TAutoriza): TTarjeta;
    function Bancaria(const Terminal: AnsiString; const Supervisor: AnsiString; const BombaID: Integer; const EstacionID: Integer; 
                      const Track1: AnsiString; const Track2: AnsiString; const Importe: Double; const Ticket: Integer; const Serie: AnsiString; 
                      const Comision: Double; const BancariaTipoID: Integer; const CajaID: Integer): TBancaria;
    function BuscaAutorizacionTajeta(const ClienteID: Integer; const VehiculoID: Integer; const GasolineroID: Integer): Boolean;
    function BuscarReporte(const Nombre: AnsiString): TReporteF;
    function CambioFactura(const Serie: AnsiString; const Folio: Integer; const NevaSerie: AnsiString; const NuevoFolio: Integer; 
                           const FechaImpresion: DateTime): AnsiString;
    function CancelaGrupo(const Grupo: Integer): Boolean;
    function CancelarCupones(const Lista: AnsiString; const UsuarioID: Integer): AnsiString;
    function CancelarLote(const LoteID: Integer; const UsuarioID: Integer): AnsiString;
    function CaracteresCupon: AnsiString;
    function CierrePeriodo(const Periodo: Integer; const Ejercicio: Integer; const UsuarioID: Integer): Boolean;
    function ClaveACupon(const Clave: AnsiString): Integer;
    function DatosCliente(const ClienteID: Integer): TCliente;
    function DatosFactura(const Folio: Integer; const Serie: AnsiString): Boolean;
    function DatosVehiculo(const VehiculoID: Integer): TDatosVehiculo;
    function DocumentosConSaldo(const ClienteID: Integer): TDocumentosConSaldoArray;
    procedure EliminaAutorizacion(const AutorizacionID: Integer);
    function EliminaAutorizacionVehiculo(const Referencia: AnsiString): Boolean;
    function EliminaFactura(const Folio: Integer; const Serie: AnsiString): Boolean;
    procedure EliminaReferencia(const VehiculoID: Integer; const Tipo: Integer);
    procedure EliminaVehiculoProducto(const VehiculoID: Integer; const ProductoID: Integer);
    function FacturaRecibo(const Cliente: Integer; const Importe: Double; const EstacionID: Integer; const EmpleadoID: Integer; 
                           const SerieFactura: AnsiString; const ProductoID: Integer): Integer;
    function FacturaEstacion(const DatosFactura: TDatosFactura; const EstacionID: Integer): Integer;
    function FacturaCupon(const Cliente: Integer; const Importe: Double; const EstacionID: Integer; const EmpleadoID: Integer; 
                          const SerieFactura: AnsiString): Integer;
    function Fecha: DateTime;
    function Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function GasolineroID: Integer;
    function GasolineroNombre: AnsiString;
    procedure GeneraCupones(const LoteCuponID: Integer; const ClienteID: Integer; const EstacionID: Integer; const Identificador: Integer; 
                            const Cupones: AGeneraCupon; const TipoCupon: Boolean; const Serie: AnsiString; const aFolio: Integer);
    function GenerarFacturas(const Serie: AnsiString; const fol: Integer; const FechaCorte: DateTime; const FechaContable: DateTime; 
                             const DiaFacturar: Integer; const Magna: Boolean; const Premium: Boolean; const Diesel: Boolean; const EmpleadoID: Integer): Integer;
    procedure GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
    function GuardaAutorizacion(const Autorizacion: TAutoriza): Boolean;
    procedure GuardaDatosFactura(const DatosFactura: TDatosFactura);
    function GuardarConsumo(const Consumo: TConsumo): Boolean;
    function InsertaBitacora(const ClienteID: Integer; const UsuarioID: Integer; const Tabla: AnsiString; const Campo: AnsiString; 
                             const ValorAnterior: AnsiString; const ValorNuevo: AnsiString): Boolean;
    function Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfoF;
    function ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const FolioNew: Integer): AnsiString;
    function ObtenCuponValido(const Barras: AnsiString; const Grupo: Integer; const Autoriza: TAutoriza): TCuponValido;
    function QuemarCupon(const Consumo: TConsumo; const Barras: AnsiString): Boolean;
    function ReferenciaTarjeta(const VehiculoID: Integer): AnsiString;
    function Series(const Campo: AnsiString): AnsiString;
    function StatusCupon(const Codigo: AnsiString): AnsiString;
    function TarjetaConsumo(const Tarjeta: AnsiString; const Consumo: TConsumo): Boolean;
    function TarjetasLLave: aTarjetaLlave;
    function ValidaSecuencias(const EstacionID: Integer; const Secuencias: AnsiString): AnsiString;
    procedure VehiculoProducto(const VehiculoID: Integer; const ProductoID: Integer);
    function REDConsumo(const EstacionID: Integer; const Serie: AnsiString; const TicketID: Integer; const AutorizacionID: Integer; 
                        const Importe: Double; const ProductoID: Integer): TDatosTicketConsumo;
    function REDAutorizaciones(const EstacionID: Integer; const BombaID: Integer): AAutorizacion;
    function PrecioProducto(const ProductoID: Integer): Double;
    function TiempoAire(const EstacionID: Integer; const BombaID: Integer; const Telefono: AnsiString; const ProveedorID: Integer; 
                        const Importe: Double; const CajaID: Integer; const LLave: AnsiString): TTiempoAire;
    function CashBack(const EstacionID: Integer; const BombaID: Integer; const Terminal: AnsiString; const Track1: AnsiString; 
                      const Track2: AnsiString; const Importe: Double; const LLave: AnsiString; const CajaID: Integer): TBancaria;
    function DatosProducto(const ID: Integer): TProductoF;
    function IVAEstacion(const EstacionID: Integer): Double;
    function DatosClienteOtros(const Tarjeta: AnsiString; const EstacionID: Integer): TDatosClienteOtros;
    procedure ClasificacionCliente(const ClienteID: Integer; const Clasificacion: Integer);
    procedure ClasificacionVehiculo(const VehiculoID: Integer; const Clasificacion: Integer);
    function Clasificacion: Integer;
    function DatosVerifica(const VehiculoID: Integer): TDatosVerifica;
    function DatosVerificaReferencia(const Referencia: AnsiString): TDatosVerifica;
    function Rendimiento(const EstacionID: Integer; const TicketID: Integer): Double;
    function DatosVerifone(const VehiculoID: Integer; const Referencia: AnsiString): TDatosVerifoneF;
    function CambiaNIP(const Referencia: AnsiString; const NIP: Integer): Boolean;
    function CambiaClienteConsumo(const EstacionID: Integer; const Ticket: Integer; const Serie: AnsiString; const ClienteID: Integer; 
                                  const VehiculoID: Integer): Boolean;
    function CuponManual(const EstacionID: Integer; const TurnoID: Integer; const BombaID: Integer; const Barras: AnsiString): TCuponValido;
    function GeneraFacturasXCliente(const ClienteID: Integer; const Productos: AnsiString; const FechaCorte: DateTime; const FechaContable: DateTime; 
                                    const Serie: AnsiString; const aFolio: Integer; const EmpleadoID: Integer): Integer;
    function ValidaConsumo(const Consumo: TConsumo): Integer;
    function ClienteCupon(const Barra: AnsiString): Integer;
    function QuemarCupon_Manual(const Consumo: TConsumo; const Barras: AnsiString): Boolean;
    function GeneraFacturasXClienteCupones(const ClienteID: Integer; const Productos: AnsiString; const FechaCorte: DateTime; const FechaContable: DateTime; 
                                           const EmpleadoID: Integer; const Serie: AnsiString; const aFolio: Integer): Integer;
    function DocumentosCupones(const ClienteID: Integer): TDocumentosCuponesArray;
    function AroVehiculo(const Referencia: AnsiString): AnsiString;
    function DatosFacturaElectronica(const FacturaID: Integer; const GasolineroID: Integer): TFacturaElectronicaF;
    procedure InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: Widestring; const SelloDigital: Widestring; 
                                        const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString; 
                                        const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
    function FolioActual2(const Serie: AnsiString; const folio: Integer): Integer;
    function DatosMonedero(const FacturaID: Integer; const GasolineroID: Integer): TMonederoElectronico;
    function CadenaOriginal(const FacturaID: Integer; const GasolineroID: Integer): TDataFacturaElectronicaF;
    function GOBCHIP(const Referencia: AnsiString): Boolean;
    function GuardaBitacoraGOB(const BitacoraGOB: TBitacoraGOB): Boolean;
    function GuardarConsumoGOB(const Consumo: TConsumo): Boolean;
    function DatosUnidadesGOB(const TARJETA: AnsiString): TUnidadesGOB;
    function EnviaDatosFacturaGOB(const DatosFacturaEnviaGOB: TEnviaDatosFacturaGOB): Boolean;
    function AutorizaGOB(const Referencia: AnsiString): TAutorizaGOB;
  end;

implementation

uses
  {vcl:} SysUtils,
  {RemObjects:} uROEventRepository, uROSerializer, uRORes;

{ ArrayOpcionF }

procedure ArrayOpcionF.Assign(iSource: TPersistent);
var lSource:ArrayOpcionF;
    i:integer;
begin
  if (iSource is ArrayOpcionF) then begin
    lSource := ArrayOpcionF(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ArrayOpcionF.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TOpcionF);
end;

class function ArrayOpcionF.GetItemClass: TClass;
begin
  result := TOpcionF;
end;

class function ArrayOpcionF.GetItemSize: integer;
begin
  result := SizeOf(TOpcionF);
end;

function ArrayOpcionF.GetItems(aIndex: integer): TOpcionF;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ArrayOpcionF.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ArrayOpcionF.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ArrayOpcionF.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ArrayOpcionF.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ArrayOpcionF.SetItems(aIndex: integer; const Value: TOpcionF);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ArrayOpcionF.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TOpcionF.Create;
  FCount := ElementCount;
end;

function ArrayOpcionF.GetCount: integer;
begin
  result := FCount;
end;

procedure ArrayOpcionF.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ArrayOpcionF.Add: TOpcionF;
begin
  result := TOpcionF.Create;
  Add(Result);
end;

function ArrayOpcionF.Add(const Value:TOpcionF): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ArrayOpcionF.ReadComplex(ASerializer: TObject);
var
  lval: TOpcionF;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TOpcionF, lval, i);
    Items[i] := lval;
  end;
end;

procedure ArrayOpcionF.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TOpcionF, i);
end;

{ ATDetalleFactura }

procedure ATDetalleFactura.Assign(iSource: TPersistent);
var lSource:ATDetalleFactura;
    i:integer;
begin
  if (iSource is ATDetalleFactura) then begin
    lSource := ATDetalleFactura(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATDetalleFactura.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDetalleFactura);
end;

class function ATDetalleFactura.GetItemClass: TClass;
begin
  result := TDetalleFactura;
end;

class function ATDetalleFactura.GetItemSize: integer;
begin
  result := SizeOf(TDetalleFactura);
end;

function ATDetalleFactura.GetItems(aIndex: integer): TDetalleFactura;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATDetalleFactura.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATDetalleFactura.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATDetalleFactura.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATDetalleFactura.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATDetalleFactura.SetItems(aIndex: integer; const Value: TDetalleFactura);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATDetalleFactura.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleFactura.Create;
  FCount := ElementCount;
end;

function ATDetalleFactura.GetCount: integer;
begin
  result := FCount;
end;

procedure ATDetalleFactura.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATDetalleFactura.Add: TDetalleFactura;
begin
  result := TDetalleFactura.Create;
  Add(Result);
end;

function ATDetalleFactura.Add(const Value:TDetalleFactura): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATDetalleFactura.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleFactura;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleFactura, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATDetalleFactura.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleFactura, i);
end;

{ TDocumentosConSaldoArray }

procedure TDocumentosConSaldoArray.Assign(iSource: TPersistent);
var lSource:TDocumentosConSaldoArray;
    i:integer;
begin
  if (iSource is TDocumentosConSaldoArray) then begin
    lSource := TDocumentosConSaldoArray(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function TDocumentosConSaldoArray.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDocumentosConSaldo);
end;

class function TDocumentosConSaldoArray.GetItemClass: TClass;
begin
  result := TDocumentosConSaldo;
end;

class function TDocumentosConSaldoArray.GetItemSize: integer;
begin
  result := SizeOf(TDocumentosConSaldo);
end;

function TDocumentosConSaldoArray.GetItems(aIndex: integer): TDocumentosConSaldo;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function TDocumentosConSaldoArray.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure TDocumentosConSaldoArray.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure TDocumentosConSaldoArray.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure TDocumentosConSaldoArray.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure TDocumentosConSaldoArray.SetItems(aIndex: integer; const Value: TDocumentosConSaldo);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure TDocumentosConSaldoArray.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDocumentosConSaldo.Create;
  FCount := ElementCount;
end;

function TDocumentosConSaldoArray.GetCount: integer;
begin
  result := FCount;
end;

procedure TDocumentosConSaldoArray.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function TDocumentosConSaldoArray.Add: TDocumentosConSaldo;
begin
  result := TDocumentosConSaldo.Create;
  Add(Result);
end;

function TDocumentosConSaldoArray.Add(const Value:TDocumentosConSaldo): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure TDocumentosConSaldoArray.ReadComplex(ASerializer: TObject);
var
  lval: TDocumentosConSaldo;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDocumentosConSaldo, lval, i);
    Items[i] := lval;
  end;
end;

procedure TDocumentosConSaldoArray.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDocumentosConSaldo, i);
end;

{ ATDetalleCupon }

procedure ATDetalleCupon.Assign(iSource: TPersistent);
var lSource:ATDetalleCupon;
    i:integer;
begin
  if (iSource is ATDetalleCupon) then begin
    lSource := ATDetalleCupon(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATDetalleCupon.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDetalleCupon);
end;

class function ATDetalleCupon.GetItemClass: TClass;
begin
  result := TDetalleCupon;
end;

class function ATDetalleCupon.GetItemSize: integer;
begin
  result := SizeOf(TDetalleCupon);
end;

function ATDetalleCupon.GetItems(aIndex: integer): TDetalleCupon;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATDetalleCupon.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATDetalleCupon.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATDetalleCupon.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATDetalleCupon.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATDetalleCupon.SetItems(aIndex: integer; const Value: TDetalleCupon);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATDetalleCupon.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDetalleCupon.Create;
  FCount := ElementCount;
end;

function ATDetalleCupon.GetCount: integer;
begin
  result := FCount;
end;

procedure ATDetalleCupon.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATDetalleCupon.Add: TDetalleCupon;
begin
  result := TDetalleCupon.Create;
  Add(Result);
end;

function ATDetalleCupon.Add(const Value:TDetalleCupon): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATDetalleCupon.ReadComplex(ASerializer: TObject);
var
  lval: TDetalleCupon;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDetalleCupon, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATDetalleCupon.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDetalleCupon, i);
end;

{ aConsumo }

procedure aConsumo.Assign(iSource: TPersistent);
var lSource:aConsumo;
    i:integer;
begin
  if (iSource is aConsumo) then begin
    lSource := aConsumo(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aConsumo.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TConsumo);
end;

class function aConsumo.GetItemClass: TClass;
begin
  result := TConsumo;
end;

class function aConsumo.GetItemSize: integer;
begin
  result := SizeOf(TConsumo);
end;

function aConsumo.GetItems(aIndex: integer): TConsumo;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aConsumo.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aConsumo.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aConsumo.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aConsumo.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aConsumo.SetItems(aIndex: integer; const Value: TConsumo);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aConsumo.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TConsumo.Create;
  FCount := ElementCount;
end;

function aConsumo.GetCount: integer;
begin
  result := FCount;
end;

procedure aConsumo.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aConsumo.Add: TConsumo;
begin
  result := TConsumo.Create;
  Add(Result);
end;

function aConsumo.Add(const Value:TConsumo): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aConsumo.ReadComplex(ASerializer: TObject);
var
  lval: TConsumo;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TConsumo, lval, i);
    Items[i] := lval;
  end;
end;

procedure aConsumo.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TConsumo, i);
end;

{ aTarjetaLlave }

procedure aTarjetaLlave.Assign(iSource: TPersistent);
var lSource:aTarjetaLlave;
    i:integer;
begin
  if (iSource is aTarjetaLlave) then begin
    lSource := aTarjetaLlave(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function aTarjetaLlave.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TTarjetaLLave);
end;

class function aTarjetaLlave.GetItemClass: TClass;
begin
  result := TTarjetaLLave;
end;

class function aTarjetaLlave.GetItemSize: integer;
begin
  result := SizeOf(TTarjetaLLave);
end;

function aTarjetaLlave.GetItems(aIndex: integer): TTarjetaLLave;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function aTarjetaLlave.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure aTarjetaLlave.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure aTarjetaLlave.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure aTarjetaLlave.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure aTarjetaLlave.SetItems(aIndex: integer; const Value: TTarjetaLLave);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure aTarjetaLlave.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TTarjetaLLave.Create;
  FCount := ElementCount;
end;

function aTarjetaLlave.GetCount: integer;
begin
  result := FCount;
end;

procedure aTarjetaLlave.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function aTarjetaLlave.Add: TTarjetaLLave;
begin
  result := TTarjetaLLave.Create;
  Add(Result);
end;

function aTarjetaLlave.Add(const Value:TTarjetaLLave): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure aTarjetaLlave.ReadComplex(ASerializer: TObject);
var
  lval: TTarjetaLLave;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TTarjetaLLave, lval, i);
    Items[i] := lval;
  end;
end;

procedure aTarjetaLlave.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TTarjetaLLave, i);
end;

{ AGeneraCupon }

procedure AGeneraCupon.Assign(iSource: TPersistent);
var lSource:AGeneraCupon;
    i:integer;
begin
  if (iSource is AGeneraCupon) then begin
    lSource := AGeneraCupon(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function AGeneraCupon.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TGeneraCupon);
end;

class function AGeneraCupon.GetItemClass: TClass;
begin
  result := TGeneraCupon;
end;

class function AGeneraCupon.GetItemSize: integer;
begin
  result := SizeOf(TGeneraCupon);
end;

function AGeneraCupon.GetItems(aIndex: integer): TGeneraCupon;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function AGeneraCupon.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure AGeneraCupon.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure AGeneraCupon.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure AGeneraCupon.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure AGeneraCupon.SetItems(aIndex: integer; const Value: TGeneraCupon);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure AGeneraCupon.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TGeneraCupon.Create;
  FCount := ElementCount;
end;

function AGeneraCupon.GetCount: integer;
begin
  result := FCount;
end;

procedure AGeneraCupon.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function AGeneraCupon.Add: TGeneraCupon;
begin
  result := TGeneraCupon.Create;
  Add(Result);
end;

function AGeneraCupon.Add(const Value:TGeneraCupon): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure AGeneraCupon.ReadComplex(ASerializer: TObject);
var
  lval: TGeneraCupon;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TGeneraCupon, lval, i);
    Items[i] := lval;
  end;
end;

procedure AGeneraCupon.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TGeneraCupon, i);
end;

{ AAutorizacion }

procedure AAutorizacion.Assign(iSource: TPersistent);
var lSource:AAutorizacion;
    i:integer;
begin
  if (iSource is AAutorizacion) then begin
    lSource := AAutorizacion(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function AAutorizacion.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TAutorizacion);
end;

class function AAutorizacion.GetItemClass: TClass;
begin
  result := TAutorizacion;
end;

class function AAutorizacion.GetItemSize: integer;
begin
  result := SizeOf(TAutorizacion);
end;

function AAutorizacion.GetItems(aIndex: integer): TAutorizacion;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function AAutorizacion.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure AAutorizacion.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure AAutorizacion.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure AAutorizacion.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure AAutorizacion.SetItems(aIndex: integer; const Value: TAutorizacion);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure AAutorizacion.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TAutorizacion.Create;
  FCount := ElementCount;
end;

function AAutorizacion.GetCount: integer;
begin
  result := FCount;
end;

procedure AAutorizacion.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function AAutorizacion.Add: TAutorizacion;
begin
  result := TAutorizacion.Create;
  Add(Result);
end;

function AAutorizacion.Add(const Value:TAutorizacion): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure AAutorizacion.ReadComplex(ASerializer: TObject);
var
  lval: TAutorizacion;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TAutorizacion, lval, i);
    Items[i] := lval;
  end;
end;

procedure AAutorizacion.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TAutorizacion, i);
end;

{ AProductoF }

procedure AProductoF.Assign(iSource: TPersistent);
var lSource:AProductoF;
    i:integer;
begin
  if (iSource is AProductoF) then begin
    lSource := AProductoF(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function AProductoF.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TProductoF);
end;

class function AProductoF.GetItemClass: TClass;
begin
  result := TProductoF;
end;

class function AProductoF.GetItemSize: integer;
begin
  result := SizeOf(TProductoF);
end;

function AProductoF.GetItems(aIndex: integer): TProductoF;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function AProductoF.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure AProductoF.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure AProductoF.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure AProductoF.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure AProductoF.SetItems(aIndex: integer; const Value: TProductoF);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure AProductoF.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TProductoF.Create;
  FCount := ElementCount;
end;

function AProductoF.GetCount: integer;
begin
  result := FCount;
end;

procedure AProductoF.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function AProductoF.Add: TProductoF;
begin
  result := TProductoF.Create;
  Add(Result);
end;

function AProductoF.Add(const Value:TProductoF): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure AProductoF.ReadComplex(ASerializer: TObject);
var
  lval: TProductoF;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TProductoF, lval, i);
    Items[i] := lval;
  end;
end;

procedure AProductoF.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TProductoF, i);
end;

{ ATFacturaElectronicaDetalleImportes }

procedure ATFacturaElectronicaDetalleImportes.Assign(iSource: TPersistent);
var lSource:ATFacturaElectronicaDetalleImportes;
    i:integer;
begin
  if (iSource is ATFacturaElectronicaDetalleImportes) then begin
    lSource := ATFacturaElectronicaDetalleImportes(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATFacturaElectronicaDetalleImportes.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TFacturaElectronicaDetalleImporteF);
end;

class function ATFacturaElectronicaDetalleImportes.GetItemClass: TClass;
begin
  result := TFacturaElectronicaDetalleImporteF;
end;

class function ATFacturaElectronicaDetalleImportes.GetItemSize: integer;
begin
  result := SizeOf(TFacturaElectronicaDetalleImporteF);
end;

function ATFacturaElectronicaDetalleImportes.GetItems(aIndex: integer): TFacturaElectronicaDetalleImporteF;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATFacturaElectronicaDetalleImportes.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATFacturaElectronicaDetalleImportes.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATFacturaElectronicaDetalleImportes.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATFacturaElectronicaDetalleImportes.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATFacturaElectronicaDetalleImportes.SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImporteF);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATFacturaElectronicaDetalleImportes.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TFacturaElectronicaDetalleImporteF.Create;
  FCount := ElementCount;
end;

function ATFacturaElectronicaDetalleImportes.GetCount: integer;
begin
  result := FCount;
end;

procedure ATFacturaElectronicaDetalleImportes.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATFacturaElectronicaDetalleImportes.Add: TFacturaElectronicaDetalleImporteF;
begin
  result := TFacturaElectronicaDetalleImporteF.Create;
  Add(Result);
end;

function ATFacturaElectronicaDetalleImportes.Add(const Value:TFacturaElectronicaDetalleImporteF): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATFacturaElectronicaDetalleImportes.ReadComplex(ASerializer: TObject);
var
  lval: TFacturaElectronicaDetalleImporteF;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TFacturaElectronicaDetalleImporteF, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATFacturaElectronicaDetalleImportes.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TFacturaElectronicaDetalleImporteF, i);
end;

{ ATFacturaElectronicaDetalleImpuestos }

procedure ATFacturaElectronicaDetalleImpuestos.Assign(iSource: TPersistent);
var lSource:ATFacturaElectronicaDetalleImpuestos;
    i:integer;
begin
  if (iSource is ATFacturaElectronicaDetalleImpuestos) then begin
    lSource := ATFacturaElectronicaDetalleImpuestos(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function ATFacturaElectronicaDetalleImpuestos.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TFacturaElectronicaDetalleImpuestosF);
end;

class function ATFacturaElectronicaDetalleImpuestos.GetItemClass: TClass;
begin
  result := TFacturaElectronicaDetalleImpuestosF;
end;

class function ATFacturaElectronicaDetalleImpuestos.GetItemSize: integer;
begin
  result := SizeOf(TFacturaElectronicaDetalleImpuestosF);
end;

function ATFacturaElectronicaDetalleImpuestos.GetItems(aIndex: integer): TFacturaElectronicaDetalleImpuestosF;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function ATFacturaElectronicaDetalleImpuestos.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure ATFacturaElectronicaDetalleImpuestos.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure ATFacturaElectronicaDetalleImpuestos.SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImpuestosF);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TFacturaElectronicaDetalleImpuestosF.Create;
  FCount := ElementCount;
end;

function ATFacturaElectronicaDetalleImpuestos.GetCount: integer;
begin
  result := FCount;
end;

procedure ATFacturaElectronicaDetalleImpuestos.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function ATFacturaElectronicaDetalleImpuestos.Add: TFacturaElectronicaDetalleImpuestosF;
begin
  result := TFacturaElectronicaDetalleImpuestosF.Create;
  Add(Result);
end;

function ATFacturaElectronicaDetalleImpuestos.Add(const Value:TFacturaElectronicaDetalleImpuestosF): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure ATFacturaElectronicaDetalleImpuestos.ReadComplex(ASerializer: TObject);
var
  lval: TFacturaElectronicaDetalleImpuestosF;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TFacturaElectronicaDetalleImpuestosF, lval, i);
    Items[i] := lval;
  end;
end;

procedure ATFacturaElectronicaDetalleImpuestos.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TFacturaElectronicaDetalleImpuestosF, i);
end;

{ TDocumentosCuponesArray }

procedure TDocumentosCuponesArray.Assign(iSource: TPersistent);
var lSource:TDocumentosCuponesArray;
    i:integer;
begin
  if (iSource is TDocumentosCuponesArray) then begin
    lSource := TDocumentosCuponesArray(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function TDocumentosCuponesArray.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TDocumentoCupones);
end;

class function TDocumentosCuponesArray.GetItemClass: TClass;
begin
  result := TDocumentoCupones;
end;

class function TDocumentosCuponesArray.GetItemSize: integer;
begin
  result := SizeOf(TDocumentoCupones);
end;

function TDocumentosCuponesArray.GetItems(aIndex: integer): TDocumentoCupones;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function TDocumentosCuponesArray.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure TDocumentosCuponesArray.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure TDocumentosCuponesArray.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure TDocumentosCuponesArray.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure TDocumentosCuponesArray.SetItems(aIndex: integer; const Value: TDocumentoCupones);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure TDocumentosCuponesArray.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TDocumentoCupones.Create;
  FCount := ElementCount;
end;

function TDocumentosCuponesArray.GetCount: integer;
begin
  result := FCount;
end;

procedure TDocumentosCuponesArray.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function TDocumentosCuponesArray.Add: TDocumentoCupones;
begin
  result := TDocumentoCupones.Create;
  Add(Result);
end;

function TDocumentosCuponesArray.Add(const Value:TDocumentoCupones): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure TDocumentosCuponesArray.ReadComplex(ASerializer: TObject);
var
  lval: TDocumentoCupones;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TDocumentoCupones, lval, i);
    Items[i] := lval;
  end;
end;

procedure TDocumentosCuponesArray.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TDocumentoCupones, i);
end;

{ AConceptoEstadodeCuentaCombustible }

procedure AConceptoEstadodeCuentaCombustible.Assign(iSource: TPersistent);
var lSource:AConceptoEstadodeCuentaCombustible;
    i:integer;
begin
  if (iSource is AConceptoEstadodeCuentaCombustible) then begin
    lSource := AConceptoEstadodeCuentaCombustible(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function AConceptoEstadodeCuentaCombustible.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TConceptoEstadodeCuentaCombustible);
end;

class function AConceptoEstadodeCuentaCombustible.GetItemClass: TClass;
begin
  result := TConceptoEstadodeCuentaCombustible;
end;

class function AConceptoEstadodeCuentaCombustible.GetItemSize: integer;
begin
  result := SizeOf(TConceptoEstadodeCuentaCombustible);
end;

function AConceptoEstadodeCuentaCombustible.GetItems(aIndex: integer): TConceptoEstadodeCuentaCombustible;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function AConceptoEstadodeCuentaCombustible.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure AConceptoEstadodeCuentaCombustible.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure AConceptoEstadodeCuentaCombustible.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure AConceptoEstadodeCuentaCombustible.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure AConceptoEstadodeCuentaCombustible.SetItems(aIndex: integer; const Value: TConceptoEstadodeCuentaCombustible);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure AConceptoEstadodeCuentaCombustible.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TConceptoEstadodeCuentaCombustible.Create;
  FCount := ElementCount;
end;

function AConceptoEstadodeCuentaCombustible.GetCount: integer;
begin
  result := FCount;
end;

procedure AConceptoEstadodeCuentaCombustible.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function AConceptoEstadodeCuentaCombustible.Add: TConceptoEstadodeCuentaCombustible;
begin
  result := TConceptoEstadodeCuentaCombustible.Create;
  Add(Result);
end;

function AConceptoEstadodeCuentaCombustible.Add(const Value:TConceptoEstadodeCuentaCombustible): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure AConceptoEstadodeCuentaCombustible.ReadComplex(ASerializer: TObject);
var
  lval: TConceptoEstadodeCuentaCombustible;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TConceptoEstadodeCuentaCombustible, lval, i);
    Items[i] := lval;
  end;
end;

procedure AConceptoEstadodeCuentaCombustible.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TConceptoEstadodeCuentaCombustible, i);
end;

{ AImpuestoConceptoEstadodeCuentaCombustible }

procedure AImpuestoConceptoEstadodeCuentaCombustible.Assign(iSource: TPersistent);
var lSource:AImpuestoConceptoEstadodeCuentaCombustible;
    i:integer;
begin
  if (iSource is AImpuestoConceptoEstadodeCuentaCombustible) then begin
    lSource := AImpuestoConceptoEstadodeCuentaCombustible(iSource);
    Clear();
    Resize(lSource.Count);

    for i := 0 to Count-1 do begin
      if Assigned(lSource.Items[i]) then begin
        Items[i].Assign(lSource.Items[i]);
      end;
    end;
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function AImpuestoConceptoEstadodeCuentaCombustible.GetItemType: PTypeInfo;
begin
  result := TypeInfo(TImpuestoConceptoEstadodeCuentaCombustible);
end;

class function AImpuestoConceptoEstadodeCuentaCombustible.GetItemClass: TClass;
begin
  result := TImpuestoConceptoEstadodeCuentaCombustible;
end;

class function AImpuestoConceptoEstadodeCuentaCombustible.GetItemSize: integer;
begin
  result := SizeOf(TImpuestoConceptoEstadodeCuentaCombustible);
end;

function AImpuestoConceptoEstadodeCuentaCombustible.GetItems(aIndex: integer): TImpuestoConceptoEstadodeCuentaCombustible;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

function AImpuestoConceptoEstadodeCuentaCombustible.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  result := fItems[aIndex];
end;

procedure AImpuestoConceptoEstadodeCuentaCombustible.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;

procedure AImpuestoConceptoEstadodeCuentaCombustible.Clear;
var i: integer;
begin
  for i := 0 to (Count-1) do fItems[i].Free();
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure AImpuestoConceptoEstadodeCuentaCombustible.Delete(aIndex: integer);
var i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  fItems[aIndex].Free();

  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure AImpuestoConceptoEstadodeCuentaCombustible.SetItems(aIndex: integer; const Value: TImpuestoConceptoEstadodeCuentaCombustible);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;
    fItems[aIndex] := Value;
  end;
end;

procedure AImpuestoConceptoEstadodeCuentaCombustible.Resize(ElementCount: integer);
var i: Integer;
begin
  if fCount = ElementCount then Exit;
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
  SetLength(fItems, ElementCount);
  for i := FCount to ElementCount -1 do
    FItems[i] := TImpuestoConceptoEstadodeCuentaCombustible.Create;
  FCount := ElementCount;
end;

function AImpuestoConceptoEstadodeCuentaCombustible.GetCount: integer;
begin
  result := FCount;
end;

procedure AImpuestoConceptoEstadodeCuentaCombustible.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;

function AImpuestoConceptoEstadodeCuentaCombustible.Add: TImpuestoConceptoEstadodeCuentaCombustible;
begin
  result := TImpuestoConceptoEstadodeCuentaCombustible.Create;
  Add(Result);
end;

function AImpuestoConceptoEstadodeCuentaCombustible.Add(const Value:TImpuestoConceptoEstadodeCuentaCombustible): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[result] := Value;
  Inc(fCount);
end;

procedure AImpuestoConceptoEstadodeCuentaCombustible.ReadComplex(ASerializer: TObject);
var
  lval: TImpuestoConceptoEstadodeCuentaCombustible;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), TImpuestoConceptoEstadodeCuentaCombustible, lval, i);
    Items[i] := lval;
  end;
end;

procedure AImpuestoConceptoEstadodeCuentaCombustible.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], TImpuestoConceptoEstadodeCuentaCombustible, i);
end;

{ TLoginInfoF }

procedure TLoginInfoF.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TLoginInfoF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TLoginInfoF) then begin
    lSource := LibraryFlotillas_Intf.TLoginInfoF(iSource);
    Valida := lSource.Valida;
    EmpleadoID := lSource.EmpleadoID;
    NombreEmpleado := lSource.NombreEmpleado;
    Accesos.Assign(lSource.Accesos);
  end;
end;

function TLoginInfoF.GetAccesos: ArrayOpcionF;
begin
  if (fAccesos = nil) then fAccesos := ArrayOpcionF.Create();
  result := fAccesos;
end;

procedure TLoginInfoF.ReadComplex(ASerializer: TObject);
var
  l_Accesos: ArrayOpcionF;
  l_EmpleadoID: Integer;
  l_NombreEmpleado: AnsiString;
  l_Valida: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Valida := Valida;
    TROSerializer(ASerializer).ReadEnumerated('Valida',TypeInfo(boolean), l_Valida);
    Valida := l_Valida;
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).ReadInteger('EmpleadoID', otSLong, l_EmpleadoID);
    EmpleadoID := l_EmpleadoID;
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).ReadAnsiString('NombreEmpleado', l_NombreEmpleado);
    NombreEmpleado := l_NombreEmpleado;
    l_Accesos := Accesos;
    TROSerializer(ASerializer).ReadArray('Accesos', ArrayOpcionF, l_Accesos);
    if Accesos <> l_Accesos then Accesos.Free;
    Accesos := l_Accesos;
  end
  else begin
    l_Accesos := Accesos;
    TROSerializer(ASerializer).ReadArray('Accesos', ArrayOpcionF, l_Accesos);
    if Accesos <> l_Accesos then Accesos.Free;
    Accesos := l_Accesos;
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).ReadInteger('EmpleadoID', otSLong, l_EmpleadoID);
    EmpleadoID := l_EmpleadoID;
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).ReadAnsiString('NombreEmpleado', l_NombreEmpleado);
    NombreEmpleado := l_NombreEmpleado;
    l_Valida := Valida;
    TROSerializer(ASerializer).ReadEnumerated('Valida',TypeInfo(boolean), l_Valida);
    Valida := l_Valida;
  end;
end;

procedure TLoginInfoF.WriteComplex(ASerializer: TObject);
var
  l_Accesos: ArrayOpcionF;
  l_EmpleadoID: Integer;
  l_NombreEmpleado: AnsiString;
  l_Valida: Boolean;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TLoginInfoF);
    l_Valida := Valida;
    TROSerializer(ASerializer).WriteEnumerated('Valida',TypeInfo(boolean), l_Valida);
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).WriteInteger('EmpleadoID', otSLong, l_EmpleadoID);
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).WriteAnsiString('NombreEmpleado', l_NombreEmpleado);
    l_Accesos := Accesos;
    TROSerializer(ASerializer).WriteArray('Accesos', l_Accesos, ArrayOpcionF);
  end
  else begin
    l_Accesos := Accesos;
    TROSerializer(ASerializer).WriteArray('Accesos', l_Accesos, ArrayOpcionF);
    l_EmpleadoID := EmpleadoID;
    TROSerializer(ASerializer).WriteInteger('EmpleadoID', otSLong, l_EmpleadoID);
    l_NombreEmpleado := NombreEmpleado;
    TROSerializer(ASerializer).WriteAnsiString('NombreEmpleado', l_NombreEmpleado);
    l_Valida := Valida;
    TROSerializer(ASerializer).WriteEnumerated('Valida',TypeInfo(boolean), l_Valida);
  end;
end;

{ TLoginInfoFCollection }
constructor TLoginInfoFCollection.Create;
begin
  inherited Create(TLoginInfoF);
end;

constructor TLoginInfoFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TLoginInfoFCollection.Add: TLoginInfoF;
begin
  result := TLoginInfoF(inherited Add);
end;

function TLoginInfoFCollection.GetItems(aIndex: integer): TLoginInfoF;
begin
  result := TLoginInfoF(inherited Items[aIndex]);
end;

procedure TLoginInfoFCollection.SetItems(aIndex: integer; const Value: TLoginInfoF);
begin
  TLoginInfoF(inherited Items[aIndex]).Assign(Value);
end;

{ TOpcionF }

procedure TOpcionF.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TOpcionF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TOpcionF) then begin
    lSource := LibraryFlotillas_Intf.TOpcionF(iSource);
    OpcionID := lSource.OpcionID;
    Nombre := lSource.Nombre;
  end;
end;

procedure TOpcionF.ReadComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_OpcionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).ReadInteger('OpcionID', otSLong, l_OpcionID);
    OpcionID := l_OpcionID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
  end
  else begin
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).ReadInteger('OpcionID', otSLong, l_OpcionID);
    OpcionID := l_OpcionID;
  end;
end;

procedure TOpcionF.WriteComplex(ASerializer: TObject);
var
  l_Nombre: AnsiString;
  l_OpcionID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TOpcionF);
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).WriteInteger('OpcionID', otSLong, l_OpcionID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
  end
  else begin
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_OpcionID := OpcionID;
    TROSerializer(ASerializer).WriteInteger('OpcionID', otSLong, l_OpcionID);
  end;
end;

{ TOpcionFCollection }
constructor TOpcionFCollection.Create;
begin
  inherited Create(TOpcionF);
end;

constructor TOpcionFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TOpcionFCollection.Add: TOpcionF;
begin
  result := TOpcionF(inherited Add);
end;

function TOpcionFCollection.GetItems(aIndex: integer): TOpcionF;
begin
  result := TOpcionF(inherited Items[aIndex]);
end;

procedure TOpcionFCollection.LoadFromArray(anArray: ArrayOpcionF);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TOpcionFCollection.SaveToArray(anArray: ArrayOpcionF);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TOpcionF.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TOpcionFCollection.SetItems(aIndex: integer; const Value: TOpcionF);
begin
  TOpcionF(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosFactura }

procedure TDatosFactura.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TDatosFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TDatosFactura) then begin
    lSource := LibraryFlotillas_Intf.TDatosFactura(iSource);
    Factura.Assign(lSource.Factura);
    DetalleFactura.Assign(lSource.DetalleFactura);
    DetalleCupon.Assign(lSource.DetalleCupon);
  end;
end;

function TDatosFactura.GetFactura: TFactura;
begin
  if (fFactura = nil) then fFactura := TFactura.Create();
  result := fFactura;
end;

function TDatosFactura.GetDetalleFactura: ATDetalleFactura;
begin
  if (fDetalleFactura = nil) then fDetalleFactura := ATDetalleFactura.Create();
  result := fDetalleFactura;
end;

function TDatosFactura.GetDetalleCupon: ATDetalleCupon;
begin
  if (fDetalleCupon = nil) then fDetalleCupon := ATDetalleCupon.Create();
  result := fDetalleCupon;
end;

procedure TDatosFactura.ReadComplex(ASerializer: TObject);
var
  l_DetalleCupon: ATDetalleCupon;
  l_DetalleFactura: ATDetalleFactura;
  l_Factura: TFactura;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Factura := Factura;
    TROSerializer(ASerializer).ReadStruct('Factura', TFactura, l_Factura);
    if Factura <> l_Factura then Factura.Free;
    Factura := l_Factura;
    l_DetalleFactura := DetalleFactura;
    TROSerializer(ASerializer).ReadArray('DetalleFactura', ATDetalleFactura, l_DetalleFactura);
    if DetalleFactura <> l_DetalleFactura then DetalleFactura.Free;
    DetalleFactura := l_DetalleFactura;
    l_DetalleCupon := DetalleCupon;
    TROSerializer(ASerializer).ReadArray('DetalleCupon', ATDetalleCupon, l_DetalleCupon);
    if DetalleCupon <> l_DetalleCupon then DetalleCupon.Free;
    DetalleCupon := l_DetalleCupon;
  end
  else begin
    l_DetalleCupon := DetalleCupon;
    TROSerializer(ASerializer).ReadArray('DetalleCupon', ATDetalleCupon, l_DetalleCupon);
    if DetalleCupon <> l_DetalleCupon then DetalleCupon.Free;
    DetalleCupon := l_DetalleCupon;
    l_DetalleFactura := DetalleFactura;
    TROSerializer(ASerializer).ReadArray('DetalleFactura', ATDetalleFactura, l_DetalleFactura);
    if DetalleFactura <> l_DetalleFactura then DetalleFactura.Free;
    DetalleFactura := l_DetalleFactura;
    l_Factura := Factura;
    TROSerializer(ASerializer).ReadStruct('Factura', TFactura, l_Factura);
    if Factura <> l_Factura then Factura.Free;
    Factura := l_Factura;
  end;
end;

procedure TDatosFactura.WriteComplex(ASerializer: TObject);
var
  l_DetalleCupon: ATDetalleCupon;
  l_DetalleFactura: ATDetalleFactura;
  l_Factura: TFactura;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosFactura);
    l_Factura := Factura;
    TROSerializer(ASerializer).WriteStruct('Factura', l_Factura, TFactura);
    l_DetalleFactura := DetalleFactura;
    TROSerializer(ASerializer).WriteArray('DetalleFactura', l_DetalleFactura, ATDetalleFactura);
    l_DetalleCupon := DetalleCupon;
    TROSerializer(ASerializer).WriteArray('DetalleCupon', l_DetalleCupon, ATDetalleCupon);
  end
  else begin
    l_DetalleCupon := DetalleCupon;
    TROSerializer(ASerializer).WriteArray('DetalleCupon', l_DetalleCupon, ATDetalleCupon);
    l_DetalleFactura := DetalleFactura;
    TROSerializer(ASerializer).WriteArray('DetalleFactura', l_DetalleFactura, ATDetalleFactura);
    l_Factura := Factura;
    TROSerializer(ASerializer).WriteStruct('Factura', l_Factura, TFactura);
  end;
end;

{ TDatosFacturaCollection }
constructor TDatosFacturaCollection.Create;
begin
  inherited Create(TDatosFactura);
end;

constructor TDatosFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosFacturaCollection.Add: TDatosFactura;
begin
  result := TDatosFactura(inherited Add);
end;

function TDatosFacturaCollection.GetItems(aIndex: integer): TDatosFactura;
begin
  result := TDatosFactura(inherited Items[aIndex]);
end;

procedure TDatosFacturaCollection.SetItems(aIndex: integer; const Value: TDatosFactura);
begin
  TDatosFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TFactura }

procedure TFactura.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TFactura) then begin
    lSource := LibraryFlotillas_Intf.TFactura(iSource);
    ClienteID := lSource.ClienteID;
    Ejercicio := lSource.Ejercicio;
    FacturaID := lSource.FacturaID;
    Fecha := lSource.Fecha;
    FechaImpresion := lSource.FechaImpresion;
    FechaVencimiento := lSource.FechaVencimiento;
    Folio := lSource.Folio;
    Impuesto := lSource.Impuesto;
    MovimientoID := lSource.MovimientoID;
    Saldo := lSource.Saldo;
    Serie := lSource.Serie;
    Subtotal := lSource.Subtotal;
    Tickets := lSource.Tickets;
    Total := lSource.Total;
    UsuarioID := lSource.UsuarioID;
    Periodo := lSource.Periodo;
    IVA := lSource.IVA;
  end;
end;

procedure TFactura.ReadComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Ejercicio: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_FechaImpresion: DateTime;
  l_FechaVencimiento: DateTime;
  l_Folio: Integer;
  l_Impuesto: Double;
  l_IVA: Double;
  l_MovimientoID: Integer;
  l_Periodo: Integer;
  l_Saldo: Double;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Tickets: AnsiString;
  l_Total: Double;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).ReadInteger('Ejercicio', otSLong, l_Ejercicio);
    Ejercicio := l_Ejercicio;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_FechaImpresion := FechaImpresion;
    TROSerializer(ASerializer).ReadDateTime('FechaImpresion', l_FechaImpresion);
    FechaImpresion := l_FechaImpresion;
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).ReadDateTime('FechaVencimiento', l_FechaVencimiento);
    FechaVencimiento := l_FechaVencimiento;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadInteger('Folio', otSLong, l_Folio);
    Folio := l_Folio;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).ReadInteger('MovimientoID', otSLong, l_MovimientoID);
    MovimientoID := l_MovimientoID;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).ReadDouble('Subtotal', ftDouble, l_Subtotal);
    Subtotal := l_Subtotal;
    l_Tickets := Tickets;
    TROSerializer(ASerializer).ReadAnsiString('Tickets', l_Tickets);
    Tickets := l_Tickets;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).ReadInteger('UsuarioID', otSLong, l_UsuarioID);
    UsuarioID := l_UsuarioID;
    l_Periodo := Periodo;
    TROSerializer(ASerializer).ReadInteger('Periodo', otSLong, l_Periodo);
    Periodo := l_Periodo;
    l_IVA := IVA;
    TROSerializer(ASerializer).ReadDouble('IVA', ftDouble, l_IVA);
    IVA := l_IVA;
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).ReadInteger('Ejercicio', otSLong, l_Ejercicio);
    Ejercicio := l_Ejercicio;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_FechaImpresion := FechaImpresion;
    TROSerializer(ASerializer).ReadDateTime('FechaImpresion', l_FechaImpresion);
    FechaImpresion := l_FechaImpresion;
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).ReadDateTime('FechaVencimiento', l_FechaVencimiento);
    FechaVencimiento := l_FechaVencimiento;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadInteger('Folio', otSLong, l_Folio);
    Folio := l_Folio;
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).ReadDouble('Impuesto', ftDouble, l_Impuesto);
    Impuesto := l_Impuesto;
    l_IVA := IVA;
    TROSerializer(ASerializer).ReadDouble('IVA', ftDouble, l_IVA);
    IVA := l_IVA;
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).ReadInteger('MovimientoID', otSLong, l_MovimientoID);
    MovimientoID := l_MovimientoID;
    l_Periodo := Periodo;
    TROSerializer(ASerializer).ReadInteger('Periodo', otSLong, l_Periodo);
    Periodo := l_Periodo;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).ReadDouble('Subtotal', ftDouble, l_Subtotal);
    Subtotal := l_Subtotal;
    l_Tickets := Tickets;
    TROSerializer(ASerializer).ReadAnsiString('Tickets', l_Tickets);
    Tickets := l_Tickets;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).ReadInteger('UsuarioID', otSLong, l_UsuarioID);
    UsuarioID := l_UsuarioID;
  end;
end;

procedure TFactura.WriteComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_Ejercicio: Integer;
  l_FacturaID: Integer;
  l_Fecha: DateTime;
  l_FechaImpresion: DateTime;
  l_FechaVencimiento: DateTime;
  l_Folio: Integer;
  l_Impuesto: Double;
  l_IVA: Double;
  l_MovimientoID: Integer;
  l_Periodo: Integer;
  l_Saldo: Double;
  l_Serie: AnsiString;
  l_Subtotal: Double;
  l_Tickets: AnsiString;
  l_Total: Double;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFactura);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', otSLong, l_Ejercicio);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_FechaImpresion := FechaImpresion;
    TROSerializer(ASerializer).WriteDateTime('FechaImpresion', l_FechaImpresion);
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).WriteDateTime('FechaVencimiento', l_FechaVencimiento);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', otSLong, l_Folio);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).WriteInteger('MovimientoID', otSLong, l_MovimientoID);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', ftDouble, l_Subtotal);
    l_Tickets := Tickets;
    TROSerializer(ASerializer).WriteAnsiString('Tickets', l_Tickets);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', otSLong, l_UsuarioID);
    l_Periodo := Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', otSLong, l_Periodo);
    l_IVA := IVA;
    TROSerializer(ASerializer).WriteDouble('IVA', ftDouble, l_IVA);
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', otSLong, l_Ejercicio);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_FechaImpresion := FechaImpresion;
    TROSerializer(ASerializer).WriteDateTime('FechaImpresion', l_FechaImpresion);
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).WriteDateTime('FechaVencimiento', l_FechaVencimiento);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteInteger('Folio', otSLong, l_Folio);
    l_Impuesto := Impuesto;
    TROSerializer(ASerializer).WriteDouble('Impuesto', ftDouble, l_Impuesto);
    l_IVA := IVA;
    TROSerializer(ASerializer).WriteDouble('IVA', ftDouble, l_IVA);
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).WriteInteger('MovimientoID', otSLong, l_MovimientoID);
    l_Periodo := Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', otSLong, l_Periodo);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Subtotal := Subtotal;
    TROSerializer(ASerializer).WriteDouble('Subtotal', ftDouble, l_Subtotal);
    l_Tickets := Tickets;
    TROSerializer(ASerializer).WriteAnsiString('Tickets', l_Tickets);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', otSLong, l_UsuarioID);
  end;
end;

{ TFacturaCollection }
constructor TFacturaCollection.Create;
begin
  inherited Create(TFactura);
end;

constructor TFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaCollection.Add: TFactura;
begin
  result := TFactura(inherited Add);
end;

function TFacturaCollection.GetItems(aIndex: integer): TFactura;
begin
  result := TFactura(inherited Items[aIndex]);
end;

procedure TFacturaCollection.SetItems(aIndex: integer; const Value: TFactura);
begin
  TFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleFactura }

procedure TDetalleFactura.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TDetalleFactura;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TDetalleFactura) then begin
    lSource := LibraryFlotillas_Intf.TDetalleFactura(iSource);
    DetalleFacturaID := lSource.DetalleFacturaID;
    FacturaID := lSource.FacturaID;
    Cantidad := lSource.Cantidad;
    Precio := lSource.Precio;
    Importe := lSource.Importe;
    ProductoID := lSource.ProductoID;
  end;
end;

procedure TDetalleFactura.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_DetalleFacturaID: Integer;
  l_FacturaID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_DetalleFacturaID := DetalleFacturaID;
    TROSerializer(ASerializer).ReadInteger('DetalleFacturaID', otSLong, l_DetalleFacturaID);
    DetalleFacturaID := l_DetalleFacturaID;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_DetalleFacturaID := DetalleFacturaID;
    TROSerializer(ASerializer).ReadInteger('DetalleFacturaID', otSLong, l_DetalleFacturaID);
    DetalleFacturaID := l_DetalleFacturaID;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
  end;
end;

procedure TDetalleFactura.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_DetalleFacturaID: Integer;
  l_FacturaID: Integer;
  l_Importe: Double;
  l_Precio: Double;
  l_ProductoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleFactura);
    l_DetalleFacturaID := DetalleFacturaID;
    TROSerializer(ASerializer).WriteInteger('DetalleFacturaID', otSLong, l_DetalleFacturaID);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_DetalleFacturaID := DetalleFacturaID;
    TROSerializer(ASerializer).WriteInteger('DetalleFacturaID', otSLong, l_DetalleFacturaID);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
  end;
end;

{ TDetalleFacturaCollection }
constructor TDetalleFacturaCollection.Create;
begin
  inherited Create(TDetalleFactura);
end;

constructor TDetalleFacturaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleFacturaCollection.Add: TDetalleFactura;
begin
  result := TDetalleFactura(inherited Add);
end;

function TDetalleFacturaCollection.GetItems(aIndex: integer): TDetalleFactura;
begin
  result := TDetalleFactura(inherited Items[aIndex]);
end;

procedure TDetalleFacturaCollection.LoadFromArray(anArray: ATDetalleFactura);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDetalleFacturaCollection.SaveToArray(anArray: ATDetalleFactura);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDetalleFactura.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDetalleFacturaCollection.SetItems(aIndex: integer; const Value: TDetalleFactura);
begin
  TDetalleFactura(inherited Items[aIndex]).Assign(Value);
end;

{ TDocumentosConSaldo }

procedure TDocumentosConSaldo.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TDocumentosConSaldo;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TDocumentosConSaldo) then begin
    lSource := LibraryFlotillas_Intf.TDocumentosConSaldo(iSource);
    Referencia := lSource.Referencia;
    Importe := lSource.Importe;
    Saldo := lSource.Saldo;
    Fecha := lSource.Fecha;
    Vencimiento := lSource.Vencimiento;
    DocumentoID := lSource.DocumentoID;
    EnRecibo := lSource.EnRecibo;
    MovimientoID := lSource.MovimientoID;
  end;
end;

procedure TDocumentosConSaldo.ReadComplex(ASerializer: TObject);
var
  l_DocumentoID: Integer;
  l_EnRecibo: Double;
  l_Fecha: DateTime;
  l_Importe: Double;
  l_MovimientoID: Integer;
  l_Referencia: AnsiString;
  l_Saldo: Double;
  l_Vencimiento: DateTime;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Vencimiento := Vencimiento;
    TROSerializer(ASerializer).ReadDateTime('Vencimiento', l_Vencimiento);
    Vencimiento := l_Vencimiento;
    l_DocumentoID := DocumentoID;
    TROSerializer(ASerializer).ReadInteger('DocumentoID', otSLong, l_DocumentoID);
    DocumentoID := l_DocumentoID;
    l_EnRecibo := EnRecibo;
    TROSerializer(ASerializer).ReadDouble('EnRecibo', ftDouble, l_EnRecibo);
    EnRecibo := l_EnRecibo;
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).ReadInteger('MovimientoID', otSLong, l_MovimientoID);
    MovimientoID := l_MovimientoID;
  end
  else begin
    l_DocumentoID := DocumentoID;
    TROSerializer(ASerializer).ReadInteger('DocumentoID', otSLong, l_DocumentoID);
    DocumentoID := l_DocumentoID;
    l_EnRecibo := EnRecibo;
    TROSerializer(ASerializer).ReadDouble('EnRecibo', ftDouble, l_EnRecibo);
    EnRecibo := l_EnRecibo;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).ReadInteger('MovimientoID', otSLong, l_MovimientoID);
    MovimientoID := l_MovimientoID;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_Vencimiento := Vencimiento;
    TROSerializer(ASerializer).ReadDateTime('Vencimiento', l_Vencimiento);
    Vencimiento := l_Vencimiento;
  end;
end;

procedure TDocumentosConSaldo.WriteComplex(ASerializer: TObject);
var
  l_DocumentoID: Integer;
  l_EnRecibo: Double;
  l_Fecha: DateTime;
  l_Importe: Double;
  l_MovimientoID: Integer;
  l_Referencia: AnsiString;
  l_Saldo: Double;
  l_Vencimiento: DateTime;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDocumentosConSaldo);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Vencimiento := Vencimiento;
    TROSerializer(ASerializer).WriteDateTime('Vencimiento', l_Vencimiento);
    l_DocumentoID := DocumentoID;
    TROSerializer(ASerializer).WriteInteger('DocumentoID', otSLong, l_DocumentoID);
    l_EnRecibo := EnRecibo;
    TROSerializer(ASerializer).WriteDouble('EnRecibo', ftDouble, l_EnRecibo);
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).WriteInteger('MovimientoID', otSLong, l_MovimientoID);
  end
  else begin
    l_DocumentoID := DocumentoID;
    TROSerializer(ASerializer).WriteInteger('DocumentoID', otSLong, l_DocumentoID);
    l_EnRecibo := EnRecibo;
    TROSerializer(ASerializer).WriteDouble('EnRecibo', ftDouble, l_EnRecibo);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).WriteInteger('MovimientoID', otSLong, l_MovimientoID);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_Vencimiento := Vencimiento;
    TROSerializer(ASerializer).WriteDateTime('Vencimiento', l_Vencimiento);
  end;
end;

{ TDocumentosConSaldoCollection }
constructor TDocumentosConSaldoCollection.Create;
begin
  inherited Create(TDocumentosConSaldo);
end;

constructor TDocumentosConSaldoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDocumentosConSaldoCollection.Add: TDocumentosConSaldo;
begin
  result := TDocumentosConSaldo(inherited Add);
end;

function TDocumentosConSaldoCollection.GetItems(aIndex: integer): TDocumentosConSaldo;
begin
  result := TDocumentosConSaldo(inherited Items[aIndex]);
end;

procedure TDocumentosConSaldoCollection.LoadFromArray(anArray: TDocumentosConSaldoArray);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDocumentosConSaldoCollection.SaveToArray(anArray: TDocumentosConSaldoArray);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDocumentosConSaldo.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDocumentosConSaldoCollection.SetItems(aIndex: integer; const Value: TDocumentosConSaldo);
begin
  TDocumentosConSaldo(inherited Items[aIndex]).Assign(Value);
end;

{ TCliente }

procedure TCliente.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TCliente;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TCliente) then begin
    lSource := LibraryFlotillas_Intf.TCliente(iSource);
    Nombre := lSource.Nombre;
    RFC := lSource.RFC;
    PlazoPago := lSource.PlazoPago;
    CuentaContable := lSource.CuentaContable;
  end;
end;

procedure TCliente.ReadComplex(ASerializer: TObject);
var
  l_CuentaContable: AnsiString;
  l_Nombre: AnsiString;
  l_PlazoPago: Integer;
  l_RFC: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_PlazoPago := PlazoPago;
    TROSerializer(ASerializer).ReadInteger('PlazoPago', otSLong, l_PlazoPago);
    PlazoPago := l_PlazoPago;
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).ReadAnsiString('CuentaContable', l_CuentaContable);
    CuentaContable := l_CuentaContable;
  end
  else begin
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).ReadAnsiString('CuentaContable', l_CuentaContable);
    CuentaContable := l_CuentaContable;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_PlazoPago := PlazoPago;
    TROSerializer(ASerializer).ReadInteger('PlazoPago', otSLong, l_PlazoPago);
    PlazoPago := l_PlazoPago;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
  end;
end;

procedure TCliente.WriteComplex(ASerializer: TObject);
var
  l_CuentaContable: AnsiString;
  l_Nombre: AnsiString;
  l_PlazoPago: Integer;
  l_RFC: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TCliente);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_PlazoPago := PlazoPago;
    TROSerializer(ASerializer).WriteInteger('PlazoPago', otSLong, l_PlazoPago);
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).WriteAnsiString('CuentaContable', l_CuentaContable);
  end
  else begin
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).WriteAnsiString('CuentaContable', l_CuentaContable);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_PlazoPago := PlazoPago;
    TROSerializer(ASerializer).WriteInteger('PlazoPago', otSLong, l_PlazoPago);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
  end;
end;

{ TClienteCollection }
constructor TClienteCollection.Create;
begin
  inherited Create(TCliente);
end;

constructor TClienteCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TClienteCollection.Add: TCliente;
begin
  result := TCliente(inherited Add);
end;

function TClienteCollection.GetItems(aIndex: integer): TCliente;
begin
  result := TCliente(inherited Items[aIndex]);
end;

procedure TClienteCollection.SetItems(aIndex: integer; const Value: TCliente);
begin
  TCliente(inherited Items[aIndex]).Assign(Value);
end;

{ TParametrosF }

procedure TParametrosF.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TParametrosF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TParametrosF) then begin
    lSource := LibraryFlotillas_Intf.TParametrosF(iSource);
    FechaIni := lSource.FechaIni;
    FechaFin := lSource.FechaFin;
    TipoFecha := lSource.TipoFecha;
    ClienteIni := lSource.ClienteIni;
    ClienteFin := lSource.ClienteFin;
    Grupo := lSource.Grupo;
    EstacionIni := lSource.EstacionIni;
    EstacionFin := lSource.EstacionFin;
    FacturaIni := lSource.FacturaIni;
    FacturaFin := lSource.FacturaFin;
    FechaCorte := lSource.FechaCorte;
    Venc0 := lSource.Venc0;
    Venc1 := lSource.Venc1;
    Venc2 := lSource.Venc2;
    Venc3 := lSource.Venc3;
    Venc4 := lSource.Venc4;
    Seleccion := lSource.Seleccion;
    Orden := lSource.Orden;
    Status := lSource.Status;
    ImporteLitros := lSource.ImporteLitros;
    TarjetaIni := lSource.TarjetaIni;
    TarjetaFin := lSource.TarjetaFin;
    TipoMov := lSource.TipoMov;
    FormaCompraID := lSource.FormaCompraID;
    DiaFacturarID := lSource.DiaFacturarID;
    AgenteIni := lSource.AgenteIni;
    AgenteFin := lSource.AgenteFin;
    Movimientos := lSource.Movimientos;
    Ejercicio := lSource.Ejercicio;
    PeriodoIni := lSource.PeriodoIni;
    PeriodoFin := lSource.PeriodoFin;
    Serie := lSource.Serie;
    Identificador := lSource.Identificador;
    FacID := lSource.FacID;
  end;
end;

procedure TParametrosF.ReadComplex(ASerializer: TObject);
var
  l_AgenteFin: Integer;
  l_AgenteIni: Integer;
  l_ClienteFin: Integer;
  l_ClienteIni: Integer;
  l_DiaFacturarID: Integer;
  l_Ejercicio: Integer;
  l_EstacionFin: Integer;
  l_EstacionIni: Integer;
  l_FacID: Integer;
  l_FacturaFin: Integer;
  l_FacturaIni: Integer;
  l_FechaCorte: DateTime;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_FormaCompraID: Integer;
  l_Grupo: AnsiString;
  l_Identificador: Integer;
  l_ImporteLitros: Integer;
  l_Movimientos: AnsiString;
  l_Orden: Integer;
  l_PeriodoFin: Integer;
  l_PeriodoIni: Integer;
  l_Seleccion: Integer;
  l_Serie: AnsiString;
  l_Status: Integer;
  l_TarjetaFin: Integer;
  l_TarjetaIni: Integer;
  l_TipoFecha: Integer;
  l_TipoMov: AnsiString;
  l_Venc0: Integer;
  l_Venc1: Integer;
  l_Venc2: Integer;
  l_Venc3: Integer;
  l_Venc4: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    FechaIni := l_FechaIni;
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    FechaFin := l_FechaFin;
    l_TipoFecha := TipoFecha;
    TROSerializer(ASerializer).ReadInteger('TipoFecha', otSLong, l_TipoFecha);
    TipoFecha := l_TipoFecha;
    l_ClienteIni := ClienteIni;
    TROSerializer(ASerializer).ReadInteger('ClienteIni', otSLong, l_ClienteIni);
    ClienteIni := l_ClienteIni;
    l_ClienteFin := ClienteFin;
    TROSerializer(ASerializer).ReadInteger('ClienteFin', otSLong, l_ClienteFin);
    ClienteFin := l_ClienteFin;
    l_Grupo := Grupo;
    TROSerializer(ASerializer).ReadAnsiString('Grupo', l_Grupo);
    Grupo := l_Grupo;
    l_EstacionIni := EstacionIni;
    TROSerializer(ASerializer).ReadInteger('EstacionIni', otSLong, l_EstacionIni);
    EstacionIni := l_EstacionIni;
    l_EstacionFin := EstacionFin;
    TROSerializer(ASerializer).ReadInteger('EstacionFin', otSLong, l_EstacionFin);
    EstacionFin := l_EstacionFin;
    l_FacturaIni := FacturaIni;
    TROSerializer(ASerializer).ReadInteger('FacturaIni', otSLong, l_FacturaIni);
    FacturaIni := l_FacturaIni;
    l_FacturaFin := FacturaFin;
    TROSerializer(ASerializer).ReadInteger('FacturaFin', otSLong, l_FacturaFin);
    FacturaFin := l_FacturaFin;
    l_FechaCorte := FechaCorte;
    TROSerializer(ASerializer).ReadDateTime('FechaCorte', l_FechaCorte);
    FechaCorte := l_FechaCorte;
    l_Venc0 := Venc0;
    TROSerializer(ASerializer).ReadInteger('Venc0', otSLong, l_Venc0);
    Venc0 := l_Venc0;
    l_Venc1 := Venc1;
    TROSerializer(ASerializer).ReadInteger('Venc1', otSLong, l_Venc1);
    Venc1 := l_Venc1;
    l_Venc2 := Venc2;
    TROSerializer(ASerializer).ReadInteger('Venc2', otSLong, l_Venc2);
    Venc2 := l_Venc2;
    l_Venc3 := Venc3;
    TROSerializer(ASerializer).ReadInteger('Venc3', otSLong, l_Venc3);
    Venc3 := l_Venc3;
    l_Venc4 := Venc4;
    TROSerializer(ASerializer).ReadInteger('Venc4', otSLong, l_Venc4);
    Venc4 := l_Venc4;
    l_Seleccion := Seleccion;
    TROSerializer(ASerializer).ReadInteger('Seleccion', otSLong, l_Seleccion);
    Seleccion := l_Seleccion;
    l_Orden := Orden;
    TROSerializer(ASerializer).ReadInteger('Orden', otSLong, l_Orden);
    Orden := l_Orden;
    l_Status := Status;
    TROSerializer(ASerializer).ReadInteger('Status', otSLong, l_Status);
    Status := l_Status;
    l_ImporteLitros := ImporteLitros;
    TROSerializer(ASerializer).ReadInteger('ImporteLitros', otSLong, l_ImporteLitros);
    ImporteLitros := l_ImporteLitros;
    l_TarjetaIni := TarjetaIni;
    TROSerializer(ASerializer).ReadInteger('TarjetaIni', otSLong, l_TarjetaIni);
    TarjetaIni := l_TarjetaIni;
    l_TarjetaFin := TarjetaFin;
    TROSerializer(ASerializer).ReadInteger('TarjetaFin', otSLong, l_TarjetaFin);
    TarjetaFin := l_TarjetaFin;
    l_TipoMov := TipoMov;
    TROSerializer(ASerializer).ReadAnsiString('TipoMov', l_TipoMov);
    TipoMov := l_TipoMov;
    l_FormaCompraID := FormaCompraID;
    TROSerializer(ASerializer).ReadInteger('FormaCompraID', otSLong, l_FormaCompraID);
    FormaCompraID := l_FormaCompraID;
    l_DiaFacturarID := DiaFacturarID;
    TROSerializer(ASerializer).ReadInteger('DiaFacturarID', otSLong, l_DiaFacturarID);
    DiaFacturarID := l_DiaFacturarID;
    l_AgenteIni := AgenteIni;
    TROSerializer(ASerializer).ReadInteger('AgenteIni', otSLong, l_AgenteIni);
    AgenteIni := l_AgenteIni;
    l_AgenteFin := AgenteFin;
    TROSerializer(ASerializer).ReadInteger('AgenteFin', otSLong, l_AgenteFin);
    AgenteFin := l_AgenteFin;
    l_Movimientos := Movimientos;
    TROSerializer(ASerializer).ReadAnsiString('Movimientos', l_Movimientos);
    Movimientos := l_Movimientos;
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).ReadInteger('Ejercicio', otSLong, l_Ejercicio);
    Ejercicio := l_Ejercicio;
    l_PeriodoIni := PeriodoIni;
    TROSerializer(ASerializer).ReadInteger('PeriodoIni', otSLong, l_PeriodoIni);
    PeriodoIni := l_PeriodoIni;
    l_PeriodoFin := PeriodoFin;
    TROSerializer(ASerializer).ReadInteger('PeriodoFin', otSLong, l_PeriodoFin);
    PeriodoFin := l_PeriodoFin;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Identificador := Identificador;
    TROSerializer(ASerializer).ReadInteger('Identificador', otSLong, l_Identificador);
    Identificador := l_Identificador;
    l_FacID := FacID;
    TROSerializer(ASerializer).ReadInteger('FacID', otSLong, l_FacID);
    FacID := l_FacID;
  end
  else begin
    l_AgenteFin := AgenteFin;
    TROSerializer(ASerializer).ReadInteger('AgenteFin', otSLong, l_AgenteFin);
    AgenteFin := l_AgenteFin;
    l_AgenteIni := AgenteIni;
    TROSerializer(ASerializer).ReadInteger('AgenteIni', otSLong, l_AgenteIni);
    AgenteIni := l_AgenteIni;
    l_ClienteFin := ClienteFin;
    TROSerializer(ASerializer).ReadInteger('ClienteFin', otSLong, l_ClienteFin);
    ClienteFin := l_ClienteFin;
    l_ClienteIni := ClienteIni;
    TROSerializer(ASerializer).ReadInteger('ClienteIni', otSLong, l_ClienteIni);
    ClienteIni := l_ClienteIni;
    l_DiaFacturarID := DiaFacturarID;
    TROSerializer(ASerializer).ReadInteger('DiaFacturarID', otSLong, l_DiaFacturarID);
    DiaFacturarID := l_DiaFacturarID;
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).ReadInteger('Ejercicio', otSLong, l_Ejercicio);
    Ejercicio := l_Ejercicio;
    l_EstacionFin := EstacionFin;
    TROSerializer(ASerializer).ReadInteger('EstacionFin', otSLong, l_EstacionFin);
    EstacionFin := l_EstacionFin;
    l_EstacionIni := EstacionIni;
    TROSerializer(ASerializer).ReadInteger('EstacionIni', otSLong, l_EstacionIni);
    EstacionIni := l_EstacionIni;
    l_FacID := FacID;
    TROSerializer(ASerializer).ReadInteger('FacID', otSLong, l_FacID);
    FacID := l_FacID;
    l_FacturaFin := FacturaFin;
    TROSerializer(ASerializer).ReadInteger('FacturaFin', otSLong, l_FacturaFin);
    FacturaFin := l_FacturaFin;
    l_FacturaIni := FacturaIni;
    TROSerializer(ASerializer).ReadInteger('FacturaIni', otSLong, l_FacturaIni);
    FacturaIni := l_FacturaIni;
    l_FechaCorte := FechaCorte;
    TROSerializer(ASerializer).ReadDateTime('FechaCorte', l_FechaCorte);
    FechaCorte := l_FechaCorte;
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).ReadDateTime('FechaFin', l_FechaFin);
    FechaFin := l_FechaFin;
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).ReadDateTime('FechaIni', l_FechaIni);
    FechaIni := l_FechaIni;
    l_FormaCompraID := FormaCompraID;
    TROSerializer(ASerializer).ReadInteger('FormaCompraID', otSLong, l_FormaCompraID);
    FormaCompraID := l_FormaCompraID;
    l_Grupo := Grupo;
    TROSerializer(ASerializer).ReadAnsiString('Grupo', l_Grupo);
    Grupo := l_Grupo;
    l_Identificador := Identificador;
    TROSerializer(ASerializer).ReadInteger('Identificador', otSLong, l_Identificador);
    Identificador := l_Identificador;
    l_ImporteLitros := ImporteLitros;
    TROSerializer(ASerializer).ReadInteger('ImporteLitros', otSLong, l_ImporteLitros);
    ImporteLitros := l_ImporteLitros;
    l_Movimientos := Movimientos;
    TROSerializer(ASerializer).ReadAnsiString('Movimientos', l_Movimientos);
    Movimientos := l_Movimientos;
    l_Orden := Orden;
    TROSerializer(ASerializer).ReadInteger('Orden', otSLong, l_Orden);
    Orden := l_Orden;
    l_PeriodoFin := PeriodoFin;
    TROSerializer(ASerializer).ReadInteger('PeriodoFin', otSLong, l_PeriodoFin);
    PeriodoFin := l_PeriodoFin;
    l_PeriodoIni := PeriodoIni;
    TROSerializer(ASerializer).ReadInteger('PeriodoIni', otSLong, l_PeriodoIni);
    PeriodoIni := l_PeriodoIni;
    l_Seleccion := Seleccion;
    TROSerializer(ASerializer).ReadInteger('Seleccion', otSLong, l_Seleccion);
    Seleccion := l_Seleccion;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Status := Status;
    TROSerializer(ASerializer).ReadInteger('Status', otSLong, l_Status);
    Status := l_Status;
    l_TarjetaFin := TarjetaFin;
    TROSerializer(ASerializer).ReadInteger('TarjetaFin', otSLong, l_TarjetaFin);
    TarjetaFin := l_TarjetaFin;
    l_TarjetaIni := TarjetaIni;
    TROSerializer(ASerializer).ReadInteger('TarjetaIni', otSLong, l_TarjetaIni);
    TarjetaIni := l_TarjetaIni;
    l_TipoFecha := TipoFecha;
    TROSerializer(ASerializer).ReadInteger('TipoFecha', otSLong, l_TipoFecha);
    TipoFecha := l_TipoFecha;
    l_TipoMov := TipoMov;
    TROSerializer(ASerializer).ReadAnsiString('TipoMov', l_TipoMov);
    TipoMov := l_TipoMov;
    l_Venc0 := Venc0;
    TROSerializer(ASerializer).ReadInteger('Venc0', otSLong, l_Venc0);
    Venc0 := l_Venc0;
    l_Venc1 := Venc1;
    TROSerializer(ASerializer).ReadInteger('Venc1', otSLong, l_Venc1);
    Venc1 := l_Venc1;
    l_Venc2 := Venc2;
    TROSerializer(ASerializer).ReadInteger('Venc2', otSLong, l_Venc2);
    Venc2 := l_Venc2;
    l_Venc3 := Venc3;
    TROSerializer(ASerializer).ReadInteger('Venc3', otSLong, l_Venc3);
    Venc3 := l_Venc3;
    l_Venc4 := Venc4;
    TROSerializer(ASerializer).ReadInteger('Venc4', otSLong, l_Venc4);
    Venc4 := l_Venc4;
  end;
end;

procedure TParametrosF.WriteComplex(ASerializer: TObject);
var
  l_AgenteFin: Integer;
  l_AgenteIni: Integer;
  l_ClienteFin: Integer;
  l_ClienteIni: Integer;
  l_DiaFacturarID: Integer;
  l_Ejercicio: Integer;
  l_EstacionFin: Integer;
  l_EstacionIni: Integer;
  l_FacID: Integer;
  l_FacturaFin: Integer;
  l_FacturaIni: Integer;
  l_FechaCorte: DateTime;
  l_FechaFin: DateTime;
  l_FechaIni: DateTime;
  l_FormaCompraID: Integer;
  l_Grupo: AnsiString;
  l_Identificador: Integer;
  l_ImporteLitros: Integer;
  l_Movimientos: AnsiString;
  l_Orden: Integer;
  l_PeriodoFin: Integer;
  l_PeriodoIni: Integer;
  l_Seleccion: Integer;
  l_Serie: AnsiString;
  l_Status: Integer;
  l_TarjetaFin: Integer;
  l_TarjetaIni: Integer;
  l_TipoFecha: Integer;
  l_TipoMov: AnsiString;
  l_Venc0: Integer;
  l_Venc1: Integer;
  l_Venc2: Integer;
  l_Venc3: Integer;
  l_Venc4: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TParametrosF);
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_TipoFecha := TipoFecha;
    TROSerializer(ASerializer).WriteInteger('TipoFecha', otSLong, l_TipoFecha);
    l_ClienteIni := ClienteIni;
    TROSerializer(ASerializer).WriteInteger('ClienteIni', otSLong, l_ClienteIni);
    l_ClienteFin := ClienteFin;
    TROSerializer(ASerializer).WriteInteger('ClienteFin', otSLong, l_ClienteFin);
    l_Grupo := Grupo;
    TROSerializer(ASerializer).WriteAnsiString('Grupo', l_Grupo);
    l_EstacionIni := EstacionIni;
    TROSerializer(ASerializer).WriteInteger('EstacionIni', otSLong, l_EstacionIni);
    l_EstacionFin := EstacionFin;
    TROSerializer(ASerializer).WriteInteger('EstacionFin', otSLong, l_EstacionFin);
    l_FacturaIni := FacturaIni;
    TROSerializer(ASerializer).WriteInteger('FacturaIni', otSLong, l_FacturaIni);
    l_FacturaFin := FacturaFin;
    TROSerializer(ASerializer).WriteInteger('FacturaFin', otSLong, l_FacturaFin);
    l_FechaCorte := FechaCorte;
    TROSerializer(ASerializer).WriteDateTime('FechaCorte', l_FechaCorte);
    l_Venc0 := Venc0;
    TROSerializer(ASerializer).WriteInteger('Venc0', otSLong, l_Venc0);
    l_Venc1 := Venc1;
    TROSerializer(ASerializer).WriteInteger('Venc1', otSLong, l_Venc1);
    l_Venc2 := Venc2;
    TROSerializer(ASerializer).WriteInteger('Venc2', otSLong, l_Venc2);
    l_Venc3 := Venc3;
    TROSerializer(ASerializer).WriteInteger('Venc3', otSLong, l_Venc3);
    l_Venc4 := Venc4;
    TROSerializer(ASerializer).WriteInteger('Venc4', otSLong, l_Venc4);
    l_Seleccion := Seleccion;
    TROSerializer(ASerializer).WriteInteger('Seleccion', otSLong, l_Seleccion);
    l_Orden := Orden;
    TROSerializer(ASerializer).WriteInteger('Orden', otSLong, l_Orden);
    l_Status := Status;
    TROSerializer(ASerializer).WriteInteger('Status', otSLong, l_Status);
    l_ImporteLitros := ImporteLitros;
    TROSerializer(ASerializer).WriteInteger('ImporteLitros', otSLong, l_ImporteLitros);
    l_TarjetaIni := TarjetaIni;
    TROSerializer(ASerializer).WriteInteger('TarjetaIni', otSLong, l_TarjetaIni);
    l_TarjetaFin := TarjetaFin;
    TROSerializer(ASerializer).WriteInteger('TarjetaFin', otSLong, l_TarjetaFin);
    l_TipoMov := TipoMov;
    TROSerializer(ASerializer).WriteAnsiString('TipoMov', l_TipoMov);
    l_FormaCompraID := FormaCompraID;
    TROSerializer(ASerializer).WriteInteger('FormaCompraID', otSLong, l_FormaCompraID);
    l_DiaFacturarID := DiaFacturarID;
    TROSerializer(ASerializer).WriteInteger('DiaFacturarID', otSLong, l_DiaFacturarID);
    l_AgenteIni := AgenteIni;
    TROSerializer(ASerializer).WriteInteger('AgenteIni', otSLong, l_AgenteIni);
    l_AgenteFin := AgenteFin;
    TROSerializer(ASerializer).WriteInteger('AgenteFin', otSLong, l_AgenteFin);
    l_Movimientos := Movimientos;
    TROSerializer(ASerializer).WriteAnsiString('Movimientos', l_Movimientos);
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', otSLong, l_Ejercicio);
    l_PeriodoIni := PeriodoIni;
    TROSerializer(ASerializer).WriteInteger('PeriodoIni', otSLong, l_PeriodoIni);
    l_PeriodoFin := PeriodoFin;
    TROSerializer(ASerializer).WriteInteger('PeriodoFin', otSLong, l_PeriodoFin);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Identificador := Identificador;
    TROSerializer(ASerializer).WriteInteger('Identificador', otSLong, l_Identificador);
    l_FacID := FacID;
    TROSerializer(ASerializer).WriteInteger('FacID', otSLong, l_FacID);
  end
  else begin
    l_AgenteFin := AgenteFin;
    TROSerializer(ASerializer).WriteInteger('AgenteFin', otSLong, l_AgenteFin);
    l_AgenteIni := AgenteIni;
    TROSerializer(ASerializer).WriteInteger('AgenteIni', otSLong, l_AgenteIni);
    l_ClienteFin := ClienteFin;
    TROSerializer(ASerializer).WriteInteger('ClienteFin', otSLong, l_ClienteFin);
    l_ClienteIni := ClienteIni;
    TROSerializer(ASerializer).WriteInteger('ClienteIni', otSLong, l_ClienteIni);
    l_DiaFacturarID := DiaFacturarID;
    TROSerializer(ASerializer).WriteInteger('DiaFacturarID', otSLong, l_DiaFacturarID);
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', otSLong, l_Ejercicio);
    l_EstacionFin := EstacionFin;
    TROSerializer(ASerializer).WriteInteger('EstacionFin', otSLong, l_EstacionFin);
    l_EstacionIni := EstacionIni;
    TROSerializer(ASerializer).WriteInteger('EstacionIni', otSLong, l_EstacionIni);
    l_FacID := FacID;
    TROSerializer(ASerializer).WriteInteger('FacID', otSLong, l_FacID);
    l_FacturaFin := FacturaFin;
    TROSerializer(ASerializer).WriteInteger('FacturaFin', otSLong, l_FacturaFin);
    l_FacturaIni := FacturaIni;
    TROSerializer(ASerializer).WriteInteger('FacturaIni', otSLong, l_FacturaIni);
    l_FechaCorte := FechaCorte;
    TROSerializer(ASerializer).WriteDateTime('FechaCorte', l_FechaCorte);
    l_FechaFin := FechaFin;
    TROSerializer(ASerializer).WriteDateTime('FechaFin', l_FechaFin);
    l_FechaIni := FechaIni;
    TROSerializer(ASerializer).WriteDateTime('FechaIni', l_FechaIni);
    l_FormaCompraID := FormaCompraID;
    TROSerializer(ASerializer).WriteInteger('FormaCompraID', otSLong, l_FormaCompraID);
    l_Grupo := Grupo;
    TROSerializer(ASerializer).WriteAnsiString('Grupo', l_Grupo);
    l_Identificador := Identificador;
    TROSerializer(ASerializer).WriteInteger('Identificador', otSLong, l_Identificador);
    l_ImporteLitros := ImporteLitros;
    TROSerializer(ASerializer).WriteInteger('ImporteLitros', otSLong, l_ImporteLitros);
    l_Movimientos := Movimientos;
    TROSerializer(ASerializer).WriteAnsiString('Movimientos', l_Movimientos);
    l_Orden := Orden;
    TROSerializer(ASerializer).WriteInteger('Orden', otSLong, l_Orden);
    l_PeriodoFin := PeriodoFin;
    TROSerializer(ASerializer).WriteInteger('PeriodoFin', otSLong, l_PeriodoFin);
    l_PeriodoIni := PeriodoIni;
    TROSerializer(ASerializer).WriteInteger('PeriodoIni', otSLong, l_PeriodoIni);
    l_Seleccion := Seleccion;
    TROSerializer(ASerializer).WriteInteger('Seleccion', otSLong, l_Seleccion);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Status := Status;
    TROSerializer(ASerializer).WriteInteger('Status', otSLong, l_Status);
    l_TarjetaFin := TarjetaFin;
    TROSerializer(ASerializer).WriteInteger('TarjetaFin', otSLong, l_TarjetaFin);
    l_TarjetaIni := TarjetaIni;
    TROSerializer(ASerializer).WriteInteger('TarjetaIni', otSLong, l_TarjetaIni);
    l_TipoFecha := TipoFecha;
    TROSerializer(ASerializer).WriteInteger('TipoFecha', otSLong, l_TipoFecha);
    l_TipoMov := TipoMov;
    TROSerializer(ASerializer).WriteAnsiString('TipoMov', l_TipoMov);
    l_Venc0 := Venc0;
    TROSerializer(ASerializer).WriteInteger('Venc0', otSLong, l_Venc0);
    l_Venc1 := Venc1;
    TROSerializer(ASerializer).WriteInteger('Venc1', otSLong, l_Venc1);
    l_Venc2 := Venc2;
    TROSerializer(ASerializer).WriteInteger('Venc2', otSLong, l_Venc2);
    l_Venc3 := Venc3;
    TROSerializer(ASerializer).WriteInteger('Venc3', otSLong, l_Venc3);
    l_Venc4 := Venc4;
    TROSerializer(ASerializer).WriteInteger('Venc4', otSLong, l_Venc4);
  end;
end;

{ TParametrosFCollection }
constructor TParametrosFCollection.Create;
begin
  inherited Create(TParametrosF);
end;

constructor TParametrosFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TParametrosFCollection.Add: TParametrosF;
begin
  result := TParametrosF(inherited Add);
end;

function TParametrosFCollection.GetItems(aIndex: integer): TParametrosF;
begin
  result := TParametrosF(inherited Items[aIndex]);
end;

procedure TParametrosFCollection.SetItems(aIndex: integer; const Value: TParametrosF);
begin
  TParametrosF(inherited Items[aIndex]).Assign(Value);
end;

{ TDetalleCupon }

procedure TDetalleCupon.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TDetalleCupon;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TDetalleCupon) then begin
    lSource := LibraryFlotillas_Intf.TDetalleCupon(iSource);
    Denominacion := lSource.Denominacion;
    Cantidad := lSource.Cantidad;
    Referencia := lSource.Referencia;
    FacturaID := lSource.FacturaID;
  end;
end;

procedure TDetalleCupon.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Denominacion: Double;
  l_FacturaID: Integer;
  l_Referencia: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Denominacion := Denominacion;
    TROSerializer(ASerializer).ReadDouble('Denominacion', ftDouble, l_Denominacion);
    Denominacion := l_Denominacion;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Denominacion := Denominacion;
    TROSerializer(ASerializer).ReadDouble('Denominacion', ftDouble, l_Denominacion);
    Denominacion := l_Denominacion;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
  end;
end;

procedure TDetalleCupon.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_Denominacion: Double;
  l_FacturaID: Integer;
  l_Referencia: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDetalleCupon);
    l_Denominacion := Denominacion;
    TROSerializer(ASerializer).WriteDouble('Denominacion', ftDouble, l_Denominacion);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Denominacion := Denominacion;
    TROSerializer(ASerializer).WriteDouble('Denominacion', ftDouble, l_Denominacion);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
  end;
end;

{ TDetalleCuponCollection }
constructor TDetalleCuponCollection.Create;
begin
  inherited Create(TDetalleCupon);
end;

constructor TDetalleCuponCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDetalleCuponCollection.Add: TDetalleCupon;
begin
  result := TDetalleCupon(inherited Add);
end;

function TDetalleCuponCollection.GetItems(aIndex: integer): TDetalleCupon;
begin
  result := TDetalleCupon(inherited Items[aIndex]);
end;

procedure TDetalleCuponCollection.LoadFromArray(anArray: ATDetalleCupon);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDetalleCuponCollection.SaveToArray(anArray: ATDetalleCupon);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDetalleCupon.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDetalleCuponCollection.SetItems(aIndex: integer; const Value: TDetalleCupon);
begin
  TDetalleCupon(inherited Items[aIndex]).Assign(Value);
end;

{ TReporteF }

procedure TReporteF.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TReporteF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TReporteF) then begin
    lSource := LibraryFlotillas_Intf.TReporteF(iSource);
    SQL1 := lSource.SQL1;
    SQL2 := lSource.SQL2;
    Template := lSource.Template;
    CampoJoin := lSource.CampoJoin;
  end;
end;

procedure TReporteF.ReadComplex(ASerializer: TObject);
var
  l_CampoJoin: AnsiString;
  l_SQL1: AnsiString;
  l_SQL2: AnsiString;
  l_Template: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).ReadAnsiString('SQL1', l_SQL1);
    SQL1 := l_SQL1;
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).ReadAnsiString('SQL2', l_SQL2);
    SQL2 := l_SQL2;
    l_Template := Template;
    TROSerializer(ASerializer).ReadAnsiString('Template', l_Template);
    Template := l_Template;
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).ReadAnsiString('CampoJoin', l_CampoJoin);
    CampoJoin := l_CampoJoin;
  end
  else begin
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).ReadAnsiString('CampoJoin', l_CampoJoin);
    CampoJoin := l_CampoJoin;
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).ReadAnsiString('SQL1', l_SQL1);
    SQL1 := l_SQL1;
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).ReadAnsiString('SQL2', l_SQL2);
    SQL2 := l_SQL2;
    l_Template := Template;
    TROSerializer(ASerializer).ReadAnsiString('Template', l_Template);
    Template := l_Template;
  end;
end;

procedure TReporteF.WriteComplex(ASerializer: TObject);
var
  l_CampoJoin: AnsiString;
  l_SQL1: AnsiString;
  l_SQL2: AnsiString;
  l_Template: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TReporteF);
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).WriteAnsiString('SQL1', l_SQL1);
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).WriteAnsiString('SQL2', l_SQL2);
    l_Template := Template;
    TROSerializer(ASerializer).WriteAnsiString('Template', l_Template);
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).WriteAnsiString('CampoJoin', l_CampoJoin);
  end
  else begin
    l_CampoJoin := CampoJoin;
    TROSerializer(ASerializer).WriteAnsiString('CampoJoin', l_CampoJoin);
    l_SQL1 := SQL1;
    TROSerializer(ASerializer).WriteAnsiString('SQL1', l_SQL1);
    l_SQL2 := SQL2;
    TROSerializer(ASerializer).WriteAnsiString('SQL2', l_SQL2);
    l_Template := Template;
    TROSerializer(ASerializer).WriteAnsiString('Template', l_Template);
  end;
end;

{ TReporteFCollection }
constructor TReporteFCollection.Create;
begin
  inherited Create(TReporteF);
end;

constructor TReporteFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TReporteFCollection.Add: TReporteF;
begin
  result := TReporteF(inherited Add);
end;

function TReporteFCollection.GetItems(aIndex: integer): TReporteF;
begin
  result := TReporteF(inherited Items[aIndex]);
end;

procedure TReporteFCollection.SetItems(aIndex: integer; const Value: TReporteF);
begin
  TReporteF(inherited Items[aIndex]).Assign(Value);
end;

{ TCuponValido }

procedure TCuponValido.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TCuponValido;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TCuponValido) then begin
    lSource := LibraryFlotillas_Intf.TCuponValido(iSource);
    CuponID := lSource.CuponID;
    Importe := lSource.Importe;
    Status := lSource.Status;
    Referencia := lSource.Referencia;
    Nombre := lSource.Nombre;
    RazonSocial := lSource.RazonSocial;
    Domicilio := lSource.Domicilio;
    RFC := lSource.RFC;
    CuentaContable := lSource.CuentaContable;
    TarjetaID := lSource.TarjetaID;
    MsnError := lSource.MsnError;
    Valido := lSource.Valido;
    ClienteID := lSource.ClienteID;
    GasolineroID := lSource.GasolineroID;
    VehiculoID := lSource.VehiculoID;
    Grupo := lSource.Grupo;
  end;
end;

procedure TCuponValido.ReadComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_CuentaContable: AnsiString;
  l_CuponID: Integer;
  l_Domicilio: AnsiString;
  l_GasolineroID: Integer;
  l_Grupo: Integer;
  l_Importe: Double;
  l_MsnError: AnsiString;
  l_Nombre: AnsiString;
  l_RazonSocial: AnsiString;
  l_Referencia: AnsiString;
  l_RFC: AnsiString;
  l_Status: AnsiString;
  l_TarjetaID: Integer;
  l_Valido: Boolean;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_CuponID := CuponID;
    TROSerializer(ASerializer).ReadInteger('CuponID', otSLong, l_CuponID);
    CuponID := l_CuponID;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Status := Status;
    TROSerializer(ASerializer).ReadAnsiString('Status', l_Status);
    Status := l_Status;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).ReadAnsiString('RazonSocial', l_RazonSocial);
    RazonSocial := l_RazonSocial;
    l_Domicilio := Domicilio;
    TROSerializer(ASerializer).ReadAnsiString('Domicilio', l_Domicilio);
    Domicilio := l_Domicilio;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).ReadAnsiString('CuentaContable', l_CuentaContable);
    CuentaContable := l_CuentaContable;
    l_TarjetaID := TarjetaID;
    TROSerializer(ASerializer).ReadInteger('TarjetaID', otSLong, l_TarjetaID);
    TarjetaID := l_TarjetaID;
    l_MsnError := MsnError;
    TROSerializer(ASerializer).ReadAnsiString('MsnError', l_MsnError);
    MsnError := l_MsnError;
    l_Valido := Valido;
    TROSerializer(ASerializer).ReadEnumerated('Valido',TypeInfo(boolean), l_Valido);
    Valido := l_Valido;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_Grupo := Grupo;
    TROSerializer(ASerializer).ReadInteger('Grupo', otSLong, l_Grupo);
    Grupo := l_Grupo;
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).ReadAnsiString('CuentaContable', l_CuentaContable);
    CuentaContable := l_CuentaContable;
    l_CuponID := CuponID;
    TROSerializer(ASerializer).ReadInteger('CuponID', otSLong, l_CuponID);
    CuponID := l_CuponID;
    l_Domicilio := Domicilio;
    TROSerializer(ASerializer).ReadAnsiString('Domicilio', l_Domicilio);
    Domicilio := l_Domicilio;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_Grupo := Grupo;
    TROSerializer(ASerializer).ReadInteger('Grupo', otSLong, l_Grupo);
    Grupo := l_Grupo;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_MsnError := MsnError;
    TROSerializer(ASerializer).ReadAnsiString('MsnError', l_MsnError);
    MsnError := l_MsnError;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).ReadAnsiString('RazonSocial', l_RazonSocial);
    RazonSocial := l_RazonSocial;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_Status := Status;
    TROSerializer(ASerializer).ReadAnsiString('Status', l_Status);
    Status := l_Status;
    l_TarjetaID := TarjetaID;
    TROSerializer(ASerializer).ReadInteger('TarjetaID', otSLong, l_TarjetaID);
    TarjetaID := l_TarjetaID;
    l_Valido := Valido;
    TROSerializer(ASerializer).ReadEnumerated('Valido',TypeInfo(boolean), l_Valido);
    Valido := l_Valido;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
  end;
end;

procedure TCuponValido.WriteComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_CuentaContable: AnsiString;
  l_CuponID: Integer;
  l_Domicilio: AnsiString;
  l_GasolineroID: Integer;
  l_Grupo: Integer;
  l_Importe: Double;
  l_MsnError: AnsiString;
  l_Nombre: AnsiString;
  l_RazonSocial: AnsiString;
  l_Referencia: AnsiString;
  l_RFC: AnsiString;
  l_Status: AnsiString;
  l_TarjetaID: Integer;
  l_Valido: Boolean;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TCuponValido);
    l_CuponID := CuponID;
    TROSerializer(ASerializer).WriteInteger('CuponID', otSLong, l_CuponID);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Status := Status;
    TROSerializer(ASerializer).WriteAnsiString('Status', l_Status);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).WriteAnsiString('RazonSocial', l_RazonSocial);
    l_Domicilio := Domicilio;
    TROSerializer(ASerializer).WriteAnsiString('Domicilio', l_Domicilio);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).WriteAnsiString('CuentaContable', l_CuentaContable);
    l_TarjetaID := TarjetaID;
    TROSerializer(ASerializer).WriteInteger('TarjetaID', otSLong, l_TarjetaID);
    l_MsnError := MsnError;
    TROSerializer(ASerializer).WriteAnsiString('MsnError', l_MsnError);
    l_Valido := Valido;
    TROSerializer(ASerializer).WriteEnumerated('Valido',TypeInfo(boolean), l_Valido);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_Grupo := Grupo;
    TROSerializer(ASerializer).WriteInteger('Grupo', otSLong, l_Grupo);
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).WriteAnsiString('CuentaContable', l_CuentaContable);
    l_CuponID := CuponID;
    TROSerializer(ASerializer).WriteInteger('CuponID', otSLong, l_CuponID);
    l_Domicilio := Domicilio;
    TROSerializer(ASerializer).WriteAnsiString('Domicilio', l_Domicilio);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_Grupo := Grupo;
    TROSerializer(ASerializer).WriteInteger('Grupo', otSLong, l_Grupo);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_MsnError := MsnError;
    TROSerializer(ASerializer).WriteAnsiString('MsnError', l_MsnError);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).WriteAnsiString('RazonSocial', l_RazonSocial);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_Status := Status;
    TROSerializer(ASerializer).WriteAnsiString('Status', l_Status);
    l_TarjetaID := TarjetaID;
    TROSerializer(ASerializer).WriteInteger('TarjetaID', otSLong, l_TarjetaID);
    l_Valido := Valido;
    TROSerializer(ASerializer).WriteEnumerated('Valido',TypeInfo(boolean), l_Valido);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
  end;
end;

{ TCuponValidoCollection }
constructor TCuponValidoCollection.Create;
begin
  inherited Create(TCuponValido);
end;

constructor TCuponValidoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TCuponValidoCollection.Add: TCuponValido;
begin
  result := TCuponValido(inherited Add);
end;

function TCuponValidoCollection.GetItems(aIndex: integer): TCuponValido;
begin
  result := TCuponValido(inherited Items[aIndex]);
end;

procedure TCuponValidoCollection.SetItems(aIndex: integer; const Value: TCuponValido);
begin
  TCuponValido(inherited Items[aIndex]).Assign(Value);
end;

{ TConsumo }

procedure TConsumo.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TConsumo;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TConsumo) then begin
    lSource := LibraryFlotillas_Intf.TConsumo(iSource);
    SecuenciaVenta := lSource.SecuenciaVenta;
    Serie := lSource.Serie;
    EstacionID := lSource.EstacionID;
    FechaMovimiento := lSource.FechaMovimiento;
    FechaCarga := lSource.FechaCarga;
    Ejercicio := lSource.Ejercicio;
    Periodo := lSource.Periodo;
    Dia := lSource.Dia;
    Turno := lSource.Turno;
    Kilometraje := lSource.Kilometraje;
    Referencia := lSource.Referencia;
    Tarjeta := lSource.Tarjeta;
    PosicionCarga := lSource.PosicionCarga;
    Cantidad := lSource.Cantidad;
    Precio := lSource.Precio;
    Importe := lSource.Importe;
    ImpuestoImporte := lSource.ImpuestoImporte;
    ImpuestoPorcentaje := lSource.ImpuestoPorcentaje;
    CuentaContable := lSource.CuentaContable;
    ManualAutomatico := lSource.ManualAutomatico;
    Facturado := lSource.Facturado;
    EnIngresos := lSource.EnIngresos;
    Auditado := lSource.Auditado;
    FacturaID := lSource.FacturaID;
    ProductoID := lSource.ProductoID;
    GasolineroID := lSource.GasolineroID;
    ClienteID := lSource.ClienteID;
    IEPS := lSource.IEPS;
    UsuarioID := lSource.UsuarioID;
    VehiculoID := lSource.VehiculoID;
  end;
end;

procedure TConsumo.ReadComplex(ASerializer: TObject);
var
  l_Auditado: Integer;
  l_Cantidad: Double;
  l_ClienteID: Integer;
  l_CuentaContable: AnsiString;
  l_Dia: Integer;
  l_Ejercicio: Integer;
  l_EnIngresos: Integer;
  l_EstacionID: Integer;
  l_Facturado: Integer;
  l_FacturaID: Integer;
  l_FechaCarga: DateTime;
  l_FechaMovimiento: DateTime;
  l_GasolineroID: Integer;
  l_IEPS: Double;
  l_Importe: Double;
  l_ImpuestoImporte: Double;
  l_ImpuestoPorcentaje: Double;
  l_Kilometraje: Integer;
  l_ManualAutomatico: AnsiString;
  l_Periodo: Integer;
  l_PosicionCarga: Integer;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_Referencia: AnsiString;
  l_SecuenciaVenta: Integer;
  l_Serie: AnsiString;
  l_Tarjeta: AnsiString;
  l_Turno: Integer;
  l_UsuarioID: Integer;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_SecuenciaVenta := SecuenciaVenta;
    TROSerializer(ASerializer).ReadInteger('SecuenciaVenta', otSLong, l_SecuenciaVenta);
    SecuenciaVenta := l_SecuenciaVenta;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_FechaMovimiento := FechaMovimiento;
    TROSerializer(ASerializer).ReadDateTime('FechaMovimiento', l_FechaMovimiento);
    FechaMovimiento := l_FechaMovimiento;
    l_FechaCarga := FechaCarga;
    TROSerializer(ASerializer).ReadDateTime('FechaCarga', l_FechaCarga);
    FechaCarga := l_FechaCarga;
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).ReadInteger('Ejercicio', otSLong, l_Ejercicio);
    Ejercicio := l_Ejercicio;
    l_Periodo := Periodo;
    TROSerializer(ASerializer).ReadInteger('Periodo', otSLong, l_Periodo);
    Periodo := l_Periodo;
    l_Dia := Dia;
    TROSerializer(ASerializer).ReadInteger('Dia', otSLong, l_Dia);
    Dia := l_Dia;
    l_Turno := Turno;
    TROSerializer(ASerializer).ReadInteger('Turno', otSLong, l_Turno);
    Turno := l_Turno;
    l_Kilometraje := Kilometraje;
    TROSerializer(ASerializer).ReadInteger('Kilometraje', otSLong, l_Kilometraje);
    Kilometraje := l_Kilometraje;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).ReadInteger('PosicionCarga', otSLong, l_PosicionCarga);
    PosicionCarga := l_PosicionCarga;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_ImpuestoImporte := ImpuestoImporte;
    TROSerializer(ASerializer).ReadDouble('ImpuestoImporte', ftDouble, l_ImpuestoImporte);
    ImpuestoImporte := l_ImpuestoImporte;
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).ReadDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    ImpuestoPorcentaje := l_ImpuestoPorcentaje;
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).ReadAnsiString('CuentaContable', l_CuentaContable);
    CuentaContable := l_CuentaContable;
    l_ManualAutomatico := ManualAutomatico;
    TROSerializer(ASerializer).ReadAnsiString('ManualAutomatico', l_ManualAutomatico);
    ManualAutomatico := l_ManualAutomatico;
    l_Facturado := Facturado;
    TROSerializer(ASerializer).ReadInteger('Facturado', otSLong, l_Facturado);
    Facturado := l_Facturado;
    l_EnIngresos := EnIngresos;
    TROSerializer(ASerializer).ReadInteger('EnIngresos', otSLong, l_EnIngresos);
    EnIngresos := l_EnIngresos;
    l_Auditado := Auditado;
    TROSerializer(ASerializer).ReadInteger('Auditado', otSLong, l_Auditado);
    Auditado := l_Auditado;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_IEPS := IEPS;
    TROSerializer(ASerializer).ReadDouble('IEPS', ftDouble, l_IEPS);
    IEPS := l_IEPS;
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).ReadInteger('UsuarioID', otSLong, l_UsuarioID);
    UsuarioID := l_UsuarioID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
  end
  else begin
    l_Auditado := Auditado;
    TROSerializer(ASerializer).ReadInteger('Auditado', otSLong, l_Auditado);
    Auditado := l_Auditado;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).ReadAnsiString('CuentaContable', l_CuentaContable);
    CuentaContable := l_CuentaContable;
    l_Dia := Dia;
    TROSerializer(ASerializer).ReadInteger('Dia', otSLong, l_Dia);
    Dia := l_Dia;
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).ReadInteger('Ejercicio', otSLong, l_Ejercicio);
    Ejercicio := l_Ejercicio;
    l_EnIngresos := EnIngresos;
    TROSerializer(ASerializer).ReadInteger('EnIngresos', otSLong, l_EnIngresos);
    EnIngresos := l_EnIngresos;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Facturado := Facturado;
    TROSerializer(ASerializer).ReadInteger('Facturado', otSLong, l_Facturado);
    Facturado := l_Facturado;
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).ReadInteger('FacturaID', otSLong, l_FacturaID);
    FacturaID := l_FacturaID;
    l_FechaCarga := FechaCarga;
    TROSerializer(ASerializer).ReadDateTime('FechaCarga', l_FechaCarga);
    FechaCarga := l_FechaCarga;
    l_FechaMovimiento := FechaMovimiento;
    TROSerializer(ASerializer).ReadDateTime('FechaMovimiento', l_FechaMovimiento);
    FechaMovimiento := l_FechaMovimiento;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_IEPS := IEPS;
    TROSerializer(ASerializer).ReadDouble('IEPS', ftDouble, l_IEPS);
    IEPS := l_IEPS;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_ImpuestoImporte := ImpuestoImporte;
    TROSerializer(ASerializer).ReadDouble('ImpuestoImporte', ftDouble, l_ImpuestoImporte);
    ImpuestoImporte := l_ImpuestoImporte;
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).ReadDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    ImpuestoPorcentaje := l_ImpuestoPorcentaje;
    l_Kilometraje := Kilometraje;
    TROSerializer(ASerializer).ReadInteger('Kilometraje', otSLong, l_Kilometraje);
    Kilometraje := l_Kilometraje;
    l_ManualAutomatico := ManualAutomatico;
    TROSerializer(ASerializer).ReadAnsiString('ManualAutomatico', l_ManualAutomatico);
    ManualAutomatico := l_ManualAutomatico;
    l_Periodo := Periodo;
    TROSerializer(ASerializer).ReadInteger('Periodo', otSLong, l_Periodo);
    Periodo := l_Periodo;
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).ReadInteger('PosicionCarga', otSLong, l_PosicionCarga);
    PosicionCarga := l_PosicionCarga;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_SecuenciaVenta := SecuenciaVenta;
    TROSerializer(ASerializer).ReadInteger('SecuenciaVenta', otSLong, l_SecuenciaVenta);
    SecuenciaVenta := l_SecuenciaVenta;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
    l_Turno := Turno;
    TROSerializer(ASerializer).ReadInteger('Turno', otSLong, l_Turno);
    Turno := l_Turno;
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).ReadInteger('UsuarioID', otSLong, l_UsuarioID);
    UsuarioID := l_UsuarioID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
  end;
end;

procedure TConsumo.WriteComplex(ASerializer: TObject);
var
  l_Auditado: Integer;
  l_Cantidad: Double;
  l_ClienteID: Integer;
  l_CuentaContable: AnsiString;
  l_Dia: Integer;
  l_Ejercicio: Integer;
  l_EnIngresos: Integer;
  l_EstacionID: Integer;
  l_Facturado: Integer;
  l_FacturaID: Integer;
  l_FechaCarga: DateTime;
  l_FechaMovimiento: DateTime;
  l_GasolineroID: Integer;
  l_IEPS: Double;
  l_Importe: Double;
  l_ImpuestoImporte: Double;
  l_ImpuestoPorcentaje: Double;
  l_Kilometraje: Integer;
  l_ManualAutomatico: AnsiString;
  l_Periodo: Integer;
  l_PosicionCarga: Integer;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_Referencia: AnsiString;
  l_SecuenciaVenta: Integer;
  l_Serie: AnsiString;
  l_Tarjeta: AnsiString;
  l_Turno: Integer;
  l_UsuarioID: Integer;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TConsumo);
    l_SecuenciaVenta := SecuenciaVenta;
    TROSerializer(ASerializer).WriteInteger('SecuenciaVenta', otSLong, l_SecuenciaVenta);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_FechaMovimiento := FechaMovimiento;
    TROSerializer(ASerializer).WriteDateTime('FechaMovimiento', l_FechaMovimiento);
    l_FechaCarga := FechaCarga;
    TROSerializer(ASerializer).WriteDateTime('FechaCarga', l_FechaCarga);
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', otSLong, l_Ejercicio);
    l_Periodo := Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', otSLong, l_Periodo);
    l_Dia := Dia;
    TROSerializer(ASerializer).WriteInteger('Dia', otSLong, l_Dia);
    l_Turno := Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', otSLong, l_Turno);
    l_Kilometraje := Kilometraje;
    TROSerializer(ASerializer).WriteInteger('Kilometraje', otSLong, l_Kilometraje);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).WriteInteger('PosicionCarga', otSLong, l_PosicionCarga);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_ImpuestoImporte := ImpuestoImporte;
    TROSerializer(ASerializer).WriteDouble('ImpuestoImporte', ftDouble, l_ImpuestoImporte);
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).WriteDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).WriteAnsiString('CuentaContable', l_CuentaContable);
    l_ManualAutomatico := ManualAutomatico;
    TROSerializer(ASerializer).WriteAnsiString('ManualAutomatico', l_ManualAutomatico);
    l_Facturado := Facturado;
    TROSerializer(ASerializer).WriteInteger('Facturado', otSLong, l_Facturado);
    l_EnIngresos := EnIngresos;
    TROSerializer(ASerializer).WriteInteger('EnIngresos', otSLong, l_EnIngresos);
    l_Auditado := Auditado;
    TROSerializer(ASerializer).WriteInteger('Auditado', otSLong, l_Auditado);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_IEPS := IEPS;
    TROSerializer(ASerializer).WriteDouble('IEPS', ftDouble, l_IEPS);
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', otSLong, l_UsuarioID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
  end
  else begin
    l_Auditado := Auditado;
    TROSerializer(ASerializer).WriteInteger('Auditado', otSLong, l_Auditado);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_CuentaContable := CuentaContable;
    TROSerializer(ASerializer).WriteAnsiString('CuentaContable', l_CuentaContable);
    l_Dia := Dia;
    TROSerializer(ASerializer).WriteInteger('Dia', otSLong, l_Dia);
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', otSLong, l_Ejercicio);
    l_EnIngresos := EnIngresos;
    TROSerializer(ASerializer).WriteInteger('EnIngresos', otSLong, l_EnIngresos);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Facturado := Facturado;
    TROSerializer(ASerializer).WriteInteger('Facturado', otSLong, l_Facturado);
    l_FacturaID := FacturaID;
    TROSerializer(ASerializer).WriteInteger('FacturaID', otSLong, l_FacturaID);
    l_FechaCarga := FechaCarga;
    TROSerializer(ASerializer).WriteDateTime('FechaCarga', l_FechaCarga);
    l_FechaMovimiento := FechaMovimiento;
    TROSerializer(ASerializer).WriteDateTime('FechaMovimiento', l_FechaMovimiento);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_IEPS := IEPS;
    TROSerializer(ASerializer).WriteDouble('IEPS', ftDouble, l_IEPS);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_ImpuestoImporte := ImpuestoImporte;
    TROSerializer(ASerializer).WriteDouble('ImpuestoImporte', ftDouble, l_ImpuestoImporte);
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).WriteDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    l_Kilometraje := Kilometraje;
    TROSerializer(ASerializer).WriteInteger('Kilometraje', otSLong, l_Kilometraje);
    l_ManualAutomatico := ManualAutomatico;
    TROSerializer(ASerializer).WriteAnsiString('ManualAutomatico', l_ManualAutomatico);
    l_Periodo := Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', otSLong, l_Periodo);
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).WriteInteger('PosicionCarga', otSLong, l_PosicionCarga);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_SecuenciaVenta := SecuenciaVenta;
    TROSerializer(ASerializer).WriteInteger('SecuenciaVenta', otSLong, l_SecuenciaVenta);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
    l_Turno := Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', otSLong, l_Turno);
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', otSLong, l_UsuarioID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
  end;
end;

{ TConsumoCollection }
constructor TConsumoCollection.Create;
begin
  inherited Create(TConsumo);
end;

constructor TConsumoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TConsumoCollection.Add: TConsumo;
begin
  result := TConsumo(inherited Add);
end;

function TConsumoCollection.GetItems(aIndex: integer): TConsumo;
begin
  result := TConsumo(inherited Items[aIndex]);
end;

procedure TConsumoCollection.LoadFromArray(anArray: aConsumo);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TConsumoCollection.SaveToArray(anArray: aConsumo);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TConsumo.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TConsumoCollection.SetItems(aIndex: integer; const Value: TConsumo);
begin
  TConsumo(inherited Items[aIndex]).Assign(Value);
end;

{ TAutorizacion }

procedure TAutorizacion.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TAutorizacion;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TAutorizacion) then begin
    lSource := LibraryFlotillas_Intf.TAutorizacion(iSource);
    AutorizacionID := lSource.AutorizacionID;
    Fecha := lSource.Fecha;
    Importe := lSource.Importe;
    Cantidad := lSource.Cantidad;
    ImporteCantidad := lSource.ImporteCantidad;
    PosicionCarga := lSource.PosicionCarga;
    Referencia := lSource.Referencia;
    EstacionID := lSource.EstacionID;
    VehiculoID := lSource.VehiculoID;
    ClienteID := lSource.ClienteID;
    GasolineroID := lSource.GasolineroID;
    Odometro := lSource.Odometro;
  end;
end;

procedure TAutorizacion.ReadComplex(ASerializer: TObject);
var
  l_AutorizacionID: Integer;
  l_Cantidad: Double;
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_GasolineroID: Integer;
  l_Importe: Double;
  l_ImporteCantidad: AnsiString;
  l_Odometro: Integer;
  l_PosicionCarga: Integer;
  l_Referencia: AnsiString;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_AutorizacionID := AutorizacionID;
    TROSerializer(ASerializer).ReadInteger('AutorizacionID', otSLong, l_AutorizacionID);
    AutorizacionID := l_AutorizacionID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_ImporteCantidad := ImporteCantidad;
    TROSerializer(ASerializer).ReadAnsiString('ImporteCantidad', l_ImporteCantidad);
    ImporteCantidad := l_ImporteCantidad;
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).ReadInteger('PosicionCarga', otSLong, l_PosicionCarga);
    PosicionCarga := l_PosicionCarga;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_Odometro := Odometro;
    TROSerializer(ASerializer).ReadInteger('Odometro', otSLong, l_Odometro);
    Odometro := l_Odometro;
  end
  else begin
    l_AutorizacionID := AutorizacionID;
    TROSerializer(ASerializer).ReadInteger('AutorizacionID', otSLong, l_AutorizacionID);
    AutorizacionID := l_AutorizacionID;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_ImporteCantidad := ImporteCantidad;
    TROSerializer(ASerializer).ReadAnsiString('ImporteCantidad', l_ImporteCantidad);
    ImporteCantidad := l_ImporteCantidad;
    l_Odometro := Odometro;
    TROSerializer(ASerializer).ReadInteger('Odometro', otSLong, l_Odometro);
    Odometro := l_Odometro;
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).ReadInteger('PosicionCarga', otSLong, l_PosicionCarga);
    PosicionCarga := l_PosicionCarga;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
  end;
end;

procedure TAutorizacion.WriteComplex(ASerializer: TObject);
var
  l_AutorizacionID: Integer;
  l_Cantidad: Double;
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_GasolineroID: Integer;
  l_Importe: Double;
  l_ImporteCantidad: AnsiString;
  l_Odometro: Integer;
  l_PosicionCarga: Integer;
  l_Referencia: AnsiString;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TAutorizacion);
    l_AutorizacionID := AutorizacionID;
    TROSerializer(ASerializer).WriteInteger('AutorizacionID', otSLong, l_AutorizacionID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_ImporteCantidad := ImporteCantidad;
    TROSerializer(ASerializer).WriteAnsiString('ImporteCantidad', l_ImporteCantidad);
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).WriteInteger('PosicionCarga', otSLong, l_PosicionCarga);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_Odometro := Odometro;
    TROSerializer(ASerializer).WriteInteger('Odometro', otSLong, l_Odometro);
  end
  else begin
    l_AutorizacionID := AutorizacionID;
    TROSerializer(ASerializer).WriteInteger('AutorizacionID', otSLong, l_AutorizacionID);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_ImporteCantidad := ImporteCantidad;
    TROSerializer(ASerializer).WriteAnsiString('ImporteCantidad', l_ImporteCantidad);
    l_Odometro := Odometro;
    TROSerializer(ASerializer).WriteInteger('Odometro', otSLong, l_Odometro);
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).WriteInteger('PosicionCarga', otSLong, l_PosicionCarga);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
  end;
end;

{ TAutorizacionCollection }
constructor TAutorizacionCollection.Create;
begin
  inherited Create(TAutorizacion);
end;

constructor TAutorizacionCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TAutorizacionCollection.Add: TAutorizacion;
begin
  result := TAutorizacion(inherited Add);
end;

function TAutorizacionCollection.GetItems(aIndex: integer): TAutorizacion;
begin
  result := TAutorizacion(inherited Items[aIndex]);
end;

procedure TAutorizacionCollection.LoadFromArray(anArray: AAutorizacion);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TAutorizacionCollection.SaveToArray(anArray: AAutorizacion);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TAutorizacion.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TAutorizacionCollection.SetItems(aIndex: integer; const Value: TAutorizacion);
begin
  TAutorizacion(inherited Items[aIndex]).Assign(Value);
end;

{ TAutoriza }

procedure TAutoriza.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TAutoriza;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TAutoriza) then begin
    lSource := LibraryFlotillas_Intf.TAutoriza(iSource);
    EstacionID := lSource.EstacionID;
    Referencia := lSource.Referencia;
    DigitoSeguridad := lSource.DigitoSeguridad;
    PosicionCarga := lSource.PosicionCarga;
    Terminal := lSource.Terminal;
    NIP := lSource.NIP;
    Odometro := lSource.Odometro;
    Magna := lSource.Magna;
    Premium := lSource.Premium;
    Diesel := lSource.Diesel;
    SeleccionDeProducto := lSource.SeleccionDeProducto;
    AutorizacionID := lSource.AutorizacionID;
    GasolineroID := lSource.GasolineroID;
    ClienteID := lSource.ClienteID;
    VehiculoID := lSource.VehiculoID;
    Cantidad := lSource.Cantidad;
    ImporteCantidad := lSource.ImporteCantidad;
    Fecha := lSource.Fecha;
    Importe := lSource.Importe;
    Tipo := lSource.Tipo;
    PresetMN := lSource.PresetMN;
    PresetLT := lSource.PresetLT;
  end;
end;

procedure TAutoriza.ReadComplex(ASerializer: TObject);
var
  l_AutorizacionID: Integer;
  l_Cantidad: Double;
  l_ClienteID: Integer;
  l_Diesel: Double;
  l_DigitoSeguridad: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_GasolineroID: Integer;
  l_Importe: Double;
  l_ImporteCantidad: AnsiString;
  l_Magna: Double;
  l_NIP: AnsiString;
  l_Odometro: Integer;
  l_PosicionCarga: Integer;
  l_Premium: Double;
  l_PresetLT: Double;
  l_PresetMN: Double;
  l_Referencia: AnsiString;
  l_SeleccionDeProducto: AnsiString;
  l_Terminal: AnsiString;
  l_Tipo: Integer;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_DigitoSeguridad := DigitoSeguridad;
    TROSerializer(ASerializer).ReadInteger('DigitoSeguridad', otSLong, l_DigitoSeguridad);
    DigitoSeguridad := l_DigitoSeguridad;
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).ReadInteger('PosicionCarga', otSLong, l_PosicionCarga);
    PosicionCarga := l_PosicionCarga;
    l_Terminal := Terminal;
    TROSerializer(ASerializer).ReadAnsiString('Terminal', l_Terminal);
    Terminal := l_Terminal;
    l_NIP := NIP;
    TROSerializer(ASerializer).ReadAnsiString('NIP', l_NIP);
    NIP := l_NIP;
    l_Odometro := Odometro;
    TROSerializer(ASerializer).ReadInteger('Odometro', otSLong, l_Odometro);
    Odometro := l_Odometro;
    l_Magna := Magna;
    TROSerializer(ASerializer).ReadDouble('Magna', ftDouble, l_Magna);
    Magna := l_Magna;
    l_Premium := Premium;
    TROSerializer(ASerializer).ReadDouble('Premium', ftDouble, l_Premium);
    Premium := l_Premium;
    l_Diesel := Diesel;
    TROSerializer(ASerializer).ReadDouble('Diesel', ftDouble, l_Diesel);
    Diesel := l_Diesel;
    l_SeleccionDeProducto := SeleccionDeProducto;
    TROSerializer(ASerializer).ReadAnsiString('SeleccionDeProducto', l_SeleccionDeProducto);
    SeleccionDeProducto := l_SeleccionDeProducto;
    l_AutorizacionID := AutorizacionID;
    TROSerializer(ASerializer).ReadInteger('AutorizacionID', otSLong, l_AutorizacionID);
    AutorizacionID := l_AutorizacionID;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_ImporteCantidad := ImporteCantidad;
    TROSerializer(ASerializer).ReadAnsiString('ImporteCantidad', l_ImporteCantidad);
    ImporteCantidad := l_ImporteCantidad;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadInteger('Tipo', otSLong, l_Tipo);
    Tipo := l_Tipo;
    l_PresetMN := PresetMN;
    TROSerializer(ASerializer).ReadDouble('PresetMN', ftDouble, l_PresetMN);
    PresetMN := l_PresetMN;
    l_PresetLT := PresetLT;
    TROSerializer(ASerializer).ReadDouble('PresetLT', ftDouble, l_PresetLT);
    PresetLT := l_PresetLT;
  end
  else begin
    l_AutorizacionID := AutorizacionID;
    TROSerializer(ASerializer).ReadInteger('AutorizacionID', otSLong, l_AutorizacionID);
    AutorizacionID := l_AutorizacionID;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Diesel := Diesel;
    TROSerializer(ASerializer).ReadDouble('Diesel', ftDouble, l_Diesel);
    Diesel := l_Diesel;
    l_DigitoSeguridad := DigitoSeguridad;
    TROSerializer(ASerializer).ReadInteger('DigitoSeguridad', otSLong, l_DigitoSeguridad);
    DigitoSeguridad := l_DigitoSeguridad;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_ImporteCantidad := ImporteCantidad;
    TROSerializer(ASerializer).ReadAnsiString('ImporteCantidad', l_ImporteCantidad);
    ImporteCantidad := l_ImporteCantidad;
    l_Magna := Magna;
    TROSerializer(ASerializer).ReadDouble('Magna', ftDouble, l_Magna);
    Magna := l_Magna;
    l_NIP := NIP;
    TROSerializer(ASerializer).ReadAnsiString('NIP', l_NIP);
    NIP := l_NIP;
    l_Odometro := Odometro;
    TROSerializer(ASerializer).ReadInteger('Odometro', otSLong, l_Odometro);
    Odometro := l_Odometro;
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).ReadInteger('PosicionCarga', otSLong, l_PosicionCarga);
    PosicionCarga := l_PosicionCarga;
    l_Premium := Premium;
    TROSerializer(ASerializer).ReadDouble('Premium', ftDouble, l_Premium);
    Premium := l_Premium;
    l_PresetLT := PresetLT;
    TROSerializer(ASerializer).ReadDouble('PresetLT', ftDouble, l_PresetLT);
    PresetLT := l_PresetLT;
    l_PresetMN := PresetMN;
    TROSerializer(ASerializer).ReadDouble('PresetMN', ftDouble, l_PresetMN);
    PresetMN := l_PresetMN;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_SeleccionDeProducto := SeleccionDeProducto;
    TROSerializer(ASerializer).ReadAnsiString('SeleccionDeProducto', l_SeleccionDeProducto);
    SeleccionDeProducto := l_SeleccionDeProducto;
    l_Terminal := Terminal;
    TROSerializer(ASerializer).ReadAnsiString('Terminal', l_Terminal);
    Terminal := l_Terminal;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadInteger('Tipo', otSLong, l_Tipo);
    Tipo := l_Tipo;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
  end;
end;

procedure TAutoriza.WriteComplex(ASerializer: TObject);
var
  l_AutorizacionID: Integer;
  l_Cantidad: Double;
  l_ClienteID: Integer;
  l_Diesel: Double;
  l_DigitoSeguridad: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_GasolineroID: Integer;
  l_Importe: Double;
  l_ImporteCantidad: AnsiString;
  l_Magna: Double;
  l_NIP: AnsiString;
  l_Odometro: Integer;
  l_PosicionCarga: Integer;
  l_Premium: Double;
  l_PresetLT: Double;
  l_PresetMN: Double;
  l_Referencia: AnsiString;
  l_SeleccionDeProducto: AnsiString;
  l_Terminal: AnsiString;
  l_Tipo: Integer;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TAutoriza);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_DigitoSeguridad := DigitoSeguridad;
    TROSerializer(ASerializer).WriteInteger('DigitoSeguridad', otSLong, l_DigitoSeguridad);
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).WriteInteger('PosicionCarga', otSLong, l_PosicionCarga);
    l_Terminal := Terminal;
    TROSerializer(ASerializer).WriteAnsiString('Terminal', l_Terminal);
    l_NIP := NIP;
    TROSerializer(ASerializer).WriteAnsiString('NIP', l_NIP);
    l_Odometro := Odometro;
    TROSerializer(ASerializer).WriteInteger('Odometro', otSLong, l_Odometro);
    l_Magna := Magna;
    TROSerializer(ASerializer).WriteDouble('Magna', ftDouble, l_Magna);
    l_Premium := Premium;
    TROSerializer(ASerializer).WriteDouble('Premium', ftDouble, l_Premium);
    l_Diesel := Diesel;
    TROSerializer(ASerializer).WriteDouble('Diesel', ftDouble, l_Diesel);
    l_SeleccionDeProducto := SeleccionDeProducto;
    TROSerializer(ASerializer).WriteAnsiString('SeleccionDeProducto', l_SeleccionDeProducto);
    l_AutorizacionID := AutorizacionID;
    TROSerializer(ASerializer).WriteInteger('AutorizacionID', otSLong, l_AutorizacionID);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_ImporteCantidad := ImporteCantidad;
    TROSerializer(ASerializer).WriteAnsiString('ImporteCantidad', l_ImporteCantidad);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', otSLong, l_Tipo);
    l_PresetMN := PresetMN;
    TROSerializer(ASerializer).WriteDouble('PresetMN', ftDouble, l_PresetMN);
    l_PresetLT := PresetLT;
    TROSerializer(ASerializer).WriteDouble('PresetLT', ftDouble, l_PresetLT);
  end
  else begin
    l_AutorizacionID := AutorizacionID;
    TROSerializer(ASerializer).WriteInteger('AutorizacionID', otSLong, l_AutorizacionID);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Diesel := Diesel;
    TROSerializer(ASerializer).WriteDouble('Diesel', ftDouble, l_Diesel);
    l_DigitoSeguridad := DigitoSeguridad;
    TROSerializer(ASerializer).WriteInteger('DigitoSeguridad', otSLong, l_DigitoSeguridad);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_ImporteCantidad := ImporteCantidad;
    TROSerializer(ASerializer).WriteAnsiString('ImporteCantidad', l_ImporteCantidad);
    l_Magna := Magna;
    TROSerializer(ASerializer).WriteDouble('Magna', ftDouble, l_Magna);
    l_NIP := NIP;
    TROSerializer(ASerializer).WriteAnsiString('NIP', l_NIP);
    l_Odometro := Odometro;
    TROSerializer(ASerializer).WriteInteger('Odometro', otSLong, l_Odometro);
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).WriteInteger('PosicionCarga', otSLong, l_PosicionCarga);
    l_Premium := Premium;
    TROSerializer(ASerializer).WriteDouble('Premium', ftDouble, l_Premium);
    l_PresetLT := PresetLT;
    TROSerializer(ASerializer).WriteDouble('PresetLT', ftDouble, l_PresetLT);
    l_PresetMN := PresetMN;
    TROSerializer(ASerializer).WriteDouble('PresetMN', ftDouble, l_PresetMN);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_SeleccionDeProducto := SeleccionDeProducto;
    TROSerializer(ASerializer).WriteAnsiString('SeleccionDeProducto', l_SeleccionDeProducto);
    l_Terminal := Terminal;
    TROSerializer(ASerializer).WriteAnsiString('Terminal', l_Terminal);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', otSLong, l_Tipo);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
  end;
end;

{ TAutorizaCollection }
constructor TAutorizaCollection.Create;
begin
  inherited Create(TAutoriza);
end;

constructor TAutorizaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TAutorizaCollection.Add: TAutoriza;
begin
  result := TAutoriza(inherited Add);
end;

function TAutorizaCollection.GetItems(aIndex: integer): TAutoriza;
begin
  result := TAutoriza(inherited Items[aIndex]);
end;

procedure TAutorizaCollection.SetItems(aIndex: integer; const Value: TAutoriza);
begin
  TAutoriza(inherited Items[aIndex]).Assign(Value);
end;

{ TTarjeta }

procedure TTarjeta.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TTarjeta;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TTarjeta) then begin
    lSource := LibraryFlotillas_Intf.TTarjeta(iSource);
    GasolineroID := lSource.GasolineroID;
    ClienteID := lSource.ClienteID;
    VehiculoID := lSource.VehiculoID;
    Cantidad := lSource.Cantidad;
    LitrosImporte := lSource.LitrosImporte;
    MsnError := lSource.MsnError;
    Status := lSource.Status;
    Valido := lSource.Valido;
    Nombre := lSource.Nombre;
    RazonSocial := lSource.RazonSocial;
    RFC := lSource.RFC;
    Identificacion := lSource.Identificacion;
    Saldo := lSource.Saldo;
    Mensaje := lSource.Mensaje;
    CentroCostos := lSource.CentroCostos;
    Clasificacion := lSource.Clasificacion;
    Productos := lSource.Productos;
  end;
end;

procedure TTarjeta.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_CentroCostos: AnsiString;
  l_Clasificacion: AnsiString;
  l_ClienteID: Integer;
  l_GasolineroID: Integer;
  l_Identificacion: AnsiString;
  l_LitrosImporte: AnsiString;
  l_Mensaje: AnsiString;
  l_MsnError: AnsiString;
  l_Nombre: AnsiString;
  l_Productos: AnsiString;
  l_RazonSocial: AnsiString;
  l_RFC: AnsiString;
  l_Saldo: Double;
  l_Status: Integer;
  l_Valido: Boolean;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_LitrosImporte := LitrosImporte;
    TROSerializer(ASerializer).ReadAnsiString('LitrosImporte', l_LitrosImporte);
    LitrosImporte := l_LitrosImporte;
    l_MsnError := MsnError;
    TROSerializer(ASerializer).ReadAnsiString('MsnError', l_MsnError);
    MsnError := l_MsnError;
    l_Status := Status;
    TROSerializer(ASerializer).ReadInteger('Status', otSLong, l_Status);
    Status := l_Status;
    l_Valido := Valido;
    TROSerializer(ASerializer).ReadEnumerated('Valido',TypeInfo(boolean), l_Valido);
    Valido := l_Valido;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).ReadAnsiString('RazonSocial', l_RazonSocial);
    RazonSocial := l_RazonSocial;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).ReadAnsiString('Identificacion', l_Identificacion);
    Identificacion := l_Identificacion;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_CentroCostos := CentroCostos;
    TROSerializer(ASerializer).ReadAnsiString('CentroCostos', l_CentroCostos);
    CentroCostos := l_CentroCostos;
    l_Clasificacion := Clasificacion;
    TROSerializer(ASerializer).ReadAnsiString('Clasificacion', l_Clasificacion);
    Clasificacion := l_Clasificacion;
    l_Productos := Productos;
    TROSerializer(ASerializer).ReadAnsiString('Productos', l_Productos);
    Productos := l_Productos;
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_CentroCostos := CentroCostos;
    TROSerializer(ASerializer).ReadAnsiString('CentroCostos', l_CentroCostos);
    CentroCostos := l_CentroCostos;
    l_Clasificacion := Clasificacion;
    TROSerializer(ASerializer).ReadAnsiString('Clasificacion', l_Clasificacion);
    Clasificacion := l_Clasificacion;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).ReadAnsiString('Identificacion', l_Identificacion);
    Identificacion := l_Identificacion;
    l_LitrosImporte := LitrosImporte;
    TROSerializer(ASerializer).ReadAnsiString('LitrosImporte', l_LitrosImporte);
    LitrosImporte := l_LitrosImporte;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_MsnError := MsnError;
    TROSerializer(ASerializer).ReadAnsiString('MsnError', l_MsnError);
    MsnError := l_MsnError;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Productos := Productos;
    TROSerializer(ASerializer).ReadAnsiString('Productos', l_Productos);
    Productos := l_Productos;
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).ReadAnsiString('RazonSocial', l_RazonSocial);
    RazonSocial := l_RazonSocial;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_Status := Status;
    TROSerializer(ASerializer).ReadInteger('Status', otSLong, l_Status);
    Status := l_Status;
    l_Valido := Valido;
    TROSerializer(ASerializer).ReadEnumerated('Valido',TypeInfo(boolean), l_Valido);
    Valido := l_Valido;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
  end;
end;

procedure TTarjeta.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_CentroCostos: AnsiString;
  l_Clasificacion: AnsiString;
  l_ClienteID: Integer;
  l_GasolineroID: Integer;
  l_Identificacion: AnsiString;
  l_LitrosImporte: AnsiString;
  l_Mensaje: AnsiString;
  l_MsnError: AnsiString;
  l_Nombre: AnsiString;
  l_Productos: AnsiString;
  l_RazonSocial: AnsiString;
  l_RFC: AnsiString;
  l_Saldo: Double;
  l_Status: Integer;
  l_Valido: Boolean;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TTarjeta);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_LitrosImporte := LitrosImporte;
    TROSerializer(ASerializer).WriteAnsiString('LitrosImporte', l_LitrosImporte);
    l_MsnError := MsnError;
    TROSerializer(ASerializer).WriteAnsiString('MsnError', l_MsnError);
    l_Status := Status;
    TROSerializer(ASerializer).WriteInteger('Status', otSLong, l_Status);
    l_Valido := Valido;
    TROSerializer(ASerializer).WriteEnumerated('Valido',TypeInfo(boolean), l_Valido);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).WriteAnsiString('RazonSocial', l_RazonSocial);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).WriteAnsiString('Identificacion', l_Identificacion);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_CentroCostos := CentroCostos;
    TROSerializer(ASerializer).WriteAnsiString('CentroCostos', l_CentroCostos);
    l_Clasificacion := Clasificacion;
    TROSerializer(ASerializer).WriteAnsiString('Clasificacion', l_Clasificacion);
    l_Productos := Productos;
    TROSerializer(ASerializer).WriteAnsiString('Productos', l_Productos);
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_CentroCostos := CentroCostos;
    TROSerializer(ASerializer).WriteAnsiString('CentroCostos', l_CentroCostos);
    l_Clasificacion := Clasificacion;
    TROSerializer(ASerializer).WriteAnsiString('Clasificacion', l_Clasificacion);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).WriteAnsiString('Identificacion', l_Identificacion);
    l_LitrosImporte := LitrosImporte;
    TROSerializer(ASerializer).WriteAnsiString('LitrosImporte', l_LitrosImporte);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_MsnError := MsnError;
    TROSerializer(ASerializer).WriteAnsiString('MsnError', l_MsnError);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Productos := Productos;
    TROSerializer(ASerializer).WriteAnsiString('Productos', l_Productos);
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).WriteAnsiString('RazonSocial', l_RazonSocial);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_Status := Status;
    TROSerializer(ASerializer).WriteInteger('Status', otSLong, l_Status);
    l_Valido := Valido;
    TROSerializer(ASerializer).WriteEnumerated('Valido',TypeInfo(boolean), l_Valido);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
  end;
end;

{ TTarjetaCollection }
constructor TTarjetaCollection.Create;
begin
  inherited Create(TTarjeta);
end;

constructor TTarjetaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TTarjetaCollection.Add: TTarjeta;
begin
  result := TTarjeta(inherited Add);
end;

function TTarjetaCollection.GetItems(aIndex: integer): TTarjeta;
begin
  result := TTarjeta(inherited Items[aIndex]);
end;

procedure TTarjetaCollection.SetItems(aIndex: integer; const Value: TTarjeta);
begin
  TTarjeta(inherited Items[aIndex]).Assign(Value);
end;

{ TMovimiento }

procedure TMovimiento.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TMovimiento;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TMovimiento) then begin
    lSource := LibraryFlotillas_Intf.TMovimiento(iSource);
    MovimientoID := lSource.MovimientoID;
    FechaMovimiento := lSource.FechaMovimiento;
    FechaVencimiento := lSource.FechaVencimiento;
    Referencia := lSource.Referencia;
    Ejercicio := lSource.Ejercicio;
    Periodo := lSource.Periodo;
    CargoAbono := lSource.CargoAbono;
    Cargo := lSource.Cargo;
    Abono := lSource.Abono;
    FechaRegistro := lSource.FechaRegistro;
    Origen := lSource.Origen;
    AfectaSaldos := lSource.AfectaSaldos;
    TipoMovimiento := lSource.TipoMovimiento;
    UsuarioID := lSource.UsuarioID;
    ClienteID := lSource.ClienteID;
  end;
end;

procedure TMovimiento.ReadComplex(ASerializer: TObject);
var
  l_Abono: Double;
  l_AfectaSaldos: Boolean;
  l_Cargo: Double;
  l_CargoAbono: AnsiString;
  l_ClienteID: Integer;
  l_Ejercicio: Integer;
  l_FechaMovimiento: DateTime;
  l_FechaRegistro: DateTime;
  l_FechaVencimiento: DateTime;
  l_MovimientoID: Integer;
  l_Origen: AnsiString;
  l_Periodo: Integer;
  l_Referencia: AnsiString;
  l_TipoMovimiento: AnsiString;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).ReadInteger('MovimientoID', otSLong, l_MovimientoID);
    MovimientoID := l_MovimientoID;
    l_FechaMovimiento := FechaMovimiento;
    TROSerializer(ASerializer).ReadDateTime('FechaMovimiento', l_FechaMovimiento);
    FechaMovimiento := l_FechaMovimiento;
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).ReadDateTime('FechaVencimiento', l_FechaVencimiento);
    FechaVencimiento := l_FechaVencimiento;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).ReadInteger('Ejercicio', otSLong, l_Ejercicio);
    Ejercicio := l_Ejercicio;
    l_Periodo := Periodo;
    TROSerializer(ASerializer).ReadInteger('Periodo', otSLong, l_Periodo);
    Periodo := l_Periodo;
    l_CargoAbono := CargoAbono;
    TROSerializer(ASerializer).ReadAnsiString('CargoAbono', l_CargoAbono);
    CargoAbono := l_CargoAbono;
    l_Cargo := Cargo;
    TROSerializer(ASerializer).ReadDouble('Cargo', ftDouble, l_Cargo);
    Cargo := l_Cargo;
    l_Abono := Abono;
    TROSerializer(ASerializer).ReadDouble('Abono', ftDouble, l_Abono);
    Abono := l_Abono;
    l_FechaRegistro := FechaRegistro;
    TROSerializer(ASerializer).ReadDateTime('FechaRegistro', l_FechaRegistro);
    FechaRegistro := l_FechaRegistro;
    l_Origen := Origen;
    TROSerializer(ASerializer).ReadAnsiString('Origen', l_Origen);
    Origen := l_Origen;
    l_AfectaSaldos := AfectaSaldos;
    TROSerializer(ASerializer).ReadEnumerated('AfectaSaldos',TypeInfo(boolean), l_AfectaSaldos);
    AfectaSaldos := l_AfectaSaldos;
    l_TipoMovimiento := TipoMovimiento;
    TROSerializer(ASerializer).ReadAnsiString('TipoMovimiento', l_TipoMovimiento);
    TipoMovimiento := l_TipoMovimiento;
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).ReadInteger('UsuarioID', otSLong, l_UsuarioID);
    UsuarioID := l_UsuarioID;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
  end
  else begin
    l_Abono := Abono;
    TROSerializer(ASerializer).ReadDouble('Abono', ftDouble, l_Abono);
    Abono := l_Abono;
    l_AfectaSaldos := AfectaSaldos;
    TROSerializer(ASerializer).ReadEnumerated('AfectaSaldos',TypeInfo(boolean), l_AfectaSaldos);
    AfectaSaldos := l_AfectaSaldos;
    l_Cargo := Cargo;
    TROSerializer(ASerializer).ReadDouble('Cargo', ftDouble, l_Cargo);
    Cargo := l_Cargo;
    l_CargoAbono := CargoAbono;
    TROSerializer(ASerializer).ReadAnsiString('CargoAbono', l_CargoAbono);
    CargoAbono := l_CargoAbono;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).ReadInteger('Ejercicio', otSLong, l_Ejercicio);
    Ejercicio := l_Ejercicio;
    l_FechaMovimiento := FechaMovimiento;
    TROSerializer(ASerializer).ReadDateTime('FechaMovimiento', l_FechaMovimiento);
    FechaMovimiento := l_FechaMovimiento;
    l_FechaRegistro := FechaRegistro;
    TROSerializer(ASerializer).ReadDateTime('FechaRegistro', l_FechaRegistro);
    FechaRegistro := l_FechaRegistro;
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).ReadDateTime('FechaVencimiento', l_FechaVencimiento);
    FechaVencimiento := l_FechaVencimiento;
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).ReadInteger('MovimientoID', otSLong, l_MovimientoID);
    MovimientoID := l_MovimientoID;
    l_Origen := Origen;
    TROSerializer(ASerializer).ReadAnsiString('Origen', l_Origen);
    Origen := l_Origen;
    l_Periodo := Periodo;
    TROSerializer(ASerializer).ReadInteger('Periodo', otSLong, l_Periodo);
    Periodo := l_Periodo;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_TipoMovimiento := TipoMovimiento;
    TROSerializer(ASerializer).ReadAnsiString('TipoMovimiento', l_TipoMovimiento);
    TipoMovimiento := l_TipoMovimiento;
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).ReadInteger('UsuarioID', otSLong, l_UsuarioID);
    UsuarioID := l_UsuarioID;
  end;
end;

procedure TMovimiento.WriteComplex(ASerializer: TObject);
var
  l_Abono: Double;
  l_AfectaSaldos: Boolean;
  l_Cargo: Double;
  l_CargoAbono: AnsiString;
  l_ClienteID: Integer;
  l_Ejercicio: Integer;
  l_FechaMovimiento: DateTime;
  l_FechaRegistro: DateTime;
  l_FechaVencimiento: DateTime;
  l_MovimientoID: Integer;
  l_Origen: AnsiString;
  l_Periodo: Integer;
  l_Referencia: AnsiString;
  l_TipoMovimiento: AnsiString;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TMovimiento);
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).WriteInteger('MovimientoID', otSLong, l_MovimientoID);
    l_FechaMovimiento := FechaMovimiento;
    TROSerializer(ASerializer).WriteDateTime('FechaMovimiento', l_FechaMovimiento);
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).WriteDateTime('FechaVencimiento', l_FechaVencimiento);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', otSLong, l_Ejercicio);
    l_Periodo := Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', otSLong, l_Periodo);
    l_CargoAbono := CargoAbono;
    TROSerializer(ASerializer).WriteAnsiString('CargoAbono', l_CargoAbono);
    l_Cargo := Cargo;
    TROSerializer(ASerializer).WriteDouble('Cargo', ftDouble, l_Cargo);
    l_Abono := Abono;
    TROSerializer(ASerializer).WriteDouble('Abono', ftDouble, l_Abono);
    l_FechaRegistro := FechaRegistro;
    TROSerializer(ASerializer).WriteDateTime('FechaRegistro', l_FechaRegistro);
    l_Origen := Origen;
    TROSerializer(ASerializer).WriteAnsiString('Origen', l_Origen);
    l_AfectaSaldos := AfectaSaldos;
    TROSerializer(ASerializer).WriteEnumerated('AfectaSaldos',TypeInfo(boolean), l_AfectaSaldos);
    l_TipoMovimiento := TipoMovimiento;
    TROSerializer(ASerializer).WriteAnsiString('TipoMovimiento', l_TipoMovimiento);
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', otSLong, l_UsuarioID);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
  end
  else begin
    l_Abono := Abono;
    TROSerializer(ASerializer).WriteDouble('Abono', ftDouble, l_Abono);
    l_AfectaSaldos := AfectaSaldos;
    TROSerializer(ASerializer).WriteEnumerated('AfectaSaldos',TypeInfo(boolean), l_AfectaSaldos);
    l_Cargo := Cargo;
    TROSerializer(ASerializer).WriteDouble('Cargo', ftDouble, l_Cargo);
    l_CargoAbono := CargoAbono;
    TROSerializer(ASerializer).WriteAnsiString('CargoAbono', l_CargoAbono);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Ejercicio := Ejercicio;
    TROSerializer(ASerializer).WriteInteger('Ejercicio', otSLong, l_Ejercicio);
    l_FechaMovimiento := FechaMovimiento;
    TROSerializer(ASerializer).WriteDateTime('FechaMovimiento', l_FechaMovimiento);
    l_FechaRegistro := FechaRegistro;
    TROSerializer(ASerializer).WriteDateTime('FechaRegistro', l_FechaRegistro);
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).WriteDateTime('FechaVencimiento', l_FechaVencimiento);
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).WriteInteger('MovimientoID', otSLong, l_MovimientoID);
    l_Origen := Origen;
    TROSerializer(ASerializer).WriteAnsiString('Origen', l_Origen);
    l_Periodo := Periodo;
    TROSerializer(ASerializer).WriteInteger('Periodo', otSLong, l_Periodo);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_TipoMovimiento := TipoMovimiento;
    TROSerializer(ASerializer).WriteAnsiString('TipoMovimiento', l_TipoMovimiento);
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', otSLong, l_UsuarioID);
  end;
end;

{ TMovimientoCollection }
constructor TMovimientoCollection.Create;
begin
  inherited Create(TMovimiento);
end;

constructor TMovimientoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TMovimientoCollection.Add: TMovimiento;
begin
  result := TMovimiento(inherited Add);
end;

function TMovimientoCollection.GetItems(aIndex: integer): TMovimiento;
begin
  result := TMovimiento(inherited Items[aIndex]);
end;

procedure TMovimientoCollection.SetItems(aIndex: integer; const Value: TMovimiento);
begin
  TMovimiento(inherited Items[aIndex]).Assign(Value);
end;

{ TSaldoDocumento }

procedure TSaldoDocumento.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TSaldoDocumento;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TSaldoDocumento) then begin
    lSource := LibraryFlotillas_Intf.TSaldoDocumento(iSource);
    SaldoDocumentoID := lSource.SaldoDocumentoID;
    Fecha := lSource.Fecha;
    FechaVencimiento := lSource.FechaVencimiento;
    Cargo := lSource.Cargo;
    Abono := lSource.Abono;
    Referencia := lSource.Referencia;
    ClienteID := lSource.ClienteID;
    MovimientoID := lSource.MovimientoID;
  end;
end;

procedure TSaldoDocumento.ReadComplex(ASerializer: TObject);
var
  l_Abono: Double;
  l_Cargo: Double;
  l_ClienteID: Integer;
  l_Fecha: DateTime;
  l_FechaVencimiento: DateTime;
  l_MovimientoID: Integer;
  l_Referencia: AnsiString;
  l_SaldoDocumentoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_SaldoDocumentoID := SaldoDocumentoID;
    TROSerializer(ASerializer).ReadInteger('SaldoDocumentoID', otSLong, l_SaldoDocumentoID);
    SaldoDocumentoID := l_SaldoDocumentoID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).ReadDateTime('FechaVencimiento', l_FechaVencimiento);
    FechaVencimiento := l_FechaVencimiento;
    l_Cargo := Cargo;
    TROSerializer(ASerializer).ReadDouble('Cargo', ftDouble, l_Cargo);
    Cargo := l_Cargo;
    l_Abono := Abono;
    TROSerializer(ASerializer).ReadDouble('Abono', ftDouble, l_Abono);
    Abono := l_Abono;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).ReadInteger('MovimientoID', otSLong, l_MovimientoID);
    MovimientoID := l_MovimientoID;
  end
  else begin
    l_Abono := Abono;
    TROSerializer(ASerializer).ReadDouble('Abono', ftDouble, l_Abono);
    Abono := l_Abono;
    l_Cargo := Cargo;
    TROSerializer(ASerializer).ReadDouble('Cargo', ftDouble, l_Cargo);
    Cargo := l_Cargo;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).ReadDateTime('FechaVencimiento', l_FechaVencimiento);
    FechaVencimiento := l_FechaVencimiento;
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).ReadInteger('MovimientoID', otSLong, l_MovimientoID);
    MovimientoID := l_MovimientoID;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_SaldoDocumentoID := SaldoDocumentoID;
    TROSerializer(ASerializer).ReadInteger('SaldoDocumentoID', otSLong, l_SaldoDocumentoID);
    SaldoDocumentoID := l_SaldoDocumentoID;
  end;
end;

procedure TSaldoDocumento.WriteComplex(ASerializer: TObject);
var
  l_Abono: Double;
  l_Cargo: Double;
  l_ClienteID: Integer;
  l_Fecha: DateTime;
  l_FechaVencimiento: DateTime;
  l_MovimientoID: Integer;
  l_Referencia: AnsiString;
  l_SaldoDocumentoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TSaldoDocumento);
    l_SaldoDocumentoID := SaldoDocumentoID;
    TROSerializer(ASerializer).WriteInteger('SaldoDocumentoID', otSLong, l_SaldoDocumentoID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).WriteDateTime('FechaVencimiento', l_FechaVencimiento);
    l_Cargo := Cargo;
    TROSerializer(ASerializer).WriteDouble('Cargo', ftDouble, l_Cargo);
    l_Abono := Abono;
    TROSerializer(ASerializer).WriteDouble('Abono', ftDouble, l_Abono);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).WriteInteger('MovimientoID', otSLong, l_MovimientoID);
  end
  else begin
    l_Abono := Abono;
    TROSerializer(ASerializer).WriteDouble('Abono', ftDouble, l_Abono);
    l_Cargo := Cargo;
    TROSerializer(ASerializer).WriteDouble('Cargo', ftDouble, l_Cargo);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_FechaVencimiento := FechaVencimiento;
    TROSerializer(ASerializer).WriteDateTime('FechaVencimiento', l_FechaVencimiento);
    l_MovimientoID := MovimientoID;
    TROSerializer(ASerializer).WriteInteger('MovimientoID', otSLong, l_MovimientoID);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_SaldoDocumentoID := SaldoDocumentoID;
    TROSerializer(ASerializer).WriteInteger('SaldoDocumentoID', otSLong, l_SaldoDocumentoID);
  end;
end;

{ TSaldoDocumentoCollection }
constructor TSaldoDocumentoCollection.Create;
begin
  inherited Create(TSaldoDocumento);
end;

constructor TSaldoDocumentoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TSaldoDocumentoCollection.Add: TSaldoDocumento;
begin
  result := TSaldoDocumento(inherited Add);
end;

function TSaldoDocumentoCollection.GetItems(aIndex: integer): TSaldoDocumento;
begin
  result := TSaldoDocumento(inherited Items[aIndex]);
end;

procedure TSaldoDocumentoCollection.SetItems(aIndex: integer; const Value: TSaldoDocumento);
begin
  TSaldoDocumento(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosVehiculo }

procedure TDatosVehiculo.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TDatosVehiculo;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TDatosVehiculo) then begin
    lSource := LibraryFlotillas_Intf.TDatosVehiculo(iSource);
    ClienteID := lSource.ClienteID;
    VehiculoID := lSource.VehiculoID;
    ClienteNombre := lSource.ClienteNombre;
    Referencia := lSource.Referencia;
  end;
end;

procedure TDatosVehiculo.ReadComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_ClienteNombre: AnsiString;
  l_Referencia: AnsiString;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_ClienteNombre := ClienteNombre;
    TROSerializer(ASerializer).ReadAnsiString('ClienteNombre', l_ClienteNombre);
    ClienteNombre := l_ClienteNombre;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_ClienteNombre := ClienteNombre;
    TROSerializer(ASerializer).ReadAnsiString('ClienteNombre', l_ClienteNombre);
    ClienteNombre := l_ClienteNombre;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
  end;
end;

procedure TDatosVehiculo.WriteComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_ClienteNombre: AnsiString;
  l_Referencia: AnsiString;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosVehiculo);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_ClienteNombre := ClienteNombre;
    TROSerializer(ASerializer).WriteAnsiString('ClienteNombre', l_ClienteNombre);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_ClienteNombre := ClienteNombre;
    TROSerializer(ASerializer).WriteAnsiString('ClienteNombre', l_ClienteNombre);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
  end;
end;

{ TDatosVehiculoCollection }
constructor TDatosVehiculoCollection.Create;
begin
  inherited Create(TDatosVehiculo);
end;

constructor TDatosVehiculoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosVehiculoCollection.Add: TDatosVehiculo;
begin
  result := TDatosVehiculo(inherited Add);
end;

function TDatosVehiculoCollection.GetItems(aIndex: integer): TDatosVehiculo;
begin
  result := TDatosVehiculo(inherited Items[aIndex]);
end;

procedure TDatosVehiculoCollection.SetItems(aIndex: integer; const Value: TDatosVehiculo);
begin
  TDatosVehiculo(inherited Items[aIndex]).Assign(Value);
end;

{ TTarjetaLLave }

procedure TTarjetaLLave.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TTarjetaLLave;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TTarjetaLLave) then begin
    lSource := LibraryFlotillas_Intf.TTarjetaLLave(iSource);
    UsuarioID := lSource.UsuarioID;
    Nombre := lSource.Nombre;
    Tarjeta := lSource.Tarjeta;
    EstacionID := lSource.EstacionID;
    Activo := lSource.Activo;
  end;
end;

procedure TTarjetaLLave.ReadComplex(ASerializer: TObject);
var
  l_Activo: Boolean;
  l_EstacionID: Integer;
  l_Nombre: AnsiString;
  l_Tarjeta: AnsiString;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).ReadInteger('UsuarioID', otSLong, l_UsuarioID);
    UsuarioID := l_UsuarioID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Activo := Activo;
    TROSerializer(ASerializer).ReadEnumerated('Activo',TypeInfo(boolean), l_Activo);
    Activo := l_Activo;
  end
  else begin
    l_Activo := Activo;
    TROSerializer(ASerializer).ReadEnumerated('Activo',TypeInfo(boolean), l_Activo);
    Activo := l_Activo;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).ReadInteger('UsuarioID', otSLong, l_UsuarioID);
    UsuarioID := l_UsuarioID;
  end;
end;

procedure TTarjetaLLave.WriteComplex(ASerializer: TObject);
var
  l_Activo: Boolean;
  l_EstacionID: Integer;
  l_Nombre: AnsiString;
  l_Tarjeta: AnsiString;
  l_UsuarioID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TTarjetaLLave);
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', otSLong, l_UsuarioID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Activo := Activo;
    TROSerializer(ASerializer).WriteEnumerated('Activo',TypeInfo(boolean), l_Activo);
  end
  else begin
    l_Activo := Activo;
    TROSerializer(ASerializer).WriteEnumerated('Activo',TypeInfo(boolean), l_Activo);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
    l_UsuarioID := UsuarioID;
    TROSerializer(ASerializer).WriteInteger('UsuarioID', otSLong, l_UsuarioID);
  end;
end;

{ TTarjetaLLaveCollection }
constructor TTarjetaLLaveCollection.Create;
begin
  inherited Create(TTarjetaLLave);
end;

constructor TTarjetaLLaveCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TTarjetaLLaveCollection.Add: TTarjetaLLave;
begin
  result := TTarjetaLLave(inherited Add);
end;

function TTarjetaLLaveCollection.GetItems(aIndex: integer): TTarjetaLLave;
begin
  result := TTarjetaLLave(inherited Items[aIndex]);
end;

procedure TTarjetaLLaveCollection.LoadFromArray(anArray: aTarjetaLlave);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TTarjetaLLaveCollection.SaveToArray(anArray: aTarjetaLlave);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TTarjetaLLave.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TTarjetaLLaveCollection.SetItems(aIndex: integer; const Value: TTarjetaLLave);
begin
  TTarjetaLLave(inherited Items[aIndex]).Assign(Value);
end;

{ TBancaria }

procedure TBancaria.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TBancaria;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TBancaria) then begin
    lSource := LibraryFlotillas_Intf.TBancaria(iSource);
    Mensaje := lSource.Mensaje;
    Tarjeta := lSource.Tarjeta;
    NombreCliente := lSource.NombreCliente;
    Aprobada := lSource.Aprobada;
    ID := lSource.ID;
    Autorizacion := lSource.Autorizacion;
    Comision := lSource.Comision;
  end;
end;

procedure TBancaria.ReadComplex(ASerializer: TObject);
var
  l_Aprobada: Boolean;
  l_Autorizacion: AnsiString;
  l_Comision: Double;
  l_ID: Integer;
  l_Mensaje: AnsiString;
  l_NombreCliente: AnsiString;
  l_Tarjeta: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
    l_NombreCliente := NombreCliente;
    TROSerializer(ASerializer).ReadAnsiString('NombreCliente', l_NombreCliente);
    NombreCliente := l_NombreCliente;
    l_Aprobada := Aprobada;
    TROSerializer(ASerializer).ReadEnumerated('Aprobada',TypeInfo(boolean), l_Aprobada);
    Aprobada := l_Aprobada;
    l_ID := ID;
    TROSerializer(ASerializer).ReadInteger('ID', otSLong, l_ID);
    ID := l_ID;
    l_Autorizacion := Autorizacion;
    TROSerializer(ASerializer).ReadAnsiString('Autorizacion', l_Autorizacion);
    Autorizacion := l_Autorizacion;
    l_Comision := Comision;
    TROSerializer(ASerializer).ReadDouble('Comision', ftDouble, l_Comision);
    Comision := l_Comision;
  end
  else begin
    l_Aprobada := Aprobada;
    TROSerializer(ASerializer).ReadEnumerated('Aprobada',TypeInfo(boolean), l_Aprobada);
    Aprobada := l_Aprobada;
    l_Autorizacion := Autorizacion;
    TROSerializer(ASerializer).ReadAnsiString('Autorizacion', l_Autorizacion);
    Autorizacion := l_Autorizacion;
    l_Comision := Comision;
    TROSerializer(ASerializer).ReadDouble('Comision', ftDouble, l_Comision);
    Comision := l_Comision;
    l_ID := ID;
    TROSerializer(ASerializer).ReadInteger('ID', otSLong, l_ID);
    ID := l_ID;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_NombreCliente := NombreCliente;
    TROSerializer(ASerializer).ReadAnsiString('NombreCliente', l_NombreCliente);
    NombreCliente := l_NombreCliente;
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).ReadAnsiString('Tarjeta', l_Tarjeta);
    Tarjeta := l_Tarjeta;
  end;
end;

procedure TBancaria.WriteComplex(ASerializer: TObject);
var
  l_Aprobada: Boolean;
  l_Autorizacion: AnsiString;
  l_Comision: Double;
  l_ID: Integer;
  l_Mensaje: AnsiString;
  l_NombreCliente: AnsiString;
  l_Tarjeta: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TBancaria);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
    l_NombreCliente := NombreCliente;
    TROSerializer(ASerializer).WriteAnsiString('NombreCliente', l_NombreCliente);
    l_Aprobada := Aprobada;
    TROSerializer(ASerializer).WriteEnumerated('Aprobada',TypeInfo(boolean), l_Aprobada);
    l_ID := ID;
    TROSerializer(ASerializer).WriteInteger('ID', otSLong, l_ID);
    l_Autorizacion := Autorizacion;
    TROSerializer(ASerializer).WriteAnsiString('Autorizacion', l_Autorizacion);
    l_Comision := Comision;
    TROSerializer(ASerializer).WriteDouble('Comision', ftDouble, l_Comision);
  end
  else begin
    l_Aprobada := Aprobada;
    TROSerializer(ASerializer).WriteEnumerated('Aprobada',TypeInfo(boolean), l_Aprobada);
    l_Autorizacion := Autorizacion;
    TROSerializer(ASerializer).WriteAnsiString('Autorizacion', l_Autorizacion);
    l_Comision := Comision;
    TROSerializer(ASerializer).WriteDouble('Comision', ftDouble, l_Comision);
    l_ID := ID;
    TROSerializer(ASerializer).WriteInteger('ID', otSLong, l_ID);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_NombreCliente := NombreCliente;
    TROSerializer(ASerializer).WriteAnsiString('NombreCliente', l_NombreCliente);
    l_Tarjeta := Tarjeta;
    TROSerializer(ASerializer).WriteAnsiString('Tarjeta', l_Tarjeta);
  end;
end;

{ TBancariaCollection }
constructor TBancariaCollection.Create;
begin
  inherited Create(TBancaria);
end;

constructor TBancariaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TBancariaCollection.Add: TBancaria;
begin
  result := TBancaria(inherited Add);
end;

function TBancariaCollection.GetItems(aIndex: integer): TBancaria;
begin
  result := TBancaria(inherited Items[aIndex]);
end;

procedure TBancariaCollection.SetItems(aIndex: integer; const Value: TBancaria);
begin
  TBancaria(inherited Items[aIndex]).Assign(Value);
end;

{ TGeneraCupon }

procedure TGeneraCupon.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TGeneraCupon;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TGeneraCupon) then begin
    lSource := LibraryFlotillas_Intf.TGeneraCupon(iSource);
    Cantidad := lSource.Cantidad;
    Denominacion := lSource.Denominacion;
    Referencia := lSource.Referencia;
  end;
end;

procedure TGeneraCupon.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Integer;
  l_Denominacion: Double;
  l_Referencia: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadInteger('Cantidad', otSLong, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Denominacion := Denominacion;
    TROSerializer(ASerializer).ReadDouble('Denominacion', ftDouble, l_Denominacion);
    Denominacion := l_Denominacion;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadInteger('Cantidad', otSLong, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Denominacion := Denominacion;
    TROSerializer(ASerializer).ReadDouble('Denominacion', ftDouble, l_Denominacion);
    Denominacion := l_Denominacion;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
  end;
end;

procedure TGeneraCupon.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Integer;
  l_Denominacion: Double;
  l_Referencia: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TGeneraCupon);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteInteger('Cantidad', otSLong, l_Cantidad);
    l_Denominacion := Denominacion;
    TROSerializer(ASerializer).WriteDouble('Denominacion', ftDouble, l_Denominacion);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteInteger('Cantidad', otSLong, l_Cantidad);
    l_Denominacion := Denominacion;
    TROSerializer(ASerializer).WriteDouble('Denominacion', ftDouble, l_Denominacion);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
  end;
end;

{ TGeneraCuponCollection }
constructor TGeneraCuponCollection.Create;
begin
  inherited Create(TGeneraCupon);
end;

constructor TGeneraCuponCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TGeneraCuponCollection.Add: TGeneraCupon;
begin
  result := TGeneraCupon(inherited Add);
end;

function TGeneraCuponCollection.GetItems(aIndex: integer): TGeneraCupon;
begin
  result := TGeneraCupon(inherited Items[aIndex]);
end;

procedure TGeneraCuponCollection.LoadFromArray(anArray: AGeneraCupon);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TGeneraCuponCollection.SaveToArray(anArray: AGeneraCupon);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TGeneraCupon.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TGeneraCuponCollection.SetItems(aIndex: integer; const Value: TGeneraCupon);
begin
  TGeneraCupon(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosTicketConsumo }

procedure TDatosTicketConsumo.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TDatosTicketConsumo;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TDatosTicketConsumo) then begin
    lSource := LibraryFlotillas_Intf.TDatosTicketConsumo(iSource);
    Secuencia := lSource.Secuencia;
    BombaID := lSource.BombaID;
    Fecha := lSource.Fecha;
    NombreProducto := lSource.NombreProducto;
    Cliente := lSource.Cliente;
    Identificacion := lSource.Identificacion;
    Referencia := lSource.Referencia;
    Odometro := lSource.Odometro;
    Volumen := lSource.Volumen;
    Precio := lSource.Precio;
    Importe := lSource.Importe;
    IVA := lSource.IVA;
  end;
end;

procedure TDatosTicketConsumo.ReadComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_Cliente: AnsiString;
  l_Fecha: DateTime;
  l_Identificacion: AnsiString;
  l_Importe: Double;
  l_IVA: Double;
  l_NombreProducto: AnsiString;
  l_Odometro: Integer;
  l_Precio: Double;
  l_Referencia: AnsiString;
  l_Secuencia: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_NombreProducto := NombreProducto;
    TROSerializer(ASerializer).ReadAnsiString('NombreProducto', l_NombreProducto);
    NombreProducto := l_NombreProducto;
    l_Cliente := Cliente;
    TROSerializer(ASerializer).ReadAnsiString('Cliente', l_Cliente);
    Cliente := l_Cliente;
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).ReadAnsiString('Identificacion', l_Identificacion);
    Identificacion := l_Identificacion;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Odometro := Odometro;
    TROSerializer(ASerializer).ReadInteger('Odometro', otSLong, l_Odometro);
    Odometro := l_Odometro;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_IVA := IVA;
    TROSerializer(ASerializer).ReadDouble('IVA', ftDouble, l_IVA);
    IVA := l_IVA;
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).ReadInteger('BombaID', otSLong, l_BombaID);
    BombaID := l_BombaID;
    l_Cliente := Cliente;
    TROSerializer(ASerializer).ReadAnsiString('Cliente', l_Cliente);
    Cliente := l_Cliente;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).ReadAnsiString('Identificacion', l_Identificacion);
    Identificacion := l_Identificacion;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_IVA := IVA;
    TROSerializer(ASerializer).ReadDouble('IVA', ftDouble, l_IVA);
    IVA := l_IVA;
    l_NombreProducto := NombreProducto;
    TROSerializer(ASerializer).ReadAnsiString('NombreProducto', l_NombreProducto);
    NombreProducto := l_NombreProducto;
    l_Odometro := Odometro;
    TROSerializer(ASerializer).ReadInteger('Odometro', otSLong, l_Odometro);
    Odometro := l_Odometro;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).ReadInteger('Secuencia', otSLong, l_Secuencia);
    Secuencia := l_Secuencia;
    l_Volumen := Volumen;
    TROSerializer(ASerializer).ReadDouble('Volumen', ftDouble, l_Volumen);
    Volumen := l_Volumen;
  end;
end;

procedure TDatosTicketConsumo.WriteComplex(ASerializer: TObject);
var
  l_BombaID: Integer;
  l_Cliente: AnsiString;
  l_Fecha: DateTime;
  l_Identificacion: AnsiString;
  l_Importe: Double;
  l_IVA: Double;
  l_NombreProducto: AnsiString;
  l_Odometro: Integer;
  l_Precio: Double;
  l_Referencia: AnsiString;
  l_Secuencia: Integer;
  l_Volumen: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosTicketConsumo);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_NombreProducto := NombreProducto;
    TROSerializer(ASerializer).WriteAnsiString('NombreProducto', l_NombreProducto);
    l_Cliente := Cliente;
    TROSerializer(ASerializer).WriteAnsiString('Cliente', l_Cliente);
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).WriteAnsiString('Identificacion', l_Identificacion);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Odometro := Odometro;
    TROSerializer(ASerializer).WriteInteger('Odometro', otSLong, l_Odometro);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_IVA := IVA;
    TROSerializer(ASerializer).WriteDouble('IVA', ftDouble, l_IVA);
  end
  else begin
    l_BombaID := BombaID;
    TROSerializer(ASerializer).WriteInteger('BombaID', otSLong, l_BombaID);
    l_Cliente := Cliente;
    TROSerializer(ASerializer).WriteAnsiString('Cliente', l_Cliente);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).WriteAnsiString('Identificacion', l_Identificacion);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_IVA := IVA;
    TROSerializer(ASerializer).WriteDouble('IVA', ftDouble, l_IVA);
    l_NombreProducto := NombreProducto;
    TROSerializer(ASerializer).WriteAnsiString('NombreProducto', l_NombreProducto);
    l_Odometro := Odometro;
    TROSerializer(ASerializer).WriteInteger('Odometro', otSLong, l_Odometro);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Secuencia := Secuencia;
    TROSerializer(ASerializer).WriteInteger('Secuencia', otSLong, l_Secuencia);
    l_Volumen := Volumen;
    TROSerializer(ASerializer).WriteDouble('Volumen', ftDouble, l_Volumen);
  end;
end;

{ TDatosTicketConsumoCollection }
constructor TDatosTicketConsumoCollection.Create;
begin
  inherited Create(TDatosTicketConsumo);
end;

constructor TDatosTicketConsumoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosTicketConsumoCollection.Add: TDatosTicketConsumo;
begin
  result := TDatosTicketConsumo(inherited Add);
end;

function TDatosTicketConsumoCollection.GetItems(aIndex: integer): TDatosTicketConsumo;
begin
  result := TDatosTicketConsumo(inherited Items[aIndex]);
end;

procedure TDatosTicketConsumoCollection.SetItems(aIndex: integer; const Value: TDatosTicketConsumo);
begin
  TDatosTicketConsumo(inherited Items[aIndex]).Assign(Value);
end;

{ TProductoF }

procedure TProductoF.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TProductoF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TProductoF) then begin
    lSource := LibraryFlotillas_Intf.TProductoF(iSource);
    ID := lSource.ID;
    Nombre := lSource.Nombre;
    Precio := lSource.Precio;
    Cantidad := lSource.Cantidad;
  end;
end;

procedure TProductoF.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_ID: Integer;
  l_Nombre: AnsiString;
  l_Precio: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ID := ID;
    TROSerializer(ASerializer).ReadInteger('ID', otSLong, l_ID);
    ID := l_ID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_ID := ID;
    TROSerializer(ASerializer).ReadInteger('ID', otSLong, l_ID);
    ID := l_ID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
  end;
end;

procedure TProductoF.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_ID: Integer;
  l_Nombre: AnsiString;
  l_Precio: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TProductoF);
    l_ID := ID;
    TROSerializer(ASerializer).WriteInteger('ID', otSLong, l_ID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_ID := ID;
    TROSerializer(ASerializer).WriteInteger('ID', otSLong, l_ID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
  end;
end;

{ TProductoFCollection }
constructor TProductoFCollection.Create;
begin
  inherited Create(TProductoF);
end;

constructor TProductoFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TProductoFCollection.Add: TProductoF;
begin
  result := TProductoF(inherited Add);
end;

function TProductoFCollection.GetItems(aIndex: integer): TProductoF;
begin
  result := TProductoF(inherited Items[aIndex]);
end;

procedure TProductoFCollection.LoadFromArray(anArray: AProductoF);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TProductoFCollection.SaveToArray(anArray: AProductoF);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TProductoF.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TProductoFCollection.SetItems(aIndex: integer; const Value: TProductoF);
begin
  TProductoF(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosClienteOtros }

procedure TDatosClienteOtros.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TDatosClienteOtros;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TDatosClienteOtros) then begin
    lSource := LibraryFlotillas_Intf.TDatosClienteOtros(iSource);
    ClienteID := lSource.ClienteID;
    VehiculoID := lSource.VehiculoID;
    Nombre := lSource.Nombre;
    Identificacion := lSource.Identificacion;
    IVA := lSource.IVA;
    GasolineroID := lSource.GasolineroID;
  end;
end;

procedure TDatosClienteOtros.ReadComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_GasolineroID: Integer;
  l_Identificacion: AnsiString;
  l_IVA: Double;
  l_Nombre: AnsiString;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).ReadAnsiString('Identificacion', l_Identificacion);
    Identificacion := l_Identificacion;
    l_IVA := IVA;
    TROSerializer(ASerializer).ReadDouble('IVA', ftDouble, l_IVA);
    IVA := l_IVA;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).ReadAnsiString('Identificacion', l_Identificacion);
    Identificacion := l_Identificacion;
    l_IVA := IVA;
    TROSerializer(ASerializer).ReadDouble('IVA', ftDouble, l_IVA);
    IVA := l_IVA;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
  end;
end;

procedure TDatosClienteOtros.WriteComplex(ASerializer: TObject);
var
  l_ClienteID: Integer;
  l_GasolineroID: Integer;
  l_Identificacion: AnsiString;
  l_IVA: Double;
  l_Nombre: AnsiString;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosClienteOtros);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).WriteAnsiString('Identificacion', l_Identificacion);
    l_IVA := IVA;
    TROSerializer(ASerializer).WriteDouble('IVA', ftDouble, l_IVA);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
  end
  else begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).WriteAnsiString('Identificacion', l_Identificacion);
    l_IVA := IVA;
    TROSerializer(ASerializer).WriteDouble('IVA', ftDouble, l_IVA);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
  end;
end;

{ TDatosClienteOtrosCollection }
constructor TDatosClienteOtrosCollection.Create;
begin
  inherited Create(TDatosClienteOtros);
end;

constructor TDatosClienteOtrosCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosClienteOtrosCollection.Add: TDatosClienteOtros;
begin
  result := TDatosClienteOtros(inherited Add);
end;

function TDatosClienteOtrosCollection.GetItems(aIndex: integer): TDatosClienteOtros;
begin
  result := TDatosClienteOtros(inherited Items[aIndex]);
end;

procedure TDatosClienteOtrosCollection.SetItems(aIndex: integer; const Value: TDatosClienteOtros);
begin
  TDatosClienteOtros(inherited Items[aIndex]).Assign(Value);
end;

{ TTiempoAire }

procedure TTiempoAire.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TTiempoAire;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TTiempoAire) then begin
    lSource := LibraryFlotillas_Intf.TTiempoAire(iSource);
    Proveedor := lSource.Proveedor;
    Telefono := lSource.Telefono;
    Importe := lSource.Importe;
    Accepted := lSource.Accepted;
    idTrans := lSource.idTrans;
    TransID := lSource.TransID;
    Notes := lSource.Notes;
    Instructions := lSource.Instructions;
  end;
end;

procedure TTiempoAire.ReadComplex(ASerializer: TObject);
var
  l_Accepted: Boolean;
  l_idTrans: AnsiString;
  l_Importe: Double;
  l_Instructions: AnsiString;
  l_Notes: AnsiString;
  l_Proveedor: Integer;
  l_Telefono: AnsiString;
  l_TransID: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Proveedor := Proveedor;
    TROSerializer(ASerializer).ReadInteger('Proveedor', otSLong, l_Proveedor);
    Proveedor := l_Proveedor;
    l_Telefono := Telefono;
    TROSerializer(ASerializer).ReadAnsiString('Telefono', l_Telefono);
    Telefono := l_Telefono;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Accepted := Accepted;
    TROSerializer(ASerializer).ReadEnumerated('Accepted',TypeInfo(boolean), l_Accepted);
    Accepted := l_Accepted;
    l_idTrans := idTrans;
    TROSerializer(ASerializer).ReadAnsiString('idTrans', l_idTrans);
    idTrans := l_idTrans;
    l_TransID := TransID;
    TROSerializer(ASerializer).ReadAnsiString('TransID', l_TransID);
    TransID := l_TransID;
    l_Notes := Notes;
    TROSerializer(ASerializer).ReadAnsiString('Notes', l_Notes);
    Notes := l_Notes;
    l_Instructions := Instructions;
    TROSerializer(ASerializer).ReadAnsiString('Instructions', l_Instructions);
    Instructions := l_Instructions;
  end
  else begin
    l_Accepted := Accepted;
    TROSerializer(ASerializer).ReadEnumerated('Accepted',TypeInfo(boolean), l_Accepted);
    Accepted := l_Accepted;
    l_idTrans := idTrans;
    TROSerializer(ASerializer).ReadAnsiString('idTrans', l_idTrans);
    idTrans := l_idTrans;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_Instructions := Instructions;
    TROSerializer(ASerializer).ReadAnsiString('Instructions', l_Instructions);
    Instructions := l_Instructions;
    l_Notes := Notes;
    TROSerializer(ASerializer).ReadAnsiString('Notes', l_Notes);
    Notes := l_Notes;
    l_Proveedor := Proveedor;
    TROSerializer(ASerializer).ReadInteger('Proveedor', otSLong, l_Proveedor);
    Proveedor := l_Proveedor;
    l_Telefono := Telefono;
    TROSerializer(ASerializer).ReadAnsiString('Telefono', l_Telefono);
    Telefono := l_Telefono;
    l_TransID := TransID;
    TROSerializer(ASerializer).ReadAnsiString('TransID', l_TransID);
    TransID := l_TransID;
  end;
end;

procedure TTiempoAire.WriteComplex(ASerializer: TObject);
var
  l_Accepted: Boolean;
  l_idTrans: AnsiString;
  l_Importe: Double;
  l_Instructions: AnsiString;
  l_Notes: AnsiString;
  l_Proveedor: Integer;
  l_Telefono: AnsiString;
  l_TransID: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TTiempoAire);
    l_Proveedor := Proveedor;
    TROSerializer(ASerializer).WriteInteger('Proveedor', otSLong, l_Proveedor);
    l_Telefono := Telefono;
    TROSerializer(ASerializer).WriteAnsiString('Telefono', l_Telefono);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Accepted := Accepted;
    TROSerializer(ASerializer).WriteEnumerated('Accepted',TypeInfo(boolean), l_Accepted);
    l_idTrans := idTrans;
    TROSerializer(ASerializer).WriteAnsiString('idTrans', l_idTrans);
    l_TransID := TransID;
    TROSerializer(ASerializer).WriteAnsiString('TransID', l_TransID);
    l_Notes := Notes;
    TROSerializer(ASerializer).WriteAnsiString('Notes', l_Notes);
    l_Instructions := Instructions;
    TROSerializer(ASerializer).WriteAnsiString('Instructions', l_Instructions);
  end
  else begin
    l_Accepted := Accepted;
    TROSerializer(ASerializer).WriteEnumerated('Accepted',TypeInfo(boolean), l_Accepted);
    l_idTrans := idTrans;
    TROSerializer(ASerializer).WriteAnsiString('idTrans', l_idTrans);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_Instructions := Instructions;
    TROSerializer(ASerializer).WriteAnsiString('Instructions', l_Instructions);
    l_Notes := Notes;
    TROSerializer(ASerializer).WriteAnsiString('Notes', l_Notes);
    l_Proveedor := Proveedor;
    TROSerializer(ASerializer).WriteInteger('Proveedor', otSLong, l_Proveedor);
    l_Telefono := Telefono;
    TROSerializer(ASerializer).WriteAnsiString('Telefono', l_Telefono);
    l_TransID := TransID;
    TROSerializer(ASerializer).WriteAnsiString('TransID', l_TransID);
  end;
end;

{ TTiempoAireCollection }
constructor TTiempoAireCollection.Create;
begin
  inherited Create(TTiempoAire);
end;

constructor TTiempoAireCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TTiempoAireCollection.Add: TTiempoAire;
begin
  result := TTiempoAire(inherited Add);
end;

function TTiempoAireCollection.GetItems(aIndex: integer): TTiempoAire;
begin
  result := TTiempoAire(inherited Items[aIndex]);
end;

procedure TTiempoAireCollection.SetItems(aIndex: integer; const Value: TTiempoAire);
begin
  TTiempoAire(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosVerifica }

procedure TDatosVerifica.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TDatosVerifica;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TDatosVerifica) then begin
    lSource := LibraryFlotillas_Intf.TDatosVerifica(iSource);
    AfectarHistorico := lSource.AfectarHistorico;
    KMS := lSource.KMS;
  end;
end;

procedure TDatosVerifica.ReadComplex(ASerializer: TObject);
var
  l_AfectarHistorico: Boolean;
  l_KMS: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_AfectarHistorico := AfectarHistorico;
    TROSerializer(ASerializer).ReadEnumerated('AfectarHistorico',TypeInfo(boolean), l_AfectarHistorico);
    AfectarHistorico := l_AfectarHistorico;
    l_KMS := KMS;
    TROSerializer(ASerializer).ReadInteger('KMS', otSLong, l_KMS);
    KMS := l_KMS;
  end
  else begin
    l_AfectarHistorico := AfectarHistorico;
    TROSerializer(ASerializer).ReadEnumerated('AfectarHistorico',TypeInfo(boolean), l_AfectarHistorico);
    AfectarHistorico := l_AfectarHistorico;
    l_KMS := KMS;
    TROSerializer(ASerializer).ReadInteger('KMS', otSLong, l_KMS);
    KMS := l_KMS;
  end;
end;

procedure TDatosVerifica.WriteComplex(ASerializer: TObject);
var
  l_AfectarHistorico: Boolean;
  l_KMS: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosVerifica);
    l_AfectarHistorico := AfectarHistorico;
    TROSerializer(ASerializer).WriteEnumerated('AfectarHistorico',TypeInfo(boolean), l_AfectarHistorico);
    l_KMS := KMS;
    TROSerializer(ASerializer).WriteInteger('KMS', otSLong, l_KMS);
  end
  else begin
    l_AfectarHistorico := AfectarHistorico;
    TROSerializer(ASerializer).WriteEnumerated('AfectarHistorico',TypeInfo(boolean), l_AfectarHistorico);
    l_KMS := KMS;
    TROSerializer(ASerializer).WriteInteger('KMS', otSLong, l_KMS);
  end;
end;

{ TDatosVerificaCollection }
constructor TDatosVerificaCollection.Create;
begin
  inherited Create(TDatosVerifica);
end;

constructor TDatosVerificaCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosVerificaCollection.Add: TDatosVerifica;
begin
  result := TDatosVerifica(inherited Add);
end;

function TDatosVerificaCollection.GetItems(aIndex: integer): TDatosVerifica;
begin
  result := TDatosVerifica(inherited Items[aIndex]);
end;

procedure TDatosVerificaCollection.SetItems(aIndex: integer; const Value: TDatosVerifica);
begin
  TDatosVerifica(inherited Items[aIndex]).Assign(Value);
end;

{ TDatosVerifoneF }

procedure TDatosVerifoneF.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TDatosVerifoneF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TDatosVerifoneF) then begin
    lSource := LibraryFlotillas_Intf.TDatosVerifoneF(iSource);
    ClienteID := lSource.ClienteID;
    VehiculoID := lSource.VehiculoID;
    Nombre := lSource.Nombre;
    RazonSocial := lSource.RazonSocial;
    Domicilio := lSource.Domicilio;
    Colonia := lSource.Colonia;
    Ciudad := lSource.Ciudad;
    RFC := lSource.RFC;
    NIP := lSource.NIP;
    Identificacion := lSource.Identificacion;
    Usuario := lSource.Usuario;
    AcumuladoMNMes := lSource.AcumuladoMNMes;
    KMS := lSource.KMS;
    Referencia := lSource.Referencia;
    Autorizada := lSource.Autorizada;
    VolumenImporte := lSource.VolumenImporte;
    AutorizacionMN := lSource.AutorizacionMN;
    AutorizacionLT := lSource.AutorizacionLT;
    StatusID := lSource.StatusID;
    Mensaje := lSource.Mensaje;
  end;
end;

procedure TDatosVerifoneF.ReadComplex(ASerializer: TObject);
var
  l_AcumuladoMNMes: Double;
  l_AutorizacionLT: Double;
  l_AutorizacionMN: Double;
  l_Autorizada: Boolean;
  l_Ciudad: AnsiString;
  l_ClienteID: Integer;
  l_Colonia: AnsiString;
  l_Domicilio: AnsiString;
  l_Identificacion: AnsiString;
  l_KMS: Integer;
  l_Mensaje: AnsiString;
  l_NIP: Integer;
  l_Nombre: AnsiString;
  l_RazonSocial: AnsiString;
  l_Referencia: AnsiString;
  l_RFC: AnsiString;
  l_StatusID: Integer;
  l_Usuario: AnsiString;
  l_VehiculoID: Integer;
  l_VolumenImporte: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).ReadAnsiString('RazonSocial', l_RazonSocial);
    RazonSocial := l_RazonSocial;
    l_Domicilio := Domicilio;
    TROSerializer(ASerializer).ReadAnsiString('Domicilio', l_Domicilio);
    Domicilio := l_Domicilio;
    l_Colonia := Colonia;
    TROSerializer(ASerializer).ReadAnsiString('Colonia', l_Colonia);
    Colonia := l_Colonia;
    l_Ciudad := Ciudad;
    TROSerializer(ASerializer).ReadAnsiString('Ciudad', l_Ciudad);
    Ciudad := l_Ciudad;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_NIP := NIP;
    TROSerializer(ASerializer).ReadInteger('NIP', otSLong, l_NIP);
    NIP := l_NIP;
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).ReadAnsiString('Identificacion', l_Identificacion);
    Identificacion := l_Identificacion;
    l_Usuario := Usuario;
    TROSerializer(ASerializer).ReadAnsiString('Usuario', l_Usuario);
    Usuario := l_Usuario;
    l_AcumuladoMNMes := AcumuladoMNMes;
    TROSerializer(ASerializer).ReadDouble('AcumuladoMNMes', ftDouble, l_AcumuladoMNMes);
    AcumuladoMNMes := l_AcumuladoMNMes;
    l_KMS := KMS;
    TROSerializer(ASerializer).ReadInteger('KMS', otSLong, l_KMS);
    KMS := l_KMS;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Autorizada := Autorizada;
    TROSerializer(ASerializer).ReadEnumerated('Autorizada',TypeInfo(boolean), l_Autorizada);
    Autorizada := l_Autorizada;
    l_VolumenImporte := VolumenImporte;
    TROSerializer(ASerializer).ReadAnsiString('VolumenImporte', l_VolumenImporte);
    VolumenImporte := l_VolumenImporte;
    l_AutorizacionMN := AutorizacionMN;
    TROSerializer(ASerializer).ReadDouble('AutorizacionMN', ftDouble, l_AutorizacionMN);
    AutorizacionMN := l_AutorizacionMN;
    l_AutorizacionLT := AutorizacionLT;
    TROSerializer(ASerializer).ReadDouble('AutorizacionLT', ftDouble, l_AutorizacionLT);
    AutorizacionLT := l_AutorizacionLT;
    l_StatusID := StatusID;
    TROSerializer(ASerializer).ReadInteger('StatusID', otSLong, l_StatusID);
    StatusID := l_StatusID;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
  end
  else begin
    l_AcumuladoMNMes := AcumuladoMNMes;
    TROSerializer(ASerializer).ReadDouble('AcumuladoMNMes', ftDouble, l_AcumuladoMNMes);
    AcumuladoMNMes := l_AcumuladoMNMes;
    l_AutorizacionLT := AutorizacionLT;
    TROSerializer(ASerializer).ReadDouble('AutorizacionLT', ftDouble, l_AutorizacionLT);
    AutorizacionLT := l_AutorizacionLT;
    l_AutorizacionMN := AutorizacionMN;
    TROSerializer(ASerializer).ReadDouble('AutorizacionMN', ftDouble, l_AutorizacionMN);
    AutorizacionMN := l_AutorizacionMN;
    l_Autorizada := Autorizada;
    TROSerializer(ASerializer).ReadEnumerated('Autorizada',TypeInfo(boolean), l_Autorizada);
    Autorizada := l_Autorizada;
    l_Ciudad := Ciudad;
    TROSerializer(ASerializer).ReadAnsiString('Ciudad', l_Ciudad);
    Ciudad := l_Ciudad;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_Colonia := Colonia;
    TROSerializer(ASerializer).ReadAnsiString('Colonia', l_Colonia);
    Colonia := l_Colonia;
    l_Domicilio := Domicilio;
    TROSerializer(ASerializer).ReadAnsiString('Domicilio', l_Domicilio);
    Domicilio := l_Domicilio;
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).ReadAnsiString('Identificacion', l_Identificacion);
    Identificacion := l_Identificacion;
    l_KMS := KMS;
    TROSerializer(ASerializer).ReadInteger('KMS', otSLong, l_KMS);
    KMS := l_KMS;
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).ReadAnsiString('Mensaje', l_Mensaje);
    Mensaje := l_Mensaje;
    l_NIP := NIP;
    TROSerializer(ASerializer).ReadInteger('NIP', otSLong, l_NIP);
    NIP := l_NIP;
    l_Nombre := Nombre;
    TROSerializer(ASerializer).ReadAnsiString('Nombre', l_Nombre);
    Nombre := l_Nombre;
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).ReadAnsiString('RazonSocial', l_RazonSocial);
    RazonSocial := l_RazonSocial;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_RFC := RFC;
    TROSerializer(ASerializer).ReadAnsiString('RFC', l_RFC);
    RFC := l_RFC;
    l_StatusID := StatusID;
    TROSerializer(ASerializer).ReadInteger('StatusID', otSLong, l_StatusID);
    StatusID := l_StatusID;
    l_Usuario := Usuario;
    TROSerializer(ASerializer).ReadAnsiString('Usuario', l_Usuario);
    Usuario := l_Usuario;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
    l_VolumenImporte := VolumenImporte;
    TROSerializer(ASerializer).ReadAnsiString('VolumenImporte', l_VolumenImporte);
    VolumenImporte := l_VolumenImporte;
  end;
end;

procedure TDatosVerifoneF.WriteComplex(ASerializer: TObject);
var
  l_AcumuladoMNMes: Double;
  l_AutorizacionLT: Double;
  l_AutorizacionMN: Double;
  l_Autorizada: Boolean;
  l_Ciudad: AnsiString;
  l_ClienteID: Integer;
  l_Colonia: AnsiString;
  l_Domicilio: AnsiString;
  l_Identificacion: AnsiString;
  l_KMS: Integer;
  l_Mensaje: AnsiString;
  l_NIP: Integer;
  l_Nombre: AnsiString;
  l_RazonSocial: AnsiString;
  l_Referencia: AnsiString;
  l_RFC: AnsiString;
  l_StatusID: Integer;
  l_Usuario: AnsiString;
  l_VehiculoID: Integer;
  l_VolumenImporte: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDatosVerifoneF);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).WriteAnsiString('RazonSocial', l_RazonSocial);
    l_Domicilio := Domicilio;
    TROSerializer(ASerializer).WriteAnsiString('Domicilio', l_Domicilio);
    l_Colonia := Colonia;
    TROSerializer(ASerializer).WriteAnsiString('Colonia', l_Colonia);
    l_Ciudad := Ciudad;
    TROSerializer(ASerializer).WriteAnsiString('Ciudad', l_Ciudad);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_NIP := NIP;
    TROSerializer(ASerializer).WriteInteger('NIP', otSLong, l_NIP);
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).WriteAnsiString('Identificacion', l_Identificacion);
    l_Usuario := Usuario;
    TROSerializer(ASerializer).WriteAnsiString('Usuario', l_Usuario);
    l_AcumuladoMNMes := AcumuladoMNMes;
    TROSerializer(ASerializer).WriteDouble('AcumuladoMNMes', ftDouble, l_AcumuladoMNMes);
    l_KMS := KMS;
    TROSerializer(ASerializer).WriteInteger('KMS', otSLong, l_KMS);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Autorizada := Autorizada;
    TROSerializer(ASerializer).WriteEnumerated('Autorizada',TypeInfo(boolean), l_Autorizada);
    l_VolumenImporte := VolumenImporte;
    TROSerializer(ASerializer).WriteAnsiString('VolumenImporte', l_VolumenImporte);
    l_AutorizacionMN := AutorizacionMN;
    TROSerializer(ASerializer).WriteDouble('AutorizacionMN', ftDouble, l_AutorizacionMN);
    l_AutorizacionLT := AutorizacionLT;
    TROSerializer(ASerializer).WriteDouble('AutorizacionLT', ftDouble, l_AutorizacionLT);
    l_StatusID := StatusID;
    TROSerializer(ASerializer).WriteInteger('StatusID', otSLong, l_StatusID);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
  end
  else begin
    l_AcumuladoMNMes := AcumuladoMNMes;
    TROSerializer(ASerializer).WriteDouble('AcumuladoMNMes', ftDouble, l_AcumuladoMNMes);
    l_AutorizacionLT := AutorizacionLT;
    TROSerializer(ASerializer).WriteDouble('AutorizacionLT', ftDouble, l_AutorizacionLT);
    l_AutorizacionMN := AutorizacionMN;
    TROSerializer(ASerializer).WriteDouble('AutorizacionMN', ftDouble, l_AutorizacionMN);
    l_Autorizada := Autorizada;
    TROSerializer(ASerializer).WriteEnumerated('Autorizada',TypeInfo(boolean), l_Autorizada);
    l_Ciudad := Ciudad;
    TROSerializer(ASerializer).WriteAnsiString('Ciudad', l_Ciudad);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_Colonia := Colonia;
    TROSerializer(ASerializer).WriteAnsiString('Colonia', l_Colonia);
    l_Domicilio := Domicilio;
    TROSerializer(ASerializer).WriteAnsiString('Domicilio', l_Domicilio);
    l_Identificacion := Identificacion;
    TROSerializer(ASerializer).WriteAnsiString('Identificacion', l_Identificacion);
    l_KMS := KMS;
    TROSerializer(ASerializer).WriteInteger('KMS', otSLong, l_KMS);
    l_Mensaje := Mensaje;
    TROSerializer(ASerializer).WriteAnsiString('Mensaje', l_Mensaje);
    l_NIP := NIP;
    TROSerializer(ASerializer).WriteInteger('NIP', otSLong, l_NIP);
    l_Nombre := Nombre;
    TROSerializer(ASerializer).WriteAnsiString('Nombre', l_Nombre);
    l_RazonSocial := RazonSocial;
    TROSerializer(ASerializer).WriteAnsiString('RazonSocial', l_RazonSocial);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_RFC := RFC;
    TROSerializer(ASerializer).WriteAnsiString('RFC', l_RFC);
    l_StatusID := StatusID;
    TROSerializer(ASerializer).WriteInteger('StatusID', otSLong, l_StatusID);
    l_Usuario := Usuario;
    TROSerializer(ASerializer).WriteAnsiString('Usuario', l_Usuario);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
    l_VolumenImporte := VolumenImporte;
    TROSerializer(ASerializer).WriteAnsiString('VolumenImporte', l_VolumenImporte);
  end;
end;

{ TDatosVerifoneFCollection }
constructor TDatosVerifoneFCollection.Create;
begin
  inherited Create(TDatosVerifoneF);
end;

constructor TDatosVerifoneFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDatosVerifoneFCollection.Add: TDatosVerifoneF;
begin
  result := TDatosVerifoneF(inherited Add);
end;

function TDatosVerifoneFCollection.GetItems(aIndex: integer): TDatosVerifoneF;
begin
  result := TDatosVerifoneF(inherited Items[aIndex]);
end;

procedure TDatosVerifoneFCollection.SetItems(aIndex: integer; const Value: TDatosVerifoneF);
begin
  TDatosVerifoneF(inherited Items[aIndex]).Assign(Value);
end;

{ TConfirmaEnvioF }

procedure TConfirmaEnvioF.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TConfirmaEnvioF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TConfirmaEnvioF) then begin
    lSource := LibraryFlotillas_Intf.TConfirmaEnvioF(iSource);
    Tipo := lSource.Tipo;
    Consumo.Assign(lSource.Consumo);
    Host := lSource.Host;
    Fecha := lSource.Fecha;
  end;
end;

function TConfirmaEnvioF.GetConsumo: TConsumo;
begin
  if (fConsumo = nil) then fConsumo := TConsumo.Create();
  result := fConsumo;
end;

procedure TConfirmaEnvioF.ReadComplex(ASerializer: TObject);
var
  l_Consumo: TConsumo;
  l_Fecha: DateTime;
  l_Host: AnsiString;
  l_Tipo: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadInteger('Tipo', otSLong, l_Tipo);
    Tipo := l_Tipo;
    l_Consumo := Consumo;
    TROSerializer(ASerializer).ReadStruct('Consumo', TConsumo, l_Consumo);
    if Consumo <> l_Consumo then Consumo.Free;
    Consumo := l_Consumo;
    l_Host := Host;
    TROSerializer(ASerializer).ReadAnsiString('Host', l_Host);
    Host := l_Host;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
  end
  else begin
    l_Consumo := Consumo;
    TROSerializer(ASerializer).ReadStruct('Consumo', TConsumo, l_Consumo);
    if Consumo <> l_Consumo then Consumo.Free;
    Consumo := l_Consumo;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Host := Host;
    TROSerializer(ASerializer).ReadAnsiString('Host', l_Host);
    Host := l_Host;
    l_Tipo := Tipo;
    TROSerializer(ASerializer).ReadInteger('Tipo', otSLong, l_Tipo);
    Tipo := l_Tipo;
  end;
end;

procedure TConfirmaEnvioF.WriteComplex(ASerializer: TObject);
var
  l_Consumo: TConsumo;
  l_Fecha: DateTime;
  l_Host: AnsiString;
  l_Tipo: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TConfirmaEnvioF);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', otSLong, l_Tipo);
    l_Consumo := Consumo;
    TROSerializer(ASerializer).WriteStruct('Consumo', l_Consumo, TConsumo);
    l_Host := Host;
    TROSerializer(ASerializer).WriteAnsiString('Host', l_Host);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
  end
  else begin
    l_Consumo := Consumo;
    TROSerializer(ASerializer).WriteStruct('Consumo', l_Consumo, TConsumo);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_Host := Host;
    TROSerializer(ASerializer).WriteAnsiString('Host', l_Host);
    l_Tipo := Tipo;
    TROSerializer(ASerializer).WriteInteger('Tipo', otSLong, l_Tipo);
  end;
end;

{ TConfirmaEnvioFCollection }
constructor TConfirmaEnvioFCollection.Create;
begin
  inherited Create(TConfirmaEnvioF);
end;

constructor TConfirmaEnvioFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TConfirmaEnvioFCollection.Add: TConfirmaEnvioF;
begin
  result := TConfirmaEnvioF(inherited Add);
end;

function TConfirmaEnvioFCollection.GetItems(aIndex: integer): TConfirmaEnvioF;
begin
  result := TConfirmaEnvioF(inherited Items[aIndex]);
end;

procedure TConfirmaEnvioFCollection.SetItems(aIndex: integer; const Value: TConfirmaEnvioF);
begin
  TConfirmaEnvioF(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaElectronicaF }

procedure TFacturaElectronicaF.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TFacturaElectronicaF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TFacturaElectronicaF) then begin
    lSource := LibraryFlotillas_Intf.TFacturaElectronicaF(iSource);
    Serie := lSource.Serie;
    Folio := lSource.Folio;
    Fecha := lSource.Fecha;
    noAprobacion := lSource.noAprobacion;
    anoAprobacion := lSource.anoAprobacion;
    tipoComprobante := lSource.tipoComprobante;
    formadePago := lSource.formadePago;
    SubTotal := lSource.SubTotal;
    Total := lSource.Total;
    RFCEmisor := lSource.RFCEmisor;
    NomEmpEmisor := lSource.NomEmpEmisor;
    DireccionEm := lSource.DireccionEm;
    NoExteriorEM := lSource.NoExteriorEM;
    ColoniaEmisor := lSource.ColoniaEmisor;
    MunicipioEmisor := lSource.MunicipioEmisor;
    EstadoEmisor := lSource.EstadoEmisor;
    PaisEmisor := lSource.PaisEmisor;
    CodigoPostalEmisor := lSource.CodigoPostalEmisor;
    RFCReceptor := lSource.RFCReceptor;
    NombreReceptor := lSource.NombreReceptor;
    DomicilioReceptor := lSource.DomicilioReceptor;
    NoExteriorReceptor := lSource.NoExteriorReceptor;
    ColoniaReceptor := lSource.ColoniaReceptor;
    LocalidadReceptor := lSource.LocalidadReceptor;
    MunicipioReceptor := lSource.MunicipioReceptor;
    EstadoReceptor := lSource.EstadoReceptor;
    PaisReceptor := lSource.PaisReceptor;
    CodigoPostalReceptor := lSource.CodigoPostalReceptor;
    FacturaElectronicaDetalleImportes.Assign(lSource.FacturaElectronicaDetalleImportes);
    FacturaElectronicaDetalleImpuestos.Assign(lSource.FacturaElectronicaDetalleImpuestos);
    TotalImpuesto := lSource.TotalImpuesto;
    CalleExpedidoEn := lSource.CalleExpedidoEn;
    NoExterioExpedidoEn := lSource.NoExterioExpedidoEn;
    ColoniaExpedidoEn := lSource.ColoniaExpedidoEn;
    CodigoPostalExpedidoEn := lSource.CodigoPostalExpedidoEn;
    LocalidadExpedidoEn := lSource.LocalidadExpedidoEn;
    MunicipioExpedidoEn := lSource.MunicipioExpedidoEn;
    EstadoExpedidoEn := lSource.EstadoExpedidoEn;
    PaisExpedidoEn := lSource.PaisExpedidoEn;
    Sucursal := lSource.Sucursal;
    email := lSource.email;
  end;
end;

function TFacturaElectronicaF.GetFacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
begin
  if (fFacturaElectronicaDetalleImportes = nil) then fFacturaElectronicaDetalleImportes := ATFacturaElectronicaDetalleImportes.Create();
  result := fFacturaElectronicaDetalleImportes;
end;

function TFacturaElectronicaF.GetFacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
begin
  if (fFacturaElectronicaDetalleImpuestos = nil) then fFacturaElectronicaDetalleImpuestos := ATFacturaElectronicaDetalleImpuestos.Create();
  result := fFacturaElectronicaDetalleImpuestos;
end;

procedure TFacturaElectronicaF.ReadComplex(ASerializer: TObject);
var
  l_anoAprobacion: AnsiString;
  l_CalleExpedidoEn: AnsiString;
  l_CodigoPostalEmisor: AnsiString;
  l_CodigoPostalExpedidoEn: AnsiString;
  l_CodigoPostalReceptor: AnsiString;
  l_ColoniaEmisor: AnsiString;
  l_ColoniaExpedidoEn: AnsiString;
  l_ColoniaReceptor: AnsiString;
  l_DireccionEm: AnsiString;
  l_DomicilioReceptor: AnsiString;
  l_email: AnsiString;
  l_EstadoEmisor: AnsiString;
  l_EstadoExpedidoEn: AnsiString;
  l_EstadoReceptor: AnsiString;
  l_FacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
  l_FacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
  l_Fecha: AnsiString;
  l_Folio: AnsiString;
  l_formadePago: AnsiString;
  l_LocalidadExpedidoEn: AnsiString;
  l_LocalidadReceptor: AnsiString;
  l_MunicipioEmisor: AnsiString;
  l_MunicipioExpedidoEn: AnsiString;
  l_MunicipioReceptor: AnsiString;
  l_noAprobacion: AnsiString;
  l_NoExterioExpedidoEn: AnsiString;
  l_NoExteriorEM: AnsiString;
  l_NoExteriorReceptor: AnsiString;
  l_NombreReceptor: AnsiString;
  l_NomEmpEmisor: AnsiString;
  l_PaisEmisor: AnsiString;
  l_PaisExpedidoEn: AnsiString;
  l_PaisReceptor: AnsiString;
  l_RFCEmisor: AnsiString;
  l_RFCReceptor: AnsiString;
  l_Serie: AnsiString;
  l_SubTotal: AnsiString;
  l_Sucursal: Boolean;
  l_tipoComprobante: AnsiString;
  l_Total: AnsiString;
  l_TotalImpuesto: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadAnsiString('Folio', l_Folio);
    Folio := l_Folio;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadAnsiString('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_noAprobacion := noAprobacion;
    TROSerializer(ASerializer).ReadAnsiString('noAprobacion', l_noAprobacion);
    noAprobacion := l_noAprobacion;
    l_anoAprobacion := anoAprobacion;
    TROSerializer(ASerializer).ReadAnsiString('anoAprobacion', l_anoAprobacion);
    anoAprobacion := l_anoAprobacion;
    l_tipoComprobante := tipoComprobante;
    TROSerializer(ASerializer).ReadAnsiString('tipoComprobante', l_tipoComprobante);
    tipoComprobante := l_tipoComprobante;
    l_formadePago := formadePago;
    TROSerializer(ASerializer).ReadAnsiString('formadePago', l_formadePago);
    formadePago := l_formadePago;
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).ReadAnsiString('SubTotal', l_SubTotal);
    SubTotal := l_SubTotal;
    l_Total := Total;
    TROSerializer(ASerializer).ReadAnsiString('Total', l_Total);
    Total := l_Total;
    l_RFCEmisor := RFCEmisor;
    TROSerializer(ASerializer).ReadAnsiString('RFCEmisor', l_RFCEmisor);
    RFCEmisor := l_RFCEmisor;
    l_NomEmpEmisor := NomEmpEmisor;
    TROSerializer(ASerializer).ReadAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    NomEmpEmisor := l_NomEmpEmisor;
    l_DireccionEm := DireccionEm;
    TROSerializer(ASerializer).ReadAnsiString('DireccionEm', l_DireccionEm);
    DireccionEm := l_DireccionEm;
    l_NoExteriorEM := NoExteriorEM;
    TROSerializer(ASerializer).ReadAnsiString('NoExteriorEM', l_NoExteriorEM);
    NoExteriorEM := l_NoExteriorEM;
    l_ColoniaEmisor := ColoniaEmisor;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    ColoniaEmisor := l_ColoniaEmisor;
    l_MunicipioEmisor := MunicipioEmisor;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    MunicipioEmisor := l_MunicipioEmisor;
    l_EstadoEmisor := EstadoEmisor;
    TROSerializer(ASerializer).ReadAnsiString('EstadoEmisor', l_EstadoEmisor);
    EstadoEmisor := l_EstadoEmisor;
    l_PaisEmisor := PaisEmisor;
    TROSerializer(ASerializer).ReadAnsiString('PaisEmisor', l_PaisEmisor);
    PaisEmisor := l_PaisEmisor;
    l_CodigoPostalEmisor := CodigoPostalEmisor;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    CodigoPostalEmisor := l_CodigoPostalEmisor;
    l_RFCReceptor := RFCReceptor;
    TROSerializer(ASerializer).ReadAnsiString('RFCReceptor', l_RFCReceptor);
    RFCReceptor := l_RFCReceptor;
    l_NombreReceptor := NombreReceptor;
    TROSerializer(ASerializer).ReadAnsiString('NombreReceptor', l_NombreReceptor);
    NombreReceptor := l_NombreReceptor;
    l_DomicilioReceptor := DomicilioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    DomicilioReceptor := l_DomicilioReceptor;
    l_NoExteriorReceptor := NoExteriorReceptor;
    TROSerializer(ASerializer).ReadAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    NoExteriorReceptor := l_NoExteriorReceptor;
    l_ColoniaReceptor := ColoniaReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    ColoniaReceptor := l_ColoniaReceptor;
    l_LocalidadReceptor := LocalidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    LocalidadReceptor := l_LocalidadReceptor;
    l_MunicipioReceptor := MunicipioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    MunicipioReceptor := l_MunicipioReceptor;
    l_EstadoReceptor := EstadoReceptor;
    TROSerializer(ASerializer).ReadAnsiString('EstadoReceptor', l_EstadoReceptor);
    EstadoReceptor := l_EstadoReceptor;
    l_PaisReceptor := PaisReceptor;
    TROSerializer(ASerializer).ReadAnsiString('PaisReceptor', l_PaisReceptor);
    PaisReceptor := l_PaisReceptor;
    l_CodigoPostalReceptor := CodigoPostalReceptor;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    CodigoPostalReceptor := l_CodigoPostalReceptor;
    l_FacturaElectronicaDetalleImportes := FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImportes', ATFacturaElectronicaDetalleImportes, l_FacturaElectronicaDetalleImportes);
    if FacturaElectronicaDetalleImportes <> l_FacturaElectronicaDetalleImportes then FacturaElectronicaDetalleImportes.Free;
    FacturaElectronicaDetalleImportes := l_FacturaElectronicaDetalleImportes;
    l_FacturaElectronicaDetalleImpuestos := FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImpuestos', ATFacturaElectronicaDetalleImpuestos, l_FacturaElectronicaDetalleImpuestos);
    if FacturaElectronicaDetalleImpuestos <> l_FacturaElectronicaDetalleImpuestos then FacturaElectronicaDetalleImpuestos.Free;
    FacturaElectronicaDetalleImpuestos := l_FacturaElectronicaDetalleImpuestos;
    l_TotalImpuesto := TotalImpuesto;
    TROSerializer(ASerializer).ReadAnsiString('TotalImpuesto', l_TotalImpuesto);
    TotalImpuesto := l_TotalImpuesto;
    l_CalleExpedidoEn := CalleExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    CalleExpedidoEn := l_CalleExpedidoEn;
    l_NoExterioExpedidoEn := NoExterioExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    NoExterioExpedidoEn := l_NoExterioExpedidoEn;
    l_ColoniaExpedidoEn := ColoniaExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    ColoniaExpedidoEn := l_ColoniaExpedidoEn;
    l_CodigoPostalExpedidoEn := CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    CodigoPostalExpedidoEn := l_CodigoPostalExpedidoEn;
    l_LocalidadExpedidoEn := LocalidadExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    LocalidadExpedidoEn := l_LocalidadExpedidoEn;
    l_MunicipioExpedidoEn := MunicipioExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    MunicipioExpedidoEn := l_MunicipioExpedidoEn;
    l_EstadoExpedidoEn := EstadoExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    EstadoExpedidoEn := l_EstadoExpedidoEn;
    l_PaisExpedidoEn := PaisExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    PaisExpedidoEn := l_PaisExpedidoEn;
    l_Sucursal := Sucursal;
    TROSerializer(ASerializer).ReadEnumerated('Sucursal',TypeInfo(boolean), l_Sucursal);
    Sucursal := l_Sucursal;
    l_email := email;
    TROSerializer(ASerializer).ReadAnsiString('email', l_email);
    email := l_email;
  end
  else begin
    l_anoAprobacion := anoAprobacion;
    TROSerializer(ASerializer).ReadAnsiString('anoAprobacion', l_anoAprobacion);
    anoAprobacion := l_anoAprobacion;
    l_CalleExpedidoEn := CalleExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    CalleExpedidoEn := l_CalleExpedidoEn;
    l_CodigoPostalEmisor := CodigoPostalEmisor;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    CodigoPostalEmisor := l_CodigoPostalEmisor;
    l_CodigoPostalExpedidoEn := CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    CodigoPostalExpedidoEn := l_CodigoPostalExpedidoEn;
    l_CodigoPostalReceptor := CodigoPostalReceptor;
    TROSerializer(ASerializer).ReadAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    CodigoPostalReceptor := l_CodigoPostalReceptor;
    l_ColoniaEmisor := ColoniaEmisor;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    ColoniaEmisor := l_ColoniaEmisor;
    l_ColoniaExpedidoEn := ColoniaExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    ColoniaExpedidoEn := l_ColoniaExpedidoEn;
    l_ColoniaReceptor := ColoniaReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    ColoniaReceptor := l_ColoniaReceptor;
    l_DireccionEm := DireccionEm;
    TROSerializer(ASerializer).ReadAnsiString('DireccionEm', l_DireccionEm);
    DireccionEm := l_DireccionEm;
    l_DomicilioReceptor := DomicilioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    DomicilioReceptor := l_DomicilioReceptor;
    l_email := email;
    TROSerializer(ASerializer).ReadAnsiString('email', l_email);
    email := l_email;
    l_EstadoEmisor := EstadoEmisor;
    TROSerializer(ASerializer).ReadAnsiString('EstadoEmisor', l_EstadoEmisor);
    EstadoEmisor := l_EstadoEmisor;
    l_EstadoExpedidoEn := EstadoExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    EstadoExpedidoEn := l_EstadoExpedidoEn;
    l_EstadoReceptor := EstadoReceptor;
    TROSerializer(ASerializer).ReadAnsiString('EstadoReceptor', l_EstadoReceptor);
    EstadoReceptor := l_EstadoReceptor;
    l_FacturaElectronicaDetalleImportes := FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImportes', ATFacturaElectronicaDetalleImportes, l_FacturaElectronicaDetalleImportes);
    if FacturaElectronicaDetalleImportes <> l_FacturaElectronicaDetalleImportes then FacturaElectronicaDetalleImportes.Free;
    FacturaElectronicaDetalleImportes := l_FacturaElectronicaDetalleImportes;
    l_FacturaElectronicaDetalleImpuestos := FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).ReadArray('FacturaElectronicaDetalleImpuestos', ATFacturaElectronicaDetalleImpuestos, l_FacturaElectronicaDetalleImpuestos);
    if FacturaElectronicaDetalleImpuestos <> l_FacturaElectronicaDetalleImpuestos then FacturaElectronicaDetalleImpuestos.Free;
    FacturaElectronicaDetalleImpuestos := l_FacturaElectronicaDetalleImpuestos;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadAnsiString('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_Folio := Folio;
    TROSerializer(ASerializer).ReadAnsiString('Folio', l_Folio);
    Folio := l_Folio;
    l_formadePago := formadePago;
    TROSerializer(ASerializer).ReadAnsiString('formadePago', l_formadePago);
    formadePago := l_formadePago;
    l_LocalidadExpedidoEn := LocalidadExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    LocalidadExpedidoEn := l_LocalidadExpedidoEn;
    l_LocalidadReceptor := LocalidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    LocalidadReceptor := l_LocalidadReceptor;
    l_MunicipioEmisor := MunicipioEmisor;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    MunicipioEmisor := l_MunicipioEmisor;
    l_MunicipioExpedidoEn := MunicipioExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    MunicipioExpedidoEn := l_MunicipioExpedidoEn;
    l_MunicipioReceptor := MunicipioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    MunicipioReceptor := l_MunicipioReceptor;
    l_noAprobacion := noAprobacion;
    TROSerializer(ASerializer).ReadAnsiString('noAprobacion', l_noAprobacion);
    noAprobacion := l_noAprobacion;
    l_NoExterioExpedidoEn := NoExterioExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    NoExterioExpedidoEn := l_NoExterioExpedidoEn;
    l_NoExteriorEM := NoExteriorEM;
    TROSerializer(ASerializer).ReadAnsiString('NoExteriorEM', l_NoExteriorEM);
    NoExteriorEM := l_NoExteriorEM;
    l_NoExteriorReceptor := NoExteriorReceptor;
    TROSerializer(ASerializer).ReadAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    NoExteriorReceptor := l_NoExteriorReceptor;
    l_NombreReceptor := NombreReceptor;
    TROSerializer(ASerializer).ReadAnsiString('NombreReceptor', l_NombreReceptor);
    NombreReceptor := l_NombreReceptor;
    l_NomEmpEmisor := NomEmpEmisor;
    TROSerializer(ASerializer).ReadAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    NomEmpEmisor := l_NomEmpEmisor;
    l_PaisEmisor := PaisEmisor;
    TROSerializer(ASerializer).ReadAnsiString('PaisEmisor', l_PaisEmisor);
    PaisEmisor := l_PaisEmisor;
    l_PaisExpedidoEn := PaisExpedidoEn;
    TROSerializer(ASerializer).ReadAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    PaisExpedidoEn := l_PaisExpedidoEn;
    l_PaisReceptor := PaisReceptor;
    TROSerializer(ASerializer).ReadAnsiString('PaisReceptor', l_PaisReceptor);
    PaisReceptor := l_PaisReceptor;
    l_RFCEmisor := RFCEmisor;
    TROSerializer(ASerializer).ReadAnsiString('RFCEmisor', l_RFCEmisor);
    RFCEmisor := l_RFCEmisor;
    l_RFCReceptor := RFCReceptor;
    TROSerializer(ASerializer).ReadAnsiString('RFCReceptor', l_RFCReceptor);
    RFCReceptor := l_RFCReceptor;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).ReadAnsiString('SubTotal', l_SubTotal);
    SubTotal := l_SubTotal;
    l_Sucursal := Sucursal;
    TROSerializer(ASerializer).ReadEnumerated('Sucursal',TypeInfo(boolean), l_Sucursal);
    Sucursal := l_Sucursal;
    l_tipoComprobante := tipoComprobante;
    TROSerializer(ASerializer).ReadAnsiString('tipoComprobante', l_tipoComprobante);
    tipoComprobante := l_tipoComprobante;
    l_Total := Total;
    TROSerializer(ASerializer).ReadAnsiString('Total', l_Total);
    Total := l_Total;
    l_TotalImpuesto := TotalImpuesto;
    TROSerializer(ASerializer).ReadAnsiString('TotalImpuesto', l_TotalImpuesto);
    TotalImpuesto := l_TotalImpuesto;
  end;
end;

procedure TFacturaElectronicaF.WriteComplex(ASerializer: TObject);
var
  l_anoAprobacion: AnsiString;
  l_CalleExpedidoEn: AnsiString;
  l_CodigoPostalEmisor: AnsiString;
  l_CodigoPostalExpedidoEn: AnsiString;
  l_CodigoPostalReceptor: AnsiString;
  l_ColoniaEmisor: AnsiString;
  l_ColoniaExpedidoEn: AnsiString;
  l_ColoniaReceptor: AnsiString;
  l_DireccionEm: AnsiString;
  l_DomicilioReceptor: AnsiString;
  l_email: AnsiString;
  l_EstadoEmisor: AnsiString;
  l_EstadoExpedidoEn: AnsiString;
  l_EstadoReceptor: AnsiString;
  l_FacturaElectronicaDetalleImportes: ATFacturaElectronicaDetalleImportes;
  l_FacturaElectronicaDetalleImpuestos: ATFacturaElectronicaDetalleImpuestos;
  l_Fecha: AnsiString;
  l_Folio: AnsiString;
  l_formadePago: AnsiString;
  l_LocalidadExpedidoEn: AnsiString;
  l_LocalidadReceptor: AnsiString;
  l_MunicipioEmisor: AnsiString;
  l_MunicipioExpedidoEn: AnsiString;
  l_MunicipioReceptor: AnsiString;
  l_noAprobacion: AnsiString;
  l_NoExterioExpedidoEn: AnsiString;
  l_NoExteriorEM: AnsiString;
  l_NoExteriorReceptor: AnsiString;
  l_NombreReceptor: AnsiString;
  l_NomEmpEmisor: AnsiString;
  l_PaisEmisor: AnsiString;
  l_PaisExpedidoEn: AnsiString;
  l_PaisReceptor: AnsiString;
  l_RFCEmisor: AnsiString;
  l_RFCReceptor: AnsiString;
  l_Serie: AnsiString;
  l_SubTotal: AnsiString;
  l_Sucursal: Boolean;
  l_tipoComprobante: AnsiString;
  l_Total: AnsiString;
  l_TotalImpuesto: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaElectronicaF);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteAnsiString('Folio', l_Folio);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteAnsiString('Fecha', l_Fecha);
    l_noAprobacion := noAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('noAprobacion', l_noAprobacion);
    l_anoAprobacion := anoAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('anoAprobacion', l_anoAprobacion);
    l_tipoComprobante := tipoComprobante;
    TROSerializer(ASerializer).WriteAnsiString('tipoComprobante', l_tipoComprobante);
    l_formadePago := formadePago;
    TROSerializer(ASerializer).WriteAnsiString('formadePago', l_formadePago);
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).WriteAnsiString('SubTotal', l_SubTotal);
    l_Total := Total;
    TROSerializer(ASerializer).WriteAnsiString('Total', l_Total);
    l_RFCEmisor := RFCEmisor;
    TROSerializer(ASerializer).WriteAnsiString('RFCEmisor', l_RFCEmisor);
    l_NomEmpEmisor := NomEmpEmisor;
    TROSerializer(ASerializer).WriteAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    l_DireccionEm := DireccionEm;
    TROSerializer(ASerializer).WriteAnsiString('DireccionEm', l_DireccionEm);
    l_NoExteriorEM := NoExteriorEM;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorEM', l_NoExteriorEM);
    l_ColoniaEmisor := ColoniaEmisor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    l_MunicipioEmisor := MunicipioEmisor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    l_EstadoEmisor := EstadoEmisor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoEmisor', l_EstadoEmisor);
    l_PaisEmisor := PaisEmisor;
    TROSerializer(ASerializer).WriteAnsiString('PaisEmisor', l_PaisEmisor);
    l_CodigoPostalEmisor := CodigoPostalEmisor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    l_RFCReceptor := RFCReceptor;
    TROSerializer(ASerializer).WriteAnsiString('RFCReceptor', l_RFCReceptor);
    l_NombreReceptor := NombreReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NombreReceptor', l_NombreReceptor);
    l_DomicilioReceptor := DomicilioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    l_NoExteriorReceptor := NoExteriorReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    l_ColoniaReceptor := ColoniaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    l_LocalidadReceptor := LocalidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    l_MunicipioReceptor := MunicipioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    l_EstadoReceptor := EstadoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoReceptor', l_EstadoReceptor);
    l_PaisReceptor := PaisReceptor;
    TROSerializer(ASerializer).WriteAnsiString('PaisReceptor', l_PaisReceptor);
    l_CodigoPostalReceptor := CodigoPostalReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    l_FacturaElectronicaDetalleImportes := FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImportes', l_FacturaElectronicaDetalleImportes, ATFacturaElectronicaDetalleImportes);
    l_FacturaElectronicaDetalleImpuestos := FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImpuestos', l_FacturaElectronicaDetalleImpuestos, ATFacturaElectronicaDetalleImpuestos);
    l_TotalImpuesto := TotalImpuesto;
    TROSerializer(ASerializer).WriteAnsiString('TotalImpuesto', l_TotalImpuesto);
    l_CalleExpedidoEn := CalleExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    l_NoExterioExpedidoEn := NoExterioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    l_ColoniaExpedidoEn := ColoniaExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    l_CodigoPostalExpedidoEn := CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    l_LocalidadExpedidoEn := LocalidadExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    l_MunicipioExpedidoEn := MunicipioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    l_EstadoExpedidoEn := EstadoExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    l_PaisExpedidoEn := PaisExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    l_Sucursal := Sucursal;
    TROSerializer(ASerializer).WriteEnumerated('Sucursal',TypeInfo(boolean), l_Sucursal);
    l_email := email;
    TROSerializer(ASerializer).WriteAnsiString('email', l_email);
  end
  else begin
    l_anoAprobacion := anoAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('anoAprobacion', l_anoAprobacion);
    l_CalleExpedidoEn := CalleExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CalleExpedidoEn', l_CalleExpedidoEn);
    l_CodigoPostalEmisor := CodigoPostalEmisor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalEmisor', l_CodigoPostalEmisor);
    l_CodigoPostalExpedidoEn := CodigoPostalExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalExpedidoEn', l_CodigoPostalExpedidoEn);
    l_CodigoPostalReceptor := CodigoPostalReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CodigoPostalReceptor', l_CodigoPostalReceptor);
    l_ColoniaEmisor := ColoniaEmisor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaEmisor', l_ColoniaEmisor);
    l_ColoniaExpedidoEn := ColoniaExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaExpedidoEn', l_ColoniaExpedidoEn);
    l_ColoniaReceptor := ColoniaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ColoniaReceptor', l_ColoniaReceptor);
    l_DireccionEm := DireccionEm;
    TROSerializer(ASerializer).WriteAnsiString('DireccionEm', l_DireccionEm);
    l_DomicilioReceptor := DomicilioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DomicilioReceptor', l_DomicilioReceptor);
    l_email := email;
    TROSerializer(ASerializer).WriteAnsiString('email', l_email);
    l_EstadoEmisor := EstadoEmisor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoEmisor', l_EstadoEmisor);
    l_EstadoExpedidoEn := EstadoExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('EstadoExpedidoEn', l_EstadoExpedidoEn);
    l_EstadoReceptor := EstadoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('EstadoReceptor', l_EstadoReceptor);
    l_FacturaElectronicaDetalleImportes := FacturaElectronicaDetalleImportes;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImportes', l_FacturaElectronicaDetalleImportes, ATFacturaElectronicaDetalleImportes);
    l_FacturaElectronicaDetalleImpuestos := FacturaElectronicaDetalleImpuestos;
    TROSerializer(ASerializer).WriteArray('FacturaElectronicaDetalleImpuestos', l_FacturaElectronicaDetalleImpuestos, ATFacturaElectronicaDetalleImpuestos);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteAnsiString('Fecha', l_Fecha);
    l_Folio := Folio;
    TROSerializer(ASerializer).WriteAnsiString('Folio', l_Folio);
    l_formadePago := formadePago;
    TROSerializer(ASerializer).WriteAnsiString('formadePago', l_formadePago);
    l_LocalidadExpedidoEn := LocalidadExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadExpedidoEn', l_LocalidadExpedidoEn);
    l_LocalidadReceptor := LocalidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('LocalidadReceptor', l_LocalidadReceptor);
    l_MunicipioEmisor := MunicipioEmisor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioEmisor', l_MunicipioEmisor);
    l_MunicipioExpedidoEn := MunicipioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioExpedidoEn', l_MunicipioExpedidoEn);
    l_MunicipioReceptor := MunicipioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('MunicipioReceptor', l_MunicipioReceptor);
    l_noAprobacion := noAprobacion;
    TROSerializer(ASerializer).WriteAnsiString('noAprobacion', l_noAprobacion);
    l_NoExterioExpedidoEn := NoExterioExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('NoExterioExpedidoEn', l_NoExterioExpedidoEn);
    l_NoExteriorEM := NoExteriorEM;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorEM', l_NoExteriorEM);
    l_NoExteriorReceptor := NoExteriorReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NoExteriorReceptor', l_NoExteriorReceptor);
    l_NombreReceptor := NombreReceptor;
    TROSerializer(ASerializer).WriteAnsiString('NombreReceptor', l_NombreReceptor);
    l_NomEmpEmisor := NomEmpEmisor;
    TROSerializer(ASerializer).WriteAnsiString('NomEmpEmisor', l_NomEmpEmisor);
    l_PaisEmisor := PaisEmisor;
    TROSerializer(ASerializer).WriteAnsiString('PaisEmisor', l_PaisEmisor);
    l_PaisExpedidoEn := PaisExpedidoEn;
    TROSerializer(ASerializer).WriteAnsiString('PaisExpedidoEn', l_PaisExpedidoEn);
    l_PaisReceptor := PaisReceptor;
    TROSerializer(ASerializer).WriteAnsiString('PaisReceptor', l_PaisReceptor);
    l_RFCEmisor := RFCEmisor;
    TROSerializer(ASerializer).WriteAnsiString('RFCEmisor', l_RFCEmisor);
    l_RFCReceptor := RFCReceptor;
    TROSerializer(ASerializer).WriteAnsiString('RFCReceptor', l_RFCReceptor);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).WriteAnsiString('SubTotal', l_SubTotal);
    l_Sucursal := Sucursal;
    TROSerializer(ASerializer).WriteEnumerated('Sucursal',TypeInfo(boolean), l_Sucursal);
    l_tipoComprobante := tipoComprobante;
    TROSerializer(ASerializer).WriteAnsiString('tipoComprobante', l_tipoComprobante);
    l_Total := Total;
    TROSerializer(ASerializer).WriteAnsiString('Total', l_Total);
    l_TotalImpuesto := TotalImpuesto;
    TROSerializer(ASerializer).WriteAnsiString('TotalImpuesto', l_TotalImpuesto);
  end;
end;

{ TFacturaElectronicaFCollection }
constructor TFacturaElectronicaFCollection.Create;
begin
  inherited Create(TFacturaElectronicaF);
end;

constructor TFacturaElectronicaFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaElectronicaFCollection.Add: TFacturaElectronicaF;
begin
  result := TFacturaElectronicaF(inherited Add);
end;

function TFacturaElectronicaFCollection.GetItems(aIndex: integer): TFacturaElectronicaF;
begin
  result := TFacturaElectronicaF(inherited Items[aIndex]);
end;

procedure TFacturaElectronicaFCollection.SetItems(aIndex: integer; const Value: TFacturaElectronicaF);
begin
  TFacturaElectronicaF(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaElectronicaDetalleImporteF }

procedure TFacturaElectronicaDetalleImporteF.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TFacturaElectronicaDetalleImporteF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TFacturaElectronicaDetalleImporteF) then begin
    lSource := LibraryFlotillas_Intf.TFacturaElectronicaDetalleImporteF(iSource);
    CantidadReceptor := lSource.CantidadReceptor;
    UnidadReceptor := lSource.UnidadReceptor;
    DescripcionReceptor := lSource.DescripcionReceptor;
    ValorUnitarioReceptor := lSource.ValorUnitarioReceptor;
    ImporteReceptor := lSource.ImporteReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImporteF.ReadComplex(ASerializer: TObject);
var
  l_CantidadReceptor: AnsiString;
  l_DescripcionReceptor: AnsiString;
  l_ImporteReceptor: AnsiString;
  l_UnidadReceptor: AnsiString;
  l_ValorUnitarioReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_CantidadReceptor := CantidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('CantidadReceptor', l_CantidadReceptor);
    CantidadReceptor := l_CantidadReceptor;
    l_UnidadReceptor := UnidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('UnidadReceptor', l_UnidadReceptor);
    UnidadReceptor := l_UnidadReceptor;
    l_DescripcionReceptor := DescripcionReceptor;
    TROSerializer(ASerializer).ReadAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    DescripcionReceptor := l_DescripcionReceptor;
    l_ValorUnitarioReceptor := ValorUnitarioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
    ValorUnitarioReceptor := l_ValorUnitarioReceptor;
    l_ImporteReceptor := ImporteReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImporteReceptor', l_ImporteReceptor);
    ImporteReceptor := l_ImporteReceptor;
  end
  else begin
    l_CantidadReceptor := CantidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('CantidadReceptor', l_CantidadReceptor);
    CantidadReceptor := l_CantidadReceptor;
    l_DescripcionReceptor := DescripcionReceptor;
    TROSerializer(ASerializer).ReadAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    DescripcionReceptor := l_DescripcionReceptor;
    l_ImporteReceptor := ImporteReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImporteReceptor', l_ImporteReceptor);
    ImporteReceptor := l_ImporteReceptor;
    l_UnidadReceptor := UnidadReceptor;
    TROSerializer(ASerializer).ReadAnsiString('UnidadReceptor', l_UnidadReceptor);
    UnidadReceptor := l_UnidadReceptor;
    l_ValorUnitarioReceptor := ValorUnitarioReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
    ValorUnitarioReceptor := l_ValorUnitarioReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImporteF.WriteComplex(ASerializer: TObject);
var
  l_CantidadReceptor: AnsiString;
  l_DescripcionReceptor: AnsiString;
  l_ImporteReceptor: AnsiString;
  l_UnidadReceptor: AnsiString;
  l_ValorUnitarioReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaElectronicaDetalleImporteF);
    l_CantidadReceptor := CantidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CantidadReceptor', l_CantidadReceptor);
    l_UnidadReceptor := UnidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('UnidadReceptor', l_UnidadReceptor);
    l_DescripcionReceptor := DescripcionReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    l_ValorUnitarioReceptor := ValorUnitarioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
    l_ImporteReceptor := ImporteReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteReceptor', l_ImporteReceptor);
  end
  else begin
    l_CantidadReceptor := CantidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('CantidadReceptor', l_CantidadReceptor);
    l_DescripcionReceptor := DescripcionReceptor;
    TROSerializer(ASerializer).WriteAnsiString('DescripcionReceptor', l_DescripcionReceptor);
    l_ImporteReceptor := ImporteReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteReceptor', l_ImporteReceptor);
    l_UnidadReceptor := UnidadReceptor;
    TROSerializer(ASerializer).WriteAnsiString('UnidadReceptor', l_UnidadReceptor);
    l_ValorUnitarioReceptor := ValorUnitarioReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ValorUnitarioReceptor', l_ValorUnitarioReceptor);
  end;
end;

{ TFacturaElectronicaDetalleImporteFCollection }
constructor TFacturaElectronicaDetalleImporteFCollection.Create;
begin
  inherited Create(TFacturaElectronicaDetalleImporteF);
end;

constructor TFacturaElectronicaDetalleImporteFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaElectronicaDetalleImporteFCollection.Add: TFacturaElectronicaDetalleImporteF;
begin
  result := TFacturaElectronicaDetalleImporteF(inherited Add);
end;

function TFacturaElectronicaDetalleImporteFCollection.GetItems(aIndex: integer): TFacturaElectronicaDetalleImporteF;
begin
  result := TFacturaElectronicaDetalleImporteF(inherited Items[aIndex]);
end;

procedure TFacturaElectronicaDetalleImporteFCollection.LoadFromArray(anArray: ATFacturaElectronicaDetalleImportes);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TFacturaElectronicaDetalleImporteFCollection.SaveToArray(anArray: ATFacturaElectronicaDetalleImportes);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TFacturaElectronicaDetalleImporteF.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TFacturaElectronicaDetalleImporteFCollection.SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImporteF);
begin
  TFacturaElectronicaDetalleImporteF(inherited Items[aIndex]).Assign(Value);
end;

{ TFacturaElectronicaDetalleImpuestosF }

procedure TFacturaElectronicaDetalleImpuestosF.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TFacturaElectronicaDetalleImpuestosF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TFacturaElectronicaDetalleImpuestosF) then begin
    lSource := LibraryFlotillas_Intf.TFacturaElectronicaDetalleImpuestosF(iSource);
    ImpuestoReceptor := lSource.ImpuestoReceptor;
    TasaReceptor := lSource.TasaReceptor;
    ImporteImpReceptor := lSource.ImporteImpReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImpuestosF.ReadComplex(ASerializer: TObject);
var
  l_ImporteImpReceptor: AnsiString;
  l_ImpuestoReceptor: AnsiString;
  l_TasaReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_ImpuestoReceptor := ImpuestoReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    ImpuestoReceptor := l_ImpuestoReceptor;
    l_TasaReceptor := TasaReceptor;
    TROSerializer(ASerializer).ReadAnsiString('TasaReceptor', l_TasaReceptor);
    TasaReceptor := l_TasaReceptor;
    l_ImporteImpReceptor := ImporteImpReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
    ImporteImpReceptor := l_ImporteImpReceptor;
  end
  else begin
    l_ImporteImpReceptor := ImporteImpReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
    ImporteImpReceptor := l_ImporteImpReceptor;
    l_ImpuestoReceptor := ImpuestoReceptor;
    TROSerializer(ASerializer).ReadAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    ImpuestoReceptor := l_ImpuestoReceptor;
    l_TasaReceptor := TasaReceptor;
    TROSerializer(ASerializer).ReadAnsiString('TasaReceptor', l_TasaReceptor);
    TasaReceptor := l_TasaReceptor;
  end;
end;

procedure TFacturaElectronicaDetalleImpuestosF.WriteComplex(ASerializer: TObject);
var
  l_ImporteImpReceptor: AnsiString;
  l_ImpuestoReceptor: AnsiString;
  l_TasaReceptor: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TFacturaElectronicaDetalleImpuestosF);
    l_ImpuestoReceptor := ImpuestoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    l_TasaReceptor := TasaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('TasaReceptor', l_TasaReceptor);
    l_ImporteImpReceptor := ImporteImpReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
  end
  else begin
    l_ImporteImpReceptor := ImporteImpReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImporteImpReceptor', l_ImporteImpReceptor);
    l_ImpuestoReceptor := ImpuestoReceptor;
    TROSerializer(ASerializer).WriteAnsiString('ImpuestoReceptor', l_ImpuestoReceptor);
    l_TasaReceptor := TasaReceptor;
    TROSerializer(ASerializer).WriteAnsiString('TasaReceptor', l_TasaReceptor);
  end;
end;

{ TFacturaElectronicaDetalleImpuestosFCollection }
constructor TFacturaElectronicaDetalleImpuestosFCollection.Create;
begin
  inherited Create(TFacturaElectronicaDetalleImpuestosF);
end;

constructor TFacturaElectronicaDetalleImpuestosFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TFacturaElectronicaDetalleImpuestosFCollection.Add: TFacturaElectronicaDetalleImpuestosF;
begin
  result := TFacturaElectronicaDetalleImpuestosF(inherited Add);
end;

function TFacturaElectronicaDetalleImpuestosFCollection.GetItems(aIndex: integer): TFacturaElectronicaDetalleImpuestosF;
begin
  result := TFacturaElectronicaDetalleImpuestosF(inherited Items[aIndex]);
end;

procedure TFacturaElectronicaDetalleImpuestosFCollection.LoadFromArray(anArray: ATFacturaElectronicaDetalleImpuestos);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TFacturaElectronicaDetalleImpuestosFCollection.SaveToArray(anArray: ATFacturaElectronicaDetalleImpuestos);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TFacturaElectronicaDetalleImpuestosF.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TFacturaElectronicaDetalleImpuestosFCollection.SetItems(aIndex: integer; const Value: TFacturaElectronicaDetalleImpuestosF);
begin
  TFacturaElectronicaDetalleImpuestosF(inherited Items[aIndex]).Assign(Value);
end;

{ TDocumentoCupones }

procedure TDocumentoCupones.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TDocumentoCupones;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TDocumentoCupones) then begin
    lSource := LibraryFlotillas_Intf.TDocumentoCupones(iSource);
    Referencia := lSource.Referencia;
    Serie := lSource.Serie;
    aFolio := lSource.aFolio;
  end;
end;

procedure TDocumentoCupones.ReadComplex(ASerializer: TObject);
var
  l_aFolio: Integer;
  l_Referencia: AnsiString;
  l_Serie: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
    l_aFolio := aFolio;
    TROSerializer(ASerializer).ReadInteger('aFolio', otSLong, l_aFolio);
    aFolio := l_aFolio;
  end
  else begin
    l_aFolio := aFolio;
    TROSerializer(ASerializer).ReadInteger('aFolio', otSLong, l_aFolio);
    aFolio := l_aFolio;
    l_Referencia := Referencia;
    TROSerializer(ASerializer).ReadAnsiString('Referencia', l_Referencia);
    Referencia := l_Referencia;
    l_Serie := Serie;
    TROSerializer(ASerializer).ReadAnsiString('Serie', l_Serie);
    Serie := l_Serie;
  end;
end;

procedure TDocumentoCupones.WriteComplex(ASerializer: TObject);
var
  l_aFolio: Integer;
  l_Referencia: AnsiString;
  l_Serie: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDocumentoCupones);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
    l_aFolio := aFolio;
    TROSerializer(ASerializer).WriteInteger('aFolio', otSLong, l_aFolio);
  end
  else begin
    l_aFolio := aFolio;
    TROSerializer(ASerializer).WriteInteger('aFolio', otSLong, l_aFolio);
    l_Referencia := Referencia;
    TROSerializer(ASerializer).WriteAnsiString('Referencia', l_Referencia);
    l_Serie := Serie;
    TROSerializer(ASerializer).WriteAnsiString('Serie', l_Serie);
  end;
end;

{ TDocumentoCuponesCollection }
constructor TDocumentoCuponesCollection.Create;
begin
  inherited Create(TDocumentoCupones);
end;

constructor TDocumentoCuponesCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDocumentoCuponesCollection.Add: TDocumentoCupones;
begin
  result := TDocumentoCupones(inherited Add);
end;

function TDocumentoCuponesCollection.GetItems(aIndex: integer): TDocumentoCupones;
begin
  result := TDocumentoCupones(inherited Items[aIndex]);
end;

procedure TDocumentoCuponesCollection.LoadFromArray(anArray: TDocumentosCuponesArray);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TDocumentoCuponesCollection.SaveToArray(anArray: TDocumentosCuponesArray);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TDocumentoCupones.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TDocumentoCuponesCollection.SetItems(aIndex: integer; const Value: TDocumentoCupones);
begin
  TDocumentoCupones(inherited Items[aIndex]).Assign(Value);
end;

{ TMonederoElectronico }

procedure TMonederoElectronico.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TMonederoElectronico;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TMonederoElectronico) then begin
    lSource := LibraryFlotillas_Intf.TMonederoElectronico(iSource);
    tipoOperacion := lSource.tipoOperacion;
    NumerodeCuenta := lSource.NumerodeCuenta;
    SubTotal := lSource.SubTotal;
    Total := lSource.Total;
    conceptoEstadodeCuentaCombustible.Assign(lSource.conceptoEstadodeCuentaCombustible);
  end;
end;

function TMonederoElectronico.GetconceptoEstadodeCuentaCombustible: AConceptoEstadodeCuentaCombustible;
begin
  if (fconceptoEstadodeCuentaCombustible = nil) then fconceptoEstadodeCuentaCombustible := AConceptoEstadodeCuentaCombustible.Create();
  result := fconceptoEstadodeCuentaCombustible;
end;

procedure TMonederoElectronico.ReadComplex(ASerializer: TObject);
var
  l_conceptoEstadodeCuentaCombustible: AConceptoEstadodeCuentaCombustible;
  l_NumerodeCuenta: AnsiString;
  l_SubTotal: AnsiString;
  l_tipoOperacion: AnsiString;
  l_Total: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_tipoOperacion := tipoOperacion;
    TROSerializer(ASerializer).ReadAnsiString('tipoOperacion', l_tipoOperacion);
    tipoOperacion := l_tipoOperacion;
    l_NumerodeCuenta := NumerodeCuenta;
    TROSerializer(ASerializer).ReadAnsiString('NumerodeCuenta', l_NumerodeCuenta);
    NumerodeCuenta := l_NumerodeCuenta;
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).ReadAnsiString('SubTotal', l_SubTotal);
    SubTotal := l_SubTotal;
    l_Total := Total;
    TROSerializer(ASerializer).ReadAnsiString('Total', l_Total);
    Total := l_Total;
    l_conceptoEstadodeCuentaCombustible := conceptoEstadodeCuentaCombustible;
    TROSerializer(ASerializer).ReadArray('conceptoEstadodeCuentaCombustible', AConceptoEstadodeCuentaCombustible, l_conceptoEstadodeCuentaCombustible);
    if conceptoEstadodeCuentaCombustible <> l_conceptoEstadodeCuentaCombustible then conceptoEstadodeCuentaCombustible.Free;
    conceptoEstadodeCuentaCombustible := l_conceptoEstadodeCuentaCombustible;
  end
  else begin
    l_conceptoEstadodeCuentaCombustible := conceptoEstadodeCuentaCombustible;
    TROSerializer(ASerializer).ReadArray('conceptoEstadodeCuentaCombustible', AConceptoEstadodeCuentaCombustible, l_conceptoEstadodeCuentaCombustible);
    if conceptoEstadodeCuentaCombustible <> l_conceptoEstadodeCuentaCombustible then conceptoEstadodeCuentaCombustible.Free;
    conceptoEstadodeCuentaCombustible := l_conceptoEstadodeCuentaCombustible;
    l_NumerodeCuenta := NumerodeCuenta;
    TROSerializer(ASerializer).ReadAnsiString('NumerodeCuenta', l_NumerodeCuenta);
    NumerodeCuenta := l_NumerodeCuenta;
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).ReadAnsiString('SubTotal', l_SubTotal);
    SubTotal := l_SubTotal;
    l_tipoOperacion := tipoOperacion;
    TROSerializer(ASerializer).ReadAnsiString('tipoOperacion', l_tipoOperacion);
    tipoOperacion := l_tipoOperacion;
    l_Total := Total;
    TROSerializer(ASerializer).ReadAnsiString('Total', l_Total);
    Total := l_Total;
  end;
end;

procedure TMonederoElectronico.WriteComplex(ASerializer: TObject);
var
  l_conceptoEstadodeCuentaCombustible: AConceptoEstadodeCuentaCombustible;
  l_NumerodeCuenta: AnsiString;
  l_SubTotal: AnsiString;
  l_tipoOperacion: AnsiString;
  l_Total: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TMonederoElectronico);
    l_tipoOperacion := tipoOperacion;
    TROSerializer(ASerializer).WriteAnsiString('tipoOperacion', l_tipoOperacion);
    l_NumerodeCuenta := NumerodeCuenta;
    TROSerializer(ASerializer).WriteAnsiString('NumerodeCuenta', l_NumerodeCuenta);
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).WriteAnsiString('SubTotal', l_SubTotal);
    l_Total := Total;
    TROSerializer(ASerializer).WriteAnsiString('Total', l_Total);
    l_conceptoEstadodeCuentaCombustible := conceptoEstadodeCuentaCombustible;
    TROSerializer(ASerializer).WriteArray('conceptoEstadodeCuentaCombustible', l_conceptoEstadodeCuentaCombustible, AConceptoEstadodeCuentaCombustible);
  end
  else begin
    l_conceptoEstadodeCuentaCombustible := conceptoEstadodeCuentaCombustible;
    TROSerializer(ASerializer).WriteArray('conceptoEstadodeCuentaCombustible', l_conceptoEstadodeCuentaCombustible, AConceptoEstadodeCuentaCombustible);
    l_NumerodeCuenta := NumerodeCuenta;
    TROSerializer(ASerializer).WriteAnsiString('NumerodeCuenta', l_NumerodeCuenta);
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).WriteAnsiString('SubTotal', l_SubTotal);
    l_tipoOperacion := tipoOperacion;
    TROSerializer(ASerializer).WriteAnsiString('tipoOperacion', l_tipoOperacion);
    l_Total := Total;
    TROSerializer(ASerializer).WriteAnsiString('Total', l_Total);
  end;
end;

{ TMonederoElectronicoCollection }
constructor TMonederoElectronicoCollection.Create;
begin
  inherited Create(TMonederoElectronico);
end;

constructor TMonederoElectronicoCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TMonederoElectronicoCollection.Add: TMonederoElectronico;
begin
  result := TMonederoElectronico(inherited Add);
end;

function TMonederoElectronicoCollection.GetItems(aIndex: integer): TMonederoElectronico;
begin
  result := TMonederoElectronico(inherited Items[aIndex]);
end;

procedure TMonederoElectronicoCollection.SetItems(aIndex: integer; const Value: TMonederoElectronico);
begin
  TMonederoElectronico(inherited Items[aIndex]).Assign(Value);
end;

{ TConceptoEstadodeCuentaCombustible }

procedure TConceptoEstadodeCuentaCombustible.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TConceptoEstadodeCuentaCombustible;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TConceptoEstadodeCuentaCombustible) then begin
    lSource := LibraryFlotillas_Intf.TConceptoEstadodeCuentaCombustible(iSource);
    identificacion := lSource.identificacion;
    fecha := lSource.fecha;
    rfc := lSource.rfc;
    claveEstacion := lSource.claveEstacion;
    cantidad := lSource.cantidad;
    nombreCombustible := lSource.nombreCombustible;
    folioOperacion := lSource.folioOperacion;
    valorUnitario := lSource.valorUnitario;
    importe := lSource.importe;
    detalleimpuesto.Assign(lSource.detalleimpuesto);
  end;
end;

function TConceptoEstadodeCuentaCombustible.Getdetalleimpuesto: AImpuestoConceptoEstadodeCuentaCombustible;
begin
  if (fdetalleimpuesto = nil) then fdetalleimpuesto := AImpuestoConceptoEstadodeCuentaCombustible.Create();
  result := fdetalleimpuesto;
end;

procedure TConceptoEstadodeCuentaCombustible.ReadComplex(ASerializer: TObject);
var
  l_cantidad: AnsiString;
  l_claveEstacion: AnsiString;
  l_detalleimpuesto: AImpuestoConceptoEstadodeCuentaCombustible;
  l_fecha: AnsiString;
  l_folioOperacion: AnsiString;
  l_identificacion: AnsiString;
  l_importe: AnsiString;
  l_nombreCombustible: AnsiString;
  l_rfc: AnsiString;
  l_valorUnitario: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_identificacion := identificacion;
    TROSerializer(ASerializer).ReadAnsiString('identificacion', l_identificacion);
    identificacion := l_identificacion;
    l_fecha := fecha;
    TROSerializer(ASerializer).ReadAnsiString('fecha', l_fecha);
    fecha := l_fecha;
    l_rfc := rfc;
    TROSerializer(ASerializer).ReadAnsiString('rfc', l_rfc);
    rfc := l_rfc;
    l_claveEstacion := claveEstacion;
    TROSerializer(ASerializer).ReadAnsiString('claveEstacion', l_claveEstacion);
    claveEstacion := l_claveEstacion;
    l_cantidad := cantidad;
    TROSerializer(ASerializer).ReadAnsiString('cantidad', l_cantidad);
    cantidad := l_cantidad;
    l_nombreCombustible := nombreCombustible;
    TROSerializer(ASerializer).ReadAnsiString('nombreCombustible', l_nombreCombustible);
    nombreCombustible := l_nombreCombustible;
    l_folioOperacion := folioOperacion;
    TROSerializer(ASerializer).ReadAnsiString('folioOperacion', l_folioOperacion);
    folioOperacion := l_folioOperacion;
    l_valorUnitario := valorUnitario;
    TROSerializer(ASerializer).ReadAnsiString('valorUnitario', l_valorUnitario);
    valorUnitario := l_valorUnitario;
    l_importe := importe;
    TROSerializer(ASerializer).ReadAnsiString('importe', l_importe);
    importe := l_importe;
    l_detalleimpuesto := detalleimpuesto;
    TROSerializer(ASerializer).ReadArray('detalleimpuesto', AImpuestoConceptoEstadodeCuentaCombustible, l_detalleimpuesto);
    if detalleimpuesto <> l_detalleimpuesto then detalleimpuesto.Free;
    detalleimpuesto := l_detalleimpuesto;
  end
  else begin
    l_cantidad := cantidad;
    TROSerializer(ASerializer).ReadAnsiString('cantidad', l_cantidad);
    cantidad := l_cantidad;
    l_claveEstacion := claveEstacion;
    TROSerializer(ASerializer).ReadAnsiString('claveEstacion', l_claveEstacion);
    claveEstacion := l_claveEstacion;
    l_detalleimpuesto := detalleimpuesto;
    TROSerializer(ASerializer).ReadArray('detalleimpuesto', AImpuestoConceptoEstadodeCuentaCombustible, l_detalleimpuesto);
    if detalleimpuesto <> l_detalleimpuesto then detalleimpuesto.Free;
    detalleimpuesto := l_detalleimpuesto;
    l_fecha := fecha;
    TROSerializer(ASerializer).ReadAnsiString('fecha', l_fecha);
    fecha := l_fecha;
    l_folioOperacion := folioOperacion;
    TROSerializer(ASerializer).ReadAnsiString('folioOperacion', l_folioOperacion);
    folioOperacion := l_folioOperacion;
    l_identificacion := identificacion;
    TROSerializer(ASerializer).ReadAnsiString('identificacion', l_identificacion);
    identificacion := l_identificacion;
    l_importe := importe;
    TROSerializer(ASerializer).ReadAnsiString('importe', l_importe);
    importe := l_importe;
    l_nombreCombustible := nombreCombustible;
    TROSerializer(ASerializer).ReadAnsiString('nombreCombustible', l_nombreCombustible);
    nombreCombustible := l_nombreCombustible;
    l_rfc := rfc;
    TROSerializer(ASerializer).ReadAnsiString('rfc', l_rfc);
    rfc := l_rfc;
    l_valorUnitario := valorUnitario;
    TROSerializer(ASerializer).ReadAnsiString('valorUnitario', l_valorUnitario);
    valorUnitario := l_valorUnitario;
  end;
end;

procedure TConceptoEstadodeCuentaCombustible.WriteComplex(ASerializer: TObject);
var
  l_cantidad: AnsiString;
  l_claveEstacion: AnsiString;
  l_detalleimpuesto: AImpuestoConceptoEstadodeCuentaCombustible;
  l_fecha: AnsiString;
  l_folioOperacion: AnsiString;
  l_identificacion: AnsiString;
  l_importe: AnsiString;
  l_nombreCombustible: AnsiString;
  l_rfc: AnsiString;
  l_valorUnitario: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TConceptoEstadodeCuentaCombustible);
    l_identificacion := identificacion;
    TROSerializer(ASerializer).WriteAnsiString('identificacion', l_identificacion);
    l_fecha := fecha;
    TROSerializer(ASerializer).WriteAnsiString('fecha', l_fecha);
    l_rfc := rfc;
    TROSerializer(ASerializer).WriteAnsiString('rfc', l_rfc);
    l_claveEstacion := claveEstacion;
    TROSerializer(ASerializer).WriteAnsiString('claveEstacion', l_claveEstacion);
    l_cantidad := cantidad;
    TROSerializer(ASerializer).WriteAnsiString('cantidad', l_cantidad);
    l_nombreCombustible := nombreCombustible;
    TROSerializer(ASerializer).WriteAnsiString('nombreCombustible', l_nombreCombustible);
    l_folioOperacion := folioOperacion;
    TROSerializer(ASerializer).WriteAnsiString('folioOperacion', l_folioOperacion);
    l_valorUnitario := valorUnitario;
    TROSerializer(ASerializer).WriteAnsiString('valorUnitario', l_valorUnitario);
    l_importe := importe;
    TROSerializer(ASerializer).WriteAnsiString('importe', l_importe);
    l_detalleimpuesto := detalleimpuesto;
    TROSerializer(ASerializer).WriteArray('detalleimpuesto', l_detalleimpuesto, AImpuestoConceptoEstadodeCuentaCombustible);
  end
  else begin
    l_cantidad := cantidad;
    TROSerializer(ASerializer).WriteAnsiString('cantidad', l_cantidad);
    l_claveEstacion := claveEstacion;
    TROSerializer(ASerializer).WriteAnsiString('claveEstacion', l_claveEstacion);
    l_detalleimpuesto := detalleimpuesto;
    TROSerializer(ASerializer).WriteArray('detalleimpuesto', l_detalleimpuesto, AImpuestoConceptoEstadodeCuentaCombustible);
    l_fecha := fecha;
    TROSerializer(ASerializer).WriteAnsiString('fecha', l_fecha);
    l_folioOperacion := folioOperacion;
    TROSerializer(ASerializer).WriteAnsiString('folioOperacion', l_folioOperacion);
    l_identificacion := identificacion;
    TROSerializer(ASerializer).WriteAnsiString('identificacion', l_identificacion);
    l_importe := importe;
    TROSerializer(ASerializer).WriteAnsiString('importe', l_importe);
    l_nombreCombustible := nombreCombustible;
    TROSerializer(ASerializer).WriteAnsiString('nombreCombustible', l_nombreCombustible);
    l_rfc := rfc;
    TROSerializer(ASerializer).WriteAnsiString('rfc', l_rfc);
    l_valorUnitario := valorUnitario;
    TROSerializer(ASerializer).WriteAnsiString('valorUnitario', l_valorUnitario);
  end;
end;

{ TConceptoEstadodeCuentaCombustibleCollection }
constructor TConceptoEstadodeCuentaCombustibleCollection.Create;
begin
  inherited Create(TConceptoEstadodeCuentaCombustible);
end;

constructor TConceptoEstadodeCuentaCombustibleCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TConceptoEstadodeCuentaCombustibleCollection.Add: TConceptoEstadodeCuentaCombustible;
begin
  result := TConceptoEstadodeCuentaCombustible(inherited Add);
end;

function TConceptoEstadodeCuentaCombustibleCollection.GetItems(aIndex: integer): TConceptoEstadodeCuentaCombustible;
begin
  result := TConceptoEstadodeCuentaCombustible(inherited Items[aIndex]);
end;

procedure TConceptoEstadodeCuentaCombustibleCollection.LoadFromArray(anArray: AConceptoEstadodeCuentaCombustible);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TConceptoEstadodeCuentaCombustibleCollection.SaveToArray(anArray: AConceptoEstadodeCuentaCombustible);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TConceptoEstadodeCuentaCombustible.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TConceptoEstadodeCuentaCombustibleCollection.SetItems(aIndex: integer; const Value: TConceptoEstadodeCuentaCombustible);
begin
  TConceptoEstadodeCuentaCombustible(inherited Items[aIndex]).Assign(Value);
end;

{ TImpuestoConceptoEstadodeCuentaCombustible }

procedure TImpuestoConceptoEstadodeCuentaCombustible.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TImpuestoConceptoEstadodeCuentaCombustible;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TImpuestoConceptoEstadodeCuentaCombustible) then begin
    lSource := LibraryFlotillas_Intf.TImpuestoConceptoEstadodeCuentaCombustible(iSource);
    impuesto := lSource.impuesto;
    tasa := lSource.tasa;
    importeimpuesto := lSource.importeimpuesto;
  end;
end;

procedure TImpuestoConceptoEstadodeCuentaCombustible.ReadComplex(ASerializer: TObject);
var
  l_importeimpuesto: AnsiString;
  l_impuesto: AnsiString;
  l_tasa: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_impuesto := impuesto;
    TROSerializer(ASerializer).ReadAnsiString('impuesto', l_impuesto);
    impuesto := l_impuesto;
    l_tasa := tasa;
    TROSerializer(ASerializer).ReadAnsiString('tasa', l_tasa);
    tasa := l_tasa;
    l_importeimpuesto := importeimpuesto;
    TROSerializer(ASerializer).ReadAnsiString('importeimpuesto', l_importeimpuesto);
    importeimpuesto := l_importeimpuesto;
  end
  else begin
    l_importeimpuesto := importeimpuesto;
    TROSerializer(ASerializer).ReadAnsiString('importeimpuesto', l_importeimpuesto);
    importeimpuesto := l_importeimpuesto;
    l_impuesto := impuesto;
    TROSerializer(ASerializer).ReadAnsiString('impuesto', l_impuesto);
    impuesto := l_impuesto;
    l_tasa := tasa;
    TROSerializer(ASerializer).ReadAnsiString('tasa', l_tasa);
    tasa := l_tasa;
  end;
end;

procedure TImpuestoConceptoEstadodeCuentaCombustible.WriteComplex(ASerializer: TObject);
var
  l_importeimpuesto: AnsiString;
  l_impuesto: AnsiString;
  l_tasa: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TImpuestoConceptoEstadodeCuentaCombustible);
    l_impuesto := impuesto;
    TROSerializer(ASerializer).WriteAnsiString('impuesto', l_impuesto);
    l_tasa := tasa;
    TROSerializer(ASerializer).WriteAnsiString('tasa', l_tasa);
    l_importeimpuesto := importeimpuesto;
    TROSerializer(ASerializer).WriteAnsiString('importeimpuesto', l_importeimpuesto);
  end
  else begin
    l_importeimpuesto := importeimpuesto;
    TROSerializer(ASerializer).WriteAnsiString('importeimpuesto', l_importeimpuesto);
    l_impuesto := impuesto;
    TROSerializer(ASerializer).WriteAnsiString('impuesto', l_impuesto);
    l_tasa := tasa;
    TROSerializer(ASerializer).WriteAnsiString('tasa', l_tasa);
  end;
end;

{ TImpuestoConceptoEstadodeCuentaCombustibleCollection }
constructor TImpuestoConceptoEstadodeCuentaCombustibleCollection.Create;
begin
  inherited Create(TImpuestoConceptoEstadodeCuentaCombustible);
end;

constructor TImpuestoConceptoEstadodeCuentaCombustibleCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TImpuestoConceptoEstadodeCuentaCombustibleCollection.Add: TImpuestoConceptoEstadodeCuentaCombustible;
begin
  result := TImpuestoConceptoEstadodeCuentaCombustible(inherited Add);
end;

function TImpuestoConceptoEstadodeCuentaCombustibleCollection.GetItems(aIndex: integer): TImpuestoConceptoEstadodeCuentaCombustible;
begin
  result := TImpuestoConceptoEstadodeCuentaCombustible(inherited Items[aIndex]);
end;

procedure TImpuestoConceptoEstadodeCuentaCombustibleCollection.LoadFromArray(anArray: AImpuestoConceptoEstadodeCuentaCombustible);
var i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    Add.Assign(anArray[i]);
end;

procedure TImpuestoConceptoEstadodeCuentaCombustibleCollection.SaveToArray(anArray: AImpuestoConceptoEstadodeCuentaCombustible);
var i : integer;
begin
  anArray.Clear;
  anArray.Resize(Count);
  for i := 0 to (Count-1) do begin
    anArray[i] := TImpuestoConceptoEstadodeCuentaCombustible.Create;
    anArray[i].Assign(Items[i]);
  end;
end;

procedure TImpuestoConceptoEstadodeCuentaCombustibleCollection.SetItems(aIndex: integer; const Value: TImpuestoConceptoEstadodeCuentaCombustible);
begin
  TImpuestoConceptoEstadodeCuentaCombustible(inherited Items[aIndex]).Assign(Value);
end;

{ TDataFacturaElectronicaF }

procedure TDataFacturaElectronicaF.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TDataFacturaElectronicaF;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TDataFacturaElectronicaF) then begin
    lSource := LibraryFlotillas_Intf.TDataFacturaElectronicaF(iSource);
    FacturaElectronicaF.Assign(lSource.FacturaElectronicaF);
    MonederoElectronico.Assign(lSource.MonederoElectronico);
    CadenaOriginal := lSource.CadenaOriginal;
    SelloDigital := lSource.SelloDigital;
    NumCertificado := lSource.NumCertificado;
    Certificado := lSource.Certificado;
  end;
end;

function TDataFacturaElectronicaF.GetFacturaElectronicaF: TFacturaElectronicaF;
begin
  if (fFacturaElectronicaF = nil) then fFacturaElectronicaF := TFacturaElectronicaF.Create();
  result := fFacturaElectronicaF;
end;

function TDataFacturaElectronicaF.GetMonederoElectronico: TMonederoElectronico;
begin
  if (fMonederoElectronico = nil) then fMonederoElectronico := TMonederoElectronico.Create();
  result := fMonederoElectronico;
end;

procedure TDataFacturaElectronicaF.ReadComplex(ASerializer: TObject);
var
  l_CadenaOriginal: Widestring;
  l_Certificado: Widestring;
  l_FacturaElectronicaF: TFacturaElectronicaF;
  l_MonederoElectronico: TMonederoElectronico;
  l_NumCertificado: AnsiString;
  l_SelloDigital: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_FacturaElectronicaF := FacturaElectronicaF;
    TROSerializer(ASerializer).ReadStruct('FacturaElectronicaF', TFacturaElectronicaF, l_FacturaElectronicaF);
    if FacturaElectronicaF <> l_FacturaElectronicaF then FacturaElectronicaF.Free;
    FacturaElectronicaF := l_FacturaElectronicaF;
    l_MonederoElectronico := MonederoElectronico;
    TROSerializer(ASerializer).ReadStruct('MonederoElectronico', TMonederoElectronico, l_MonederoElectronico);
    if MonederoElectronico <> l_MonederoElectronico then MonederoElectronico.Free;
    MonederoElectronico := l_MonederoElectronico;
    l_CadenaOriginal := CadenaOriginal;
    TROSerializer(ASerializer).ReadWideString('CadenaOriginal', l_CadenaOriginal);
    CadenaOriginal := l_CadenaOriginal;
    l_SelloDigital := SelloDigital;
    TROSerializer(ASerializer).ReadAnsiString('SelloDigital', l_SelloDigital);
    SelloDigital := l_SelloDigital;
    l_NumCertificado := NumCertificado;
    TROSerializer(ASerializer).ReadAnsiString('NumCertificado', l_NumCertificado);
    NumCertificado := l_NumCertificado;
    l_Certificado := Certificado;
    TROSerializer(ASerializer).ReadWideString('Certificado', l_Certificado);
    Certificado := l_Certificado;
  end
  else begin
    l_CadenaOriginal := CadenaOriginal;
    TROSerializer(ASerializer).ReadWideString('CadenaOriginal', l_CadenaOriginal);
    CadenaOriginal := l_CadenaOriginal;
    l_Certificado := Certificado;
    TROSerializer(ASerializer).ReadWideString('Certificado', l_Certificado);
    Certificado := l_Certificado;
    l_FacturaElectronicaF := FacturaElectronicaF;
    TROSerializer(ASerializer).ReadStruct('FacturaElectronicaF', TFacturaElectronicaF, l_FacturaElectronicaF);
    if FacturaElectronicaF <> l_FacturaElectronicaF then FacturaElectronicaF.Free;
    FacturaElectronicaF := l_FacturaElectronicaF;
    l_MonederoElectronico := MonederoElectronico;
    TROSerializer(ASerializer).ReadStruct('MonederoElectronico', TMonederoElectronico, l_MonederoElectronico);
    if MonederoElectronico <> l_MonederoElectronico then MonederoElectronico.Free;
    MonederoElectronico := l_MonederoElectronico;
    l_NumCertificado := NumCertificado;
    TROSerializer(ASerializer).ReadAnsiString('NumCertificado', l_NumCertificado);
    NumCertificado := l_NumCertificado;
    l_SelloDigital := SelloDigital;
    TROSerializer(ASerializer).ReadAnsiString('SelloDigital', l_SelloDigital);
    SelloDigital := l_SelloDigital;
  end;
end;

procedure TDataFacturaElectronicaF.WriteComplex(ASerializer: TObject);
var
  l_CadenaOriginal: Widestring;
  l_Certificado: Widestring;
  l_FacturaElectronicaF: TFacturaElectronicaF;
  l_MonederoElectronico: TMonederoElectronico;
  l_NumCertificado: AnsiString;
  l_SelloDigital: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TDataFacturaElectronicaF);
    l_FacturaElectronicaF := FacturaElectronicaF;
    TROSerializer(ASerializer).WriteStruct('FacturaElectronicaF', l_FacturaElectronicaF, TFacturaElectronicaF);
    l_MonederoElectronico := MonederoElectronico;
    TROSerializer(ASerializer).WriteStruct('MonederoElectronico', l_MonederoElectronico, TMonederoElectronico);
    l_CadenaOriginal := CadenaOriginal;
    TROSerializer(ASerializer).WriteWideString('CadenaOriginal', l_CadenaOriginal);
    l_SelloDigital := SelloDigital;
    TROSerializer(ASerializer).WriteAnsiString('SelloDigital', l_SelloDigital);
    l_NumCertificado := NumCertificado;
    TROSerializer(ASerializer).WriteAnsiString('NumCertificado', l_NumCertificado);
    l_Certificado := Certificado;
    TROSerializer(ASerializer).WriteWideString('Certificado', l_Certificado);
  end
  else begin
    l_CadenaOriginal := CadenaOriginal;
    TROSerializer(ASerializer).WriteWideString('CadenaOriginal', l_CadenaOriginal);
    l_Certificado := Certificado;
    TROSerializer(ASerializer).WriteWideString('Certificado', l_Certificado);
    l_FacturaElectronicaF := FacturaElectronicaF;
    TROSerializer(ASerializer).WriteStruct('FacturaElectronicaF', l_FacturaElectronicaF, TFacturaElectronicaF);
    l_MonederoElectronico := MonederoElectronico;
    TROSerializer(ASerializer).WriteStruct('MonederoElectronico', l_MonederoElectronico, TMonederoElectronico);
    l_NumCertificado := NumCertificado;
    TROSerializer(ASerializer).WriteAnsiString('NumCertificado', l_NumCertificado);
    l_SelloDigital := SelloDigital;
    TROSerializer(ASerializer).WriteAnsiString('SelloDigital', l_SelloDigital);
  end;
end;

{ TDataFacturaElectronicaFCollection }
constructor TDataFacturaElectronicaFCollection.Create;
begin
  inherited Create(TDataFacturaElectronicaF);
end;

constructor TDataFacturaElectronicaFCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TDataFacturaElectronicaFCollection.Add: TDataFacturaElectronicaF;
begin
  result := TDataFacturaElectronicaF(inherited Add);
end;

function TDataFacturaElectronicaFCollection.GetItems(aIndex: integer): TDataFacturaElectronicaF;
begin
  result := TDataFacturaElectronicaF(inherited Items[aIndex]);
end;

procedure TDataFacturaElectronicaFCollection.SetItems(aIndex: integer; const Value: TDataFacturaElectronicaF);
begin
  TDataFacturaElectronicaF(inherited Items[aIndex]).Assign(Value);
end;

{ TBitacoraGOB }

procedure TBitacoraGOB.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TBitacoraGOB;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TBitacoraGOB) then begin
    lSource := LibraryFlotillas_Intf.TBitacoraGOB(iSource);
    Fecha := lSource.Fecha;
    IDAutorizacion := lSource.IDAutorizacion;
    IDConsumoGuardadoGOB := lSource.IDConsumoGuardadoGOB;
    SecuenciaVenta := lSource.SecuenciaVenta;
    FechaCarga := lSource.FechaCarga;
    RFID := lSource.RFID;
    Turno := lSource.Turno;
    Kilometraje := lSource.Kilometraje;
    PosicionCarga := lSource.PosicionCarga;
    Cantidad := lSource.Cantidad;
    Precio := lSource.Precio;
    Importe := lSource.Importe;
    ImpuestoImporte := lSource.ImpuestoImporte;
    ImpuestoPorcentaje := lSource.ImpuestoPorcentaje;
    ProductoID := lSource.ProductoID;
    GasolineroID := lSource.GasolineroID;
    IEPS := lSource.IEPS;
    EstacionID := lSource.EstacionID;
    Saldo := lSource.Saldo;
    ClienteID := lSource.ClienteID;
    VehiculoID := lSource.VehiculoID;
  end;
end;

procedure TBitacoraGOB.ReadComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_FechaCarga: DateTime;
  l_GasolineroID: Integer;
  l_IDAutorizacion: Integer;
  l_IDConsumoGuardadoGOB: Integer;
  l_IEPS: Double;
  l_Importe: Double;
  l_ImpuestoImporte: Double;
  l_ImpuestoPorcentaje: Double;
  l_Kilometraje: Integer;
  l_PosicionCarga: Integer;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_RFID: AnsiString;
  l_Saldo: Double;
  l_SecuenciaVenta: Integer;
  l_Turno: Integer;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_IDAutorizacion := IDAutorizacion;
    TROSerializer(ASerializer).ReadInteger('IDAutorizacion', otSLong, l_IDAutorizacion);
    IDAutorizacion := l_IDAutorizacion;
    l_IDConsumoGuardadoGOB := IDConsumoGuardadoGOB;
    TROSerializer(ASerializer).ReadInteger('IDConsumoGuardadoGOB', otSLong, l_IDConsumoGuardadoGOB);
    IDConsumoGuardadoGOB := l_IDConsumoGuardadoGOB;
    l_SecuenciaVenta := SecuenciaVenta;
    TROSerializer(ASerializer).ReadInteger('SecuenciaVenta', otSLong, l_SecuenciaVenta);
    SecuenciaVenta := l_SecuenciaVenta;
    l_FechaCarga := FechaCarga;
    TROSerializer(ASerializer).ReadDateTime('FechaCarga', l_FechaCarga);
    FechaCarga := l_FechaCarga;
    l_RFID := RFID;
    TROSerializer(ASerializer).ReadAnsiString('RFID', l_RFID);
    RFID := l_RFID;
    l_Turno := Turno;
    TROSerializer(ASerializer).ReadInteger('Turno', otSLong, l_Turno);
    Turno := l_Turno;
    l_Kilometraje := Kilometraje;
    TROSerializer(ASerializer).ReadInteger('Kilometraje', otSLong, l_Kilometraje);
    Kilometraje := l_Kilometraje;
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).ReadInteger('PosicionCarga', otSLong, l_PosicionCarga);
    PosicionCarga := l_PosicionCarga;
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_ImpuestoImporte := ImpuestoImporte;
    TROSerializer(ASerializer).ReadDouble('ImpuestoImporte', ftDouble, l_ImpuestoImporte);
    ImpuestoImporte := l_ImpuestoImporte;
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).ReadDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    ImpuestoPorcentaje := l_ImpuestoPorcentaje;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_IEPS := IEPS;
    TROSerializer(ASerializer).ReadDouble('IEPS', ftDouble, l_IEPS);
    IEPS := l_IEPS;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).ReadDouble('Cantidad', ftDouble, l_Cantidad);
    Cantidad := l_Cantidad;
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).ReadInteger('ClienteID', otSLong, l_ClienteID);
    ClienteID := l_ClienteID;
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).ReadInteger('EstacionID', otSLong, l_EstacionID);
    EstacionID := l_EstacionID;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_FechaCarga := FechaCarga;
    TROSerializer(ASerializer).ReadDateTime('FechaCarga', l_FechaCarga);
    FechaCarga := l_FechaCarga;
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).ReadInteger('GasolineroID', otSLong, l_GasolineroID);
    GasolineroID := l_GasolineroID;
    l_IDAutorizacion := IDAutorizacion;
    TROSerializer(ASerializer).ReadInteger('IDAutorizacion', otSLong, l_IDAutorizacion);
    IDAutorizacion := l_IDAutorizacion;
    l_IDConsumoGuardadoGOB := IDConsumoGuardadoGOB;
    TROSerializer(ASerializer).ReadInteger('IDConsumoGuardadoGOB', otSLong, l_IDConsumoGuardadoGOB);
    IDConsumoGuardadoGOB := l_IDConsumoGuardadoGOB;
    l_IEPS := IEPS;
    TROSerializer(ASerializer).ReadDouble('IEPS', ftDouble, l_IEPS);
    IEPS := l_IEPS;
    l_Importe := Importe;
    TROSerializer(ASerializer).ReadDouble('Importe', ftDouble, l_Importe);
    Importe := l_Importe;
    l_ImpuestoImporte := ImpuestoImporte;
    TROSerializer(ASerializer).ReadDouble('ImpuestoImporte', ftDouble, l_ImpuestoImporte);
    ImpuestoImporte := l_ImpuestoImporte;
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).ReadDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    ImpuestoPorcentaje := l_ImpuestoPorcentaje;
    l_Kilometraje := Kilometraje;
    TROSerializer(ASerializer).ReadInteger('Kilometraje', otSLong, l_Kilometraje);
    Kilometraje := l_Kilometraje;
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).ReadInteger('PosicionCarga', otSLong, l_PosicionCarga);
    PosicionCarga := l_PosicionCarga;
    l_Precio := Precio;
    TROSerializer(ASerializer).ReadDouble('Precio', ftDouble, l_Precio);
    Precio := l_Precio;
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).ReadInteger('ProductoID', otSLong, l_ProductoID);
    ProductoID := l_ProductoID;
    l_RFID := RFID;
    TROSerializer(ASerializer).ReadAnsiString('RFID', l_RFID);
    RFID := l_RFID;
    l_Saldo := Saldo;
    TROSerializer(ASerializer).ReadDouble('Saldo', ftDouble, l_Saldo);
    Saldo := l_Saldo;
    l_SecuenciaVenta := SecuenciaVenta;
    TROSerializer(ASerializer).ReadInteger('SecuenciaVenta', otSLong, l_SecuenciaVenta);
    SecuenciaVenta := l_SecuenciaVenta;
    l_Turno := Turno;
    TROSerializer(ASerializer).ReadInteger('Turno', otSLong, l_Turno);
    Turno := l_Turno;
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).ReadInteger('VehiculoID', otSLong, l_VehiculoID);
    VehiculoID := l_VehiculoID;
  end;
end;

procedure TBitacoraGOB.WriteComplex(ASerializer: TObject);
var
  l_Cantidad: Double;
  l_ClienteID: Integer;
  l_EstacionID: Integer;
  l_Fecha: DateTime;
  l_FechaCarga: DateTime;
  l_GasolineroID: Integer;
  l_IDAutorizacion: Integer;
  l_IDConsumoGuardadoGOB: Integer;
  l_IEPS: Double;
  l_Importe: Double;
  l_ImpuestoImporte: Double;
  l_ImpuestoPorcentaje: Double;
  l_Kilometraje: Integer;
  l_PosicionCarga: Integer;
  l_Precio: Double;
  l_ProductoID: Integer;
  l_RFID: AnsiString;
  l_Saldo: Double;
  l_SecuenciaVenta: Integer;
  l_Turno: Integer;
  l_VehiculoID: Integer;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TBitacoraGOB);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_IDAutorizacion := IDAutorizacion;
    TROSerializer(ASerializer).WriteInteger('IDAutorizacion', otSLong, l_IDAutorizacion);
    l_IDConsumoGuardadoGOB := IDConsumoGuardadoGOB;
    TROSerializer(ASerializer).WriteInteger('IDConsumoGuardadoGOB', otSLong, l_IDConsumoGuardadoGOB);
    l_SecuenciaVenta := SecuenciaVenta;
    TROSerializer(ASerializer).WriteInteger('SecuenciaVenta', otSLong, l_SecuenciaVenta);
    l_FechaCarga := FechaCarga;
    TROSerializer(ASerializer).WriteDateTime('FechaCarga', l_FechaCarga);
    l_RFID := RFID;
    TROSerializer(ASerializer).WriteAnsiString('RFID', l_RFID);
    l_Turno := Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', otSLong, l_Turno);
    l_Kilometraje := Kilometraje;
    TROSerializer(ASerializer).WriteInteger('Kilometraje', otSLong, l_Kilometraje);
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).WriteInteger('PosicionCarga', otSLong, l_PosicionCarga);
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_ImpuestoImporte := ImpuestoImporte;
    TROSerializer(ASerializer).WriteDouble('ImpuestoImporte', ftDouble, l_ImpuestoImporte);
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).WriteDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_IEPS := IEPS;
    TROSerializer(ASerializer).WriteDouble('IEPS', ftDouble, l_IEPS);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
  end
  else begin
    l_Cantidad := Cantidad;
    TROSerializer(ASerializer).WriteDouble('Cantidad', ftDouble, l_Cantidad);
    l_ClienteID := ClienteID;
    TROSerializer(ASerializer).WriteInteger('ClienteID', otSLong, l_ClienteID);
    l_EstacionID := EstacionID;
    TROSerializer(ASerializer).WriteInteger('EstacionID', otSLong, l_EstacionID);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_FechaCarga := FechaCarga;
    TROSerializer(ASerializer).WriteDateTime('FechaCarga', l_FechaCarga);
    l_GasolineroID := GasolineroID;
    TROSerializer(ASerializer).WriteInteger('GasolineroID', otSLong, l_GasolineroID);
    l_IDAutorizacion := IDAutorizacion;
    TROSerializer(ASerializer).WriteInteger('IDAutorizacion', otSLong, l_IDAutorizacion);
    l_IDConsumoGuardadoGOB := IDConsumoGuardadoGOB;
    TROSerializer(ASerializer).WriteInteger('IDConsumoGuardadoGOB', otSLong, l_IDConsumoGuardadoGOB);
    l_IEPS := IEPS;
    TROSerializer(ASerializer).WriteDouble('IEPS', ftDouble, l_IEPS);
    l_Importe := Importe;
    TROSerializer(ASerializer).WriteDouble('Importe', ftDouble, l_Importe);
    l_ImpuestoImporte := ImpuestoImporte;
    TROSerializer(ASerializer).WriteDouble('ImpuestoImporte', ftDouble, l_ImpuestoImporte);
    l_ImpuestoPorcentaje := ImpuestoPorcentaje;
    TROSerializer(ASerializer).WriteDouble('ImpuestoPorcentaje', ftDouble, l_ImpuestoPorcentaje);
    l_Kilometraje := Kilometraje;
    TROSerializer(ASerializer).WriteInteger('Kilometraje', otSLong, l_Kilometraje);
    l_PosicionCarga := PosicionCarga;
    TROSerializer(ASerializer).WriteInteger('PosicionCarga', otSLong, l_PosicionCarga);
    l_Precio := Precio;
    TROSerializer(ASerializer).WriteDouble('Precio', ftDouble, l_Precio);
    l_ProductoID := ProductoID;
    TROSerializer(ASerializer).WriteInteger('ProductoID', otSLong, l_ProductoID);
    l_RFID := RFID;
    TROSerializer(ASerializer).WriteAnsiString('RFID', l_RFID);
    l_Saldo := Saldo;
    TROSerializer(ASerializer).WriteDouble('Saldo', ftDouble, l_Saldo);
    l_SecuenciaVenta := SecuenciaVenta;
    TROSerializer(ASerializer).WriteInteger('SecuenciaVenta', otSLong, l_SecuenciaVenta);
    l_Turno := Turno;
    TROSerializer(ASerializer).WriteInteger('Turno', otSLong, l_Turno);
    l_VehiculoID := VehiculoID;
    TROSerializer(ASerializer).WriteInteger('VehiculoID', otSLong, l_VehiculoID);
  end;
end;

{ TBitacoraGOBCollection }
constructor TBitacoraGOBCollection.Create;
begin
  inherited Create(TBitacoraGOB);
end;

constructor TBitacoraGOBCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TBitacoraGOBCollection.Add: TBitacoraGOB;
begin
  result := TBitacoraGOB(inherited Add);
end;

function TBitacoraGOBCollection.GetItems(aIndex: integer): TBitacoraGOB;
begin
  result := TBitacoraGOB(inherited Items[aIndex]);
end;

procedure TBitacoraGOBCollection.SetItems(aIndex: integer; const Value: TBitacoraGOB);
begin
  TBitacoraGOB(inherited Items[aIndex]).Assign(Value);
end;

{ TUnidadesGOB }

procedure TUnidadesGOB.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TUnidadesGOB;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TUnidadesGOB) then begin
    lSource := LibraryFlotillas_Intf.TUnidadesGOB(iSource);
    NumeroEconomico := lSource.NumeroEconomico;
    Inventario := lSource.Inventario;
    Placas := lSource.Placas;
    Marcas := lSource.Marcas;
    Modelo := lSource.Modelo;
    Color := lSource.Color;
  end;
end;

procedure TUnidadesGOB.ReadComplex(ASerializer: TObject);
var
  l_Color: AnsiString;
  l_Inventario: AnsiString;
  l_Marcas: AnsiString;
  l_Modelo: AnsiString;
  l_NumeroEconomico: AnsiString;
  l_Placas: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_NumeroEconomico := NumeroEconomico;
    TROSerializer(ASerializer).ReadAnsiString('NumeroEconomico', l_NumeroEconomico);
    NumeroEconomico := l_NumeroEconomico;
    l_Inventario := Inventario;
    TROSerializer(ASerializer).ReadAnsiString('Inventario', l_Inventario);
    Inventario := l_Inventario;
    l_Placas := Placas;
    TROSerializer(ASerializer).ReadAnsiString('Placas', l_Placas);
    Placas := l_Placas;
    l_Marcas := Marcas;
    TROSerializer(ASerializer).ReadAnsiString('Marcas', l_Marcas);
    Marcas := l_Marcas;
    l_Modelo := Modelo;
    TROSerializer(ASerializer).ReadAnsiString('Modelo', l_Modelo);
    Modelo := l_Modelo;
    l_Color := Color;
    TROSerializer(ASerializer).ReadAnsiString('Color', l_Color);
    Color := l_Color;
  end
  else begin
    l_Color := Color;
    TROSerializer(ASerializer).ReadAnsiString('Color', l_Color);
    Color := l_Color;
    l_Inventario := Inventario;
    TROSerializer(ASerializer).ReadAnsiString('Inventario', l_Inventario);
    Inventario := l_Inventario;
    l_Marcas := Marcas;
    TROSerializer(ASerializer).ReadAnsiString('Marcas', l_Marcas);
    Marcas := l_Marcas;
    l_Modelo := Modelo;
    TROSerializer(ASerializer).ReadAnsiString('Modelo', l_Modelo);
    Modelo := l_Modelo;
    l_NumeroEconomico := NumeroEconomico;
    TROSerializer(ASerializer).ReadAnsiString('NumeroEconomico', l_NumeroEconomico);
    NumeroEconomico := l_NumeroEconomico;
    l_Placas := Placas;
    TROSerializer(ASerializer).ReadAnsiString('Placas', l_Placas);
    Placas := l_Placas;
  end;
end;

procedure TUnidadesGOB.WriteComplex(ASerializer: TObject);
var
  l_Color: AnsiString;
  l_Inventario: AnsiString;
  l_Marcas: AnsiString;
  l_Modelo: AnsiString;
  l_NumeroEconomico: AnsiString;
  l_Placas: AnsiString;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TUnidadesGOB);
    l_NumeroEconomico := NumeroEconomico;
    TROSerializer(ASerializer).WriteAnsiString('NumeroEconomico', l_NumeroEconomico);
    l_Inventario := Inventario;
    TROSerializer(ASerializer).WriteAnsiString('Inventario', l_Inventario);
    l_Placas := Placas;
    TROSerializer(ASerializer).WriteAnsiString('Placas', l_Placas);
    l_Marcas := Marcas;
    TROSerializer(ASerializer).WriteAnsiString('Marcas', l_Marcas);
    l_Modelo := Modelo;
    TROSerializer(ASerializer).WriteAnsiString('Modelo', l_Modelo);
    l_Color := Color;
    TROSerializer(ASerializer).WriteAnsiString('Color', l_Color);
  end
  else begin
    l_Color := Color;
    TROSerializer(ASerializer).WriteAnsiString('Color', l_Color);
    l_Inventario := Inventario;
    TROSerializer(ASerializer).WriteAnsiString('Inventario', l_Inventario);
    l_Marcas := Marcas;
    TROSerializer(ASerializer).WriteAnsiString('Marcas', l_Marcas);
    l_Modelo := Modelo;
    TROSerializer(ASerializer).WriteAnsiString('Modelo', l_Modelo);
    l_NumeroEconomico := NumeroEconomico;
    TROSerializer(ASerializer).WriteAnsiString('NumeroEconomico', l_NumeroEconomico);
    l_Placas := Placas;
    TROSerializer(ASerializer).WriteAnsiString('Placas', l_Placas);
  end;
end;

{ TUnidadesGOBCollection }
constructor TUnidadesGOBCollection.Create;
begin
  inherited Create(TUnidadesGOB);
end;

constructor TUnidadesGOBCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TUnidadesGOBCollection.Add: TUnidadesGOB;
begin
  result := TUnidadesGOB(inherited Add);
end;

function TUnidadesGOBCollection.GetItems(aIndex: integer): TUnidadesGOB;
begin
  result := TUnidadesGOB(inherited Items[aIndex]);
end;

procedure TUnidadesGOBCollection.SetItems(aIndex: integer; const Value: TUnidadesGOB);
begin
  TUnidadesGOB(inherited Items[aIndex]).Assign(Value);
end;

{ TEnviaDatosFacturaGOB }

procedure TEnviaDatosFacturaGOB.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TEnviaDatosFacturaGOB;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TEnviaDatosFacturaGOB) then begin
    lSource := LibraryFlotillas_Intf.TEnviaDatosFacturaGOB(iSource);
    Factura := lSource.Factura;
    Fecha := lSource.Fecha;
    SubTotal := lSource.SubTotal;
    IVA := lSource.IVA;
    Detalle := lSource.Detalle;
    Total := lSource.Total;
  end;
end;

procedure TEnviaDatosFacturaGOB.ReadComplex(ASerializer: TObject);
var
  l_Detalle: Widestring;
  l_Factura: AnsiString;
  l_Fecha: DateTime;
  l_IVA: Double;
  l_SubTotal: Double;
  l_Total: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_Factura := Factura;
    TROSerializer(ASerializer).ReadAnsiString('Factura', l_Factura);
    Factura := l_Factura;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).ReadDouble('SubTotal', ftDouble, l_SubTotal);
    SubTotal := l_SubTotal;
    l_IVA := IVA;
    TROSerializer(ASerializer).ReadDouble('IVA', ftDouble, l_IVA);
    IVA := l_IVA;
    l_Detalle := Detalle;
    TROSerializer(ASerializer).ReadWideString('Detalle', l_Detalle);
    Detalle := l_Detalle;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
  end
  else begin
    l_Detalle := Detalle;
    TROSerializer(ASerializer).ReadWideString('Detalle', l_Detalle);
    Detalle := l_Detalle;
    l_Factura := Factura;
    TROSerializer(ASerializer).ReadAnsiString('Factura', l_Factura);
    Factura := l_Factura;
    l_Fecha := Fecha;
    TROSerializer(ASerializer).ReadDateTime('Fecha', l_Fecha);
    Fecha := l_Fecha;
    l_IVA := IVA;
    TROSerializer(ASerializer).ReadDouble('IVA', ftDouble, l_IVA);
    IVA := l_IVA;
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).ReadDouble('SubTotal', ftDouble, l_SubTotal);
    SubTotal := l_SubTotal;
    l_Total := Total;
    TROSerializer(ASerializer).ReadDouble('Total', ftDouble, l_Total);
    Total := l_Total;
  end;
end;

procedure TEnviaDatosFacturaGOB.WriteComplex(ASerializer: TObject);
var
  l_Detalle: Widestring;
  l_Factura: AnsiString;
  l_Fecha: DateTime;
  l_IVA: Double;
  l_SubTotal: Double;
  l_Total: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TEnviaDatosFacturaGOB);
    l_Factura := Factura;
    TROSerializer(ASerializer).WriteAnsiString('Factura', l_Factura);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).WriteDouble('SubTotal', ftDouble, l_SubTotal);
    l_IVA := IVA;
    TROSerializer(ASerializer).WriteDouble('IVA', ftDouble, l_IVA);
    l_Detalle := Detalle;
    TROSerializer(ASerializer).WriteWideString('Detalle', l_Detalle);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
  end
  else begin
    l_Detalle := Detalle;
    TROSerializer(ASerializer).WriteWideString('Detalle', l_Detalle);
    l_Factura := Factura;
    TROSerializer(ASerializer).WriteAnsiString('Factura', l_Factura);
    l_Fecha := Fecha;
    TROSerializer(ASerializer).WriteDateTime('Fecha', l_Fecha);
    l_IVA := IVA;
    TROSerializer(ASerializer).WriteDouble('IVA', ftDouble, l_IVA);
    l_SubTotal := SubTotal;
    TROSerializer(ASerializer).WriteDouble('SubTotal', ftDouble, l_SubTotal);
    l_Total := Total;
    TROSerializer(ASerializer).WriteDouble('Total', ftDouble, l_Total);
  end;
end;

{ TEnviaDatosFacturaGOBCollection }
constructor TEnviaDatosFacturaGOBCollection.Create;
begin
  inherited Create(TEnviaDatosFacturaGOB);
end;

constructor TEnviaDatosFacturaGOBCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TEnviaDatosFacturaGOBCollection.Add: TEnviaDatosFacturaGOB;
begin
  result := TEnviaDatosFacturaGOB(inherited Add);
end;

function TEnviaDatosFacturaGOBCollection.GetItems(aIndex: integer): TEnviaDatosFacturaGOB;
begin
  result := TEnviaDatosFacturaGOB(inherited Items[aIndex]);
end;

procedure TEnviaDatosFacturaGOBCollection.SetItems(aIndex: integer; const Value: TEnviaDatosFacturaGOB);
begin
  TEnviaDatosFacturaGOB(inherited Items[aIndex]).Assign(Value);
end;

{ TAutorizaGOB }

procedure TAutorizaGOB.Assign(iSource: TPersistent); 
var lSource: LibraryFlotillas_Intf.TAutorizaGOB;
begin
  inherited Assign(iSource);
  if (iSource is LibraryFlotillas_Intf.TAutorizaGOB) then begin
    lSource := LibraryFlotillas_Intf.TAutorizaGOB(iSource);
    REFERENCIAGOB := lSource.REFERENCIAGOB;
    SALDOGOB := lSource.SALDOGOB;
    CLASIFICACION := lSource.CLASIFICACION;
  end;
end;

procedure TAutorizaGOB.ReadComplex(ASerializer: TObject);
var
  l_CLASIFICACION: Integer;
  l_REFERENCIAGOB: AnsiString;
  l_SALDOGOB: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    l_REFERENCIAGOB := REFERENCIAGOB;
    TROSerializer(ASerializer).ReadAnsiString('REFERENCIAGOB', l_REFERENCIAGOB);
    REFERENCIAGOB := l_REFERENCIAGOB;
    l_SALDOGOB := SALDOGOB;
    TROSerializer(ASerializer).ReadDouble('SALDOGOB', ftDouble, l_SALDOGOB);
    SALDOGOB := l_SALDOGOB;
    l_CLASIFICACION := CLASIFICACION;
    TROSerializer(ASerializer).ReadInteger('CLASIFICACION', otSLong, l_CLASIFICACION);
    CLASIFICACION := l_CLASIFICACION;
  end
  else begin
    l_CLASIFICACION := CLASIFICACION;
    TROSerializer(ASerializer).ReadInteger('CLASIFICACION', otSLong, l_CLASIFICACION);
    CLASIFICACION := l_CLASIFICACION;
    l_REFERENCIAGOB := REFERENCIAGOB;
    TROSerializer(ASerializer).ReadAnsiString('REFERENCIAGOB', l_REFERENCIAGOB);
    REFERENCIAGOB := l_REFERENCIAGOB;
    l_SALDOGOB := SALDOGOB;
    TROSerializer(ASerializer).ReadDouble('SALDOGOB', ftDouble, l_SALDOGOB);
    SALDOGOB := l_SALDOGOB;
  end;
end;

procedure TAutorizaGOB.WriteComplex(ASerializer: TObject);
var
  l_CLASIFICACION: Integer;
  l_REFERENCIAGOB: AnsiString;
  l_SALDOGOB: Double;
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    TROSerializer(ASerializer).ChangeClass(TAutorizaGOB);
    l_REFERENCIAGOB := REFERENCIAGOB;
    TROSerializer(ASerializer).WriteAnsiString('REFERENCIAGOB', l_REFERENCIAGOB);
    l_SALDOGOB := SALDOGOB;
    TROSerializer(ASerializer).WriteDouble('SALDOGOB', ftDouble, l_SALDOGOB);
    l_CLASIFICACION := CLASIFICACION;
    TROSerializer(ASerializer).WriteInteger('CLASIFICACION', otSLong, l_CLASIFICACION);
  end
  else begin
    l_CLASIFICACION := CLASIFICACION;
    TROSerializer(ASerializer).WriteInteger('CLASIFICACION', otSLong, l_CLASIFICACION);
    l_REFERENCIAGOB := REFERENCIAGOB;
    TROSerializer(ASerializer).WriteAnsiString('REFERENCIAGOB', l_REFERENCIAGOB);
    l_SALDOGOB := SALDOGOB;
    TROSerializer(ASerializer).WriteDouble('SALDOGOB', ftDouble, l_SALDOGOB);
  end;
end;

{ TAutorizaGOBCollection }
constructor TAutorizaGOBCollection.Create;
begin
  inherited Create(TAutorizaGOB);
end;

constructor TAutorizaGOBCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function TAutorizaGOBCollection.Add: TAutorizaGOB;
begin
  result := TAutorizaGOB(inherited Add);
end;

function TAutorizaGOBCollection.GetItems(aIndex: integer): TAutorizaGOB;
begin
  result := TAutorizaGOB(inherited Items[aIndex]);
end;

procedure TAutorizaGOBCollection.SetItems(aIndex: integer; const Value: TAutorizaGOB);
begin
  TAutorizaGOB(inherited Items[aIndex]).Assign(Value);
end;

{ CoServiceFlotillas }

class function CoServiceFlotillas.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IServiceFlotillas;
begin
  result := TServiceFlotillas_Proxy.Create(aMessage, aTransportChannel);
end;

{ TServiceFlotillas_Proxy }

function TServiceFlotillas_Proxy.__GetInterfaceName:string;
begin
  result := 'ServiceFlotillas';
end;

function TServiceFlotillas_Proxy.AbreDataSetReportes(const SQL: AnsiString; const Parametros: TParametrosF): Binary;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'AbreDataSetReportes');
    __Message.Write('SQL', TypeInfo(AnsiString), SQL, []);
    __Message.Write('Parametros', TypeInfo(LibraryFlotillas_Intf.TParametrosF), Parametros, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Binary), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceFlotillas_Proxy.ActualizaHistorial(const Consumo: TConsumo);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'ActualizaHistorial');
    __Message.Write('Consumo', TypeInfo(LibraryFlotillas_Intf.TConsumo), Consumo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.AfectarMovimientos(const Movimiento: TMovimiento): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'AfectarMovimientos');
    __Message.Write('Movimiento', TypeInfo(LibraryFlotillas_Intf.TMovimiento), Movimiento, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.AfectarSaldoDocumento(const SaldoDocumento: TSaldoDocumento): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'AfectarSaldoDocumento');
    __Message.Write('SaldoDocumento', TypeInfo(LibraryFlotillas_Intf.TSaldoDocumento), SaldoDocumento, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceFlotillas_Proxy.AgregaReferencia(const VehiculoID: Integer; const Tipo: Integer; const Referencia: AnsiString);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'AgregaReferencia');
    __Message.Write('VehiculoID', TypeInfo(Integer), VehiculoID, []);
    __Message.Write('Tipo', TypeInfo(Integer), Tipo, []);
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.AgregaSecuencias(const Consumos: aConsumo): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'AgregaSecuencias');
    __Message.Write('Consumos', TypeInfo(LibraryFlotillas_Intf.aConsumo), Consumos, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.RegistraPagosFaltantes(const SaldoDocumentoID: Integer; const Fecha: DateTime; const FechaVencimiento: DateTime; const Cargo: Double; 
                                                        const Abono: Double; const Referencia: AnsiString; const ClienteID: Integer; const MovimientoID: Integer; 
                                                        const ReciboID: Integer; const BancoID: Integer; const Folio: Integer; const Ejercicio: Integer; const Periodo: Integer; 
                                                        const Cheque: AnsiString; const Importe: Double; const CuentaContableCliente: AnsiString; const UsuarioID: Integer; 
                                                        const EstacionID: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'RegistraPagosFaltantes');
    __Message.Write('SaldoDocumentoID', TypeInfo(Integer), SaldoDocumentoID, []);
    __Message.Write('Fecha', TypeInfo(DateTime), Fecha, [paIsDateTime]);
    __Message.Write('FechaVencimiento', TypeInfo(DateTime), FechaVencimiento, [paIsDateTime]);
    __Message.Write('Cargo', TypeInfo(Double), Cargo, []);
    __Message.Write('Abono', TypeInfo(Double), Abono, []);
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('MovimientoID', TypeInfo(Integer), MovimientoID, []);
    __Message.Write('ReciboID', TypeInfo(Integer), ReciboID, []);
    __Message.Write('BancoID', TypeInfo(Integer), BancoID, []);
    __Message.Write('Folio', TypeInfo(Integer), Folio, []);
    __Message.Write('Ejercicio', TypeInfo(Integer), Ejercicio, []);
    __Message.Write('Periodo', TypeInfo(Integer), Periodo, []);
    __Message.Write('Cheque', TypeInfo(AnsiString), Cheque, []);
    __Message.Write('Importe', TypeInfo(Double), Importe, []);
    __Message.Write('CuentaContableCliente', TypeInfo(AnsiString), CuentaContableCliente, []);
    __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.AutorizaTarjeta(const Autoriza: TAutoriza): TTarjeta;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'AutorizaTarjeta');
    __Message.Write('Autoriza', TypeInfo(LibraryFlotillas_Intf.TAutoriza), Autoriza, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TTarjeta), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.Bancaria(const Terminal: AnsiString; const Supervisor: AnsiString; const BombaID: Integer; const EstacionID: Integer; 
                                          const Track1: AnsiString; const Track2: AnsiString; const Importe: Double; const Ticket: Integer; const Serie: AnsiString; 
                                          const Comision: Double; const BancariaTipoID: Integer; const CajaID: Integer): TBancaria;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'Bancaria');
    __Message.Write('Terminal', TypeInfo(AnsiString), Terminal, []);
    __Message.Write('Supervisor', TypeInfo(AnsiString), Supervisor, []);
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('Track1', TypeInfo(AnsiString), Track1, []);
    __Message.Write('Track2', TypeInfo(AnsiString), Track2, []);
    __Message.Write('Importe', TypeInfo(Double), Importe, []);
    __Message.Write('Ticket', TypeInfo(Integer), Ticket, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('Comision', TypeInfo(Double), Comision, []);
    __Message.Write('BancariaTipoID', TypeInfo(Integer), BancariaTipoID, []);
    __Message.Write('CajaID', TypeInfo(Integer), CajaID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TBancaria), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.BuscaAutorizacionTajeta(const ClienteID: Integer; const VehiculoID: Integer; const GasolineroID: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'BuscaAutorizacionTajeta');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('VehiculoID', TypeInfo(Integer), VehiculoID, []);
    __Message.Write('GasolineroID', TypeInfo(Integer), GasolineroID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.BuscarReporte(const Nombre: AnsiString): TReporteF;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'BuscarReporte');
    __Message.Write('Nombre', TypeInfo(AnsiString), Nombre, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TReporteF), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.CambioFactura(const Serie: AnsiString; const Folio: Integer; const NevaSerie: AnsiString; const NuevoFolio: Integer; 
                                               const FechaImpresion: DateTime): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'CambioFactura');
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('Folio', TypeInfo(Integer), Folio, []);
    __Message.Write('NevaSerie', TypeInfo(AnsiString), NevaSerie, []);
    __Message.Write('NuevoFolio', TypeInfo(Integer), NuevoFolio, []);
    __Message.Write('FechaImpresion', TypeInfo(DateTime), FechaImpresion, [paIsDateTime]);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.CancelaGrupo(const Grupo: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'CancelaGrupo');
    __Message.Write('Grupo', TypeInfo(Integer), Grupo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.CancelarCupones(const Lista: AnsiString; const UsuarioID: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'CancelarCupones');
    __Message.Write('Lista', TypeInfo(AnsiString), Lista, []);
    __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.CancelarLote(const LoteID: Integer; const UsuarioID: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'CancelarLote');
    __Message.Write('LoteID', TypeInfo(Integer), LoteID, []);
    __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.CaracteresCupon: AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'CaracteresCupon');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.CierrePeriodo(const Periodo: Integer; const Ejercicio: Integer; const UsuarioID: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'CierrePeriodo');
    __Message.Write('Periodo', TypeInfo(Integer), Periodo, []);
    __Message.Write('Ejercicio', TypeInfo(Integer), Ejercicio, []);
    __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.ClaveACupon(const Clave: AnsiString): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'ClaveACupon');
    __Message.Write('Clave', TypeInfo(AnsiString), Clave, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.DatosCliente(const ClienteID: Integer): TCliente;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'DatosCliente');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TCliente), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.DatosFactura(const Folio: Integer; const Serie: AnsiString): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'DatosFactura');
    __Message.Write('Folio', TypeInfo(Integer), Folio, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.DatosVehiculo(const VehiculoID: Integer): TDatosVehiculo;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'DatosVehiculo');
    __Message.Write('VehiculoID', TypeInfo(Integer), VehiculoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TDatosVehiculo), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.DocumentosConSaldo(const ClienteID: Integer): TDocumentosConSaldoArray;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'DocumentosConSaldo');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TDocumentosConSaldoArray), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceFlotillas_Proxy.EliminaAutorizacion(const AutorizacionID: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'EliminaAutorizacion');
    __Message.Write('AutorizacionID', TypeInfo(Integer), AutorizacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.EliminaAutorizacionVehiculo(const Referencia: AnsiString): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'EliminaAutorizacionVehiculo');
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.EliminaFactura(const Folio: Integer; const Serie: AnsiString): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'EliminaFactura');
    __Message.Write('Folio', TypeInfo(Integer), Folio, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceFlotillas_Proxy.EliminaReferencia(const VehiculoID: Integer; const Tipo: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'EliminaReferencia');
    __Message.Write('VehiculoID', TypeInfo(Integer), VehiculoID, []);
    __Message.Write('Tipo', TypeInfo(Integer), Tipo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceFlotillas_Proxy.EliminaVehiculoProducto(const VehiculoID: Integer; const ProductoID: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'EliminaVehiculoProducto');
    __Message.Write('VehiculoID', TypeInfo(Integer), VehiculoID, []);
    __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.FacturaRecibo(const Cliente: Integer; const Importe: Double; const EstacionID: Integer; const EmpleadoID: Integer; 
                                               const SerieFactura: AnsiString; const ProductoID: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'FacturaRecibo');
    __Message.Write('Cliente', TypeInfo(Integer), Cliente, []);
    __Message.Write('Importe', TypeInfo(Double), Importe, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('EmpleadoID', TypeInfo(Integer), EmpleadoID, []);
    __Message.Write('SerieFactura', TypeInfo(AnsiString), SerieFactura, []);
    __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.FacturaEstacion(const DatosFactura: TDatosFactura; const EstacionID: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'FacturaEstacion');
    __Message.Write('DatosFactura', TypeInfo(LibraryFlotillas_Intf.TDatosFactura), DatosFactura, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.FacturaCupon(const Cliente: Integer; const Importe: Double; const EstacionID: Integer; const EmpleadoID: Integer; 
                                              const SerieFactura: AnsiString): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'FacturaCupon');
    __Message.Write('Cliente', TypeInfo(Integer), Cliente, []);
    __Message.Write('Importe', TypeInfo(Double), Importe, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('EmpleadoID', TypeInfo(Integer), EmpleadoID, []);
    __Message.Write('SerieFactura', TypeInfo(AnsiString), SerieFactura, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.Fecha: DateTime;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'Fecha');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(DateTime), result, [paIsDateTime]);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'Folio');
    __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.GasolineroID: Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'GasolineroID');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.GasolineroNombre: AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'GasolineroNombre');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceFlotillas_Proxy.GeneraCupones(const LoteCuponID: Integer; const ClienteID: Integer; const EstacionID: Integer; const Identificador: Integer; 
                                                const Cupones: AGeneraCupon; const TipoCupon: Boolean; const Serie: AnsiString; const aFolio: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'GeneraCupones');
    __Message.Write('LoteCuponID', TypeInfo(Integer), LoteCuponID, []);
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('Identificador', TypeInfo(Integer), Identificador, []);
    __Message.Write('Cupones', TypeInfo(LibraryFlotillas_Intf.AGeneraCupon), Cupones, []);
    __Message.Write('TipoCupon', TypeInfo(Boolean), TipoCupon, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('aFolio', TypeInfo(Integer), aFolio, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.GenerarFacturas(const Serie: AnsiString; const fol: Integer; const FechaCorte: DateTime; const FechaContable: DateTime; 
                                                 const DiaFacturar: Integer; const Magna: Boolean; const Premium: Boolean; const Diesel: Boolean; const EmpleadoID: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'GenerarFacturas');
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('fol', TypeInfo(Integer), fol, []);
    __Message.Write('FechaCorte', TypeInfo(DateTime), FechaCorte, [paIsDateTime]);
    __Message.Write('FechaContable', TypeInfo(DateTime), FechaContable, [paIsDateTime]);
    __Message.Write('DiaFacturar', TypeInfo(Integer), DiaFacturar, []);
    __Message.Write('Magna', TypeInfo(Boolean), Magna, []);
    __Message.Write('Premium', TypeInfo(Boolean), Premium, []);
    __Message.Write('Diesel', TypeInfo(Boolean), Diesel, []);
    __Message.Write('EmpleadoID', TypeInfo(Integer), EmpleadoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceFlotillas_Proxy.GuardaAccesos(const UsuarioID: Integer; const Lista: AnsiString);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'GuardaAccesos');
    __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
    __Message.Write('Lista', TypeInfo(AnsiString), Lista, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.GuardaAutorizacion(const Autorizacion: TAutoriza): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'GuardaAutorizacion');
    __Message.Write('Autorizacion', TypeInfo(LibraryFlotillas_Intf.TAutoriza), Autorizacion, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceFlotillas_Proxy.GuardaDatosFactura(const DatosFactura: TDatosFactura);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'GuardaDatosFactura');
    __Message.Write('DatosFactura', TypeInfo(LibraryFlotillas_Intf.TDatosFactura), DatosFactura, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.GuardarConsumo(const Consumo: TConsumo): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'GuardarConsumo');
    __Message.Write('Consumo', TypeInfo(LibraryFlotillas_Intf.TConsumo), Consumo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.InsertaBitacora(const ClienteID: Integer; const UsuarioID: Integer; const Tabla: AnsiString; const Campo: AnsiString; 
                                                 const ValorAnterior: AnsiString; const ValorNuevo: AnsiString): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'InsertaBitacora');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('UsuarioID', TypeInfo(Integer), UsuarioID, []);
    __Message.Write('Tabla', TypeInfo(AnsiString), Tabla, []);
    __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
    __Message.Write('ValorAnterior', TypeInfo(AnsiString), ValorAnterior, []);
    __Message.Write('ValorNuevo', TypeInfo(AnsiString), ValorNuevo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfoF;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'Login');
    __Message.Write('Usuario', TypeInfo(AnsiString), Usuario, []);
    __Message.Write('Clave', TypeInfo(AnsiString), Clave, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TLoginInfoF), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const FolioNew: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'ModificarFolioActual');
    __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('FolioNew', TypeInfo(Integer), FolioNew, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.ObtenCuponValido(const Barras: AnsiString; const Grupo: Integer; const Autoriza: TAutoriza): TCuponValido;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'ObtenCuponValido');
    __Message.Write('Barras', TypeInfo(AnsiString), Barras, []);
    __Message.Write('Grupo', TypeInfo(Integer), Grupo, []);
    __Message.Write('Autoriza', TypeInfo(LibraryFlotillas_Intf.TAutoriza), Autoriza, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TCuponValido), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.QuemarCupon(const Consumo: TConsumo; const Barras: AnsiString): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'QuemarCupon');
    __Message.Write('Consumo', TypeInfo(LibraryFlotillas_Intf.TConsumo), Consumo, []);
    __Message.Write('Barras', TypeInfo(AnsiString), Barras, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.ReferenciaTarjeta(const VehiculoID: Integer): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'ReferenciaTarjeta');
    __Message.Write('VehiculoID', TypeInfo(Integer), VehiculoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.Series(const Campo: AnsiString): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'Series');
    __Message.Write('Campo', TypeInfo(AnsiString), Campo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.StatusCupon(const Codigo: AnsiString): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'StatusCupon');
    __Message.Write('Codigo', TypeInfo(AnsiString), Codigo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.TarjetaConsumo(const Tarjeta: AnsiString; const Consumo: TConsumo): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'TarjetaConsumo');
    __Message.Write('Tarjeta', TypeInfo(AnsiString), Tarjeta, []);
    __Message.Write('Consumo', TypeInfo(LibraryFlotillas_Intf.TConsumo), Consumo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.TarjetasLLave: aTarjetaLlave;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'TarjetasLLave');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.aTarjetaLlave), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.ValidaSecuencias(const EstacionID: Integer; const Secuencias: AnsiString): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'ValidaSecuencias');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('Secuencias', TypeInfo(AnsiString), Secuencias, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceFlotillas_Proxy.VehiculoProducto(const VehiculoID: Integer; const ProductoID: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'VehiculoProducto');
    __Message.Write('VehiculoID', TypeInfo(Integer), VehiculoID, []);
    __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.REDConsumo(const EstacionID: Integer; const Serie: AnsiString; const TicketID: Integer; const AutorizacionID: Integer; 
                                            const Importe: Double; const ProductoID: Integer): TDatosTicketConsumo;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'REDConsumo');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('TicketID', TypeInfo(Integer), TicketID, []);
    __Message.Write('AutorizacionID', TypeInfo(Integer), AutorizacionID, []);
    __Message.Write('Importe', TypeInfo(Double), Importe, []);
    __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TDatosTicketConsumo), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.REDAutorizaciones(const EstacionID: Integer; const BombaID: Integer): AAutorizacion;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'REDAutorizaciones');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.AAutorizacion), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.PrecioProducto(const ProductoID: Integer): Double;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'PrecioProducto');
    __Message.Write('ProductoID', TypeInfo(Integer), ProductoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Double), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.TiempoAire(const EstacionID: Integer; const BombaID: Integer; const Telefono: AnsiString; const ProveedorID: Integer; 
                                            const Importe: Double; const CajaID: Integer; const LLave: AnsiString): TTiempoAire;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'TiempoAire');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Write('Telefono', TypeInfo(AnsiString), Telefono, []);
    __Message.Write('ProveedorID', TypeInfo(Integer), ProveedorID, []);
    __Message.Write('Importe', TypeInfo(Double), Importe, []);
    __Message.Write('CajaID', TypeInfo(Integer), CajaID, []);
    __Message.Write('LLave', TypeInfo(AnsiString), LLave, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TTiempoAire), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.CashBack(const EstacionID: Integer; const BombaID: Integer; const Terminal: AnsiString; const Track1: AnsiString; 
                                          const Track2: AnsiString; const Importe: Double; const LLave: AnsiString; const CajaID: Integer): TBancaria;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'CashBack');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Write('Terminal', TypeInfo(AnsiString), Terminal, []);
    __Message.Write('Track1', TypeInfo(AnsiString), Track1, []);
    __Message.Write('Track2', TypeInfo(AnsiString), Track2, []);
    __Message.Write('Importe', TypeInfo(Double), Importe, []);
    __Message.Write('LLave', TypeInfo(AnsiString), LLave, []);
    __Message.Write('CajaID', TypeInfo(Integer), CajaID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TBancaria), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.DatosProducto(const ID: Integer): TProductoF;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'DatosProducto');
    __Message.Write('ID', TypeInfo(Integer), ID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TProductoF), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.IVAEstacion(const EstacionID: Integer): Double;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'IVAEstacion');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Double), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.DatosClienteOtros(const Tarjeta: AnsiString; const EstacionID: Integer): TDatosClienteOtros;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'DatosClienteOtros');
    __Message.Write('Tarjeta', TypeInfo(AnsiString), Tarjeta, []);
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TDatosClienteOtros), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceFlotillas_Proxy.ClasificacionCliente(const ClienteID: Integer; const Clasificacion: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'ClasificacionCliente');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('Clasificacion', TypeInfo(Integer), Clasificacion, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceFlotillas_Proxy.ClasificacionVehiculo(const VehiculoID: Integer; const Clasificacion: Integer);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'ClasificacionVehiculo');
    __Message.Write('VehiculoID', TypeInfo(Integer), VehiculoID, []);
    __Message.Write('Clasificacion', TypeInfo(Integer), Clasificacion, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.Clasificacion: Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'Clasificacion');
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.DatosVerifica(const VehiculoID: Integer): TDatosVerifica;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'DatosVerifica');
    __Message.Write('VehiculoID', TypeInfo(Integer), VehiculoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TDatosVerifica), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.DatosVerificaReferencia(const Referencia: AnsiString): TDatosVerifica;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'DatosVerificaReferencia');
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TDatosVerifica), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.Rendimiento(const EstacionID: Integer; const TicketID: Integer): Double;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'Rendimiento');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('TicketID', TypeInfo(Integer), TicketID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Double), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.DatosVerifone(const VehiculoID: Integer; const Referencia: AnsiString): TDatosVerifoneF;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'DatosVerifone');
    __Message.Write('VehiculoID', TypeInfo(Integer), VehiculoID, []);
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TDatosVerifoneF), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.CambiaNIP(const Referencia: AnsiString; const NIP: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'CambiaNIP');
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Write('NIP', TypeInfo(Integer), NIP, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.CambiaClienteConsumo(const EstacionID: Integer; const Ticket: Integer; const Serie: AnsiString; const ClienteID: Integer; 
                                                      const VehiculoID: Integer): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'CambiaClienteConsumo');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('Ticket', TypeInfo(Integer), Ticket, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('VehiculoID', TypeInfo(Integer), VehiculoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.CuponManual(const EstacionID: Integer; const TurnoID: Integer; const BombaID: Integer; const Barras: AnsiString): TCuponValido;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'CuponManual');
    __Message.Write('EstacionID', TypeInfo(Integer), EstacionID, []);
    __Message.Write('TurnoID', TypeInfo(Integer), TurnoID, []);
    __Message.Write('BombaID', TypeInfo(Integer), BombaID, []);
    __Message.Write('Barras', TypeInfo(AnsiString), Barras, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TCuponValido), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.GeneraFacturasXCliente(const ClienteID: Integer; const Productos: AnsiString; const FechaCorte: DateTime; const FechaContable: DateTime; 
                                                        const Serie: AnsiString; const aFolio: Integer; const EmpleadoID: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'GeneraFacturasXCliente');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('Productos', TypeInfo(AnsiString), Productos, []);
    __Message.Write('FechaCorte', TypeInfo(DateTime), FechaCorte, [paIsDateTime]);
    __Message.Write('FechaContable', TypeInfo(DateTime), FechaContable, [paIsDateTime]);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('aFolio', TypeInfo(Integer), aFolio, []);
    __Message.Write('EmpleadoID', TypeInfo(Integer), EmpleadoID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.ValidaConsumo(const Consumo: TConsumo): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'ValidaConsumo');
    __Message.Write('Consumo', TypeInfo(LibraryFlotillas_Intf.TConsumo), Consumo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.ClienteCupon(const Barra: AnsiString): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'ClienteCupon');
    __Message.Write('Barra', TypeInfo(AnsiString), Barra, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.QuemarCupon_Manual(const Consumo: TConsumo; const Barras: AnsiString): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'QuemarCupon_Manual');
    __Message.Write('Consumo', TypeInfo(LibraryFlotillas_Intf.TConsumo), Consumo, []);
    __Message.Write('Barras', TypeInfo(AnsiString), Barras, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.GeneraFacturasXClienteCupones(const ClienteID: Integer; const Productos: AnsiString; const FechaCorte: DateTime; const FechaContable: DateTime; 
                                                               const EmpleadoID: Integer; const Serie: AnsiString; const aFolio: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'GeneraFacturasXClienteCupones');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Write('Productos', TypeInfo(AnsiString), Productos, []);
    __Message.Write('FechaCorte', TypeInfo(DateTime), FechaCorte, [paIsDateTime]);
    __Message.Write('FechaContable', TypeInfo(DateTime), FechaContable, [paIsDateTime]);
    __Message.Write('EmpleadoID', TypeInfo(Integer), EmpleadoID, []);
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('aFolio', TypeInfo(Integer), aFolio, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.DocumentosCupones(const ClienteID: Integer): TDocumentosCuponesArray;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'DocumentosCupones');
    __Message.Write('ClienteID', TypeInfo(Integer), ClienteID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TDocumentosCuponesArray), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.AroVehiculo(const Referencia: AnsiString): AnsiString;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'AroVehiculo');
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(AnsiString), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.DatosFacturaElectronica(const FacturaID: Integer; const GasolineroID: Integer): TFacturaElectronicaF;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'DatosFacturaElectronica');
    __Message.Write('FacturaID', TypeInfo(Integer), FacturaID, []);
    __Message.Write('GasolineroID', TypeInfo(Integer), GasolineroID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TFacturaElectronicaF), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

procedure TServiceFlotillas_Proxy.InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: Widestring; const SelloDigital: Widestring; 
                                                            const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString; 
                                                            const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'InsertaFacturaElectronica');
    __Message.Write('FacturaElectronicaID', TypeInfo(Integer), FacturaElectronicaID, []);
    __Message.Write('CadenaOriginal', TypeInfo(Widestring), CadenaOriginal, []);
    __Message.Write('SelloDigital', TypeInfo(Widestring), SelloDigital, []);
    __Message.Write('FacturaID', TypeInfo(Integer), FacturaID, []);
    __Message.Write('Vigencia', TypeInfo(Boolean), Vigencia, []);
    __Message.Write('Enviado', TypeInfo(Boolean), Enviado, []);
    __Message.Write('NoCertificado', TypeInfo(AnsiString), NoCertificado, []);
    __Message.Write('NoAprobacion', TypeInfo(AnsiString), NoAprobacion, []);
    __Message.Write('FechaAprobacion', TypeInfo(DateTime), FechaAprobacion, [paIsDateTime]);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.FolioActual2(const Serie: AnsiString; const folio: Integer): Integer;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'FolioActual2');
    __Message.Write('Serie', TypeInfo(AnsiString), Serie, []);
    __Message.Write('folio', TypeInfo(Integer), folio, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Integer), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.DatosMonedero(const FacturaID: Integer; const GasolineroID: Integer): TMonederoElectronico;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'DatosMonedero');
    __Message.Write('FacturaID', TypeInfo(Integer), FacturaID, []);
    __Message.Write('GasolineroID', TypeInfo(Integer), GasolineroID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TMonederoElectronico), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.CadenaOriginal(const FacturaID: Integer; const GasolineroID: Integer): TDataFacturaElectronicaF;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'CadenaOriginal');
    __Message.Write('FacturaID', TypeInfo(Integer), FacturaID, []);
    __Message.Write('GasolineroID', TypeInfo(Integer), GasolineroID, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TDataFacturaElectronicaF), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.GOBCHIP(const Referencia: AnsiString): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'GOBCHIP');
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.GuardaBitacoraGOB(const BitacoraGOB: TBitacoraGOB): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'GuardaBitacoraGOB');
    __Message.Write('BitacoraGOB', TypeInfo(LibraryFlotillas_Intf.TBitacoraGOB), BitacoraGOB, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.GuardarConsumoGOB(const Consumo: TConsumo): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'GuardarConsumoGOB');
    __Message.Write('Consumo', TypeInfo(LibraryFlotillas_Intf.TConsumo), Consumo, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.DatosUnidadesGOB(const TARJETA: AnsiString): TUnidadesGOB;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'DatosUnidadesGOB');
    __Message.Write('TARJETA', TypeInfo(AnsiString), TARJETA, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TUnidadesGOB), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.EnviaDatosFacturaGOB(const DatosFacturaEnviaGOB: TEnviaDatosFacturaGOB): Boolean;
begin
  try
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'EnviaDatosFacturaGOB');
    __Message.Write('DatosFacturaEnviaGOB', TypeInfo(LibraryFlotillas_Intf.TEnviaDatosFacturaGOB), DatosFacturaEnviaGOB, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(Boolean), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

function TServiceFlotillas_Proxy.AutorizaGOB(const Referencia: AnsiString): TAutorizaGOB;
begin
  try
    result := nil;
    __Message.InitializeRequestMessage(__TransportChannel, 'LibraryFlotillas', __InterfaceName, 'AutorizaGOB');
    __Message.Write('Referencia', TypeInfo(AnsiString), Referencia, []);
    __Message.Finalize;

    __TransportChannel.Dispatch(__Message);

    __Message.Read('Result', TypeInfo(LibraryFlotillas_Intf.TAutorizaGOB), result, []);
  finally
    __Message.UnsetAttributes(__TransportChannel);
    __Message.FreeStream;
  end
end;

initialization
  RegisterROClass(TLoginInfoF);
  RegisterROClass(TOpcionF);
  RegisterROClass(TDatosFactura);
  RegisterROClass(TFactura);
  RegisterROClass(TDetalleFactura);
  RegisterROClass(TDocumentosConSaldo);
  RegisterROClass(TCliente);
  RegisterROClass(TParametrosF);
  RegisterROClass(TDetalleCupon);
  RegisterROClass(TReporteF);
  RegisterROClass(TCuponValido);
  RegisterROClass(TConsumo);
  RegisterROClass(TAutorizacion);
  RegisterROClass(TAutoriza);
  RegisterROClass(TTarjeta);
  RegisterROClass(TMovimiento);
  RegisterROClass(TSaldoDocumento);
  RegisterROClass(TDatosVehiculo);
  RegisterROClass(TTarjetaLLave);
  RegisterROClass(TBancaria);
  RegisterROClass(TGeneraCupon);
  RegisterROClass(TDatosTicketConsumo);
  RegisterROClass(TProductoF);
  RegisterROClass(TDatosClienteOtros);
  RegisterROClass(TTiempoAire);
  RegisterROClass(TDatosVerifica);
  RegisterROClass(TDatosVerifoneF);
  RegisterROClass(TConfirmaEnvioF);
  RegisterROClass(TFacturaElectronicaF);
  RegisterROClass(TFacturaElectronicaDetalleImporteF);
  RegisterROClass(TFacturaElectronicaDetalleImpuestosF);
  RegisterROClass(TDocumentoCupones);
  RegisterROClass(TMonederoElectronico);
  RegisterROClass(TConceptoEstadodeCuentaCombustible);
  RegisterROClass(TImpuestoConceptoEstadodeCuentaCombustible);
  RegisterROClass(TDataFacturaElectronicaF);
  RegisterROClass(TBitacoraGOB);
  RegisterROClass(TUnidadesGOB);
  RegisterROClass(TEnviaDatosFacturaGOB);
  RegisterROClass(TAutorizaGOB);
  RegisterROClass(ArrayOpcionF);
  RegisterROClass(ATDetalleFactura);
  RegisterROClass(TDocumentosConSaldoArray);
  RegisterROClass(ATDetalleCupon);
  RegisterROClass(aConsumo);
  RegisterROClass(aTarjetaLlave);
  RegisterROClass(AGeneraCupon);
  RegisterROClass(AAutorizacion);
  RegisterROClass(AProductoF);
  RegisterROClass(ATFacturaElectronicaDetalleImportes);
  RegisterROClass(ATFacturaElectronicaDetalleImpuestos);
  RegisterROClass(TDocumentosCuponesArray);
  RegisterROClass(AConceptoEstadodeCuentaCombustible);
  RegisterROClass(AImpuestoConceptoEstadodeCuentaCombustible);
  RegisterProxyClass(IServiceFlotillas_IID, TServiceFlotillas_Proxy);


finalization
  UnregisterROClass(TLoginInfoF);
  UnregisterROClass(TOpcionF);
  UnregisterROClass(TDatosFactura);
  UnregisterROClass(TFactura);
  UnregisterROClass(TDetalleFactura);
  UnregisterROClass(TDocumentosConSaldo);
  UnregisterROClass(TCliente);
  UnregisterROClass(TParametrosF);
  UnregisterROClass(TDetalleCupon);
  UnregisterROClass(TReporteF);
  UnregisterROClass(TCuponValido);
  UnregisterROClass(TConsumo);
  UnregisterROClass(TAutorizacion);
  UnregisterROClass(TAutoriza);
  UnregisterROClass(TTarjeta);
  UnregisterROClass(TMovimiento);
  UnregisterROClass(TSaldoDocumento);
  UnregisterROClass(TDatosVehiculo);
  UnregisterROClass(TTarjetaLLave);
  UnregisterROClass(TBancaria);
  UnregisterROClass(TGeneraCupon);
  UnregisterROClass(TDatosTicketConsumo);
  UnregisterROClass(TProductoF);
  UnregisterROClass(TDatosClienteOtros);
  UnregisterROClass(TTiempoAire);
  UnregisterROClass(TDatosVerifica);
  UnregisterROClass(TDatosVerifoneF);
  UnregisterROClass(TConfirmaEnvioF);
  UnregisterROClass(TFacturaElectronicaF);
  UnregisterROClass(TFacturaElectronicaDetalleImporteF);
  UnregisterROClass(TFacturaElectronicaDetalleImpuestosF);
  UnregisterROClass(TDocumentoCupones);
  UnregisterROClass(TMonederoElectronico);
  UnregisterROClass(TConceptoEstadodeCuentaCombustible);
  UnregisterROClass(TImpuestoConceptoEstadodeCuentaCombustible);
  UnregisterROClass(TDataFacturaElectronicaF);
  UnregisterROClass(TBitacoraGOB);
  UnregisterROClass(TUnidadesGOB);
  UnregisterROClass(TEnviaDatosFacturaGOB);
  UnregisterROClass(TAutorizaGOB);
  UnregisterROClass(ArrayOpcionF);
  UnregisterROClass(ATDetalleFactura);
  UnregisterROClass(TDocumentosConSaldoArray);
  UnregisterROClass(ATDetalleCupon);
  UnregisterROClass(aConsumo);
  UnregisterROClass(aTarjetaLlave);
  UnregisterROClass(AGeneraCupon);
  UnregisterROClass(AAutorizacion);
  UnregisterROClass(AProductoF);
  UnregisterROClass(ATFacturaElectronicaDetalleImportes);
  UnregisterROClass(ATFacturaElectronicaDetalleImpuestos);
  UnregisterROClass(TDocumentosCuponesArray);
  UnregisterROClass(AConceptoEstadodeCuentaCombustible);
  UnregisterROClass(AImpuestoConceptoEstadodeCuentaCombustible);
  UnregisterProxyClass(IServiceFlotillas_IID);

end.
