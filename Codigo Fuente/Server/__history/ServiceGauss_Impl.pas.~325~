unit ServiceGauss_Impl;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ This is where you are supposed to code the implementation of your objects. }
{----------------------------------------------------------------------------}

{$I Remobjects.inc}

interface

uses
  {vcl:} Classes, SysUtils,
  {Data Abstract:} uDADataTable, uDABinAdapter, uDAInterfaces, uDADataStreamer,
  {RemObjects:} uROXMLIntf, uROClientIntf, uROTypes, uROServer, uROServerIntf, uROSessions,
  {Required:} uRORemoteDataModule,
  {Ancestor Implementation:} DataAbstractService_Impl,
  {Used RODLs:} DataAbstract4_Intf,
  {Generated:} LibraryGauss_Intf, uDABin2DataStreamer,
  uDAScriptingProvider, uDABusinessProcessor, uDAClasses,
  {FACTURAELECT}FCTELECT;

type
  { TServiceGauss }
  TServiceGauss = class(TDataAbstractService, IServiceGauss)
    bpReporte: TDABusinessProcessor;
    DataStreamer: TDABin2DataStreamer;
    bpMateriaDispinibilidad: TDABusinessProcessor;
    bpCalificaAlumnosActuales: TDABusinessProcessor;
    bpCalificacionesInscripcion: TDABusinessProcessor;
    bpPagos: TDABusinessProcessor;
    bpvwHistorialAlumno: TDABusinessProcessor;
    Schema: TDASchema;
    spCalificacion: TDABusinessProcessor;
  private
    function IEPS(ProductoID: Integer): Real;
    procedure CalculaIEPS(var Datos: TDatosFactura);
  protected
    { IServiceGauss methods }
    function AbreDataSetReportes(const SQL: AnsiString; const Parametros: TParametrosF): Binary;
    function BuscarReporte(const Nombre: AnsiString): TReporteF;
    function DatosFactura(const Folio: Integer; const Serie: AnsiString): Boolean;
    function Fecha: DateTime;
    function Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
    procedure GuardaDatosFactura(const DatosFactura: TDatosFactura);
    function Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfoF;
    function ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const FolioNew: Integer): AnsiString;
    function DatosFacturaElectronica(const FacturaID: Integer): TFacturaElectronicaF;
    procedure InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: Widestring; const SelloDigital: Widestring; 
                                        const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString; 
                                        const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
    function FolioActual2(const Serie: AnsiString; const folio: Integer): Integer;
    procedure GuardaAccesos(const UsuarioID: Integer; const Lista: String);
    function IniciaCiclo(const IDCICLO: AnsiString): Boolean;
    function EliminaMaestroDisponibilidad(const IDMAESTRODISPONIBILIDAD: Integer): Boolean;
    function EliminaMateriaMaestro(const IDMAESTRO: Integer; const IDMATERIA: Integer): Boolean;
    function DragPagoMateria(const PAGOMATERIA: Integer; const IDGRUPOTARGET: Integer; const IDGRUPOSOURCE: Integer): Boolean;
    function ActualizaSubTipoPago(const IDTIPOPAGO: Integer; const IDSUBTIPOPAGO: Integer): Boolean;
    function EliminaPago(const idSubtipoPago: Integer; const status: AnsiString; const idCiclos: Integer; const idGrupo: Integer): Boolean;
    function EliminaPagoCaja(const idSubtipoPago: Integer; const status: AnsiString; const idCiclos: Integer; const idGrupo: Integer): Boolean;
    function InsertaCaja(const Observaciones, TipoPago: AnsiString; const idEmpleado: Integer): Integer;
    function LiquidaPago(const INTERES: Double; const IDEMPLEADO: Integer; const IDPAGO: Integer): Boolean;
    function DividePago(const idPago: Integer; const idEmpleado: Integer; const Importes: Double; const Interes: Double): Integer;
    function InsertaPagoCaja(const IDPAGO: Integer; const IDCAJA: Integer): Boolean;
    function AplicaCalificacion(const Calificacion: Double; const Faltas: Integer; const idmaterias: Integer; const idhistorialalumno: Integer;
                                const idhistorialgrupo: Integer; const fecha: DateTime; const idtipocalificacion: Integer; const califAux2: Double;
                                const califAux1: Double): Boolean;
    function HistorialAlumnoDEL(const IDHISTORIALALUMNO: Integer): Boolean;
    function BecaDescuento(const IDHISTORIALALUMNO: Integer; const BECA: Double; const DESCUENTO: Double): Boolean;
    function InsertaHistorialAlumno(const IDHISTORIALALUMNO: Integer; const IDHISTORIALGRUPO: Integer; const IDALUMNO: Integer; const DOCUMENTOSFALTANTES: AnsiString; 
                                    const BECA: Double; const DESCUENTO: Double): Boolean;
    function CambioGrupo(const IDHISTORIALALUMNO: Integer; const IDHISTORIALGRUPO: Integer; const DOCUMENTOSFALTANTES: AnsiString;
                         const BECA: Double; const DESCUENTO: Double): Boolean;
    function TipoCalificacion: Integer;
    function DatosAlumno(const AlumnoID: Integer): TDatos;
    function DatosMaestro(const MaestroID: Integer): TDatos;
    function PagoBanco(const FECHAPAGO: DateTime; const IDEMPLEADO: Integer; const IDPAGO: Integer; const MONTO: Double): Integer;
    function PrecioProducto(const ProductoID: Integer): Double;
    function FolioActual(const Campo: AnsiString; const Serie: AnsiString): Integer;
    function ValidaFolioFactura(const Serie: string; const Folio: Integer): Boolean;
    procedure GuardarDatosFactura(const DatosFactura: TDatosFactura);
    function CadenaOriginal(const FacturaID: Integer): TDataFacturaElectronicaF;
  end;

implementation

{$R *.dfm}
uses
  {Generated:} LibraryGauss_Invk, fServerDataModule, UtileriasComun;

procedure Create_ServiceGauss(out anInstance : IUnknown);
begin
  anInstance := TServiceGauss.Create(nil);
end;

{ ServiceGauss }
function TServiceGauss.AbreDataSetReportes(const SQL: AnsiString; const Parametros: TParametrosF): Binary;
var
  DataSet: IDADataset;
  Aux: TStrings;
procedure AgregaParametro(Nombre: String; Tipo: TDADataType);
begin
  with DataSet.Params.Add do
  begin
    Name:=Nombre;
    DataType:=Tipo;
  end;    // with
end;
begin
  Aux:=TStringList.Create;
  if  FileExists('DefaultGauss.dat') then
    Aux.LoadFromFile('DefaultGauss.dat');
  DataSet := Connection.NewDataset(Aux.Text + SQL, 'Reporte');
  Aux.Add(SQL);
  Aux.SaveToFile('SQL.txt');
  Aux.Free;
  AgregaParametro('FechaIni', datDateTime);
  AgregaParametro('FechaFin', datDateTime);
  AgregaParametro('Alumno', datInteger);
  AgregaParametro('AlumnoIni', datInteger);
  AgregaParametro('AlumnoFin', datInteger);
  AgregaParametro('Grupo', datInteger);
  AgregaParametro('Ciclo', datInteger);
  AgregaParametro('Maestro', datInteger);
  AgregaParametro('MaestroIni', datInteger);
  AgregaParametro('MaestroFin', datInteger);
  AgregaParametro('Nivel', datInteger);
  AgregaParametro('TipoPago', datInteger);
  AgregaParametro('TipoCalificacion', datInteger);
  AgregaParametro('Usuario', datInteger);
  AgregaParametro('Familia', datInteger);
  AgregaParametro('Valor1', datString);
  AgregaParametro('Status', datInteger);
  AgregaParametro('Serie', datString);
  AgregaParametro('Factura', datInteger);

  //DataSet.ParamByName('ProcesaTabla').AsInteger:=Byte(Pos('#CONSUMOS', UpperCase(SQL)) > 0);

  DataSet.ParamByName('FechaIni').AsDateTime:=Parametros.FechaIni;
  DataSet.ParamByName('FechaFin').AsDateTime:=Parametros.FechaFin;
  DataSet.ParamByName('Alumno').AsInteger:=Parametros.Alumno;
  DataSet.ParamByName('AlumnoIni').AsInteger:=Parametros.AlumnoIni;
  DataSet.ParamByName('AlumnoFin').AsInteger:=Parametros.AlumnoFin;
  DataSet.ParamByName('Grupo').AsInteger:=Parametros.Grupo;
  DataSet.ParamByName('Ciclo').AsInteger:=Parametros.Ciclo;
  DataSet.ParamByName('Maestro').AsInteger:=Parametros.Maestro;
  DataSet.ParamByName('MaestroIni').AsInteger:=Parametros.MaestroIni;
  DataSet.ParamByName('MaestroFin').AsInteger:=Parametros.MaestroFin;
  DataSet.ParamByName('Nivel').AsInteger:=Parametros.Nivel;
  DataSet.ParamByName('TipoPago').AsInteger:=Parametros.TipoPago;
  DataSet.ParamByName('TipoCalificacion').AsInteger:=Parametros.TipoCalificacion;
  DataSet.ParamByName('Usuario').AsInteger:=Parametros.Usuario;
  DataSet.ParamByName('Familia').AsInteger:=Parametros.Familia;
  DataSet.ParamByName('Valor1').AsInteger:=Parametros.Valor1;
  DataSet.ParamByName('Status').AsInteger:=Parametros.Status;
  DataSet.ParamByName('Serie').AsString:=Parametros.Serie;
  DataSet.ParamByName('Factura').AsInteger:= Parametros.Factura;

  DataSet.Open;
  Result := Binary.Create;
  DataStreamer.WriteDataset(result, DataSet, [woSchema, woRows]);
  DataSet.Close;
end;

function TServiceGauss.ActualizaSubTipoPago(const IDTIPOPAGO,
  IDSUBTIPOPAGO: Integer): Boolean;
var
  cmd: IDASQLCommand;
begin
  Result:= False;
  cmd:=Schema.NewCommand(Connection, 'spActualizaSubTipoPago');
  cmd.ParamByName('IDTIPOPAGO').AsInteger:=IDTIPOPAGO;
  cmd.ParamByName('IDSUBTIPOPAGO').AsInteger:=IDSUBTIPOPAGO;
  cmd.Execute;
  Result:= True;
end;

function TServiceGauss.AplicaCalificacion(const Calificacion: Double;
  const Faltas, idmaterias, idhistorialalumno, idhistorialgrupo: Integer;
  const fecha: DateTime; const idtipocalificacion: Integer; const califAux2,
  califAux1: Double): Boolean;
var
  cmd: IDASQLCommand;
begin
  Result:= False;
  cmd:=Schema.NewCommand(Connection, 'spAplicaCalif');
  cmd.ParamByName('Calificacion').AsFloat:=Calificacion;
  cmd.ParamByName('Faltas').AsInteger:=Faltas;
  cmd.ParamByName('idmateria').AsInteger:=idmaterias;
  cmd.ParamByName('idhistorialalumno').AsInteger:=idhistorialalumno;
  cmd.ParamByName('idhistorialgrupo').AsInteger:=idhistorialgrupo;
  cmd.ParamByName('fecha').AsDateTime:=fecha;
  cmd.ParamByName('idtipocalificacion').AsInteger:=idtipocalificacion;
  cmd.ParamByName('califAux2').AsFloat:=califAux2;
  cmd.ParamByName('califAux1').AsFloat:=califAux1;
  cmd.Execute;
  Result:= True;
end;

function TServiceGauss.BecaDescuento(const IDHISTORIALALUMNO: Integer;
  const BECA, DESCUENTO: Double): Boolean;
var
  cmd: IDASQLCommand;
begin
  Result:= False;
  cmd:=Schema.NewCommand(Connection, 'spBecaDescuento');
  cmd.ParamByName('IDHISTORIALALUMNO').AsInteger:=IDHISTORIALALUMNO;
  cmd.ParamByName('BECA').AsFloat:=BECA;
  cmd.ParamByName('DESCUENTO').AsFloat:=DESCUENTO;
  cmd.Execute;
  Result:= True;
end;

function TServiceGauss.BuscarReporte(const Nombre: AnsiString): TReporteF;
var
  MiDataSet: IDADataSet;
begin
  Result:=nil;
  MiDataSet:=Schema.NewDataset(Connection, 'BuscarReporte');
  MiDataSet.ParamByName('Nombre').AsString:=UpperCase(Nombre);
  MiDataSet.Open;
  if not MiDataSet.IsEmpty then
  begin
    Result:=TReporteF.Create;
    Result.SQL1:=MiDataSet.FieldByName('SQL1').AsString;
    Result.SQL2:=MiDataSet.FieldByName('SQL2').AsString;
    Result.Template:=MiDataSet.FieldByName('Template').AsString;
    Result.CampoJoin:=MiDataSet.FieldByName('CampoJoin').AsString;
  end;
  MiDataSet.Close;
end;

function TServiceGauss.DatosAlumno(const AlumnoID: Integer): TDatos;
var
  MiDataSet: IDADataSet;
begin
  Result:=nil;
  MiDataSet:=Schema.NewDataset(Connection, 'DatosAlumno');
  MiDataSet.ParamByName('IDALUMNO').AsInteger:=AlumnoID;
  MiDataSet.Open;
  if not MiDataSet.IsEmpty then
  begin
    Result:=TDatos.Create;
    Result.Nombre:=MiDataSet.FieldByName('Nombre').AsString;
    Result.CODIGO:=MiDataSet.FieldByName('NUMCONTROL').AsString;
    Result.DIRECCION:=MiDataSet.FieldByName('DIRECCION').AsString;
    Result.IMSS :='';
  end;
  MiDataSet.Close;
end;

function TServiceGauss.DatosFactura(const Folio: Integer; const Serie: AnsiString): Boolean;
begin
end;

function TServiceGauss.Fecha: DateTime;
begin
  Result:=Now;
end;

function TServiceGauss.Folio(const Campo: AnsiString; const Serie: AnsiString): Integer;
var
  DataSet: IDADataset;
begin
  DataSet:=Schema.NewDataset(Connection, 'spFolio');
  DataSet.ParamByName('Campo').AsString:=Campo;
  DataSet.ParamByName('Serie').AsString:=Serie;
  DataSet.Open;
  Result:=DataSet.FieldByName('Folio').AsInteger;
  DataSet.Close;
end;

procedure TServiceGauss.GuardaAccesos(const UsuarioID: Integer;
  const Lista: String);
var
  I: Integer;
  MiLista: TStrings;
  cmdElimina: IDASQLCommand;
  cmdInserta: IDASQLCommand;
begin
  cmdElimina:=Schema.NewCommand(Connection, 'AccesosEliminar');
  cmdElimina.ParamByName('UsuarioID').AsInteger:=UsuarioID;
  cmdElimina.Execute;
  cmdInserta:=Schema.NewCommand(Connection, 'AccesosInsertar');
  cmdInserta.ParamByName('UsuarioID').AsInteger:=UsuarioID;
  MiLista:=TStringList.Create;
  MiLista.Text:=Lista;
  try
    for I := 0 to MiLista.Count - 1 do
    begin
      cmdInserta.ParamByName('OpcionID').AsString:=MiLista[I];
      cmdInserta.Execute;
    end;
  finally
    MiLista.Free;
  end;
end;

procedure TServiceGauss.GuardaDatosFactura(const DatosFactura: TDatosFactura);
begin
end;

procedure TServiceGauss.GuardarDatosFactura(const DatosFactura: TDatosFactura);
var
  cmdFactura:IDASQLCommand;
  cmdDetalles:IDASQLCommand;
  dsConfiguracion: IDADataSet;

  I:integer;
  J:integer;
  Datos: TDatosFactura;

  DFacturaElectronica: LibraryGauss_Intf.TDataFacturaElectronicaF;
begin
  Datos:=TDatosFactura.Create;
  try
    Datos.Assign(DatosFactura);
    CalculaIEPS(Datos);
    cmdFactura:=Schema.NewCommand(Connection,'spInsertarFactura') ;
    cmdFactura.ParamByName('FacturaID').AsInteger:=Datos.Factura.FacturaID;
    cmdFactura.ParamByName('Folio').AsInteger:=Folio('FolioFactura',Datos.Factura.Serie);
    cmdFactura.ParamByName('Serie').AsString:=Datos.Factura.Serie;
    cmdFactura.ParamByName('Fecha').AsDateTime:=Datos.Factura.Fecha;
    cmdFactura.ParamByName('Ejercicio').AsString:=FormatDateTime('yyyy', Datos.Factura.Fecha);
    cmdFactura.ParamByName('Periodo').AsString:=FormatDateTime('m', Datos.Factura.Fecha);
    cmdFactura.ParamByName('Dia').AsString:=FormatDateTime('d', Datos.Factura.Fecha);
    cmdFactura.ParamByName('SubTotal').AsFloat:=Datos.Factura.Subtotal;
    cmdFactura.ParamByName('Impuesto').AsFloat:=Datos.Factura.Impuesto;
    cmdFactura.ParamByName('Total').AsFloat:=Datos.Factura.Total;
    cmdFactura.ParamByName('ImpuestoPorcentaje').AsFloat:=Datos.Factura.ImpuestoPorcentaje;
    cmdFactura.ParamByName('ClienteID').AsInteger:=Datos.Factura.ClienteID;
    cmdFactura.ParamByName('FormaPagoID').AsInteger:=Datos.Factura.FormaPagoID;
    cmdFactura.ParamByName('UsuarioID').AsInteger:=Datos.Factura.UsuarioID;
    cmdFactura.Execute;

    cmdDetalles:=Schema.NewCommand(Connection,'spInsertarDetalleFactura') ;
    for I := 0 to Datos.Detalles.Count - 1 do
    begin
      cmdDetalles.ParamByName('DetalleFacturaID').AsInteger:=Folio('DetalleFactura','');
      cmdDetalles.ParamByName('Cantidad').AsFloat:=Datos.Detalles.Items[I].Cantidad;
      cmdDetalles.ParamByName('Precio').AsFloat:=Datos.Detalles.Items[I].Precio;
      cmdDetalles.ParamByName('Importe').AsFloat:=Datos.Detalles.Items[I].Importe;
      cmdDetalles.ParamByName('ItemNo').AsInteger:=I;
      cmdDetalles.ParamByName('FacturaID').AsInteger:=Datos.Factura.FacturaID;
      cmdDetalles.ParamByName('ProductoID').AsInteger:=Datos.Detalles.Items[I].ProductoID;
      cmdDetalles.Execute;
    end;
  finally
    ///////////FACTURA ELECTRONICA//////////////////////////////////////////////
    dsConfiguracion:=Schema.NewDataset(Connection, 'dbo CONFIGURACION');
    dsConfiguracion.Open;

    DFacturaElectronica:=  LibraryGauss_Intf.TDataFacturaElectronicaF.Create();
    DFacturaElectronica.Assign(CadenaOriginal(Datos.Factura.FacturaID));
    InsertaFacturaElectronica(Folio('FacturaElectronicaID',''),
                              DFacturaElectronica.CadenaOriginal,
                              DFacturaElectronica.SelloDigital,
                              Datos.Factura.FacturaID,
                              True,False,
                              dsConfiguracion.FieldByName('NOCERTIFICADO').AsString,
                              dsConfiguracion.FieldByName('NOAPROBACION').AsString,
                              dsConfiguracion.FieldByName('ANOAPROBACION').AsDateTime);
    ////////////////////////////////////////////////////////////////////////////
    Datos.Free;
  end;
end;

function TServiceGauss.HistorialAlumnoDEL(
  const IDHISTORIALALUMNO: Integer): Boolean;
var
  cmd: IDASQLCommand;
begin
  Result:= False;
  cmd:=Schema.NewCommand(Connection, 'spHistorialAlumnoDel');
  cmd.ParamByName('IDHISTORIALALUMNO').AsInteger:=IDHISTORIALALUMNO;
  cmd.Execute;
  Result:= True;
end;

function TServiceGauss.LiquidaPago(const INTERES: Double; const IDEMPLEADO,
  IDPAGO: Integer): Boolean;
var
  cmd: IDASQLCommand;
begin
  Result:= False;
  cmd:=Schema.NewCommand(Connection, 'spLiquidaPago');
  cmd.ParamByName('INTERES').AsFloat:=INTERES;
  cmd.ParamByName('IDEMPLEADO').AsInteger:=IDEMPLEADO;
  cmd.ParamByName('IDPAGO').AsInteger:=IDPAGO;
  cmd.Execute;
  Result:= True;
end;

function TServiceGauss.Login(const Usuario: AnsiString; const Clave: AnsiString): TLoginInfoF;
var
  DataSet, Permisos: IDADataSet;
begin
  Result:=TLoginInfoF.Create;
  DataSet:=Schema.NewDataset(Connection, 'spValidaUsuario');
  DataSet.ParamByName('Usuario').AsString:=Usuario;
  DataSet.ParamByName('Clave').AsString:=Clave;
  DataSet.Open;
  if not DataSet.IsEmpty then
  begin
    Result.Valida:=True;
    Result.EmpleadoID:=DataSet.FieldByName('IDEMPLEADO').AsInteger;
    Result.NombreEmpleado:=DataSet.FieldByName('Nombre').AsString;
    Permisos:=Schema.NewDataset(Connection, 'spAccesos');
    Permisos.ParamByName('UsuarioID').AsInteger:=Result.EmpleadoID;
    Permisos.Open;
    while not Permisos.EOF do
    begin
      with Result.Accesos.Add do
      begin
        OpcionID:=Permisos.FieldByName('OpcionID').AsInteger;
        Nombre:=Permisos.FieldByName('Descripcion').AsString;
      end;
      Permisos.Next;
    end;
    Permisos.Close;
  end
  else
  begin
    Result.Valida:=False;
    Result.EmpleadoID:=0;
    Result.NombreEmpleado:='';
  end;
  DataSet.Close;
end;

function TServiceGauss.ModificarFolioActual(const Campo: AnsiString; const Serie: AnsiString; const FolioNew: Integer): AnsiString;
begin
end;

function TServiceGauss.PagoBanco(const FECHAPAGO: DateTime; const IDEMPLEADO,
  IDPAGO: Integer; const MONTO: Double): Integer;
var
  MiDataSet: IDADataSet;
begin
  Result:=-1;
  MiDataSet:=Schema.NewDataset(Connection, 'spPagoBanco');
  MiDataSet.ParamByName('FECHAPAGO').AsDateTime:=FECHAPAGO;
  MiDataSet.ParamByName('IDEMPLEADO').AsInteger:=IDEMPLEADO;
  MiDataSet.ParamByName('IDPAGO').AsInteger:=IDPAGO;
  MiDataSet.ParamByName('MONTO').AsFloat:=MONTO;
  MiDataSet.Open;
  Result:= MiDataSet.FieldByName('STATUS').AsInteger;
end;
function TServiceGauss.PrecioProducto(const ProductoID: Integer): Double;
var
  ds: IDADataSet;
begin
  try
    ds := Schema.NewDataset(Connection, 'spPrecioProducto');
    ds.ParamByName('ProductoID').AsInteger := ProductoID;
    ds.Open;
    Result := ds.FieldByName('PrecioVenta').AsFloat;
  finally
    ds.Close;
  end;
end;

function TServiceGauss.TipoCalificacion: Integer;
var
  DataSet: IDADataSet;
begin
  Result:=-1;
  DataSet:=Schema.NewDataset(Connection, 'spFolioTipoCalificacion');
  DataSet.Open;
  Result:= DataSet.FieldByName('IDTIPOCALIFICACION').AsInteger;
end;

function TServiceGauss.ValidaFolioFactura(const Serie: string; const Folio: Integer): Boolean;
var
  ds: IDADataset;
begin
  ds:=Schema.NewDataset(Connection, 'spValidaFolioFactura');
  ds.ParamByName('Serie').AsString:=Serie;
  ds.ParamByName('Folio').AsInteger:=Folio;
  ds.Open;
  Result:=ds.IsEmpty;
  ds.Close;
end;

function TServiceGauss.DatosFacturaElectronica(const FacturaID: Integer): TFacturaElectronicaF;
var
  ds1: IDADataSet;
  ds2: IDADataSet;
  ds3: IDADataSet;
  ds4: IDADataSet;
  ds5: IDADataSet;

  TOTImpuestos: Double;
begin
  /////
  Result:=TFacturaElectronicaF.Create();

  TOTImpuestos:=0;

  ds1:=Schema.NewDataset(Connection, 'spDatosCadena');
  ds1.ParamByName('FacturaID').AsInteger:=FacturaID;

  ds1.Open;

  ds5:=Schema.NewDataset(Connection, 'spDatosCadenaExpedidoEn');
  ds5.Open;

  while not (ds1.EOF) do
  begin

    if not(ds5.EOF) then
    begin
      Result.CalleExpedidoEn:= ds5.FieldByName('Domicilio').AsString;
      Result.NoExterioExpedidoEn:= ds5.FieldByName('NoExterior').AsString;
      Result.ColoniaExpedidoEn:= ds5.FieldByName('Colonia').AsString;
      Result.CodigoPostalExpedidoEn:= ds5.FieldByName('CodigoPostal').AsString;
      Result.LocalidadExpedidoEn:= ds5.FieldByName('Localidad').AsString;
      Result.MunicipioExpedidoEn:= ds5.FieldByName('Municipio').AsString;
      Result.EstadoExpedidoEn:= ds5.FieldByName('Estado').AsString;
      Result.PaisExpedidoEn:= ds5.FieldByName('Pais').AsString;
      Result.Sucursal:= ds5.FieldByName('Sucursal').AsBoolean;
    end else Result.Sucursal:= False;
    

    Result.Serie:= ds1.FieldByName('SERIE').AsString;
    Result.Folio:= ds1.FieldByName('FOLIO').AsString;
    Result.Fecha:= ds1.FieldByName('FECHA').AsString;
    Result.noAprobacion:= ds1.FieldByName('NOAPROBACION').AsString;
    Result.anoAprobacion:= ds1.FieldByName('ANOAPROBACION').AsString;
    Result.tipoComprobante:= ds1.FieldByName('FORMAPAGO').AsString;
    Result.formaDePago:= 'pago en una sola exhibicion';
    Result.SubTotal:= ds1.FieldByName('SUBTOTAL').AsString;
    Result.Total:= ds1.FieldByName('TOTAL').AsString;
    Result.RFCEmisor:= ds1.FieldByName('RFCEMISOR').AsString;
    Result.NOMEmpEmisor:= ds1.FieldByName('NOMEMPRESAEMISOR').AsString;
    Result.DireccionEm:= ds1.FieldByName('DOMEMISOR').AsString;
    Result.NOExteriorEM:= ds1.FieldByName('NOEXTERIOREMISOR').AsString;
    Result.ColoniaEmisor:= ds1.FieldByName('COLONIAEMISOR').AsString;
    Result.MunicipioEmisor:= ds1.FieldByName('MUNICIPIOEMISOR').AsString;
    Result.EstadoEmisor:= ds1.FieldByName('ESTADOEMISOR').AsString;
    Result.PaisEmisor:= ds1.FieldByName('PAISEMISOR').AsString;
    Result.CodigoPostalEmisor:= ds1.FieldByName('CODIGOPOSTALEMISOR').AsString;

    Result.RFCReceptor:= ds1.FieldByName('RFCRECEPTOR').AsString;
    Result.NombreReceptor:= ds1.FieldByName('NOMBREEMPRECEPTOR').AsString;
    Result.DomicilioReceptor:= ds1.FieldByName('DOMICILIORECEPTOR').AsString;
    Result.NoExteriorReceptor:= ds1.FieldByName('NOEXTERIORRECEPTOR').AsString;
    Result.ColoniaReceptor:= ds1.FieldByName('COLONIARECEPTOR').AsString;
    Result.LocalidadReceptor:= ds1.FieldByName('LOCALIDADRECEPTOR').AsString;
    Result.MunicipioReceptor:= ds1.FieldByName('MUNICIPIORECEPTOR').AsString;
    Result.EstadoReceptor:= ds1.FieldByName('ESTADORECEPTOR').AsString;
    Result.PaisReceptor:= ds1.FieldByName('PAISRECEPTOR').AsString;
    Result.CodigoPostalReceptor:= ds1.FieldByName('CODIGOPOSTALRECEPTOR').AsString;
    Result.email:= ds1.FieldByName('email').AsString;
    ds1.Next;
  end;

  ds2:=Schema.NewDataset(Connection, 'spDatosCadenaImportes');
  ds2.ParamByName('FacturaID').AsInteger:=FacturaID;
  ds2.Open;

  while not (ds2.EOF) do
  begin
    With Result.FacturaElectronicaDetalleImportes.Add do begin
      if ds2.FieldByName('ProductoID').AsInteger <= 3 then
         UnidadReceptor:= 'LTS'
      else
         UnidadReceptor:= 'UNI';

      CantidadReceptor:= FormatFloat('###0.00',(ds2.FieldByName('IMPORTE').AsFloat/
      strtofloat(FormatFloat('###0.00',ds2.FieldByName('PRECIO').AsFloat))));

      DescripcionReceptor:= ds2.FieldByName('DESCRIPCION').AsString;
      ValorUnitarioReceptor:= FormatFloat('###0.00',ds2.FieldByName('PRECIO').AsFloat);
      ImporteReceptor:= FormatFloat('###0.00',ds2.FieldByName('IMPORTE').AsFloat);
    end;
    ds2.Next;
  end;

      ds3:=Schema.NewDataset(Connection, 'spDatosCadenaImpuestosIEPS');
      ds3.ParamByName('FacturaID').AsInteger:=FacturaID;
      ds3.Open;

      ds4:=Schema.NewDataset(Connection, 'spDatosCadenaImpuestosIVA');
      ds4.ParamByName('FacturaID').AsInteger:=FacturaID;
      ds4.Open;

      while not (ds3.EOF) do
      begin
        if ds3.FieldByName('IEPS').AsFloat <> 0 then
        begin
           With Result.FacturaElectronicaDetalleImpuestos.Add do
           begin
                ImporteImpReceptor:= FormatFloat('###0.00',ds3.FieldByName('IEPS').AsFloat);
                TasaReceptor:= FormatFloat('###0.0000',ds3.FieldByName('TASAIEPS').AsFloat);
                ImpuestoReceptor:= 'IEPS';
                TOTImpuestos:= TOTImpuestos + ds3.FieldByName('IEPS').AsFloat;
                ds3.Next;
           end;
        end else ds3.Next;
      end;

      while not (ds4.EOF) do
      begin
        if ds4.FieldByName('IVA').AsFloat <> 0 then
        begin
           With Result.FacturaElectronicaDetalleImpuestos.Add do
           begin
                ImporteImpReceptor:= FormatFloat('###0.00',ds4.FieldByName('IVA').AsFloat);
                TasaReceptor:= FormatFloat('###0.0000',ds4.FieldByName('TASAIVA').AsFloat);
                ImpuestoReceptor:= 'IVA';
                TOTImpuestos:= TOTImpuestos + ds4.FieldByName('IVA').AsFloat;
               ds4.Next;
           end;
        end else ds4.Next;
      end;

  Result.TotalImpuesto:= FormatFloat('###0.0000',TOTImpuestos);
end;

function TServiceGauss.DatosMaestro(const MaestroID: Integer): TDatos;
var
  MiDataSet: IDADataSet;
begin
  Result:=nil;
  MiDataSet:=Schema.NewDataset(Connection, 'DatosMaestro');
  MiDataSet.ParamByName('IDMAESTRO').AsInteger:=MaestroID;
  MiDataSet.Open;
  if not MiDataSet.IsEmpty then
  begin
    Result:=TDatos.Create;
    Result.Nombre:=MiDataSet.FieldByName('Nombre').AsString;
    Result.CODIGO:=MiDataSet.FieldByName('CODIGO').AsString;
    Result.DIRECCION:=MiDataSet.FieldByName('DIRECCION').AsString;
    Result.IMSS :=MiDataSet.FieldByName('IMSS').AsString;
  end;
  MiDataSet.Close;
end;

function TServiceGauss.DividePago(const idPago, idEmpleado: Integer;
  const Importes, Interes: Double): Integer;
var
  cmd: IDASQLCommand;
  idPago2: Integer;
begin
  idPago2:= FOLIO('IDPAGO','');
  Result:= -1;
  cmd:=Schema.NewCommand(Connection, 'spDividePago');
  cmd.ParamByName('INTERES').AsFloat:=INTERES;
  cmd.ParamByName('IMPORTES').AsFloat:=Importes;
  cmd.ParamByName('idEmpleado').AsInteger:=IDEMPLEADO;
  cmd.ParamByName('idPago').AsInteger:=IDPAGO;
  cmd.ParamByName('idPago_2').AsInteger:= idPago2;
  cmd.Execute;
  Result:= idPago2;
end;
function TServiceGauss.DragPagoMateria(const PAGOMATERIA, IDGRUPOTARGET,
  IDGRUPOSOURCE: Integer): Boolean;
var
  cmd: IDASQLCommand;
begin
  Result:= False;
  cmd:=Schema.NewCommand(Connection, 'spDragPagoMateria');
  cmd.ParamByName('pagomateria').AsInteger:=PAGOMATERIA;
  cmd.ParamByName('idgrupotarget').AsInteger:=IDGRUPOTARGET;
  cmd.ParamByName('idgruposource').AsInteger:=IDGRUPOSOURCE;
  cmd.Execute;
  Result:= True;
end;

function TServiceGauss.EliminaMaestroDisponibilidad(
  const IDMAESTRODISPONIBILIDAD: Integer): Boolean;
var
  cmd: IDASQLCommand;
begin
  Result:= False;
  cmd:=Schema.NewCommand(Connection, 'Delete_dbo MAESTRODISPONIBILIDAD');
  cmd.ParamByName('OLD_IDMAESTRODISPONIBILIDAD').AsInteger:=IDMAESTRODISPONIBILIDAD;
  cmd.Execute;
  Result:= True;
end;

function TServiceGauss.EliminaMateriaMaestro(const IDMAESTRO,
  IDMATERIA: Integer): Boolean;
var
  cmd: IDASQLCommand;
begin
  Result:= False;
  cmd:=Schema.NewCommand(Connection, 'EliminaMateriaMaestro');
  cmd.ParamByName('IDMAESTRO').AsInteger:=IDMAESTRO;
  cmd.ParamByName('IDMATERIA').AsInteger:=IDMATERIA;
  cmd.Execute;
  Result:= True;
end;

function TServiceGauss.EliminaPago(const idSubtipoPago: Integer;
  const status: AnsiString; const idCiclos, idGrupo: Integer): Boolean;
var
  cmd: IDASQLCommand;
begin
  Result:= False;
  cmd:=Schema.NewCommand(Connection, 'spEliminaPago');
  cmd.ParamByName('idSubtipoPago').AsInteger:=idSubtipoPago;
  cmd.ParamByName('status').AsString:=status;
  cmd.ParamByName('idCiclo').AsInteger:=idCiclos;
  cmd.ParamByName('idGrupo').AsInteger:=idGrupo;
  cmd.Execute;
  Result:= True;
end;

function TServiceGauss.EliminaPagoCaja(const idSubtipoPago: Integer;
  const status: AnsiString; const idCiclos, idGrupo: Integer): Boolean;
var
  cmd: IDASQLCommand;
begin
  Result:= False;
  cmd:=Schema.NewCommand(Connection, 'spEliminaPagoCaja');
  cmd.ParamByName('idSubtipoPago').AsInteger:=idSubtipoPago;
  cmd.ParamByName('status').AsString:=status;
  cmd.ParamByName('idCiclo').AsInteger:=idCiclos;
  cmd.ParamByName('idGrupo').AsInteger:=idGrupo;
  cmd.Execute;
  Result:= True;
end;

function TServiceGauss.IEPS(ProductoID: Integer): Real;
var
  ds: IDADataset;
begin
  ds:=Schema.NewDataset(Connection, 'spIEPS');
  ds.ParamByName('ProductoID').AsInteger:=ProductoID;
  ds.Open;
  Result:=Decimales(ds.FieldByName('IEPS').AsFloat, 4);
  ds.Close;
end;

function TServiceGauss.IniciaCiclo(const IDCICLO: AnsiString): Boolean;
var
  cmd: IDASQLCommand;
begin
  Result:= False;
  cmd:=Schema.NewCommand(Connection, 'spInicioCiclo');
  cmd.ParamByName('IDCICLO').AsString:=IDCICLO;
  cmd.Execute;
  Result:= True;
end;

function TServiceGauss.InsertaCaja(const Observaciones, TipoPago: AnsiString;
  const idEmpleado: Integer): Integer;
var
  cmd: IDASQLCommand;
  IDCAJA: Integer;
begin
  Result:= -1;
  IDCAJA:= Folio('IDCAJA','');
  cmd:=Schema.NewCommand(Connection, 'spInsertaCaja');
  cmd.ParamByName('idCaja').AsInteger:= IDCAJA;
  cmd.ParamByName('Observaciones').AsString:=Observaciones;
  cmd.ParamByName('TipoPago').AsString:= TipoPago;
  cmd.ParamByName('idEmpleado').AsInteger:= idEmpleado;
  cmd.Execute;
  Result:= IDCAJA;
end;

procedure TServiceGauss.InsertaFacturaElectronica(const FacturaElectronicaID: Integer; const CadenaOriginal: Widestring; const SelloDigital: Widestring; 
                                                  const FacturaID: Integer; const Vigencia: Boolean; const Enviado: Boolean; const NoCertificado: AnsiString; 
                                                  const NoAprobacion: AnsiString; const FechaAprobacion: DateTime);
var
  cmd:IDASQLCommand;
begin
  cmd:=Schema.NewCommand(Connection, 'spInsertaFCTELECTRONICA');
  cmd.ParamByName('FacturaElectornicaID').AsInteger:= Folio('FacturaElectronicaID','');
  cmd.ParamByName('CadenaOriginal').AsWideString:= CadenaOriginal;
  cmd.ParamByName('SelloDigital').AsWideString:= SelloDigital;
  cmd.ParamByName('FacturaID').AsInteger:= FacturaID;
  cmd.ParamByName('Vigencia').AsBoolean:= Vigencia;
  cmd.ParamByName('Enviado').AsBoolean:= Enviado;
  cmd.ParamByName('NoCertificado').AsString:= NoCertificado;
  cmd.ParamByName('Noaprobacion').AsString:= NoAprobacion;
  cmd.ParamByName('FechaAprobacion').AsDateTime:= FechaAprobacion;

  cmd.Execute;
end;

function TServiceGauss.InsertaHistorialAlumno(const IDHISTORIALALUMNO,
  IDHISTORIALGRUPO, IDALUMNO: Integer; const DOCUMENTOSFALTANTES: AnsiString;
  const BECA, DESCUENTO: Double): Boolean;
var
  cmd: IDASQLCommand;
begin
  Result:= False;
  cmd:=Schema.NewCommand(Connection, 'spInsertHistorialAlumno');
  cmd.ParamByName('IDHISTORIALALUMNO').AsInteger:=IDHISTORIALALUMNO;
  cmd.ParamByName('IDHISTORIALGRUPO').AsInteger:=IDHISTORIALGRUPO;
  cmd.ParamByName('IDALUMNO').AsInteger:=IDALUMNO;
  cmd.ParamByName('DOCUMENTOSFALTANTES').AsString:=DOCUMENTOSFALTANTES;
  cmd.ParamByName('BECA').AsFloat:=BECA;
  cmd.ParamByName('DESCUENTO').AsFloat:=DESCUENTO;
  cmd.Execute;
  Result:= True;
end;

function TServiceGauss.InsertaPagoCaja(const IDPAGO, IDCAJA: Integer): Boolean;
var
  cmd: IDASQLCommand;
begin
  Result:= False;
  cmd:=Schema.NewCommand(Connection, 'spInsertPagoCaja');
  cmd.ParamByName('IDPAGO').AsInteger:=IDPAGO;
  cmd.ParamByName('IDCAJA').AsInteger:=IDCAJA;
  cmd.Execute;
  Result:= True;
end;

function TServiceGauss.FolioActual(const Campo, Serie: AnsiString): Integer;
var
  ds: IDADataSet;
begin
  ds:=Schema.NewDataset(Connection, 'spFolioActual');
  ds.ParamByName('Campo').AsString:=Campo;
  ds.ParamByName('Serie').AsString:=Serie;
  ds.Open;
  Result:=ds.FieldByName('Folio').AsInteger;
  ds.Close;
end;

function TServiceGauss.FolioActual2(const Serie: AnsiString; const folio: Integer): Integer;
begin
end;

function TServiceGauss.CadenaOriginal(
  const FacturaID: Integer): TDataFacturaElectronicaF;
var
  CDOR: WideString;
  ind, idx: integer;

  FCTELECT: TFCTELECT;
  Certificado: TFECertificado;
  TIPO: TTipoDigestionOpenSSL;
  ds1: IDADataSet;
begin
  TIPO:= tdSHA1;
  ds1:=Schema.NewDataset(Connection, 'spDatosCertificado');
  //ds1.ParamByName('GasolineroID').AsInteger:= GasolineroID;
  ds1.Open;

  Result:= TDataFacturaElectronicaF.Create();
  Result.FacturaElectronicaF.Assign(DatosFacturaElectronica(FacturaID));
  if COPY(Result.FacturaElectronicaF.Fecha,1,4) = '2011' then TIPO:= tdSHA1;
  if COPY(Result.FacturaElectronicaF.Fecha,1,4) = '2010' then TIPO:= tdMD5;

  if Result.FacturaElectronicaF.FacturaElectronicaDetalleImportes.Count > 0 then
  begin
  //--CADENA ORIGINAL--//
  with Result.FacturaElectronicaF do begin
  CDOR:= '||2.0|'+Serie+'|'+Folio+'|'+
         Fecha+'|'+noAprobacion+'|'+
         anoAprobacion+'|'+'ingreso'+'|'+'pago en una sola exhibicion'+'|'+
         SubTotal+'|'+Total+'|'+RFCEmisor+'|'+
         NomEmpEmisor+'|'+DireccionEm+'|'+
         NoExteriorEM+'|'+ColoniaEmisor+'|'+
         MunicipioEmisor+'|'+EstadoEmisor+'|'+
         PaisEmisor+'|'+CodigoPostalEmisor+'|'+
         RFCReceptor+'|'+NombreReceptor+'|'+
         DomicilioReceptor+'|'+NoExteriorReceptor+'|'+
         ColoniaReceptor+'|'+LocalidadReceptor+'|'+
         MunicipioReceptor+'|'+EstadoReceptor+'|'+
         PaisReceptor+'|'+CodigoPostalReceptor+'|';
         for ind:=0 to FacturaElectronicaDetalleImportes.Count - 1 do
         begin
             CDOR:= CDOR + FacturaElectronicaDetalleImportes.Items[ind].CantidadReceptor+'|'+
                    FacturaElectronicaDetalleImportes.Items[ind].UnidadReceptor+'|'+
                    FacturaElectronicaDetalleImportes.Items[ind].DescripcionReceptor+'|'+
                    FacturaElectronicaDetalleImportes.Items[ind].ValorUnitarioReceptor+'|'+
                    FacturaElectronicaDetalleImportes.Items[ind].ImporteReceptor+'|';
         end;
         for ind:=0 to FacturaElectronicaDetalleImpuestos.Count - 1 do
         begin
             CDOR:= CDOR + FacturaElectronicaDetalleImpuestos[ind].ImpuestoReceptor+'|'+
                    FacturaElectronicaDetalleImpuestos[ind].TasaReceptor+'|'+
                    FacturaElectronicaDetalleImpuestos[ind].ImporteImpReceptor+'|';
         end;
  CDOR:= CDOR + TotalImpuesto+'|';
  end;
  CDOR:= CDOR +'|';

  while AnsiPos('  ',CDOR)>0 do
        delete(CDOR,AnsiPos('  ',CDOR),1);
  while AnsiPOS('| |',CDOR)> 0 do
        delete(CDOR,AnsiPos('| |',CDOR)+1,1);

  Result.CadenaOriginal:= Trim(CDOR);

  Certificado.Ruta:= ds1.FieldByName('ArchivoCertificado').AsString;
  FCTELECT:= TFCTELECT.Create(ds1.FieldByName('ArchivoClavePrivada').AsString,
                              ds1.FieldByName('PasswordFCTELECT').AsString,
                              Result.CadenaOriginal,
                              TIPO,
                              Certificado);

  Result.SelloDigital:= FCTELECT.SelloDigital;
  Result.Certificado:= FCTELECT.CertificadoTexto;
  Result.NumCertificado:= FCTELECT.CertificadoSerial;
  end;
end;

procedure TServiceGauss.CalculaIEPS(var Datos: TDatosFactura);
var
  Aux, Impuesto: Double;
  SubTotal: Double;
  I: Integer;
begin
  SubTotal:=0;
  for I := 0 to Datos.Detalles.Count - 1 do
  begin
    Impuesto:=IEPS(Datos.Detalles[I].ProductoID);
    Aux:=Datos.Detalles[I].Precio - Impuesto;
    Aux:=Aux / (1 + (Datos.Factura.ImpuestoPorcentaje / 100));
    Aux:=Aux + Impuesto;
    Aux:=Decimales(Aux, 6);
    Datos.Detalles[I].Precio:=Aux;
    Datos.Detalles[I].Cantidad:=Decimales(Datos.Detalles[I].Cantidad, 4);
    Datos.Detalles[I].Importe:=Decimales(Aux * Datos.Detalles[I].Cantidad, 2);
    SubTotal:=SubTotal + Datos.Detalles[I].Importe;
  end;
  Datos.Factura.Total:=Decimales(Datos.Factura.Total, 2);
  Datos.Factura.Subtotal:=Decimales(SubTotal, 2);
  Datos.Factura.Impuesto:=Decimales(Datos.Factura.Total - SubTotal, 2);
end;

function TServiceGauss.CambioGrupo(const IDHISTORIALALUMNO,
  IDHISTORIALGRUPO: Integer; const DOCUMENTOSFALTANTES: AnsiString; const BECA,
  DESCUENTO: Double): Boolean;
var
  cmd: IDASQLCommand;
begin
  Result:= False;
  cmd:=Schema.NewCommand(Connection, 'spCambioGrupo');
  cmd.ParamByName('IDHISTORIALALUMNO').AsInteger:=IDHISTORIALALUMNO;
  cmd.ParamByName('IDHISTORIALGRUPO').AsInteger:=IDHISTORIALGRUPO;
  cmd.ParamByName('DOCUMENTOSFALTANTES').AsString:=DOCUMENTOSFALTANTES;
  cmd.ParamByName('BECA').AsFloat:=BECA;
  cmd.ParamByName('DESCUENTO').AsFloat:=DESCUENTO;
  cmd.Execute;
  Result:= True;
end;

var
  fClassFactory: IROClassFactory;
initialization
  fClassFactory := TROClassFactory.Create('ServiceGauss', Create_ServiceGauss, TServiceGauss_Invoker);

finalization
  UnRegisterClassFactory(fClassFactory);
  fClassFactory := nil;

end.
