unit ufrmNiveles;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, CustomModule, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, cxCustomData, cxStyles, cxTL, dxSkinsCore, dxSkinBlack,
  dxSkinBlue, dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide,
  dxSkinFoggy, dxSkinGlassOceans, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMoneyTwins,
  dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinPumpkin, dxSkinSeven,
  dxSkinSharp, dxSkinSilver, dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008,
  dxSkinsDefaultPainters, dxSkinValentine, dxSkinXmas2008Blue,
  dxSkinscxPCPainter, cxContainer, cxEdit, Menus, cxFilter, cxData,
  cxDataStorage, DB, cxDBData, cxGridLevel, cxGridCustomTableView,
  cxGridTableView, cxGridDBTableView, cxClasses, cxGridCustomView, cxGrid,
  Planner, ExtCtrls, cxGroupBox, WPCTRRich, WPTbar, WPRuler, WPRTEDefs,
  WPCTRMemo, cxImage, cxDBEdit, StdCtrls, cxButtons, cxRadioGroup, cxMaskEdit,
  cxDropDownEdit, cxCalendar, cxTextEdit, cxPC, cxInplaceContainer, cxTLData,
  cxDBTL, cxLookupEdit, cxDBLookupEdit, cxDBLookupComboBox, uDAInterfaces,
  uDADataTable, uDAScriptingProvider, uDAMemDataTable, uDACDSDataTable, Modules,
  LibraryIngresos_Intf;

type
  TfrmNiveles = class(TfrmCustomModule)
    Panel2: TPanel;
    Panel1: TPanel;
    dbtNivel: TcxDBTreeList;
    pgcNivel: TcxPageControl;
    cxTabSheet3: TcxTabSheet;
    Label1: TLabel;
    Label3: TLabel;
    Label2: TLabel;
    Label4: TLabel;
    cxDBTextEdit1: TcxDBTextEdit;
    cxDBTextEdit2: TcxDBTextEdit;
    cxDBTextEdit3: TcxDBTextEdit;
    cxDBTextEdit4: TcxDBTextEdit;
    cxTabSheet8: TcxTabSheet;
    cxTabSheet4: TcxTabSheet;
    cxTabSheet5: TcxTabSheet;
    cxDBTextEdit5: TcxDBTextEdit;
    Label5: TLabel;
    Label6: TLabel;
    cxDBTextEdit6: TcxDBTextEdit;
    Label7: TLabel;
    cxDBTextEdit7: TcxDBTextEdit;
    Label8: TLabel;
    cxDBTextEdit8: TcxDBTextEdit;
    Label9: TLabel;
    cxDBTextEdit9: TcxDBTextEdit;
    Label10: TLabel;
    cxDBLookupComboBox1: TcxDBLookupComboBox;
    Label11: TLabel;
    cxDBLookupComboBox2: TcxDBLookupComboBox;
    Label12: TLabel;
    cxDBLookupComboBox3: TcxDBLookupComboBox;
    Label13: TLabel;
    cxDBLookupComboBox4: TcxDBLookupComboBox;
    Label14: TLabel;
    cxDBLookupComboBox5: TcxDBLookupComboBox;
    Label15: TLabel;
    cxDBLookupComboBox6: TcxDBLookupComboBox;
    cdsNivel: TDAMemDataTable;
    dsNivel: TDADataSource;
    dbtNivelNombre: TcxDBTreeListColumn;
    cdsNiv: TDACDSDataTable;
    dsNiv: TDADataSource;
    cdsGrupo: TDACDSDataTable;
    dsGrupo: TDADataSource;
    cdsMateria: TDACDSDataTable;
    dsMateria: TDADataSource;
    cdsPago: TDACDSDataTable;
    dsPago: TDADataSource;
    cdsCatalogoMaterias: TDAMemDataTable;
    dsCatalogoMaterias: TDADataSource;
    cdsCatalogoMaestros: TDAMemDataTable;
    dsCatalagoMaestros: TDADataSource;
    cdsSubtipoPago: TDAMemDataTable;
    dsSubtipoPago: TDADataSource;
    cxButton1: TcxButton;
    procedure dbtNivelStartDrag(Sender: TObject; var DragObject: TDragObject);
    procedure dbtNivelMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure dbtNivelNodeChanged(Sender: TObject; ANode: TcxTreeListNode;
      AColumn: TcxTreeListColumn);
    procedure dbtNivelDragDrop(Sender, Source: TObject; X, Y: Integer);
    procedure cdsNivNewRecord(DataTable: TDADataTable);
    procedure cdsGrupoNewRecord(DataTable: TDADataTable);
    procedure cdsMateriaNewRecord(DataTable: TDADataTable);
    procedure cdsPagoNewRecord(DataTable: TDADataTable);
    procedure dbtNivelDragOver(Sender, Source: TObject; X, Y: Integer;
      State: TDragState; var Accept: Boolean);
    procedure FormCreate(Sender: TObject);
    procedure pgcNivelPageChanging(Sender: TObject; NewPage: TcxTabSheet;
      var AllowChange: Boolean);
    procedure cdsNivAfterEdit(DataTable: TDADataTable);
    procedure cxButton1Click(Sender: TObject);
  private
    { Private declarations }
    procedure ActionActualiza(Action: TBasicAction);
    procedure ActionNuevo(Action: TBasicAction);
    procedure ActionGuardar(Action: TBasicAction);
    procedure ActionEliminar(Action: TBasicAction);
  protected
    { -------------------- }
    procedure UpdateActionsState; override;
    procedure RegisterActions; override;
  public
    { Public declarations }
    Dragging : Boolean;
    CanDrag: Boolean;
    idCampoPadre: Integer;
    IDDrag: Integer;
    TipoDrag: Integer;
    PuedeCambiar: Boolean;
    idActualiza: Integer;
    procedure Actualiza(QRY : TDACDSDataTable; Valor1, Valor2: Integer);
    function NuevoID(Cad : String) : Integer;
  end;

var
  frmNiveles: TfrmNiveles;


implementation

Uses uDM, dmImagenes, dmActions;

{$R *.dfm}

procedure TfrmNiveles.ActionActualiza(Action: TBasicAction);
var
  id: Integer;
begin
  if idActualiza < 0 then
     id:= cdsNivel.FieldByName('ID').AsInteger
  else
     id:= cdsNivel.FieldByName('IDCAMPOPADRE').AsInteger;
  cdsNivel.Close;
  cdsNivel.Open;
  if idActualiza < 0 then
     cdsNivel.Locate('ID', id, [])
  else
     cdsNivel.Locate('IDCAMPO;IDCAMPOPADRE', VarArrayOf([idActualiza,id]), []);
     //cdsNivel.Locate('IDCAMPOPADRE',id, []);
  idActualiza:= -1;
end;

procedure TfrmNiveles.ActionEliminar(Action: TBasicAction);
begin
  case pgcNivel.ActivePageIndex of
     2:begin cdsMateria.Delete; cdsMateria.ApplyUpdates(); end;
     3:begin cdsPago.Delete; cdsPago.ApplyUpdates(); end;
  end;
  ActionActualiza(nil);
end;

procedure TfrmNiveles.ActionGuardar(Action: TBasicAction);
begin
  if (cdsNiv.State = dsEdit) or (cdsNiv.State = dsInsert) then
     begin cdsNiv.Post; cdsNiv.ApplyUpdates(); end;
  if (cdsGrupo.State = dsEdit) or (cdsGrupo.State = dsInsert) then
     begin cdsGrupo.Post; cdsGrupo.ApplyUpdates(); end;
  if (cdsMateria.State = dsEdit) or (cdsMateria.State = dsInsert) then
     begin cdsMateria.Post; cdsMateria.ApplyUpdates(); end;
  if (cdsPago.State = dsEdit) or (cdsPago.State = dsInsert) then
     begin cdsPago.Post; cdsPago.ApplyUpdates(); end;

  ActionActualiza(nil);
end;

procedure TfrmNiveles.ActionNuevo(Action: TBasicAction);
procedure Nuevo(QRY : TDACDSDataTable; Valor1, Valor2: Integer);
begin
    idCampoPadre:= cdsNivel.FieldByName('IDCAMPOPADRE').AsInteger;
    Actualiza(QRY, Valor1, Valor2);
    QRY.Append;
end;
begin
    if cdsNivel.FieldByName('TIPO').AsInteger < 0 then
    begin
       PuedeCambiar:= True;
       pgcNivel.ActivePageIndex:= Abs(cdsNivel.FieldByName('TIPO').AsInteger) - 1;
       PuedeCambiar:= False;
       case pgcNivel.ActivePageIndex of
         0:Nuevo(cdsNiv, 0, -1);
         1:Nuevo(cdsGrupo, 0, 0);
         2:Nuevo(cdsMateria, 0, 0);
         3:Nuevo(cdsPago, 0, 0);
       end;
    end;
    UpdateActionsState;
end;

procedure TfrmNiveles.Actualiza(QRY: TDACDSDataTable; Valor1, Valor2: Integer);
begin
  QRY.DisableControls;
  QRY.Close;
  
  Qry.ParamByName('idCampo').AsInteger:= Valor1;
  if Valor2 >= 0 then
     QRY.ParamByName('idCampoPadre').AsInteger:= Valor2;
  QRY.Open;
  QRY.EnableControls;
 end;

procedure TfrmNiveles.cdsGrupoNewRecord(DataTable: TDADataTable);
begin
  inherited;
  cdsGrupo.FieldByName('IDGRUPO').AsInteger:= DM.Servidor.Folio('IDGRUPO','');
  cdsGrupo.FieldByName('IDNIVEL').AsInteger:= idCampoPadre;
  cdsGrupo.FieldByName('CUPO').AsInteger:= 0;
  cxDBTextEdit5.SetFocus;
end;

procedure TfrmNiveles.cdsMateriaNewRecord(DataTable: TDADataTable);
begin
  inherited;
  cdsMateria.FieldByName('IDGRUPO').AsInteger:= idCampoPadre;
  cxDBLookupComboBox1.SetFocus;
end;

procedure TfrmNiveles.cdsNivAfterEdit(DataTable: TDADataTable);
begin
  inherited;
  UpdateActionsState;
end;

procedure TfrmNiveles.cdsNivNewRecord(DataTable: TDADataTable);
begin
  inherited;
  cdsNiv.FieldByName('IDNIVEL').AsInteger:= DM.Servidor.Folio('IDNIVEL','');
  cxDBTextEdit1.SetFocus;
end;

procedure TfrmNiveles.cdsPagoNewRecord(DataTable: TDADataTable);
begin
  inherited;
  cdsPago.FieldByName('IDGRUPO').AsInteger:= idCampoPadre;
  cxDBLookupComboBox5.SetFocus;
end;

procedure TfrmNiveles.cxButton1Click(Sender: TObject);
var
    Rep: LibraryGauss_Intf.TReporteF;
begin
  //-- envio del reporte--//
    Rep:=DM.Servidor.BuscarReporte('Catalogo de Niveles');
    DM.Parametros.Factura:=0;
    try
     DM.Imprimir(Rep.SQL1, Rep.SQL2, Rep.Template, 'IMPRIMIENDO...', Rep.CampoJoin, False)
    finally
     Rep.Free;
    end;
end;

procedure TfrmNiveles.dbtNivelDragDrop(Sender, Source: TObject; X, Y: Integer);
begin
  if DM.Mensaje('Confirmar', 27+TipoDrag, True, Confirmar, []) = ID_YES then
  begin
     DM.Servidor.DragPagoMateria(TipoDrag, cdsNivel.FieldByName('IDCAMPO').AsInteger, idDrag);
  end;

  ActionActualiza(nil);
  ActionActualiza(nil);
end;

procedure TfrmNiveles.dbtNivelDragOver(Sender, Source: TObject; X, Y: Integer;
  State: TDragState; var Accept: Boolean);
begin
  inherited;
  Accept:= (CanDrag)and(cdsNivel.FieldByName('TIPO').AsInteger = 1)and(cdsNivel.FieldByName('IDCAMPO').AsInteger <> IDDrag);
end;

procedure TfrmNiveles.dbtNivelMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  inherited;
  if Dragging then
  begin
    Dragging:= False;
  end;
  CanDrag:= False;
  dbtNivelNodeChanged(Nil,Nil,Nil);
end;

procedure TfrmNiveles.dbtNivelNodeChanged(Sender: TObject;
  ANode: TcxTreeListNode; AColumn: TcxTreeListColumn);
begin
  PuedeCambiar:= True;
  if not Dragging then
  begin
    if cdsNivel.FieldByName('TIPO').AsInteger >= 0 then
    begin
      pgcNivel.ActivePageIndex:= cdsNivel.FieldByName('TIPO').AsInteger;
      case pgcNivel.ActivePageIndex of
       0:Actualiza(cdsNiv, cdsNivel.FieldByName('IDCAMPO').AsInteger, -1);
       1:Actualiza(cdsGrupo, cdsNivel.FieldByName('IDCAMPO').AsInteger, -1);
       2:Actualiza(cdsMateria, cdsNivel.FieldByName('IDCAMPO').AsInteger,
                   cdsNivel.FieldByName('IDCAMPOPADRE').AsInteger);
       3:Actualiza(cdsPago, cdsNivel.FieldByName('IDCAMPO').AsInteger,
                   cdsNivel.FieldByName('IDCAMPOPADRE').AsInteger);
      end;
    end;
  end;
end;

procedure TfrmNiveles.dbtNivelStartDrag(Sender: TObject;
  var DragObject: TDragObject);
begin
  inherited;
  Dragging:= True;
  CanDrag:= cdsNivel.FieldByName('TIPO').AsInteger < -2;
  IDDrag:= cdsNivel.FieldByName('IDCAMPOPADRE').AsInteger;
  TipoDrag:= Abs(cdsNivel.FieldByName('TIPO').AsInteger) - 3;
end;

procedure TfrmNiveles.FormCreate(Sender: TObject);
begin
  inherited;
  cdsNivel.Close;
  cdsNivel.Open;

  cdsNiv.Close;
  cdsNiv.Open;

  cdsGrupo.Close;
  cdsGrupo.Open;

  cdsMateria.Close;
  cdsMateria.Open;

  cdsPago.Close;
  cdsPago.Open;

  cdsCatalogoMaterias.Close;
  cdsCatalogoMaterias.Open;

  cdsCatalogoMaestros.Close;
  cdsCatalogoMaestros.Open;

  cdsSubtipoPago.Close;
  cdsSubtipoPago.Open;

  Dragging:= False;
end;

function TfrmNiveles.NuevoID(Cad: String): Integer;
begin

end;

procedure TfrmNiveles.pgcNivelPageChanging(Sender: TObject;
  NewPage: TcxTabSheet; var AllowChange: Boolean);
begin
  inherited;
  AllowChange:= PuedeCambiar;
end;

procedure TfrmNiveles.RegisterActions;
begin
  inherited;
  RegisterAction(AppActions.actActualizar, ActionActualiza);
  RegisterAction(AppActions.actNuevo, ActionNuevo);
  RegisterAction(AppActions.actGuardar, ActionGuardar);
  RegisterAction(AppActions.actEliminar, ActionEliminar);
end;

procedure TfrmNiveles.UpdateActionsState;
begin
  inherited;
  dmAppActions.actGuardar.Enabled:= ((cdsNiv.State = dsEdit) or (cdsNiv.State = dsInsert)) or
                                    ((cdsGrupo.State = dsEdit) or (cdsGrupo.State = dsInsert)) or
                                    ((cdsMateria.State = dsEdit) or (cdsMateria.State = dsInsert)) or
                                    ((cdsPago.State = dsEdit) or (cdsPago.State = dsInsert));
  dmAppActions.actEliminar.Enabled:=(cdsNiv.State = dsBrowse) or
                                    (cdsGrupo.State = dsBrowse) or
                                    (cdsMateria.State = dsBrowse) or
                                    (cdsPago.State = dsBrowse);
end;

initialization
  ModuleInfoManager.RegisterModule('Niveles', TfrmNiveles);

end.
