unit ufrmMaestro;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ufrmCatalogo, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, dxSkinsCore, dxSkinBlack, dxSkinBlue, dxSkinCaramel,
  dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide, dxSkinFoggy, dxSkinGlassOceans,
  dxSkiniMaginary, dxSkinLilian, dxSkinLiquidSky, dxSkinLondonLiquidSky,
  dxSkinMcSkin, dxSkinMoneyTwins, dxSkinOffice2007Black, dxSkinOffice2007Blue,
  dxSkinOffice2007Green, dxSkinOffice2007Pink, dxSkinOffice2007Silver,
  dxSkinPumpkin, dxSkinSeven, dxSkinSharp, dxSkinSilver, dxSkinSpringTime,
  dxSkinStardust, dxSkinSummer2008, dxSkinsDefaultPainters, dxSkinValentine,
  dxSkinXmas2008Blue, dxSkinscxPCPainter, cxStyles, cxCustomData, cxFilter,
  cxData, cxDataStorage, cxEdit, DB, cxDBData, dxmdaset, uDAInterfaces,
  uDADataTable, uDAScriptingProvider, uDAMemDataTable, cxGridLevel, cxClasses,
  cxGridCustomView, cxGridCustomTableView, cxGridTableView, cxGridDBTableView,
  cxGrid, cxPC, cxContainer, Menus, WPCTRRich, WPTbar, WPRuler, WPRTEDefs,
  WPCTRMemo, cxImage, cxDBEdit, cxDropDownEdit, cxLookupEdit, cxDBLookupEdit,
  cxDBLookupComboBox, StdCtrls, cxButtons, cxGroupBox, cxRadioGroup, cxLabel,
  cxMaskEdit, cxCalendar, cxTextEdit, ExtCtrls, DBPlanner, Planner, WPUndoMan, frmHorasCalendario,
  ExtDlgs, Modules, DateUtils, ADODB, uDACDSDataTable, dmActions, LibraryGauss_Intf;

type
  TfrmMaestro = class(TfrmCatalogo)
    Panel1: TPanel;
    pgcMaestros: TcxPageControl;
    cxTabSheet3: TcxTabSheet;
    cxDBTextEdit1: TcxDBTextEdit;
    dtpFecha: TcxDBTextEdit;
    cxDBTextEdit3: TcxDBTextEdit;
    cxDBTextEdit4: TcxDBTextEdit;
    cxDBTextEdit5: TcxDBTextEdit;
    cxDBTextEdit6: TcxDBTextEdit;
    cxDBTextEdit7: TcxDBTextEdit;
    cxDBTextEdit8: TcxDBTextEdit;
    cxDBTextEdit9: TcxDBTextEdit;
    cxDBDateEdit1: TcxDBDateEdit;
    cxDBDateEdit2: TcxDBDateEdit;
    cxDBRadioGroup1: TcxDBRadioGroup;
    btnFoto: TcxButton;
    cxDBImage1: TcxDBImage;
    cxTabSheet8: TcxTabSheet;
    memObservaciones: TWPRichText;
    WPRuler1: TWPRuler;
    WPToolBar1: TWPToolBar;
    Panel2: TPanel;
    cxTabSheet4: TcxTabSheet;
    cxTabSheet5: TcxTabSheet;
    cxGroupBox1: TcxGroupBox;
    shpColor: TShape;
    dlgColor: TColorDialog;
    btnColor: TcxButton;
    WPUndoStack1: TWPUndoStack;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    cxDBTextEdit10: TcxDBTextEdit;
    Label11: TLabel;
    Label12: TLabel;
    cxDBRadioGroup2: TcxDBRadioGroup;
    OpenPictureDialog: TOpenPictureDialog;
    dbgCatalogoDBTableView1IDMAESTRO: TcxGridDBColumn;
    dbgCatalogoDBTableView1CODIGO: TcxGridDBColumn;
    dbgCatalogoDBTableView1NOMBRE: TcxGridDBColumn;
    dbgCatalogoDBTableView1IMSS: TcxGridDBColumn;
    dbgCatalogoDBTableView1DIRECCION: TcxGridDBColumn;
    dbgCatalogoDBTableView1FECHAINICIO: TcxGridDBColumn;
    dbgCatalogoDBTableView1TELEFONO: TcxGridDBColumn;
    dbgCatalogoDBTableView1CELULAR: TcxGridDBColumn;
    dbgCatalogoDBTableView1EMAIL: TcxGridDBColumn;
    dbgCatalogoDBTableView1SEXO: TcxGridDBColumn;
    dbgCatalogoDBTableView1RFC: TcxGridDBColumn;
    dbgCatalogoDBTableView1FECHANACIMIENTO: TcxGridDBColumn;
    dbgCatalogoDBTableView1LUGARNACIMIENTO: TcxGridDBColumn;
    dbgCatalogoDBTableView1STATUS: TcxGridDBColumn;
    dbgCatalogoDBTableView1CURP: TcxGridDBColumn;
    dbgCatalogoDBTableView1COLOR: TcxGridDBColumn;
    cxGrid1DBTableView1: TcxGridDBTableView;
    cxGrid1Level1: TcxGridLevel;
    cxGrid1: TcxGrid;
    dsMaestroMateria: TDADataSource;
    cxGroupBox2: TcxGroupBox;
    btnAgregar: TcxButton;
    btnEliminar: TcxButton;
    dbpDisponibilidad: TPlanner;
    cdsDisponibilidad: TDACDSDataTable;
    dsMateria: TDADataSource;
    cdsMaestroMateria: TDACDSDataTable;
    cdsMateria: TDAMemDataTable;
    cxGrid1DBTableView1CODIGO: TcxGridDBColumn;
    cxGrid1DBTableView1NOMBRE: TcxGridDBColumn;
    dtFecha: TcxDateEdit;
    Label13: TLabel;
    procedure btnFotoClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure cdsCatalogoBeforePost(DataTable: TDADataTable);
    procedure btnColorClick(Sender: TObject);
    procedure pgcMaestrosPageChanging(Sender: TObject; NewPage: TcxTabSheet;
      var AllowChange: Boolean);
    procedure cdsCatalogoNewRecord(DataTable: TDADataTable);
    procedure AgregaHora;
    procedure dbpDisponibilidadPlannerDblClick(Sender: TObject; Position,
      FromSel, FromSelPrecise, ToSel, ToSelPrecise: Integer);
    procedure calcDisponibilidadCreateKey(Sender: TObject;
      APlannerItem: TPlannerItem; var Key: string);
    procedure dbpDisponibilidadItemDelete(Sender: TObject; Item: TPlannerItem);
    procedure dbpDisponibilidadItemDblClick(Sender: TObject;
      Item: TPlannerItem);
    procedure dbpDisponibilidadPlanTimeToStrings(Sender: TObject;
      MinutesValue: Cardinal; var HoursString, MinutesString,
      AmPmString: string);
    procedure memObservacionesChange(Sender: TObject);
    procedure cdsCatalogoAfterScroll(DataTable: TDADataTable);
    procedure ActionGuardar(Action: TBasicAction); Override;
    procedure dbpDisponibilidadItemInsert(Sender: TObject; Position, FromSel,
      FromSelPrecise, ToSel, ToSelPrecise: Integer);
    procedure calcDisponibilidadItemToFields(Sender: TObject; Fields: TFields;
      Item: TPlannerItem);
    procedure cdsDisponibilidad2AfterOpen(DataTable: TDADataTable);
    procedure cdsDisponibilidadNewRecord(DataTable: TDADataTable);
    procedure cdsDisponibilidadAfterOpen(DataTable: TDADataTable);
    procedure DBDaySource1CreateKey(Sender: TObject; APlannerItem: TPlannerItem;
      var Key: string);
    procedure DBDaySource1FieldsToItem(Sender: TObject; Fields: TFields;
      Item: TPlannerItem);
    procedure btnAgregarClick(Sender: TObject);
    procedure BuscarMateria;
    procedure btnEliminarClick(Sender: TObject);
    procedure dtFechaPropertiesChange(Sender: TObject);
  protected
    procedure RegisterActions; override;
  private
    { Private declarations }
    procedure ActionImprimir(Action: TBasicAction); override;
  public
    { Public declarations }
    horas: integer;
    texto: string;
  end;

implementation

USES uDM, ufrmBuscar, ufrmBuscaMateria;

var
  frmHorasCalendario: TfrmHorCalendario;


{$R *.dfm}

procedure TfrmMaestro.ActionGuardar(Action: TBasicAction);
begin
  inherited;
  if cdsDisponibilidad.State = dsEdit then cdsDisponibilidad.Post;
end;

procedure TfrmMaestro.ActionImprimir(Action: TBasicAction);
var
    Rep: LibraryGauss_Intf.TReporteF;
begin
  //-- envio del reporte--//
    Rep:=DM.Servidor.BuscarReporte('Catalogo de Maestros');
    DM.Parametros.Factura:=0;
    try
     DM.Imprimir(Rep.SQL1, Rep.SQL2, Rep.Template, 'IMPRIMIENDO...', Rep.CampoJoin, False)
    finally
     Rep.Free;
    end;
end;

procedure TfrmMaestro.AgregaHora;
var
  sib, sie, sip: Integer;
  Year, Month, Day : Word;
  Hour, Min, Sec, Milli : Word;

  Year2, Month2, Day2, DD, DY, primerdiames: Word;
  Hour2, Min2, Sec2, Milli2 : Word;

begin
  DecodeDateTime(dtFecha.Date, Year2, Month2, Day2, Hour2, Min2, Sec2, Milli2);
  primerdiames:= (DayOfTheWeek(strtodate('1/'+inttostr(Month2)+'/'+inttostr(Year2))));

  if Day2 > 7 then
     DD:= Day2 - DayOfTheWeek(dtFecha.Date)
  else
  begin
     DD:=1;
  end;

  sib:= dbpDisponibilidad.SelItemBegin;
  sie:= dbpDisponibilidad.SelItemEnd;
  sip:= dbpDisponibilidad.SelPosition + 1;

  if (cdsCatalogo.State = dsBrowse) and (sie <= dbpDisponibilidad.Display.ActiveEnd)and(sie > dbpDisponibilidad.Display.ActiveStart)and
  not (dbpDisponibilidad.Items.HasItem(sib,sie,sip)) then
  begin
     with dbpDisponibilidad.CreateItemAtSelection do
     begin
       if horas = 0 then
          ItemEnd:= ItemBegin + 1
       else ItemEnd:= ItemBegin + horas;

       Color:= cdsCatalogo.FieldByName('COLOR').AsInteger;
       if texto = '' then
          Text.Text:= 'Disponible'
       else Text.Text:= texto;

       // agrega hora a bd //
       {Rutina para convertir la fecha a la del calendario}
       if DD = 1 then
       begin
       if sip >= primerdiames then
          DY:= primerdiames - sip else
       begin
          if Month2 > 1 then         
               Month2:= Month2 - 1
          else begin Month2:= 12; Year2:= Year2 - 1; end;
          DY:= (DaysInAMonth(Year2,Month2) - DayOfTheWeek(strtodate(inttostr(DaysInAMonth(Year2,Month2))+'/'+inttostr(Month2)+'/'+inttostr(Year2))));
          DY:= DY + sip;
       end;
       end
       else begin
           DY:= DD+sip;
           if DY > DaysInAMonth(Year2,Month2) then
           begin
              if Month2 < 12 then
                   Month2:= Month2 + 1
              else begin Month2:= 1; Year2:=Year2 + 1; end;
              //DY:= (DaysInAMonth(Year2,Month2) - DayOfTheWeek(strtodate(inttostr(DaysInAMonth(Year2,Month2))+'/'+inttostr(Month2)+'/'+inttostr(Year2))))+1;
              DY:= DY - DaysInAMonth(Year2,(Month2-1));
           end;
       end;

       {--------------------------------------------------}
       cdsDisponibilidad.Append;
       DecodeDateTime(ItemStartTime, Year, Month, Day, Hour, Min, Sec, Milli);
       cdsDisponibilidad.FieldByName('INICIO').AsDateTime:= EncodeDateTime(Year2, Month2, DY, Hour, Min, Sec, Milli);
       DecodeDateTime(ItemEndTime, Year, Month, Day, Hour, Min, Sec, Milli);
       cdsDisponibilidad.FieldByName('FIN').AsDateTime:= EncodeDateTime(Year2, Month2, DY, Hour, Min, Sec, Milli);
       cdsDisponibilidad.FieldByName('TEXTO').AsString:= texto;
       cdsDisponibilidad.FieldByName('COLOR').AsInteger:= color; 
       cdsDisponibilidad.Post;
       //------------------//
       Update;
       Refresh;
     end;

     cdsDisponibilidad.ApplyUpdates();
  end;

end;

procedure TfrmMaestro.btnAgregarClick(Sender: TObject);
begin
  inherited;
  cdsMaestroMateria.Append;
  BuscarMateria;
  cdsCatalogo.Edit;
end;

procedure TfrmMaestro.btnColorClick(Sender: TObject);
begin
  inherited;
  if dlgColor.Execute then
  begin
    shpColor.Brush.Color:= dlgColor.Color;
    cdsCatalogo.Edit;
    cdsCatalogo.FieldByName('COLOR').AsInteger:= dlgColor.Color;
    cdsCatalogo.Post;
  end;
end;

procedure TfrmMaestro.btnEliminarClick(Sender: TObject);
begin
  inherited;
  DM.Servidor.EliminaMateriaMaestro(cdsMateria.FieldByName('IDMAESTRO').AsInteger,
                                    cdsMateria.FieldByName('IDMATERIA').AsInteger);

  cdsMateria.Close;
  cdsMateria.ParamByName('IDMAESTRO').AsInteger:= cdsCatalogo.FieldByName('IDMAESTRO').AsInteger;
  cdsMateria.Open;

end;

procedure TfrmMaestro.btnFotoClick(Sender: TObject);
var
  foto: String;
begin
  inherited;

  OpenPictureDialog.Execute();
  foto:= OpenPictureDialog.FileName;

  if foto <> '' then
  begin
     cxDBImage1.DoEditing;
     cxDBImage1.Picture.LoadFromFile(foto);
  end;
end;

procedure TfrmMaestro.BuscarMateria;
var
   Datos: TDatosBusqueda;
begin
   Datos:=PantallaBusqueda(TfrmBuscaMateria,'');
   if (Datos.OK) and (cdsCatalogo.State <> dsInsert) then
   begin
      cdsMaestroMateria.FieldByName('IDMAESTRO').AsInteger:= cdsCatalogo.FieldByName('IDMAESTRO').AsInteger;
      cdsMaestroMateria.FieldByName('IDMATERIA').AsInteger:= Datos.Clave;
      cdsMaestroMateria.Post;
      cdsMaestroMateria.ApplyUpdates();
   end else begin
      showmessage('Realice primero el Guardado de los datos del Maestro antes de agregar Materias');
   end;
   cdsMateria.Close;
   cdsMateria.ParamByName('IDMAESTRO').AsInteger:= cdsCatalogo.FieldByName('IDMAESTRO').AsInteger;
   cdsMateria.Open;
end;

procedure TfrmMaestro.calcDisponibilidadCreateKey(Sender: TObject;
  APlannerItem: TPlannerItem; var Key: string);
begin
  inherited;
  //Key:= IntToStr(cdsDisponibilidad.FieldByName('IDMAESTRODISPONIBILIDAD').AsInteger);

  //Key:= IntToStr(ADOTable1.FieldByName('IDMAESTRODISPONIBILIDAD').AsInteger);
end;

procedure TfrmMaestro.calcDisponibilidadItemToFields(Sender: TObject;
  Fields: TFields; Item: TPlannerItem);
begin
  inherited;
  

  //showmessage(datetostr(Fields.FieldByName('INICIO').AsDateTime));
end;

procedure TfrmMaestro.cdsCatalogoAfterScroll(DataTable: TDADataTable);
var
  Aux: TStringStream;
begin
  inherited;
  //dbpDisponibilidad.Refresh;
  Panel1.Caption:= Format(' Informacion acerca del Maestro [%s]', [cdsCatalogo.FieldByName('NOMBRE').AsString]);

  memObservaciones.Clear;

  if (cdsCatalogo.State = dsBrowse) then
  begin
    Aux:= TStringStream.Create(cdsCatalogo.FieldByName('CURRICULUM').AsString);
    memObservaciones.LoadFromStream(Aux);
  end;

end;

procedure TfrmMaestro.cdsCatalogoBeforePost(DataTable: TDADataTable);
var
  Stream: TMemoryStream;
begin
  inherited;
  Stream:= TMemoryStream.Create;
  memObservaciones.SaveToStream(Stream);
  if (cdsCatalogo.State = dsEdit) or (cdsCatalogo.State = dsInsert) then
  begin
     cdsCatalogo.FieldByName('CURRICULUM').LoadFromStream(Stream);
  end;

  Stream.Free;
end;

procedure TfrmMaestro.cdsCatalogoNewRecord(DataTable: TDADataTable);
begin
  inherited;
  cdsCatalogo.FieldByName('IDMAESTRO').AsInteger:= DM.Servidor.Folio('IDMAESTRO','');
end;

procedure TfrmMaestro.cdsDisponibilidad2AfterOpen(DataTable: TDADataTable);
begin
  inherited;
  cdsDisponibilidad.First;
  dbpDisponibilidad.Items.ClearAll;
  while not cdsDisponibilidad.EOF do
  begin

  with dbpDisponibilidad.createitematselection do
  begin
    ItemStartTime:= cdsDisponibilidad.FieldByName('INICIO').AsDateTime;
    ItemEndTime:= cdsDisponibilidad.FieldByName('FIN').AsDateTime;
    ItemPos := DayOfWeek(cdsDisponibilidad.FieldByName('FIN').AsDateTime) - 2;

    //Color := TColor(cdsCatalogo.FieldByName('COLOR').AsInteger);
    Color:= TColor(cdsDisponibilidad.FieldByName('COLOR').AsInteger);
    CaptionBkg := Color;
    if Color = 0 then
       Font.Color:= clWhite;
    //Text.Text:= 'Disponible';
    Text.Text:= cdsDisponibilidad.FieldByName('TEXTO').AsString;
  end;

  cdsDisponibilidad.Next;
  end;
end;

procedure TfrmMaestro.cdsDisponibilidadAfterOpen(DataTable: TDADataTable);
begin
  inherited;
  dbpDisponibilidad.Items.ClearAll;
  cdsDisponibilidad.First;

  while not cdsDisponibilidad.EOF do
  begin

  with dbpDisponibilidad.createitematselection do
  begin
    ID:= cdsDisponibilidad.FieldByName('IDMAESTRODISPONIBILIDAD').AsInteger;
    ItemStartTime:= cdsDisponibilidad.FieldByName('INICIO').AsDateTime;
    ItemEndTime:= cdsDisponibilidad.FieldByName('FIN').AsDateTime;
    ItemPos := DayOfWeek(cdsDisponibilidad.FieldByName('FIN').AsDateTime) - 2;

    //Color := TColor(cdsCatalogo.FieldByName('COLOR').AsInteger);
    Color:= TColor(cdsDisponibilidad.FieldByName('COLOR').AsInteger);
    CaptionBkg := Color;
    if Color = 0 then
       Font.Color:= clWhite;
    //Text.Text:= 'Disponible';
    Text.Text:= cdsDisponibilidad.FieldByName('TEXTO').AsString;
  end;

  cdsDisponibilidad.Next;
  end;
end;

procedure TfrmMaestro.cdsDisponibilidadNewRecord(DataTable: TDADataTable);
begin
  inherited;
  cdsDisponibilidad.FieldByName('IDMAESTRODISPONIBILIDAD').AsInteger:= DM.Servidor.Folio('IDMAESTRODISPONIBILIDAD','');
  cdsDisponibilidad.FieldByName('IDMAESTRO').AsInteger:= cdsCatalogo.FieldByName('IDMAESTRO').AsInteger;
end;

procedure TfrmMaestro.DBDaySource1CreateKey(Sender: TObject;
  APlannerItem: TPlannerItem; var Key: string);
begin
  inherited;
  Key := inttostr(cdsDisponibilidad.FieldByName('IDMAESTRODISPONIBILIDAD').AsInteger);
end;

procedure TfrmMaestro.DBDaySource1FieldsToItem(Sender: TObject; Fields: TFields;
  Item: TPlannerItem);
begin
  inherited;
  Item.Color:= cdsCatalogo.FieldByName('COLOR').AsInteger;
  Item.Text.Text:= 'Disponible';
end;

procedure TfrmMaestro.pgcMaestrosPageChanging(Sender: TObject;
  NewPage: TcxTabSheet; var AllowChange: Boolean);
var
  Year, Month, Day : Word;
  Hour, Min, Sec, Milli : Word;
begin
  inherited;
  DecodeDateTime(dtFecha.Date, Year, Month, Day, Hour, Min, Sec, Milli);

  dbpDisponibilidad.Items.ClearAll;
  if NewPage.TabIndex = 2 then
  begin
     cdsDisponibilidad.Close;
     cdsDisponibilidad.ParamByName('IDMAESTRO').AsInteger:= cdsCatalogo.FieldByName('IDMAESTRO').AsInteger;
     cdsDisponibilidad.ParamByName('MES').AsInteger:= Month;
     cdsDisponibilidad.ParamByName('ANIO').AsInteger:= Year;
     cdsDisponibilidad.ParamByName('DIAINI').AsInteger:= Day - (DayOfTheWeek(dtFecha.Date));
     cdsDisponibilidad.ParamByName('DIAFIN').AsInteger:= Day + (7- DayOfTheWeek(dtFecha.Date))-1;
     cdsDisponibilidad.Open;

     shpColor.Brush.Color:= cdsCatalogo.FieldByName('COLOR').AsInteger;
     dbpDisponibilidad.Repaint;
  end;

  if NewPage.TabIndex = 3 then
  begin
     cdsMaestroMateria.Close;
     cdsMaestroMateria.ParamByName('IDMAESTRO').AsInteger:= cdsCatalogo.FieldByName('IDMAESTRO').AsInteger;
     cdsMaestroMateria.Open;

     cdsMateria.Close;
     cdsMateria.ParamByName('IDMAESTRO').AsInteger:= cdsCatalogo.FieldByName('IDMAESTRO').AsInteger;
     cdsMateria.Open;
  end;
  
end;

procedure TfrmMaestro.RegisterActions;
begin
  inherited;
  RegisterAction(AppActions.actImprimir, ActionImprimir);
end;

procedure TfrmMaestro.dbpDisponibilidadItemDblClick(Sender: TObject;
  Item: TPlannerItem);
begin
  inherited;
  if Cursor = crDefault then
     dbpDisponibilidadItemDelete(Sender, Item);
end;

procedure TfrmMaestro.dbpDisponibilidadItemDelete(Sender: TObject;
  Item: TPlannerItem);
begin
  inherited;
  DM.Servidor.EliminaMaestroDisponibilidad(Item.ID);
  dbpDisponibilidad.FreeItem(Item);
end;

procedure TfrmMaestro.dbpDisponibilidadItemInsert(Sender: TObject; Position,
  FromSel, FromSelPrecise, ToSel, ToSelPrecise: Integer);
begin
  AgregaHora;
end;

procedure TfrmMaestro.dbpDisponibilidadPlannerDblClick(Sender: TObject;
  Position, FromSel, FromSelPrecise, ToSel, ToSelPrecise: Integer);
var
   DatosHor: TDatosHor;
begin
  DatosHor:=Pantalla(TfrmHorCalendario);

  horas:=0; texto:='';
  horas:= DatosHor.horas;
  texto:= DatosHor.texto;
  frmHorCalendario.Free;

  AgregaHora;

end;

procedure TfrmMaestro.dbpDisponibilidadPlanTimeToStrings(Sender: TObject;
  MinutesValue: Cardinal; var HoursString, MinutesString, AmPmString: string);
begin
  inherited;
  MinutesString:='';
  AmPmString:='';
  HoursString:=IntToStr(MinutesValue div 60);
end;

procedure TfrmMaestro.dtFechaPropertiesChange(Sender: TObject);
var
  Year, Month, Day : Word;
  Hour, Min, Sec, Milli : Word;
begin
  inherited;
  DecodeDateTime(dtFecha.Date, Year, Month, Day, Hour, Min, Sec, Milli);
  cdsDisponibilidad.Close;
  cdsDisponibilidad.ParamByName('IDMAESTRO').AsInteger:= cdsCatalogo.FieldByName('IDMAESTRO').AsInteger;
  cdsDisponibilidad.ParamByName('MES').AsInteger:= Month;
  cdsDisponibilidad.ParamByName('ANIO').AsInteger:= Year;
  cdsDisponibilidad.ParamByName('DIAINI').AsInteger:= Day - (DayOfTheWeek(dtFecha.Date));
  cdsDisponibilidad.ParamByName('DIAFIN').AsInteger:= Day + (7- DayOfTheWeek(dtFecha.Date))-1;
  cdsDisponibilidad.Open;
end;

procedure TfrmMaestro.FormCreate(Sender: TObject);
var
  Aux: TStringStream;
  Year, Month, Day : Word;
  Hour, Min, Sec, Milli : Word;
begin
  cdsCatalogo.Close;
  cdsCatalogo.Open;
  Campo:='IDMAESTRO';
  inherited;

  if (cdsCatalogo.State = dsBrowse) then
  begin
    Aux:= TStringStream.Create(cdsCatalogo.FieldByName('CURRICULUM').AsString);
    memObservaciones.LoadFromStream(Aux);
  end;

  //--configura calendario--//
  DecodeDateTime(now(), Year, Month, Day, Hour, Min, Sec, Milli);
  dbpDisponibilidad.Mode.Month:= Month;
  dbpDisponibilidad.Mode.PeriodEndDay:= (Day + DayOfTheWeek(now()))-2;
  dbpDisponibilidad.Mode.PeriodEndMonth:= Month;
  dbpDisponibilidad.Mode.PeriodEndYear:= Year;
  dbpDisponibilidad.Mode.PeriodStartDay:= (Day - DayOfTheWeek(now()));
  dbpDisponibilidad.Mode.PeriodStartMonth:= Month;
  dbpDisponibilidad.Mode.PeriodStartYear:=Year;
  dbpDisponibilidad.Mode.TimeLineStart:= EncodeDateTime(Year, Month, 1, 12, 0, 0, 0);
  dbpDisponibilidad.Mode.Year:= Year;
  dbpDisponibilidad.Mode.Month:= Month;
  dbpDisponibilidad.Mode.WeekStart:= 1;
  dbpDisponibilidad.Mode.BeginUpdate;

  dtFecha.Date:= now();
end;

procedure TfrmMaestro.memObservacionesChange(Sender: TObject);
begin
  inherited;
  cdsCatalogo.Edit;
end;

initialization
  ModuleInfoManager.RegisterModule('Maestro', TfrmMaestro);

end.
