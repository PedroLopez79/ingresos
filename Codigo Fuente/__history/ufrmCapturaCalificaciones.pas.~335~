unit ufrmCapturaCalificaciones;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, CustomModule, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, cxContainer, cxEdit, dxSkinsCore, dxSkinBlack,
  dxSkinBlue, dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide,
  dxSkinFoggy, dxSkinGlassOceans, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMoneyTwins,
  dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinPumpkin, dxSkinSeven,
  dxSkinSharp, dxSkinSilver, dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008,
  dxSkinsDefaultPainters, dxSkinValentine, dxSkinXmas2008Blue, TBX, TB2Item,
  cxTextEdit, cxMaskEdit, cxDropDownEdit, cxLookupEdit, cxDBLookupEdit,
  cxDBLookupComboBox, TBXExtItems, TB2Dock, TB2Toolbar, ExtCtrls, OleServer,
  Excel2000, ExcelXP, StdCtrls, cxGroupBox, Menus, cxStyles, dxSkinscxPCPainter,
  cxCustomData, cxFilter, cxData, cxDataStorage, DB, cxDBData, AdvDirectoryEdit,
  AdvEdit, AdvEdBtn, AdvFileNameEdit, cxGridLevel, cxClasses, cxGridCustomView,
  cxGridCustomTableView, cxGridTableView, cxGridDBTableView, cxGrid, cxButtons,
  uDAInterfaces, uDADataTable, uDAScriptingProvider, uDACDSDataTable,
  uDAMemDataTable, ActnList, TB2ToolWindow, Modules, KDaoDataBase,
  uDARemoteDataAdapter;

type
  TfrmCapturaCalificaciones = class(TfrmCustomModule)
    TBDock1: TTBDock;
    Panel1: TPanel;
    Panel2: TPanel;
    Workbook: TExcelWorkbook;
    Excel: TExcelApplication;
    Worksheet: TExcelWorksheet;
    cxGroupBox3: TcxGroupBox;
    Label10: TLabel;
    Label11: TLabel;
    dbcGrupo: TcxLookupComboBox;
    dbcMateria: TcxLookupComboBox;
    dbcTipoCalificacion: TcxLookupComboBox;
    Label2: TLabel;
    Label1: TLabel;
    cxButton1: TcxButton;
    cxButton2: TcxButton;
    dbgCalificacionesDBTableView1: TcxGridDBTableView;
    dbgCalificacionesLevel1: TcxGridLevel;
    dbgCalificaciones: TcxGrid;
    TBXToolbar1: TTBXToolbar;
    TBXLabelItem1: TTBXLabelItem;
    btnGrupo: TTBXItem;
    TBSeparatorItem1: TTBSeparatorItem;
    btnConcentrado: TTBXSubmenuItem;
    TBItem4: TTBXItem;
    tbiCalif1: TTBXItem;
    tbiCalif2: TTBXItem;
    TBItem1: TTBXItem;
    TBXToolbar2: TTBXToolbar;
    TBControlItem3: TTBControlItem;
    OpenDialog: TAdvFileNameEdit;
    TBControlItem4: TTBControlItem;
    DirectoryEdit: TAdvDirectoryEdit;
    dsGrupos: TDADataSource;
    dsCiclo: TDADataSource;
    dsNiv: TDADataSource;
    dsMaterias: TDADataSource;
    dsTipoCalificacion: TDADataSource;
    dsMensajes: TDADataSource;
    dsGrupo: TDADataSource;
    spHistorialAlumno: TDADataSource;
    dsCalificacion: TDADataSource;
    dsConcentradoMat: TDADataSource;
    dsConcentrado: TDADataSource;
    dsMensajesBolta: TDADataSource;
    dsAlumnoMensaje: TDADataSource;
    spCalificacionAlumnosActuales: TDADataSource;
    vwCalificacionesActuales: TDACDSDataTable;
    cdsCalificacion: TDAMemDataTable;
    cdsBoletaInterna: TDAMemDataTable;
    dsBoleta: TDADataSource;
    cdsCiclo: TDAMemDataTable;
    cdsGrupos: TDAMemDataTable;
    cdsNiv: TDAMemDataTable;
    cdsMateria: TDAMemDataTable;
    cdsTipoCalificacion: TDAMemDataTable;
    Acciones: TActionList;
    actGeneraDisco: TAction;
    actGetCalifdeDisco: TAction;
    cdsMensajes: TDAMemDataTable;
    cdsGrupo: TDAMemDataTable;
    cdsHistorialAlumno: TDAMemDataTable;
    cdsConcentradoMat: TDAMemDataTable;
    cdsConcentrado: TDAMemDataTable;
    cdsAlumnoMensaje: TDAMemDataTable;
    cdsMensajesBoleta: TDAMemDataTable;
    twGrupo: TTBXToolWindow;
    cxGroupBox1: TcxGroupBox;
    Label8: TLabel;
    cxLookupComboBox4: TcxLookupComboBox;
    cxGrid2: TcxGrid;
    cxGridDBTableView1: TcxGridDBTableView;
    cxGridLevel1: TcxGridLevel;
    cxGridDBTableView1GRUPONOMBRE: TcxGridDBColumn;
    twMensajes: TTBXToolWindow;
    cxGroupBox4: TcxGroupBox;
    btnAceptar: TcxButton;
    cxGrid3DBTableView1: TcxGridDBTableView;
    cxGrid3Level1: TcxGridLevel;
    cxGrid3: TcxGrid;
    cxGrid4: TcxGrid;
    cxGridDBTableView2: TcxGridDBTableView;
    cxGridLevel2: TcxGridLevel;
    cxGridDBTableView2IDMENSAJE: TcxGridDBColumn;
    cxGrid3DBTableView1IDMENSAJE: TcxGridDBColumn;
    cdsConfiguracion: TDAMemDataTable;
    dbgCalificacionesDBTableView1idAlumnoNombre: TcxGridDBColumn;
    dbgCalificacionesDBTableView1alumnoNumControl: TcxGridDBColumn;
    dbgCalificacionesDBTableView1Calificacion: TcxGridDBColumn;
    dbgCalificacionesDBTableView1Faltas: TcxGridDBColumn;
    cdsBoletaOficial: TDAMemDataTable;
    spBoletaOficial: TDADataSource;
    cbBoleta: TcxComboBox;
    TBControlItem5: TTBControlItem;
    TBControlItem1: TTBControlItem;
    cbOpciones: TcxComboBox;
    btnEjecutar: TTBXItem;
    dbcCiclo: TcxLookupComboBox;
    dbgCalificacionesDBTableView1Conducta: TcxGridDBColumn;
    dbgCalificacionesDBTableView1CALIFAUX1: TcxGridDBColumn;
    cdsActualizaCalificacion: TDAMemDataTable;
    rdaActualizaCalificacion: TDARemoteDataAdapter;
    dbgCalificacionesDBTableView1CALIFAUX3: TcxGridDBColumn;
    dbgCalificacionesDBTableView1NOTA: TcxGridDBColumn;
    TipoBoleta: TTBXSubmenuItem;
    TBXItem1: TTBXItem;
    TBXItem2: TTBXItem;
    TBXItem3: TTBXItem;
    cdsBoletaIngles: TDAMemDataTable;
    dsBoletaIngles: TDADataSource;
    TBXItem4: TTBXItem;
    cdsBoletaTodos: TDAMemDataTable;
    spBoletaTodos: TDADataSource;
    procedure FormCreate(Sender: TObject);
    procedure cxLookupComboBox4PropertiesValidate(Sender: TObject;
      var DisplayValue: Variant; var ErrorText: TCaption; var Error: Boolean);
    procedure cxButton1Click(Sender: TObject);
    procedure cxButton2Click(Sender: TObject);
    procedure btnEjecutarClick(Sender: TObject);
    procedure actGeneraDiscoExecute(Sender: TObject);
    procedure actGetCalifdeDiscoExecute(Sender: TObject);
    procedure OpenDialogEnter(Sender: TObject);
    procedure cbOpcionesPropertiesChange(Sender: TObject);
    procedure cbOpcionesClick(Sender: TObject);
    procedure dbcGrupoPropertiesValidate(Sender: TObject;
      var DisplayValue: Variant; var ErrorText: TCaption; var Error: Boolean);
    procedure cxGridDBTableView1DblClick(Sender: TObject);
    procedure btnGrupoClick(Sender: TObject);
    procedure TBItem4Click(Sender: TObject);
    procedure btnConcentradoClick(Sender: TObject);
    procedure TBXItem2Click(Sender: TObject);
    procedure TBXItem1Click(Sender: TObject);
    procedure TBXItem3Click(Sender: TObject);
    procedure TBXItem4Click(Sender: TObject);
  private
    { Private declarations }
    procedure ActionGuardar(Action: TBasicAction);
    procedure ActionCancelar(Action: TBasicAction);

    function ValidFile(Strfile: string): string;
    procedure Verifica;
    procedure ImprimeBoleta(idHistorialAlumno : Integer; Matricula : String; OficialInterna : Integer);
    procedure AbrirLibroExcel(Matricula : String);
  protected
    { -------------------- }
    procedure UpdateActionsState; override;
    procedure RegisterActions; override;
  public
    { Public declarations }
    Cambios : Boolean;
    CualConcentrado : Integer;
    CualTexto : String;
  end;

var
  frmCapturaCalificaciones: TfrmCapturaCalificaciones;

implementation
uses uDM, uDMExcel, dmActions, utileriasComun, dmImagenes, LibraryGauss_Intf;

{$R *.dfm}

procedure TfrmCapturaCalificaciones.AbrirLibroExcel(Matricula: String);
var
  boleta: string;
begin
  boleta := ExtractFilePath(ParamStr(0)) + cbBoleta.Text + '.xls';
  if not FileExists(boleta) then
  begin
    DM.Mensaje('Error', 35, False, Error, [cbBoleta.Text]);
    Abort;
    Exit;
  end;
  if FileExists(ExtractFilePath(ParamStr(0))+Matricula+'.xls') then
    DeleteFile(ExtractFilePath(ParamStr(0))+Matricula+'.xls');
  CopyFile(PChar(Boleta),Pchar(ExtractFilePath(ParamStr(0))+Matricula+'.xls'), false);
  boleta:=ExtractFilePath(ParamStr(0))+Matricula+'.xls';
  Workbook.ConnectTo(Excel.Workbooks.Open(ValidFile(boleta), 1, False, 1, '', '', false, xlWindows, '', false, false, 1, false, 0,0,0));
  Workbook.Save;
end;

procedure TfrmCapturaCalificaciones.actGetCalifdeDiscoExecute(
  Sender: TObject);
var
  ciclo, grupo, materia, tipocalificacion, i: integer;
begin
  inherited;
     //Lee del disco y alimenta la BD con sus respectivos valores
     Excel.Connect;

     Workbook.ConnectTo (Excel.Workbooks.Open(OpenDialog.FileName, 1, False, 1, '', '', false, xlWindows, '', false, false, 1, false, 0,0,0));
     // C:\Proyectos\Gauss Edgar\Documentos\formato.xls
     Worksheet.ConnectTo (Workbook.Worksheets[1] as _Worksheet);
     i := 0;
     repeat
         inc(i);
         ciclo := WorkSheet.Cells.Item[200,200];
         materia := WorkSheet.Cells.Item[200,201];
         grupo := WorkSheet.Cells.Item[200,202];
         tipocalificacion := WorkSheet.Cells.Item[200,203];
         cdsHistorialAlumno.Close;
         cdsHistorialAlumno.ParamByName('NoControl').asString := workSheet.Cells.Item[i + 6, 1];
         cdsHistorialAlumno.ParamByName('grupo').asString := workSheet.Cells.Item[200, 202];
         cdsHistorialAlumno.ParamByName('materia').asString := workSheet.Cells.Item[200, 201];
         cdsHistorialAlumno.ParamByName('ciclo').asString := workSheet.Cells.Item[200, 200];
         cdsHistorialAlumno.Open;

         if vartostr(workSheet.Cells.Item[i + 6, 4]) <> '' then
           begin
             DM.Servidor.AplicaCalificacion(workSheet.Cells.Item[i + 6, 4],
                                            workSheet.Cells.Item[i + 6, 3],
                                            materia,
                                            cdsHistorialAlumno.fieldByName('idHistorialAlumno').asInteger,
                                            cdsHistorialAlumno.fieldByName('idHistorialGrupo').asInteger,
                                            Now(),
                                            WorkSheet.Cells.Item[200,203],
                                            0,
                                            0);
           end;
      until VarToStr(worksheet.Cells.Item[i + 7, 1]) = '';

     Excel.Workbooks.Close(0);
     Excel.Disconnect;

     dbcCiclo.EditValue := Ciclo;
     dbcGrupo.EditValue := grupo;
     dbcMateria.EditValue :=materia;
     dbcTipoCalificacion.EditValue :=tipocalificacion;
     Verifica;
end;

procedure TfrmCapturaCalificaciones.actGeneraDiscoExecute(Sender: TObject);
var
 i: integer;
begin
  inherited;

    if fileExists(ValidFile(DirectoryEdit.Text + '\formato.xls')) then
      deletefile(ValidFile(DirectoryEdit.Text + '\formato.xls'));

    CopyFile(PChar(ExtractFilePath(ParamStr(0))+'Formato.xls'),Pchar(ValidFile(DirectoryEdit.Text + '\formato.xls')), false);

    // Genera las listas en el archivo especificado
      if (cdsCalificacion.Active) and (cdsCalificacion.RecordCount > 0) then
       begin
         Excel.Connect;
//         Workbook.ConnectTo (Excel.Workbooks.Open(ValidFile(DirectoryEdit.Text + '\formato.xls'), 1, False, 1, '', '', false, xlWindows, '', false, false, 1, false, 0));
         Worksheet.ConnectTo (Workbook.Worksheets[1] as _Worksheet);
         cdsCalificacion.First;

         // Datos generales del grupo
         Worksheet.Cells.item[1, 2] := cdsConfiguracion.FieldByName('ESCUELA').AsString;
         Worksheet.Cells.item[3, 2] := dbcciclo.Text;
         Worksheet.Cells.item[4, 2] := dbcMateria.Text;
         Worksheet.Cells.item[5, 2] := dbcGrupo.Text;
         WorkSheet.Cells.Item[200,200] := VarToStr(dbcCiclo.EditValue);
         WorkSheet.Cells.Item[200,201] := VarToStr(dbcMateria.EditValue);
         WorkSheet.Cells.Item[200,202] := VarToStr(dbcGrupo.EditValue);
         WorkSheet.Cells.Item[200,203] := VarToStr(dbcTipocalificacion.EditValue);

        //Limpia el archivo
        for i := 0 to 54 do
         begin
           Worksheet.Cells.item[i + 7, 1] := '';
           Worksheet.Cells.item[i + 7, 2] := '';
           Worksheet.Cells.item[i + 7, 3] := '';
           Worksheet.Cells.item[i + 7, 4] := '';
         end;

        for i := 0 to cdsCalificacion.RecordCount - 1 do
          begin
             // NUMERO DE CONTROL
             Worksheet.Cells.item[i + 7, 1] := cdsCalificacion.FieldByName('AlumnoNumControl').AsString;
             // NOMBRE
             Worksheet.Cells.item[i + 7, 2] := cdsCalificacion.FieldByName('AlumnoNombre').AsString;

            cdsCalificacion.Next;
          end;

         // GRABA
         Workbook.Save;
         Excel.Workbooks.Close(0);
         Excel.Disconnect;

       end
      else
         DM.Mensaje('Error', 36, False, Error, []);
end;

procedure TfrmCapturaCalificaciones.ActionCancelar(Action: TBasicAction);
begin
  if (not Cambios) or ((Cambios) and (DM.Mensaje('Confirmar',13, True, Confirmar, []) = ID_YES)) then
  begin
    Cambios:=False;
    cdsCalificacion.Close;
    cdsCalificacion.Params[0].AsInteger:=0;
    cdsCalificacion.Params[1].AsInteger:=0;
    cdsCalificacion.Open;

    dmAppActions.actGuardar.Enabled:= False;
    dmAppActions.actCancelar.Enabled:=False;
    //btnImprimir.Enabled:=False;
    btnConcentrado.Enabled:=False;
    btnGrupo.Enabled:=False;
  end;
end;

procedure TfrmCapturaCalificaciones.ActionGuardar(Action: TBasicAction);
var
  P: TParametrosF;
  S: String;
  
procedure ejecutaSP;
    begin
       while not cdsCalificacion.Eof do
       begin
         if cdsCalificacion.fieldByname('CALIFICACION').AsString <> '' then
         begin
           DM.Servidor.AplicaCalificacion(cdsCalificacion.fieldByname('CALIFICACION').asFloat,
                                          cdsCalificacion.fieldByname('faltas').asInteger,
                                          cdsCalificacion.fieldByname('idmateria').asInteger,
                                          cdsCalificacion.fieldByname('idhistorialalumno').asInteger,
                                          cdsCalificacion.fieldByname('idHistorialGrupo').asInteger,
                                          date,
                                          1,
                                          cdsCalificacion.fieldByname('CONDUCTA').asFloat,
                                          cdsCalificacion.fieldByname('CALIFAUX1').asFloat);
////actualiza calificacion segun periodo////////////////////////////////////////
           P:=TParametrosF.Create;
           try
           cdsActualizaCalificacion.Close;
           P.Alumno:=cdsCalificacion.fieldByname('idmateria').asInteger;
           P.AlumnoIni:= cdsCalificacion.fieldByname('idhistorialalumno').asInteger;
           P.AlumnoFin:= cdsCalificacion.fieldByname('idHistorialGrupo').asInteger;


           S:='UPDATE CALIFICACION SET '+
              ' CALIF'+FORMATFLOAT('00',dbcTipoCalificacion.EditValue)+' = '+ FloatToStr(cdsCalificacion.fieldByname('CALIFICACION').asFloat)+
              ', FALTAS'+FORMATFLOAT('00',dbcTipoCalificacion.EditValue)+' = '+ FloatToStr(cdsCalificacion.fieldByname('Faltas').asFloat)+
              ', CALIFB'+FORMATFLOAT('00',dbcTipoCalificacion.EditValue)+' = '+ FloatToStr(cdsCalificacion.fieldByname('Conducta').asFloat)+
              ', CALIFA'+FORMATFLOAT('00',dbcTipoCalificacion.EditValue)+' = '+ FloatToStr(cdsCalificacion.fieldByname('CALIFAUX1').asFloat)+
              ', CALIFC'+FORMATFLOAT('00',dbcTipoCalificacion.EditValue)+' = '+ FloatToStr(cdsCalificacion.fieldByname('CALIFAUX3').asFloat)+
              ', NOTA'+FORMATFLOAT('00',dbcTipoCalificacion.EditValue)+' = '''+ cdsCalificacion.fieldByname('NOTA').asString+''''+
              ' WHERE idmateria ='+INTTOSTR(P.Alumno)+ ' and idhistorialalumno = '+INTTOSTR(P.AlumnoIni)+' and idHistorialGrupo ='+INTTOSTR(P.AlumnoFin)+
              ' SELECT 1';
           rdaActualizaCalificacion.GetDataCall.ParamByName('SQL').AsString:=S;
           rdaActualizaCalificacion.GetDataCall.ParamByName('Parametros').AsComplexType:=P;
           cdsActualizaCalificacion.Open;
           finally FreeAndNil(P); end;
////////////////////////////////////////////////////////////////////////////////
         end;
         cdsCalificacion.Next;
       end;
    end;
begin //GUARDAR
  cdsCalificacion.First;
  cdsCalificacion.DisableControls;
  ejecutaSP;
  cdsCalificacion.EnableControls;

  dmAppActions.actGuardar.Enabled:= False;
  dmAppActions.actCancelar.Enabled:=False;
  //btnImprimir.Enabled:=False;
  btnConcentrado.Enabled:=False;
  btnGrupo.Enabled:=False;

  Cambios:=False;

  ActionCancelar(Nil);
end;

procedure TfrmCapturaCalificaciones.btnConcentradoClick(Sender: TObject);
var
 Boleta: String;
 i, j, IDALUMNO: integer;
begin
  inherited;
  boleta := ExtractFilePath(ParamStr(0))+'Concentrado.xls';
  if FileExists(ExtractFilePath(ParamStr(0))+'RRR.xls') then
    DeleteFile(ExtractFilePath(ParamStr(0))+'RRR.xls');
  CopyFile(PChar(Boleta),Pchar(ExtractFilePath(ParamStr(0))+'RRR.xls'), false);
  boleta:=ExtractFilePath(ParamStr(0))+'RRR.xls';
  Excel.Connect;

  Workbook.ConnectTo(Excel.Workbooks.Open(ValidFile(boleta), 1, False, 1, '', '', false, xlWindows, '', false, false, 1, false, 0,0,0));
  Worksheet.ConnectTo (Workbook.Worksheets[1] as _Worksheet);

  cdsConcentradoMat.ParamByName('idGrupo').AsInteger:=dbcGrupo.EditValue;
  cdsConcentradoMat.Open;
  //cdsConcentrado.Prepare;
  WorkSheet.Cells.Item[2, 54] := dbcCiclo.Text;
  WorkSheet.Cells.Item[2, 55] := dbcGrupo.Text;
  WorkSheet.Cells.Item[2, 56] := CualConcentrado;
  WorkSheet.Cells.Item[2, 57] := dbcTipoCalificacion.Text;
  WorkSheet.Cells.Item[2, 58] := CualTexto;
  i:=0;
  while not cdsConcentradoMat.Eof do
  begin
    cdsConcentrado.ParamByName('idCiclo').AsInteger:=dbcCiclo.EditValue;
    cdsConcentrado.ParamByName('idGrupo').AsInteger:=dbcGrupo.EditValue;
    cdsConcentrado.ParamByName('idTipoCalificacion').AsInteger:=dbcTipoCalificacion.EditValue;
    cdsConcentrado.ParamByName('IDMATERIA').AsInteger:= cdsConcentradoMat.FieldByName('IDMATERIA').AsInteger;
    cdsConcentrado.Open;
   
    i:=0;
    while not cdsConcentrado.Eof do
    begin
      WorkSheet.Cells.Item[i+2, 2] := cdsConcentrado.FieldByName('ALUMNONOMBRE').AsString;
      WorkSheet.Cells.Item[i+2,(j*1)+37] := cdsConcentradoMat.FieldByName('PROMEDIO').AsString;

      WorkSheet.Cells.Item[i+2, 20 + (j)] := ' '+cdsConcentradoMat.FieldByName('NOMBRE').AsString;
      WorkSheet.Cells.Item[i+2, (j*1)+3] := cdsConcentrado.FieldByName('CALIFICACION').AsString;

      cdsConcentrado.Next;
      Inc(i);
    end;
    cdsConcentrado.Close;
    cdsConcentradoMat.Next;
    Inc(j);
  end;

  cdsConcentradoMat.Close;
  Worksheet.ConnectTo (Workbook.Worksheets[2] as _Worksheet);

  //WorkSheet.PrintOut;
  Workbook.Save;
  Excel.Workbooks.Close(0);
  Excel.Disconnect;
end;

procedure TfrmCapturaCalificaciones.btnEjecutarClick(Sender: TObject);
begin
  inherited;
  if (DirectoryEdit.visible) and (DirectoryEdit.Text = '') then
     DirectoryEdit.SetFocus
  else if (OpenDialog.visible) and (OpenDialog.FileName = '') then
     OpenDialog.SetFocus
  else begin
  if (cbOpciones.ItemIndex > 0) and ((OpenDialog.FileName <> '') or (DirectoryEdit.Text <> '')) then
   begin
     case cbOpciones.ItemIndex of
       1: actGeneraDiscoExecute(Sender);
       2: actGetCalifDeDiscoExecute(Sender);
     end;
   end;
  end;
end;

procedure TfrmCapturaCalificaciones.btnGrupoClick(Sender: TObject);
begin
  inherited;
  if (cdsCalificacion.State = dsBrowse) and (cdsCalificacion.RecordCount > 0) then
  begin
    cdsCalificacion.First;
    Excel.Connect;
//    AbrirLibroExcel;
    while not cdsCalificacion.eof do
    begin
//      ImprimeBoleta;
      cdsCalificacion.Next;
    end;
    Workbook.Save;
    Excel.Workbooks.Close(0);
    Excel.Disconnect;
  end;
end;

procedure TfrmCapturaCalificaciones.cbOpcionesClick(Sender: TObject);
begin
  inherited;
  btnEjecutar.Visible := cbOpciones.ItemIndex > 0;
  DirectoryEdit.Visible := cbOpciones.ItemIndex = 1;
  OpenDialog.Visible := cbOpciones.ItemIndex = 2;
end;

procedure TfrmCapturaCalificaciones.cbOpcionesPropertiesChange(Sender: TObject);
begin
  inherited;
  btnEjecutar.Visible := cbOpciones.ItemIndex > 0;
  DirectoryEdit.Visible := cbOpciones.ItemIndex = 1;
  OpenDialog.Visible := cbOpciones.ItemIndex = 2;
end;

procedure TfrmCapturaCalificaciones.cxButton1Click(Sender: TObject);
begin
  inherited;
  twGrupo.Visible := true;
end;

procedure TfrmCapturaCalificaciones.cxButton2Click(Sender: TObject);
begin
  inherited;
  cdsCalificacion.Close;
  cdsCalificacion.Open;
  Verifica;
end;

procedure TfrmCapturaCalificaciones.cxGridDBTableView1DblClick(Sender: TObject);
begin
  inherited;
  cdsGrupos.Locate('NOMBRE',cxGridDBTableView1GRUPONOMBRE.EditValue,[]);

  dbcGrupo.EditValue := cdsGrupos.fieldByName('idGrupo').Value;
  twGrupo.Visible := false;

  cdsMateria.Close;
  cdsMateria.ParamByName('grupo').AsInteger := cdsGrupos.fieldByName('idGrupo').Value;
  cdsMateria.Open;
end;

procedure TfrmCapturaCalificaciones.cxLookupComboBox4PropertiesValidate(
  Sender: TObject; var DisplayValue: Variant; var ErrorText: TCaption;
  var Error: Boolean);
begin
  inherited;
  cdsGrupo.Close;
  cdsGrupo.ParamByName('IDNIVEL').AsInteger:= cxLookupComboBox4.EditValue;
  cdsGrupo.Open;
end;

procedure TfrmCapturaCalificaciones.dbcGrupoPropertiesValidate(Sender: TObject;
  var DisplayValue: Variant; var ErrorText: TCaption; var Error: Boolean);
begin
  inherited;
  cdsMateria.Close;
  cdsMateria.ParamByName('grupo').AsInteger := dbcGrupo.EditValue;
  cdsMateria.Open;
end;

procedure TfrmCapturaCalificaciones.FormCreate(Sender: TObject);
var
  S : String;
begin
  inherited;
  cdsCiclo.Close;
  cdsCiclo.Open;
  cdsGrupos.Close;
  cdsGrupos.Open;
  cdsGrupo.Close;
  cdsGrupo.Open;
  cdsNiv.Close;
  cdsNiv.Open;

  cdsMateria.Close;
  cdsMateria.Open;
  cdsTipoCalificacion.Close;
  cdsTipoCalificacion.Open;

  DM.IniciaVentana(twGrupo);
  DM.IniciaVentana(twMensajes);
  cdsAlumnoMensaje.Close;
  cdsAlumnoMensaje.Open;
  cdsTipoCalificacion.Close;
  cdsTipoCalificacion.Open;
  cdsMensajesBoleta.Close;
  cdsMensajesBoleta.Open;
  cdsConfiguracion.Close;
  cdsConfiguracion.Open;

  cbOpciones.ItemIndex := 0;
  Cambios:=False;
  if cdsConfiguracion.FieldByName('CALIFICACION1').AsString <> '' then
  begin
    dbgCalificacionesDBTableView1conducta.Caption:= cdsConfiguracion.FieldByName('CALIFICACION1').AsString;
    dbgCalificacionesDBTableView1conducta.Visible:= True;
    tbiCalif1.Caption:=cdsConfiguracion.FieldByName('CALIFICACION1').AsString;
    tbiCalif1.Visible:=True;
    dbgCalificacionesDBTableView1conducta.Width:= 100;
  end;
  if cdsConfiguracion.FieldByName('CALIFICACION2').AsString <> '' then
  begin
    dbgCalificacionesDBTableView1CALIFAUX1.Caption:=cdsConfiguracion.FieldByName('CALIFICACION2').AsString;
    dbgCalificacionesDBTableView1CALIFAUX1.Visible:=True;
    tbiCalif2.Caption:=cdsConfiguracion.FieldByName('CALIFICACION2').AsString;
    tbiCalif2.Visible:=True;
    dbgCalificacionesDBTableView1CALIFAUX1.Width:= 100;
  end;
  if cdsConfiguracion.FieldByName('CALIFICACION3').AsString <> '' then
  begin
    dbgCalificacionesDBTableView1CALIFAUX3.Caption:=cdsConfiguracion.FieldByName('CALIFICACION3').AsString;
    dbgCalificacionesDBTableView1CALIFAUX3.Visible:=True;
    tbiCalif2.Caption:=cdsConfiguracion.FieldByName('CALIFICACION3').AsString;
    tbiCalif2.Visible:=True;
    dbgCalificacionesDBTableView1CALIFAUX3.Width:= 100;
  end;

  S:=cdsConfiguracion.FieldByName('BOLETAS').AsString;
  while Pos(';', S) > 1 do
  begin
    cbBoleta.Properties.Items.Add(Copy(S, 1, Pos(';', S)-1));
    Delete(S, 1, Pos(';', S));
  end;
  cbBoleta.Text:=cbBoleta.Properties.Items[0];
  CualConcentrado:=1;
  CualTexto:='Concentrado de Calificaciones';

  cdsCiclo.Locate('idCiclo', cdsConfiguracion.FieldByName('CICLOACTUAL').AsInteger, []);
  dbcCiclo.EditValue:=cdsConfiguracion.FieldByName('CICLOACTUAL').AsInteger;
end;

procedure TfrmCapturaCalificaciones.ImprimeBoleta(idHistorialAlumno: Integer;
  Matricula: String; OficialInterna: Integer);
function ReasignaDS(OficialInterna: Integer): TDAMemDataTable;
begin
  Result:= cdsBoletaInterna;
  if OficialInterna = 0 then
  begin
     cdsBoletaInterna.Close;
     cdsBoletaInterna.ParamByName('Cual').AsInteger:= idHistorialAlumno;
     cdsBoletaInterna.Open;
     Result:= cdsBoletaInterna;
  end;
  if OficialInterna = 1 then
  begin
     cdsBoletaOficial.Close;
     cdsBoletaOficial.ParamByName('Cual').AsInteger:= idHistorialAlumno;
     cdsBoletaOficial.Open;
     Result:= cdsBoletaOficial;
  end;
  if OficialInterna = 2 then
  begin
     cdsBoletaIngles.Close;
     cdsBoletaIngles.ParamByName('Cual').AsInteger:= idHistorialAlumno;
     cdsBoletaIngles.Open;
     Result:= cdsBoletaIngles;
  end;
end;
var
 i,J, Y : integer;
 qry: TDAMemDataTable;
 strConn :  widestring;
 sAppend, boleta : string;
const
  Aux : Array[0..1] of String = ('SELECT * FROM SPNEWBOLETAINTERNA(:idHistorialAlumno)',
                                 'SELECT * FROM SPNEWBOLETAOFICIAL(:idHistorialAlumno)');
begin

  strConn:='Provider=Microsoft.Jet.OLEDB.4.0;' +
           'Data Source=' + ExtractFilePath(ParamStr(0))+Matricula+'.xls' + ';' +
           'Extended Properties=Excel 8.0;';

  AbrirLibroExcel(Matricula);

  boleta:=ExtractFilePath(ParamStr(0))+Matricula+'.xls';
  Workbook.ConnectTo(Excel.Workbooks.Open(ValidFile(boleta), 1, False, 1, '', '', false, xlWindows, '', false, false, 1, false, 0,0,0));
  Worksheet.ConnectTo (Workbook.Worksheets[1] as _Worksheet);

  qry:= ReasignaDS(OficialInterna);

  J:=2;
  while not qry.Eof do
  begin
     WorkSheet.Cells.Item[J, 4] := qry.FieldbyName('MATERIA').AsString;
     WorkSheet.Cells.Item[J, 3] := qry.FieldbyName('PROMEDIO').AsString;
     WorkSheet.Cells.Item[J, 2] := qry.FieldbyName('MATERIACODIGO').AsString;
     WorkSheet.Cells.Item[J, 99] := qry.FieldbyName('CICLO').AsString;
     WorkSheet.Cells.Item[J, 95] := qry.FieldbyName('NOMBRE').AsString;
     WorkSheet.Cells.Item[J, 96] := qry.FieldbyName('NUMCONTROL').AsString;
     WorkSheet.Cells.Item[J, 97] := qry.FieldbyName('GRUPOCODIGO').AsString;
     WorkSheet.Cells.Item[J, 85] := qry.FieldbyName('REGU01').AsString;
     WorkSheet.Cells.Item[J, 86] := qry.FieldbyName('REGU02').AsString;
     WorkSheet.Cells.Item[J, 87] := qry.FieldbyName('REGU03').AsString;
     WorkSheet.Cells.Item[J, 88] := qry.FieldbyName('REGU04').AsString;
     WorkSheet.Cells.Item[J, 89] := qry.FieldbyName('REGU05').AsString;

     {WorkSheet.Cells.Item[J, 90] := qry.FieldbyName('CALIFICACION').AsString;
     WorkSheet.Cells.Item[J, 94] := qry.FieldbyName('FALTAS').AsString;
     WorkSheet.Cells.Item[J, 91] := qry.FieldbyName('CALIFAUX1').AsString;
     WorkSheet.Cells.Item[J, 92] := qry.FieldbyName('CALIFAUX2').AsString;}

     for i:=1 to 16 do
     begin
      WorkSheet.Cells.Item[J, (i*5)] := qry.FieldByName('Calif' + FormatFloat('00', i)).AsString;
      WorkSheet.Cells.Item[J, (i*5)+1] := qry.FieldByName('CalifA' + FormatFloat('00', i)).AsString;
      WorkSheet.Cells.Item[J, (i*5)+2] := qry.FieldByName('CalifB' + FormatFloat('00', i)).AsString;
      WorkSheet.Cells.Item[J, (i*5)+4] := qry.FieldByName('Faltas' + FormatFloat('00', i)).AsString;
      WorkSheet.Cells.Item[J, (i*5)+3] := qry.FieldByName('Prom' + FormatFloat('00', i)).AsString;

      WorkSheet.Cells.Item[J, (i+100)] := qry.FieldByName('NOTA' + FormatFloat('00', i)).AsString;
     end;
     inc(J);
     qry.Next;
  end;
  WorkBook.Save;
end;

procedure TfrmCapturaCalificaciones.OpenDialogEnter(Sender: TObject);
begin
  inherited;
  if cbOpciones.ItemIndex = 1 then
     Verifica;
end;

procedure TfrmCapturaCalificaciones.RegisterActions;
begin
  inherited;
  RegisterAction(AppActions.actGuardar, ActionGuardar);
  RegisterAction(AppActions.actCancelar, ActionCancelar);
end;

procedure TfrmCapturaCalificaciones.TBItem4Click(Sender: TObject);
begin
  inherited;
  (sender as TTBXItem).Checked:=True;
  CualConcentrado:=(sender as TTBXItem).Tag;
  CualTexto:='Concentrado de ' + (sender as TTBXItem).Caption;
  btnConcentradoClick(Self);
end;

procedure TfrmCapturaCalificaciones.TBXItem1Click(Sender: TObject);
begin
  inherited;

  ImprimeBoleta(cdsCalificacion.FieldByName('IDHISTORIALALUMNO').AsInteger,
                cdsCalificacion.FieldByName('ALUMNONUMCONTROL').AsString, 1);

end;

procedure TfrmCapturaCalificaciones.TBXItem2Click(Sender: TObject);
begin
  inherited;

  ImprimeBoleta(cdsCalificacion.FieldByName('IDHISTORIALALUMNO').AsInteger,
                cdsCalificacion.FieldByName('ALUMNONUMCONTROL').AsString, 0);

end;

procedure TfrmCapturaCalificaciones.TBXItem3Click(Sender: TObject);
begin
  inherited;
   ImprimeBoleta(cdsCalificacion.FieldByName('IDHISTORIALALUMNO').AsInteger,
                cdsCalificacion.FieldByName('ALUMNONUMCONTROL').AsString, 2);
end;

procedure TfrmCapturaCalificaciones.TBXItem4Click(Sender: TObject);
begin
  inherited;
  ImprimeBoleta(cdsCalificacion.FieldByName('IDHISTORIALALUMNO').AsInteger,
                cdsCalificacion.FieldByName('ALUMNONUMCONTROL').AsString, 3);
end;

procedure TfrmCapturaCalificaciones.UpdateActionsState;
begin
  inherited;

end;

function TfrmCapturaCalificaciones.ValidFile(Strfile: string): string;
begin
  if pos('\\', strfile) > 0 then
     delete(strFile, pos('\\', strfile), 1);
  result := strFile;
end;

procedure TfrmCapturaCalificaciones.Verifica;
function FiltraDS(Grupo, Materia, Ciclo, tipoCalificacion: Variant; qry: TDAMemDataTable): TDAMemDataTable;
 begin
   qry.Close;
   qry.ParamByName('idgrupoP').AsInteger   := dbcGrupo.EditValue;
   qry.ParamByName('idmateriaP').AsInteger := dbcMateria.EditValue;
   qry.ParamByName('idcicloP').AsInteger := dbcCiclo.EditValue;
   if qry.Params.FindParam('tipocalificacion') <> nil then
      qry.ParamByName('tipocalificacion').AsInteger := dbcTipoCalificacion.EditValue;
   qry.Open;
   dsCalificacion.DataTable:= qry;

   result := qry;
   dbgCalificaciones.SetFocus;
 end;
begin
  OkEnter:=True;
  if (dbcCiclo.EditValue <> Null)
    and (dbcgrupo.EditValue <> Null)
      and (dbcMateria.EditValue <> Null)
        and (dbcTipoCalificacion.EditValue <> Null) then
  begin
    if dbcCiclo.Text = '' then
       dbcCiclo.SetFocus
    else if dbcGrupo.Text = '' then
       dbcGrupo.SetFocus
    else if dbcMateria.Text = '' then
       dbcMateria.SetFocus
    else if dbcTipoCalificacion.Text = '' then
       dbcTipoCalificacion.SetFocus
    else
    begin
     if (cdsCalificacion.State = dsBrowse) or (cdsCalificacion.RecordCount < 1) then
       FiltraDS(dbcGrupo.EditValue, dbcMateria.EditValue, dbcCiclo.EditValue, dbcTipoCalificacion.EditValue, cdsCalificacion);

     dmAppActions.actGuardar.Enabled:= True;
     dmAppActions.actCancelar.Enabled:=True;
     btnGrupo.Enabled:=True;
     btnConcentrado.Enabled:=True;
     {btnImprimir.Enabled:=True;}
    end;
  end;
end;

initialization
  ModuleInfoManager.RegisterModule('CapturaCalificaciones', TfrmCapturaCalificaciones);

end.
